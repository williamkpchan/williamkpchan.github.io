// collect all the data and put it in an object with `code`, `stkname`, and `data` values

//const codeTableH = ['00388', '02208', '01951', '01448', '01171'];
const codeTableH = ['00388', '02208', '01951', '01448', '01171', '02800', '00700', '09988', '00005', '00883', '02828', '00857', '00939', '02318', '01299', '03968', '00941', '01398', '00522', '09618', '00386', '01211', '02899', '03988', '09999', '01088', '00016', '01288', '02269', '09961', '01816', '02382', '00992', '01919', '01109', '00981', '00836', '00001', '09633', '01093', '02601', '01910', '00027', '00669', '06690', '02020', '00011', '02388', '00916', '01928', '00020', '00175', '02628', '00291', '01833', '01378', '00728', '02359', '09626', '00002', '02331', '06862', '01113', '00780', '00006', '01801', '00762', '09901', '02688', '03993', '01548', '02618', '09992', '00288', '06160', '02319', '01766', '00285', '01972', '01800', '00003', '00960', '06030', '01658', '00966', '01138', '02057', '00688', '06881', '01336', '03908', '02313', '01898', '00968', '02333', '03692', '03328', '01347', '01038', '03888', '09987', '01339', '01177', '02018', '02328', '01099', '02883', '00135', '01193', '01876', '06865', '02338', '01209', '03800', '00316', '01818', '00358', '02600', '01071', '01913', '00241', '00019', '01997', '03067', '02380', '00868', '03998', '02202', '00322', '02588', '00819', '00998', '00384', '00763', '01787', '02099', '00101', '00425', '00914', '03898', '00570', '01797', '00390', '00257', '00267', '00012', '00066', '06186', '00270', '00881', '03320', '02400', '00136', '02013', '03618', '01066', '01908', '01030', '00683', '06823', '01798', '03323', '01208', '03759', '01952', '06088', '01918', '01772', '00467', '01186', '03969', '01302', '00921', '01357', '06110', '09969', '01929', '02666', '00772', '06078', '00696', '03311', '00293', '00371', '03900', '00956', '02162', '02607', '00991', '06855', '02238', '00083', '01776', '02386', '06818', '00220', '00576', '06060', '01157', '00017', '03808', '01044', '02357', '00142', '03347', '01359', '06098', '01415', '00354', '01179', '00014', '03110', '02196', '01128', '00189', '03032', '00123', '01896', '02343', '00934', '00867', '01368', '00995', '00177', '00552', '01883', '00639', '00151', '09922', '00489', '00152', '00148', '00586', '01381', '01530', '00853', '01882', '00813', '03360', '00799', '00598', '02096', '00667', '09698', '01610', '01618', '02888', '01821', '03738', '06066', '02186', '06699', '00880', '02128', '00884', '01072', '06886', '00874', '01070', '01516', '00551', '06049', '02669', '02257', '01513', '09995', '02255', '00694', '01681', '01999', '01508', '00631', '01478', '01385', '00777', '01055', '00525', '01199', '02039', '01060', '03613', '00004', '00579', '00338', '00817', '02869', '02638', '00856', '00548', '01963', '06869', '00081', '00363', '00590', '00303', '01958', '00200', '03377', '00317', '03709', '01579', '01316', '00656', '01119', '01811', '00341', '06099', '00909', '02689', '03319', '00087', '03958', '00297', '01907', '02145', '02276', '01888', '01313', '00861', '01310', '00038', '06185', '09959', '02777', '00345', '00010', '03899', '01666', '02005', '09966', '00460', '02877', '00023', '00440', '06808', '00179', '00855', '00596', '02866', '02285', '00347', '06666', '01995', '01877', '02362', '06127', '01428', '01691', '02158', '01515', '02155', '03983', '01600', '00165', '02801', '00710', '09911', '00708', '00670', '02611', '02252', '00308', '00823', '01613', '02009', '02823', '02822', '07226', '07299', '02840', '01858', '01860', '07200', '07288', '03037', '00412', '00751', '02727', '02356', '02342', '06178', '03188', '00778', '00636', '07568', '07522', '07552', '00182', '07500', '03606', '06969', '00268', '00144', '00564', '03668', '00300', '06181', '01698', '02556', '01164', '00788', '02577', '09896', '01810', '02015', '03690', '06618', '09888', '01024', '09926', '03033', '09868', '09660'];
const codeTable1 = ['600519','601127','000977','002156','601138','002085','002475','300308','600171','300394','601899','300502','688525','300098','002594','001696','600584','300641','002384','000333','601919','300346','688256','301236','300750','603986','600036','603259','000625','300552','000021','603019','000063','000099','000858','600938','601318','600733','600895','002654','002371','300496','600150','002373','600900','300107','688981','000938','002938','300576','603993','601857','601398','601328','300284','300177','300059','600418','002869','688111','601288','601012','002902','002463','601669','002600','301091','000568','688012','600941','601020','000651','600487','601888','603501','000002','603083','002130','300429','688041','002455','601136','002028','688008','603005','002920','601088','300046','600489','001309','300398','002049','301308','300290','600309','002241','600028','000100','300643','601933','601985','002050','002229','300956','300476','000676','600809','000737','000725','600837','300411','601600','600887','300293','601166','300418','002230','300015','605117','300342','600101','600030','300139','000628','601939','600276','002281','600183','300433','301251','002155','603283','000975','000001','000400','300474','300124','601179','300538','301036','300014','601058','300455','002409','600843','300274','600690','605111','300339','002851','601658','601567','300903','600345','300719','300868','600905','300806','000338','002436','601988','601766','300475','600066','301180','002456','301392','001298','300782','600580','301306','002459','000034','600745','301339','603528','600312','000988','300457','002714','300672','601901','605358','300567','300637','301176','600031','600501','603799','002273','300975','000901','001979','688692','600406','301297','300319','002943','688777','300739','002185','002129','300760','603660','601878','002304','300604','300563','300644','600547','605258','002338','002119','300001','600754','688036','600114','601728','300184','600050','300735','000829','300083','301538','300557','601881','300573','301183','600048','600566','300115','000519','002199','301208','301099','002179','600522','301005','301550','601689','600992','300458','301221','300316','688631','600919','002916','600460','300364','688347','002405','601668','600660','300040','300373','002709','002889','601099','600601','300762','300175','600438','600256','300075','300666','300122','300498','601211','300223','688484','000807','300033','600795','601162','600711','605588','603290','300638','002590','300757','600719','600089','688766','601225','688599','300917','002296','601615','300408','002077','000630','601168','300822','300843','603087','601601','300542','300690','601208','002466','688518','300667','002970','300002','688720','000528','002837','688037','301301','301548','300212','300663','603018','300696','000793','601688','600111','600761','002027','301337','000831','603650','300413','300484','300017','002532','002142','002415','000875','688498','688693','300655','301041','601186','600129','601117','002827','300045','688609','600016','002422','601028','002558','301348','688047','688249','688271','300073','601816','600830','300738','601633','603679','002517','002460','002340','601998','300711','002555','688318','301517','002815','301368','002236','301577','600133','301591','001389','603659','600027','002625','300885','301486','000037','300162','300724','688183','300537','600789','600988','300118','301596','001314','601233','300292','000682','000801','600326','301095','600893','300133','301082','600160','300570','002648','600188','300784','000657','300151','603160','300461','603860','002252','600301','000158','300590','000560','600621','002353','300647','300925','002261','001339','300763','002138','300270','300732','300444','688223','603220','688385','600536','688343','300623','301282','600362','600383','601390','300650','688361','300446','600436','603078','300207','002008','301050','300136','600703','600497','002271','300787','301218','002074','300722','301536','003816','300360','001965','002737','603105','000932','600760','300933','603613','601456','300900','000766','600006','600019','601628','600000','603806','600600','300913','301136','601799','002222','002055','688516','002607','600011','688107','688535','601699','000423','601989','300624','600482','000049','300199','300442','601009','002922','601006','300450','600765','002579','000521','603002','601077','000596','600219','002352','688169','000933','301083','600926','301361','000677','301314',];
const codeTable2 = ['000983','600839','300008','002157','688702','600531','688072','603979','603688','001286','000799','688110','301489','002812','688017','300775','002897','300337','603803','603357','600570','300671','000878','300786','688596','000733','002428','600855','601126','600559','300684','600732','300093','605090','603920','301508','601336','002632','601872','000422','002331','300180','002676','688052','603939','300598','601360','300776','688668','000768','300930','000960','301132','300456','000425','603773','000999','600886','601865','603345','600875','603516','601319','301076','603228','300401','002739','603556','600879','300053','300421','000680','603338','002246','300302','688288','601818','600702','300803','601966','300260','002937','603390','600026','000921','002609','002131','300896','300460','600025','300814','000792','002947','300857','000552','688122','600096','003026','300215','002850','002668','002966','600085','300872','301366','600246','688521','002984','301191','603667','600435','002567','600685','600699','300424','601595','300593','002738','688362','600777','300765','601995','600132','603068','300131','300811','301215','688327','000839','301578','601868','301421','002601','600889','000786','300905','300832','603766','600372','301269','300562','300054','001267','603383','603589','002139','603225','603863','000859','688019','002128','002886','000860','688772','601607','601231','301205','603000','301587','300142','002962','002232','002244','601001','300585','688120','301389','300347','600963','300034','300613','600737','601059','300397','000661','300036','002865','000538','000066','002670','300661','600131','002472','000564','603617','301387','300465','000636','603009','002023','600989','688522','300188','002351','002465','300265','000420','002767','601916','300793','601898','689009','300620','603129','688208','301382','600674','002708','300395','688188','600426','688530','000729','601100','601918','000426','605333','300554','688506','000617','300037','002395','002530','300602','300680','601229','300353','000957','601991','300327','301539','300834','000980','300507','002079','000157','300251','003029','603131','300706','688123','601666','601169','300751','300468','603890','300656','600199','600863','603606','600029','603712','002270','300044','300628','601800','000758','688312','603486','300548','603195','603288','688578','601838','600803','002011','000004','002603','300065','300159','300812','603496','300459','300693','002736','603108','000963','300232','688653','603663','603236','601975','601137','300594','000683','002429','002223','601921','600415','600520','600141','300988','600563','600179','300580','600266','603871','600866','300243','000702','605577','300007','300236','000166','300817','688301','002037','688728','300520','603444','600498','600862','600428','600348','601788','603267','603728','000861','300677','603605','601877','301358','600630','002361','600612','688234','300556','002318','600571','600764','600550','688027','300546','601021','605589','601579','300477','001270','601111','600763','300726','301329','600546','603132','300031','002871','002452','600985','600161','300130','300182','300500','300989','601069','000913','600549','300645','002821','002180','688126','603825','300423','688352','600718','688469','002913','300682','300745','300845','603530','600355','603179','688303','300697','300067','000736','300058','688002','000612','600505','300200','301139','300698','001896','300721','300229','002253','301182','600057','300991','002025','688472','688508','002097','000039','002355','300287','600079','002593','300579','688206','301012','301293','300769','002007','688239','301129','301395','600757','300880','603058','603063','688617','300056','300374','002407','603931','688608','300781','688536','601000','300068','300481','600258','603198','600104','600990','688676','002505','002045','600996','300042','600268','300322','300882','600667','300003','600885','003021','601155','600588','300020','002001','603885','002756','301291','002444','603960','603296','603017','688032','002096','003031','300629','002202','300081','300633','300406','300919','002533','000062','000899','002635','002747','603893','301189','600023','688691','600021','300310','600060','002126','300451','002997','000581','688390','688639','603767','600641','002602','300063','002410','600720','002832','002151','688005','002903','603477','603392','002198','688709','003043','600196','688270','600872','301248','600867','300315','603739','300928',];
const codeTable3 = ['000409','001258','600192','000537','301505','600774','600976','300790','301320','301369','688195','002771','600325','002655','603703','002176','300842','002063','002078','600015','300759','600119','688099','600642','002531','002727','300024','301162','600285','600269','600535','300210','301123','301502','301171','688262','000818','300713','601825','000823','000060','600749','603219','002312','000591','300581','300469','300678','601500','002906','601222','300634','300144','000937','301315','300505','600422','688097','600775','601133','603327','600511','300936','300779','600480','002446','002487','688408','300709','688629','600884','301289','300699','603738','600009','603658','002843','688396','300181','300957','300049','600961','600975','603375','600190','603261','002624','000863','688549','603341','000690','688200','002339','300902','301018','603900','600565','688159','301027','601555','000819','600203','600298','000032','000888','688349','002262','600750','603328','002368','301428','688167','600360','600233','600577','003018','300758','002284','301566','002759','603690','002703','600332','601958','002673','600575','603099','002310','002006','301153','002526','300438','002408','603233','603507','002073','301258','002120','002237','600153','600157','000962','601611','002125','603619','600038','603298','688177','603596','688439','300589','002761','000925','002791','688116','300558','688559','600958','605499','002867','603100','002311','300280','600100','002167','300941','600744','601212','300255','001337','300866','688300','603256','002152','002406','688601','002611','300859','301255','600968','002716','301512','603369','000783','301511','002929','600398','300679','603883','000656','003008','000893','000951','002380','688166','000887','688141','688798','600572','601238','300419','688515','605011','000638','300700','601198','000027','603882','688595','300416','000738','000532','300964','000876','601717','300588','002432','300489','601128','002322','601636','601777','000550','000776','688556','300807','300545','600873','300568','601118','301172','688187','688082','300627','002146','600602','002264','600353','300852','000042','688213','600755','300415','600271','300947','002350','003038','688063','000408','603699','601890','002192','002020','002508','300529','603118','600585','600211','300926','300796','300041','600318','601618','603050','300276','300835','301187','600216','600094','688333','000791','600499','300295','002413','603936','002568','000719','300748','600877','002773','300657','605277','300155','600686','301131','600282','301568','600346','000923','601019','300522','002423','301141','002977','300541','002882','000069','600176','000048','000014','300390','001301','601866','603305','300047','600004','688015','000520','000821','300890','600310','301379','688045','002424','300088','600529','603505','600521','300979','000539','301516','600933','603077','002484','002056','688326','600399','000028','002182','301155','600818','000997','600461','002003','002990','300454','301377','002979','002712','301252','603171','688568','300025','000851','300285','688475','002315','603067','688478','002354','002605','002031','600845','002100','002389','603927','300618','002698','002597','600158','600105','601033','601066','688248','603580','300494','603628','688025','600200','001229','603456','605196','300836','300298','688450','300708','300747','600377','002240','002583','601163','002402','600741','603533','300675','002292','300102','601098','000589','688401','301179','603517','603598','002792','300601','688652','002195','000830','605377','688035','002559','601022','002203','000543','600329','688627','300324','300226','600483','300221','002439','300951','600330','002847','600605','600098','603595','002528','688076','301013','301567','605058','600221','002212','603662','002493','600123','688699','600704','301004','001287','688786','603583','300514','000759','603389','688009','603218','002276','603324','603097','002035','300870','002372','601108','603529','300135','000603','603358','300462','301488','301000','300101','688603','688090','603685','601016','600456','688409','000708','600297','001289','300918','600582','688403','600416','002274','600062','002124','002111','002106','600250','301313','600118','601698','300617','603025','002813','301229','002385','300103','002702','301270','603386','600644','002171','600606','300730','600032','000936','601333','300778','688299','300383','002268','603286','002383','002457',];
const codeTable4 = ['600707','000949','300736','600380','002797','300945','601113','601808','601677','600999','003004','002959','600649','688088','300164','600106','301589','000723','688153','000777','000750','300777','600155','301106','000006','300827','300939','603186','600395','601858','603809','002009','301085','600335','300844','600109','603172','603027','002557','600637','002987','002550','000722','300357','688018','688127','002948','603337','000895','002401','002706','300114','300773','000728','002861','002217','601298','000155','600363','300100','600512','300862','600705','300560','603508','300220','002963','002036','301232','300417','301418','301030','600979','688048','300826','603319','601377','601997','002643','601665','605376','002841','600779','600420','603701','300379','002506','000650','688591','300244','301316','000600','002158','688630','301121','001376','300012','002777','002317','603379','002544','601990','300303','300430','000670','002892','000726','603713','300250','603950','002735','603826','300820','600201','688261','688173','000513','300894','688575','600010','688066','603197','688297','002856','002928','688252','002828','603306','600490','688053','600186','600039','603439','002782','688235','300166','301307','301086','300077','002985','300170','002145','002915','000629','000035','300113','603896','603300','301165','601696','301156','600807','300486','002840','603313','301555','000598','688266','600018','000998','300366','002588','603268','600509','002458','603185','002021','000966','300999','600115','600598','688380','600008','002335','688216','002507','300674','600059','301267','300825','688655','600901','002046','002537','000762','603737','688220','002341','300725','000697','301357','600587','002875','600283','002845','600486','600916','000506','001914','002297','600557','000017','000547','300294','601101','600350','002032','301328','301002','688050','300531','300996','601727','300595','003040','002701','600682','600476','000070','600212','300368','300351','300660','300480','002400','603568','600611','002859','600230','688418','600452','300551','601096','002572','600502','300479','300169','002299','603633','300766','688695','300009','300400','002218','603721','300381','600969','603888','600728','301231','600338','603178','300982','300586','603166','002958','003001','000681','000948','002227','300493','600578','300909','600970','301588','688029','601928','301233','300572','300850','002993','002255','000917','300350','000009','000700','300201','002044','600206','600734','000050','688584','600208','002683','688322','300831','601156','002857','002064','002414','002883','002518','300503','603363','002211','300109','002154','301089','000403','603899','000665','300123','600339','688118','600562','002626','001359','603322','600331','601577','300428','301359','002112','301031','002245','603042','603344','000810','600771','688130','688598','002888','301073','603990','600166','301069','688567','000902','600998','300197','300354','603308','603260','300306','301487','688268','300783','600776','300687','300019','000151','600323','688686','300443','000620','300910','603127','688139','688419','688278','600392','605020','603231','603279','603191','300688','002675','002807','600639','000089','601061','002080','002378','300701','002148','000993','688389','688286','300482','301015','301526','002042','603602','600207','688138','002099','601965','000785','002536','301338','600820','688328','002213','000686','300254','000929','600459','603823','300311','600596','600320','688363','000930','603997','688020','300846','000922','002326','600072','600850','301325','301219','000990','300670','600552','600908','688230','000415','600053','000709','301312','301042','600993','688502','002829','300146','600396','688711','600629','688080','603031','603368','688150','300856','300225','300252','600816','603629','300062','600368','688106','600801','002749','600508','300161','300516','300253','002570','002387','000969','688233','002595','688102','300447','002305','002690','300240','605296','002272','002215','603123','603232','688201','000928','000982','688778','600888','002881','300752','300889','003032','002617','601369','600110','002855','300659','301413','002194','300547','300705','002249','603320','002254','301202','688368','002653','300363','301266','600390','603680','301238','688787','300830','000727','002416','688016','601619','601929','688590','603380','300525','000541','300499','000915','002173','603266','002430','002019',];
const codeTable5 = ['603918','002239','002225','300993','601375','600864','688388','300723','601187','002992','002174','000883','300141','600210','688700','000908','002332','000610','002535','002030','300365','600995','688276','600518','001338','002468','600035','603393','300304','002015','600061','002313','300092','603933','603588','300596','688049','300228','600236','600295','000692','002682','002965','600653','600373','688689','603833','002519','600506','600661','002895','601388','603843','000712','002091','301120','688180','603816','301038','300296','002161','300331','600537','300976','601216','002298','300271','300403','603838','301318','688586','003019','300410','688031','300227','300676','600237','603212','600663','601606','601778','688671','301061','603203','002039','002839','603055','300906','600769','301239','002896','300078','301500','301039','600971','002043','600727','301151','601011','002117','000778','603983','688023','688789','600446','002396','000756','688147','688258','002291','600088','603348','600871','002967','688331','600909','002092','002471','300352','600729','600178','301052','002642','300943','688416','603678','688281','002745','301391','601608','688348','000012','001231','603989','688372','601083','300543','601900','600177','000703','300420','688143','688543','603280','300192','002657','000881','002541','300105','300121','600369','300861','002786','300795','601311','688313','688007','600678','600962','301128','688199','000514','300681','600195','600643','002500','300286','002512','002925','300378','002048','002785','002362','603985','600859','002876','301209','000627','688456','002523','688128','600724','600358','600491','600835','001306','300307','000563','300377','002681','301169','600126','003022','688512','600012','688259','688561','002539','600343','300685','002640','600481','600583','600409','000739','601908','688717','688696','603026','603876','002891','600116','600595','301058','688182','300963','688716','601236','000503','002805','000555','600315','002438','603208','688192','688100','002134','301363','603416','301503','601949','603061','002149','605598','600052','300393','300376','603200','300901','603729','300731','688185','300219','601992','300241','300609','600516','600197','300348','000524','601598','600657','300125','301127','601519','300203','600468','002065','300487','000516','600475','300432','300841','300606','600361','300085','301007','688279','600284','300847','688065','000301','002927','688172','002123','002917','002497','600869','688520','688103','002294','603730','301383','688114','000402','600640','300217','002584','301520','688779','002453','600792','600316','002075','600170','000065','300990','603915','688207','688205','301390','300369','601801','002334','600267','002204','000877','603599','300968','001226','600589','603929','300173','003015','002242','301029','300158','002231','300349','002662','000586','300035','300654','300283','300110','002520','301469','600633','000897','300772','301079','600138','603776','601702','300513','002806','301217','301299','002587','000970','600273','603881','002038','301117','603707','301345','600165','002206','688095','300094','603565','600882','002819','688517','300491','301071','688383','002343','600095','600918','300281','688523','002511','300689','002608','300649','000811','600959','600033','002919','688690','300375','603859','600977','002968','000429','001288','300079','603323','002061','300540','002835','300582','603069','600328','600143','002226','603299','603373','603858','601038','600187','603396','300320','300527','301367','002177','688661','603786','300490','600997','600259','000559','603278','603489','000623','300010','002893','002766','301152','002726','688589','002467','688776','601139','688202','688620','300183','301319','601860','603037','600715','300120','300718','300213','000796','002649','300887','300733','002671','300530','300171','300884','000679','300275','688538','300323','600257','301302','605183','605286','300129','603355','688226','002053','300895','000825','300261','603612','688158','301510','300380','300305','002364','000779','603527','603052','002421','300402','301398','000701','688562','003013','600067','688800','300662','002606','300333','002939','688381','300768','002235','002496','002153','001872','000735','688602','301049','001269','600756','600782','301237','600478','603138','605168','603032','002426',];
const codeTable6 = ['300050','688108','300785','002652','600389','301192','688125','000815','301060','600163','301529','000572','002957','603779','002633','002090','300039','300448','002214','603727','600515','002166','688336','688295','301285','600388','300052','000688','001330','300770','300916','603866','002669','300277','300761','688503','300967','603919','300737','301055','688146','603636','301262','002498','600556','688228','603566','603506','300729','002803','605222','600645','603367','600017','301310','600717','600710','300026','600664','300953','603167','300249','002742','600167','300756','688062','300780','301298','002482','688160','603056','603499','600367','000837','688135','603718','002116','688181','605162','600986','300321','600103','600262','600906','300370','000090','000958','600528','300533','002941','300977','688083','688539','300592','603011','600603','300809','002269','603615','600773','002057','688819','002707','301025','600673','600479','002033','603693','002010','601399','301326','300314','600592','301168','300466','600020','688087','002320','300532','600543','300578','300328','601018','000567','002612','300263','301213','002935','688400','600740','300932','603897','603111','003035','301051','002379','301167','002183','300233','300608','300272','300888','002697','688117','301230','300497','300409','002356','002811','600125','301067','600586','000989','300605','000731','002945','600573','688209','002170','300823','603297','300172','300517','301498','002636','300855','300343','600593','002115','001230','300771','603611','688038','300998','300559','300720','300603','300607','601886','605305','600925','600517','301360','600185','603070','002327','301078','300566','000536','300127','300922','300467','300875','000800','605081','603801','600688','002060','002645','301045','603906','600391','300317','000558','603626','002866','300070','600337','001203','300511','300069','600037','600458','002768','600675','002599','600340','003006','002870','601528','000950','002728','002201','603515','002425','002219','300187','301178','300927','603015','600821','003025','603607','002833','600874','002822','600351','002563','002127','688334','688429','000584','300808','605555','600616','300587','688033','301277','002279','002004','002912','002527','002162','688006','603103','002449','603895','000710','600787','601811','000848','002952','605266','603312','603066','300269','300839','688443','002982','600151','000886','600248','301185','300087','603668','002068','600956','603500','002936','301295','688488','000968','601963','000526','688733','600421','002647','300291','300848','600973','000156','000797','301008','002878','300358','301278','688289','002705','688391','002267','000927','600064','600352','002983','600198','300863','002831','600623','002434','600022','000404','605218','000517','300612','603128','002250','688597','600381','000582','603725','600056','603039','000987','300801','300185','600386','002862','002646','688550','002104','600841','002178','600238','603609','300097','002521','603189','600894','000995','301199','603332','688399','600706','600299','003000','300445','002323','603187','002971','300061','002101','688581','002207','002051','600967','002664','688531','688375','300389','603107','300288','603719','300727','301016','300112','601969','688093','000059','603062','002448','002238','002105','688325','301419','002165','301459','605086','600928','600815','301087','300792','000030','002461','301077','603156','603879','002796','601952','000959','600223','002481','000721','601228','600597','301170','000544','603353','688573','000828','603969','001328','600073','300818','002975','688432','000965','002488','300788','300194','002121','300871','603153','300810','688387','601107','605186','688636','603466','301525','300386','002823','002445','002137','000862','002501','603221','301381','300344','001358','600215','300969','301448','002545','688332','600739','300119','002382','300597','603125','603518','300716','300691','002324','601880','300242','603199','688582','300743','001239','001387','603119','605123','603229','603458','688311','600725','600251','002900','600403','002369','603317','603977','300231','300128','300973','002926','600300','688253','688486','002543','603043','300257','688190','002717','688799','002005','601326','301260','301160','002858','301080','300470','002163','002955','603991','301499','605289','301001','000889',];
const codeTable7 = ['301150','600770','301022','688337','603096','300080','603004','002793','000529','000561','600780','605167','002757','300938','301159','000882','600007','605088','002864','002243','600666','301311','603878','600655','688425','601700','600378','688548','300653','300237','600055','605098','300152','603569','688618','002783','002741','688255','000504','688685','603121','002266','002017','300096','603388','600469','300387','300174','600812','688306','600696','688131','600189','300248','301035','688687','301096','300057','300137','000498','300821','300966','601678','300264','600785','600449','600797','300686','300767','601609','002303','688307','300140','300165','603558','601869','301046','300005','688366','300717','001308','001215','002991','300463','600742','300510','002564','600827','603098','002347','301047','601005','300972','002189','000707','688698','605378','002390','001283','600808','300707','000718','603227','603360','300224','301181','301558','301135','002510','603377','300632','688378','300134','600225','002093','002534','000061','300074','688022','601515','601827','688133','002483','002901','002306','002150','600410','300828','688210','601882','300840','300027','300950','601789','605368','000705','001213','300864','002278','603959','002752','688339','002547','000967','002540','300076','603708','000525','001326','300341','688059','300635','002041','688576','603321','300992','600243','688458','603733','603110','603836','301072','001227','603567','601718','002556','002221','002514','688260','002769','301376','002122','605180','603013','603928','600751','002474','301386','688089','600635','600619','002442','002316','002630','603709','003005','002885','002981','688046','002688','600172','300995','000822','600159','603861','600615','300539','600523','301107','603158','000795','600610','002700','688719','600987','688292','603001','300168','300652','300621','603113','003007','000421','000592','300043','688519','600078','600848','000751','300218','300802','002729','603079','600691','688315','600400','600168','001311','688707','000036','600811','300300','600966','300565','688499','002585','300399','300258','601518','002529','688198','000926','601015','002548','688593','605338','688592','001217','001208','000973','688663','002765','002933','688678','603008','600567','688680','300949','002233','300235','300710','300631','301330','301112','600708','000533','002553','600054','002960','603666','002838','002660','000510','300238','002358','688648','002366','600648','000096','300099','000401','300021','603082','600714','600604','300032','605488','600683','000546','605599','300464','300299','002191','002502','688382','600692','300492','300746','600507','688658','300648','000417','002911','001266','600665','002052','600791','603711','605198','002490','000869','300018','002188','002549','301353','603669','688351','002404','603579','300422','603093','002908','300011','300611','600929','002342','301355','002265','000885','603137','603273','002560','600609','300829','603258','688222','300407','300639','002258','002787','603222','301287','301026','002724','300335','603169','688070','300971','300230','600617','001316','301439','300313','600500','300147','603173','603868','300148','688682','000554','603717','002949','688360','688003','002810','300694','600804','603090','301261','600252','001300','002329','002779','002546','603106','605369','000553','001207','600387','002615','001333','002399','300247','002283','605365','002285','601828','600794','002989','600366','300245','002392','300805','002725','002140','603901','603206','600127','603657','603035','600071','002208','600229','300048','688365','603051','002918','600726','688722','688376','003039','603190','002946','001201','301207','301519','002577','688533','002440','300898','301280','000573','300072','300404','300145','000898','605177','600184','000056','300279','300536','600560','002103','002489','605133','600694','002349','300191','688061','603230','600084','002980','001366','300985','300414','600444','603333','002995','600063','688039','300205','000008','600467','603006','600121','600860','688079','605128','001331','002932','002622','300899','601068','600405','603520','600120','002026','688091','600853','002849','688509','688507','002651','300673','603778','002186','603687','300753','002437','000597','002950','603995','603269','300143','688320','301222','002516','000488','603787','300865','688359','300206','600313','002578',];
const codeTable8 = ['603356','300106','603003','002650','603757','002300','301137','300472','300382','688321','603291','002719','300625','002492','002363','301090','300978','000534','603998','600861','603270','300504','603912','301323','000685','603211','002988','002666','600590','000826','600825','688218','002639','605188','300506','600819','001379','002846','000045','002420','301023','000605','605228','002976','300860','002848','003020','603193','688121','601188','002571','003010','002826','605138','300813','002978','300071','600548','600148','000159','300473','600130','300569','000672','000430','000622','688170','600892','001336','301070','002081','603811','000501','688369','002552','000058','600379','000632','000900','605178','603399','301021','688105','301062','300518','000868','300222','301371','688071','000698','003037','300833','603085','300891','002863','688552','301200','605398','002374','300571','603315','002713','002678','300952','300515','605158','605507','688287','600083','688612','002542','688028','601568','002216','300405','000599','002263','300789','600736','605056','301118','300066','603648','002565','601158','300561','600513','002884','300256','301399','600152','300196','002580','002196','000890','002879','002403','301195','300912','003012','002887','300883','688563','000010','603162','301327','000019','605108','603536','301037','603139','688308','000816','000025','301396','300837','300471','600222','300791','002573','300163','301393','000153','688212','301370','300740','301102','300208','300396','000590','688651','600868','300153','601086','603788','000020','002307','000767','600960','001299','600477','300616','603988','688305','002746','600288','688238','603045','603681','601065','000410','688186','301246','300452','002799','600510','688739','600636','002277','601199','603088','003002','002016','600805','688662','300904','301161','600758','688152','603798','300138','605319','002538','301509','603326','603038','603967','688115','688275','300921','688433','300340','300636','300440','300940','000655','002476','002961','001282','605116','002290','002314','603398','300412','605118','002589','300815','301228','301321','688588','002689','300278','600721','002748','002388','300483','002108','002931','605009','002454','605303','002169','603789','300195','002256','301380','002295','301332','600881','688579','603277','002367','002795','002956','300534','300051','002172','002790','603716','301388','002909','000551','000715','002614','000016','688112','002094','603887','300332','603855','688510','002381','688606','002969','001313','301175','301216','603790','002205','300193','000601','000981','688269','300665','600097','000935','300920','002830','600713','600376','601106','300267','603916','603601','300970','300893','000906','002441','301119','301017','300549','300453','002357','000713','688571','300600','600618','603089','600551','600496','603829','002012','002067','600455','603408','300907','603638','002569','300441','603023','002302','600239','688392','600576','603136','002789','603053','300508','603661','301138','000639','605169','601200','002998','603618','300583','600228','301133','300881','603255','000920','002251','002345','605016','002686','600503','300755','000557','301109','002160','600810','300908','002733','002427','300214','688001','301268','300741','000838','002750','002376','002275','002953','300160','300873','600981','600525','002780','601330','603982','300892','603519','603071','600662','002562','300198','002336','301429','300867','603869','605337','300523','603966','000833','301257','300879','000813','002114','300355','003009','600448','001296','002478','002641','605166','002730','601798','001322','300426','688398','002755','002723','002135','603276','688356','301163','603683','000652','688246','300326','300614','301186','600113','002184','600305','600433','600169','600226','002842','603577','600783','002581','603421','002419','000078','002451','688084','002561','000972','001236','000789','002677','688677','000812','603610','002479','002058','300853','600354','000903','002667','002397','002800','688136','688660','603325','301149','603987','002248','603877','002132','300439','603963','301225','301362','603726','002873','301533','301125','600651','688681','688526','002491','688489','002190','002616','300712','002377','600927','001216','301378','600272','300266','300521',];
const codeTable9 = ['605066','000892','600579','688607','603686','300798','601218','300234','000031','002628','002386','600658','600716','300004','300117','600303','600545','300449','002164','301003','000910','301263','603810','002495','000029','601599','300610','600463','300535','600302','688148','001323','600594','002054','002209','300987','300437','002494','300176','000570','600638','688659','002418','600076','600493','600939','688669','000678','002591','002623','002014','301211','600322','301333','002551','688191','688566','603378','301028','688232','003003','603155','001319','605005','300961','300082','600287','301559','000790','301122','002286','605255','301281','300150','601616','300958','601279','000856','300869','603551','688280','600759','300683','600135','603630','300702','603010','603616','600831','603235','600697','600058','002110','002333','301126','002613','600108','300980','603722','603161','002328','603682','688161','300189','600336','688500','603183','300239','688621','002086','603029','603758','000548','301020','002072','001324','603115','603848','301177','300091','688058','001206','605299','002515','688176','600081','600255','301188','301100','603168','002999','301272','301223','605069','688701','600846','603970','603768','301397','002576','002443','605136','688196','600620','600898','002731','601002','688179','300167','600684','301322','002181','688165','002696','688060','300384','000068','301063','301528','688055','001234','002743','000530','600327','600851','601008','603309','301372','002282','000757','300338','002365','000663','300935','300819','002133','003017','600070','300575','301056','688236','600814','002375','301507','300984','001210','300703','300435','688085','688257','002175','000595','301331','000952','603076','000852','688610','001259','300824','605008','600722','002412','301518','600980','000633','300626','000919','003027','603999','000955','301197','002522','301101','000788','002574','301024','603318','603033','301116','003011','002972','301092','600903','000545','002095','300055','600829','002554','600880','002661','601226','000905','603980','603007','000931','301057','300983','002996','300797','000978','688092','300016','002734','600218','600689','002088','002801','601512','301303','002692','603958','000523','002076','688633','301048','600235','000088','603329','001223','002337','300931','600822','001278','603330','001255','001260','002159','000011','002907','688496','603226','000428','002234','300425','301011','000753','002722','300179','300391','300259','600202','301296','002860','002852','688435','688448','300911','600293','300030','000505','600984','301111','301226','688455','600622','300986','002582','605179','605399','001212','600280','688479','688358','601121','605208','603689','300149','002469','600738','603538','002853','688189','600191','688665','002210','002462','600735','002062','600897','002034','688667','603665','688302','002820','301515','001368','603867','001373','301081','688225','603937','002629','600802','603992','300204','002620','603289','000802','603359','603590','688330','002598','300994','605003','002083','688219','600983','300509','603239','000716','603889','688004','600217','002774','603165','600796','603021','301066','300528','002798','688551','002066','000985','600558','301110','003023','600982','603126','002637','688371','600730','600624','001238','603600','605018','300132','002877','300211','688569','002102','000761','688560','600213','600876','301157','300553','300651','603281','001367','300962','688109','600162','600679','301300','300664','600784','688428','301349','301212','600698','688277','000820','000953','600425','000850','003028','603949','000607','603856','603938','605060','603181','300960','000631','300854','300564','603209','002059','600292','002330','301010','688513','301305','002691','603777','000531','301456','603336','601116','605366','002695','002168','688737','002818','301098','002905','300434','600712','605068','688078','300584','300086','300749','600540','301097','001378','605099','300359','688410','601003','601089','601968','600397','603698','002047','688697','002575','688316','002370','605339','603818','002788','300345','688231','001219','605007','000711','601956','603303','605389','300622','301040','603331','603028','600359','001202','002880','002022',];
const codeTable10 = ['603150','000668','603676','600495','000419','603095','600746','002802','300640','002940','300095','600249','601177','300858','300615','002824','600858','002687','603535','605155','002685','000798','600533','600308','601566','002715','603366','603365','000576','300084','002069','002082','002344','600854','601999','000717','002040','600935','688468','603075','603656','001317','002319','001209','301198','002141','301032','603800','300318','000565','002772','002693','300959','301408','000593','002524','002360','002301','301210','300550','600965','603122','688373','301201','603815','000026','000880','301059','603112','603385','600539','600319','300937','603080','600470','600439','300427','600613','002287','000909','605100','603978','600561','300022','003041','000691','301009','300658','002029','300800','300154','002393','605001','002024','300126','301103','603828','603217','603041','002762','600798','301365','600128','600173','600748','300157','002930','300246','300599','603036','301019','002193','603135','301043','002808','688132','002084','002825','000615','300006','600180','301286','300981','301075','603813','000803','300942','600743','002187','603387','300334','002486','688298','600828','603040','600847','002763','000609','600538','600429','600281','600261','300997','301196','000912','688511','688168','603188','300669','000626','600526','600883','600419','601588','600844','688529','603012','002348','603177','000635','000566','688171','001228','301053','601007','002775','603170','605080','000752','605050','600278','600375','301292','300692','600234','300591','603116','300886','603059','603201','300816','600650','600075','000571','600423','300289','002480','603057','600371','002942','301166','603048','000407','688570','600668','688291','603275','002659','605388','603696','301279','603922','688646','600082','603081','002817','603030','603182','600955','001268','001380','300501','688616','600527','603639','603586','603755','301206','600149','600156','603578','301283','600731','002923','688282','603908','603917','603060','688611','300946','600936','002836','000509','603677','688310','002228','600099','301234','688565','603180','300512','688157','688273','603903','600488','605199','600768','603020','002470','688355','688386','003042','300488','300111','603955','001205','603429','003033','300897','300388','603022','600370','600833','002753','002566','600227','002638','000637','000608','001360','603335','688026','002398','300642','000911','002247','002898','605268','603956','688010','002631','688377','603488','300619','603706','002910','603213','300485','603817','603926','002293','002694','002109','688283','688628','301158','600800','002679','301148','002136','688323','003036','688175','603311','605028','002644','001318','603655','688329','301093','688229','688077','688156','600917','300876','300329','300013','603351','300948','688221','002144','000411','603215','688155','605567','603587','688272','603016','603839','002921','002809','301468','002596','600857','300478','600581','688619','603109','603065','600817','688247','301193','000720','002431','688357','002899','300519','301033','002663','603237','300436','000055','301446','001218','300878','605288','603301','301113','000619','603339','600241','002098','688317',];

// Combine
const codeTableA = [...codeTable1, ...codeTable2, ...codeTable3, ...codeTable4, ...codeTable5, ...codeTable6, ...codeTable7, ...codeTable8, ...codeTable9, ...codeTable10, ];
//const codeTableA = codeTable10

//const codeTable = ['300098','300346','000099','002373','300107','300284','300177','002902','601669','301091','600487','600489','001309','300398','301308'];
const hsReservedCode = ["110000", "110001", "110002", "110003", "110004", "110010", "110030", "110041", "110050", "110078", "111000", "111100", "221000",]

const curr_date = new Date();
// Format as YYYY-MM-DD 2025-04-17"
const currentDate = curr_date.toISOString().split('T')[0];
lastDateChop = ""

const BaseObj = {}; // This will store all the collected data
allResults = {};
prevallResults = {};
closepassArr = []
highpassArr = []
lowpassArr = []
lowfailArr = []
trend3UpArr = []
cUpPrevCloseArr = []


firstTime = false

notExistCnt = 0
completeObjCnt = 0

updcnt = 0
trend3UpCnt = 0
trend3DnCnt = 0
trend4UpCnt = 0
trend4DnCnt = 0
trend5UpCnt = 0
trend5DnCnt = 0
trend10UpCnt = 0
trend10DnCnt = 0

trendUpXCnt3 = 0
trendUpXCnt4 = 0
trendUpXCnt5 = 0
trendUpXCnt10 = 0
trendDnXCnt3 = 0
trendDnXCnt4 = 0
trendDnXCnt5 = 0
trendDnXCnt10 = 0

highpassCnt = 0
highFailCnt = 0
lowpassCnt = 0
lowFailCnt = 0
closepassCnt = 0
closeFailCnt = 0

cUpPrevCloseCnt = 0
cDnPrevCloseCnt = 0

timeArr = []

// prepare basic materials
const baseurl = "https://sqt.gtimg.cn/?q=";
//   A stk       https://qt.gtimg.cn/?q=sh000001,sz000002 seems the same

const chunkSize = 60;
const chunks = [];
const urlReqStr = [];

let systemMode = "h"

selectKey = prompt("select A or H ", "H");
if (selectKey != null && selectKey != "" && selectKey.toLowerCase() === "a") {
    systemMode = "a"
    codeTable = codeTableA
}else{
    systemMode = "h"
    codeTable = codeTableH
}

console.log("systemMode: ",systemMode)
console.log("codeTable.length: ",codeTable.length)

for (let i = 0; i < codeTable.length; i += chunkSize) {
	chunks.push(codeTable.slice(i, i + chunkSize));
}

for (let i = 0; i < chunks.length; i++) {
    if(systemMode.toLowerCase() === "h") {
        urlReqStr.push(baseurl + chunks[i].map(element => "r_hk" + element).join(","));
    } else {
        urlReqStr.push(baseurl + chunks[i].map(element => {
            if (element.charAt(0) == "6") {
                return "sh" + element;
            } else {
                return "sz" + element;
            }
        }).join(","));
    }
}
//console.log("urlReqStr.length",urlReqStr.length)
//console.log("urlReqStr[0]",urlReqStr[0])

function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


function checkCodeLen(theCode) {
	let codewidth = theCode.length;
	let modifiedCode = "";
	let url = "";

	if (codewidth <= 5) {
		theCode = "00000" + theCode;
		codewidth = theCode.length;
		theCode = theCode.slice(codewidth - 5, codewidth);
		codewidth = theCode.length;
		url = 'https://web.ifzq.gtimg.cn/appstock/app/hkfqkline/get?_var=kline_dayqfq&param=hk' + theCode + ',day,,,12,qfq';
		modifiedCode = "hk" + theCode;
	} else {
		if ((codewidth == 6) && !hsReservedCode.includes(theCode)) {
			if (theCode.charAt(0) == "6") {
				modifiedCode = "sh" + theCode;
			} else {
				modifiedCode = "sz" + theCode;
			}
		} else if (codewidth == 9) {
			modifiedCode = theCode.substring(7, 9) + theCode.substring(0, 7);
		}
		codewidth = modifiedCode.length;
		url = 'https://web.ifzq.gtimg.cn/appstock/app/fqkline/get?_var=kline_dayqfq&param=' + modifiedCode + ',day,,,26,qfq';
	}

	return { modifiedCode, url };
}

async function fetchKline(theCode, theurl) {
	try {
          await delay(10); // Wait for 10ms

		const response = await fetch(theurl);
		if (!response.ok) {
			throw new Error(`HTTP error! status: ${response.status}`);
		}

		const text = await response.text();
		const jsonStr = text.replace('kline_dayqfq=', '');
		const stkdata = JSON.parse(jsonStr);

		if (stkdata.data && stkdata.data[theCode]) {
			const stkName = stkdata.data[theCode].qt[theCode][1];
			const dataObj = stkdata.data[theCode].qfqday || stkdata.data[theCode].day;

			const closeArr = [];
			const dateArr = [];
			const lastPointer = dataObj.length - 1;
			const highValue = dataObj[lastPointer][3];
			const lowValue = dataObj[lastPointer][4];
		     lastDate = dataObj[lastPointer][0];


			for (let i = 0; i < dataObj.length; i++) {
				closeArr.push(Number(dataObj[i][2]));
				dateArr.push(dataObj[i][0]);
			}
			completeObjCnt++

			if (currentDate == lastDate) {
     		     lastDate = dataObj[lastPointer-1][0];
     		     prevClose = closeArr[lastPointer-1]
     		     // console.log("\nlastPointer ",lastPointer, "\ncloseArr ",closeArr)
     		     // console.log("\ntheCode ", theCode, "\ncloseArr[lastPointer] ",closeArr[lastPointer], "\ncloseArr[lastPointer-1] ",closeArr[lastPointer-1])
			}

			return {
				theCode: theCode.replace('hk', ''),
				stkname: stkName,
				lastDateValue: lastDate,
				closes: closeArr,
				date: dateArr,
				high: highValue,
				low: lowValue,
				prevClose: prevClose,
			};
		}
		throw new Error(`No data found for ${theCode}`);
	} catch (error) {
		console.error(`Error fetching data for ${theCode}:`, error);
		return null;
	}
}

async function fetchAllData() {
	let hasError = false;
	console.log("fetchAllData...\nmay take long time!\nStart: ", showTime())
	document.getElementById("dateAndTime").append("趋势统计表 总数：" + codeTable.length)

	for (let i = 0; i < codeTable.length; i++) {
		const { modifiedCode, url } = checkCodeLen(codeTable[i]);
      	console.log(".")

		try {
			const stockData = await fetchKline(modifiedCode, url);
			if (!stockData) {
				console.warn(`Failed to fetch data for ${codeTable[i]}, skipping...`);
				continue; // Skip this stock instead of breaking
			}
			BaseObj[codeTable[i]] = stockData;
		} catch (error) {
			console.error(`Error fetching data for ${modifiedCode}:`, error);
			continue; // Skip this stock instead of breaking
		}

		await new Promise(resolve => setTimeout(resolve, 50));
	}

	console.log("systemMode: ", systemMode)
	console.log("fetchAllData...\nFinished!\n", showTime())
	console.log("BaseObj length:", Object.keys(BaseObj).length)


     if(systemMode.toLowerCase() === "h"){
       lastDateChop = BaseObj["00388"].lastDateValue;
     }else{
       lastDateChop = BaseObj["603150"].lastDateValue;
     }

	console.error(`completeObjCnt: ${ completeObjCnt}`);

	return Object.keys(BaseObj).length > 0 ? BaseObj : null; // Return BaseObj if any data was fetched
}






async function updateChanges() {
	updcnt = updcnt + 1
     // Update image with timestamp to prevent caching
     const timestamp = new Date().getTime();
     const imgSrc = `https://charts.aastocks.com/servlet/Charts?fontsize=12&15MinDelay=F&lang=1&titlestyle=1&vol=1&Indicator=9&indpara1=22&indpara2=1.6&indpara3=0&indpara4=0&indpara5=0&subChart1=3&ref1para1=5&ref1para2=10&ref1para3=3&subChart2=3&ref2para1=12&ref2para2=26&ref2para3=9&scheme=3&com=100&chartwidth=1150&chartheight=500&stockid=110000&period=5012&type=1&logoStyle=1&_=${timestamp}`;
     document.getElementById("imgoutput").innerHTML = `<img  onclick="xunbao('110000')" src="${imgSrc}" alt="Updated Chart">`;

	const timestrarr = showTime().split(':')
	const timestr = timestrarr[0] + timestrarr[1]

     if(systemMode.toLowerCase() === "h"){

        if (!(Number(timestr) > 925 && Number(timestr) < 1201 ||
             Number(timestr) > 1259 && Number(timestr) < 1601) ) {
            document.getElementById("dateAndTime").innerHTML = "<lg>" + showDate() + "</lg> " + showTime() + "<k class='blinkred'> Market Closed</k>" + "<br> 上个交易日:" + lastDateChop;
            console.log("updateChanges...Market Closed! ", updcnt, ",",Number(timestr))
            return
        }else{
            document.getElementById("dateAndTime").innerHTML = "<lg>" + showDate() + "</lg> " + showTime() + " 上个交易日 " + lastDateChop;
            //console.log("updateChanges...", updcnt)
        }

     }else{

        if (!(Number(timestr) > 930 && Number(timestr) < 1131 ||
             Number(timestr) > 1259 && Number(timestr) < 1501)) {
            document.getElementById("dateAndTime").innerHTML = "<lg>" + showDate() + "</lg> " + showTime() + "<k class='blinkred'> Market Closed</k>" + "<br> 上个交易日: " + lastDateChop;
            return
        }else{
            document.getElementById("dateAndTime").innerHTML = "<lg>" + showDate() + "</lg> " + showTime() + " 上个交易日: " + lastDateChop;
        }

     }

	//console.log("updateInfo start", showTime())
	await updateInfo()
	//console.log("updateInfo complete ", showTime())
	compareAll()

    if (closepassArr.length > 5) {
     chartOutput = document.getElementById('chartOutput')
     chartOutput.innerHTML = ""


//     plotChart(cUpPrevCloseArr, 'cUpPrevClose', '现价比昨日升', 'red');
//     plotBollingerBands(cUpPrevCloseArr, 5, 1, '现价比昨日升');
//   plotWmaChart(dataArray, chartId, label, color) {
     plotWmaChart(cUpPrevCloseArr, 'c1','现价比昨日升', 'red');
     plotWmaChart(closepassArr, 'c2','现价高过三日线', 'pink');
     plotWmaChart(trend3UpArr, 'c3','三日线升', 'orange');
     plotWmaChart(highpassArr, 'c4','高位比三日线高', 'brown');
     plotWmaChart(lowpassArr, 'c5','低位比三日线高', 'cyan');
     plotWmaChart(lowfailArr, 'c6','低位比三日线低', 'purple');
    }
}


async function updateInfo() {
	//console.log("updateInfo...")
	firstTime = false
	if (Object.keys(prevallResults).length === 0 && Object.keys(allResults).length == 0) {
		firstTime = true
	} else if (Object.keys(allResults).length != 0) {
		prevallResults = { ...allResults };
		firstTime = false
	}

	timeStrarr = showTime().split(':')
	timestr = timeStrarr[0] + timeStrarr[1]
     timeArr.push(timestr)

	for (let i = 0; i < urlReqStr.length; i++) {
	     //console.log("urlReqStr i: ",i)
          await delay(10); // Wait for 10ms
		await fetchSegments(urlReqStr[i]);
	}
}


// Function to fetch data chunks
async function fetchSegments(url) {
	try {
		const response = await fetch(url);
		const data = await response.text();
		const rows = data.split(";");
          if(rows.length>0){
            //console.log("rows.length ",rows.length)
          }else{
            console.log("rows.length error",rows.length)
          }
          rows.pop()
          //console.log("after pop rows.length ",rows.length)

		rows.forEach(row => {
			const columns = row.split("~");
			if (columns.length > 1) {
				const stockCode = columns[2];
                    const stknum = stockCode.replace("s_hk|v_sz|v_sh", "");
                    //console.log(stknum)
				if(stknum.length = 0) console.log("stknum.length = 0: ", stockCode)
				const currentPrice = parseFloat(columns[35]);
				//console.log("currentPrice: ", currentPrice)
				BaseObj[stknum].high = parseFloat(columns[33]);
				//console.log("high: ", BaseObj[stknum].high)
				BaseObj[stknum].low = parseFloat(columns[34]);
				//console.log("low: ", BaseObj[stknum].low)

				const closesArray = BaseObj[stknum].closes;
				closesArray[closesArray.length - 1] = currentPrice;

				//console.log("stknum row extract finish: ", stknum)
			}else{
                    console.log("row error: ",row)
			}
		});
	} catch (error) {
		console.error("Error fetching data:", url, " ");
	}
}

function compareAll() {
	trend3UpCnt = 0
	trend3DnCnt = 0
	trend4UpCnt = 0
	trend4DnCnt = 0
	trend5UpCnt = 0
	trend5DnCnt = 0
	trend10UpCnt = 0
	trend10DnCnt = 0

	trendUpXCnt3 = 0
	trendUpXCnt4 = 0
	trendUpXCnt5 = 0
	trendUpXCnt10 = 0
	trendDnXCnt3 = 0
	trendDnXCnt4 = 0
	trendDnXCnt5 = 0
	trendDnXCnt10 = 0

	highpassCnt = 0
	highFailCnt = 0
	lowpassCnt = 0
	lowFailCnt = 0
	closepassCnt = 0
	closeFailCnt = 0

	cUpPrevCloseCnt = 0
	cDnPrevCloseCnt = 0

     notExistCnt = 0

	for (let i = 0; i < codeTable.length; i++) {
       //console.log("compareAll ", codeTable[i])
	  if (codeTable[i] in BaseObj && BaseObj[codeTable[i]].high !== undefined) {
		const statusMsgHLC = checkHLC(codeTable[i]); // checkHLC status and then checkX

		const statusMsg3 = checkXStat(3, 6, codeTable[i]);
		const statusMsg4 = checkXStat(4, 10, codeTable[i]);
		const statusMsg5 = checkXStat(5, 10, codeTable[i]);
		//const statusMsg10 = checkXStat(10, 20, codeTable[i]);

		if (statusMsg3.includes('升穿')) { trendUpXCnt3 = trendUpXCnt3 + 1 }
		if (statusMsg4.includes('升穿')) { trendUpXCnt4 = trendUpXCnt4 + 1 }
		if (statusMsg5.includes('升穿')) { trendUpXCnt5 = trendUpXCnt5 + 1 }
		//if (statusMsg10.includes('升穿')) { trendUpXCnt10 = trendUpXCnt10 + 1 }

		if (statusMsg3.includes('跌穿')) { trendDnXCnt3 = trendDnXCnt3 + 1 }
		if (statusMsg4.includes('跌穿')) { trendDnXCnt4 = trendDnXCnt4 + 1 }
		if (statusMsg5.includes('跌穿')) { trendDnXCnt5 = trendDnXCnt5 + 1 }
		//if (statusMsg10.includes('跌穿')) { trendDnXCnt10 = trendDnXCnt10 + 1 }
       }else{
          notExistCnt++
       }
	}

	allResults = {
		closepassCnt: closepassCnt,
		closeFailCnt: closeFailCnt,
		highpassCnt: highpassCnt,
		highFailCnt: highFailCnt,
		lowpassCnt: lowpassCnt,
		lowFailCnt: lowFailCnt,

		trend3UpCnt: trend3UpCnt,
		trend3DnCnt: trend3DnCnt,
		trend4UpCnt: trend4UpCnt,
		trend4DnCnt: trend4DnCnt,
		trend5UpCnt: trend5UpCnt,
		trend5DnCnt: trend5DnCnt,
		trend10UpCnt: trend10UpCnt,
		trend10DnCnt: trend10DnCnt,

		trendUpXCnt3: trendUpXCnt3,
		trendDnXCnt3: trendDnXCnt3,
		trendUpXCnt4: trendUpXCnt4,
		trendDnXCnt4: trendDnXCnt4,
		trendUpXCnt5: trendUpXCnt5,
		trendDnXCnt5: trendDnXCnt5,
		trendUpXCnt10: trendUpXCnt10,
		trendDnXCnt10: trendDnXCnt10,

		cUpPrevClose: cUpPrevCloseCnt,
		cDnPrevClose: cDnPrevCloseCnt,

	}
	closepassArr.push(closepassCnt)
	highpassArr.push(highpassCnt)
	lowpassArr.push(lowpassCnt)
	lowfailArr.push(lowFailCnt)
	trend3UpArr.push(trend3UpCnt)
	cUpPrevCloseArr.push(cUpPrevCloseCnt)

	showStat()
     //console.log("notExistCnt: ",notExistCnt)

}


function checkHLC(stkNum) {
	curObj = BaseObj[stkNum]
	curHigh = curObj.high;
	curLow = curObj.low;
	closeArr = curObj.closes
	curClose = closeArr[closeArr.length - 1];
	prevClose = curObj.prevClose;

	curWma3 = calculateWeightedMovingAverage(closeArr, 3, stkNum); // calc 3 days
	//console.log("High ", curHigh, "Low ", curLow, "Close ", curClose, "curWma3 ", curWma3)

	if (curHigh > curWma3) {
		highpassCnt = highpassCnt + 1
	} else if (curHigh < curWma3) {
		highFailCnt = highFailCnt + 1
	}

	if (curLow > curWma3) {
		lowpassCnt = lowpassCnt + 1
	} else if (curLow < curWma3) {
		lowFailCnt = lowFailCnt + 1
	}

	if (curClose > curWma3) {
		closepassCnt = closepassCnt + 1
	} else if (curClose < curWma3) {
		closeFailCnt = closeFailCnt + 1
	}

	if (curClose > prevClose) {  // compare with prev close
		cUpPrevCloseCnt = cUpPrevCloseCnt + 1
	} else if (curClose < prevClose) {
		cDnPrevCloseCnt = cDnPrevCloseCnt + 1
	}

}

function checkXStat(shortperiod, longperiod, stkNum) {  // Add stkNum parameter
	//console.log("BaseObj[stkNum] Object.keys: ", Object.keys(BaseObj[stkNum]))

	if (!BaseObj[stkNum]) {  // Add safety check
		console.warn(`Skipping checkXStat for ${stkNum}: no data available`);
		return '';
	}

	closeArr = BaseObj[stkNum].closes  // Use the provided stock number
	curPointer = closeArr.length - 1

	const prevArray = closeArr.slice(0, curPointer - 1);

	const prevLWma = calculateWeightedMovingAverage(prevArray, longperiod);
	const prevSWma = calculateWeightedMovingAverage(prevArray, shortperiod);
	const curLWma = calculateWeightedMovingAverage(closeArr, longperiod);
	const curSWma = calculateWeightedMovingAverage(closeArr, shortperiod);

	// 添加返回值
	if (curSWma > prevSWma) {
		if (shortperiod == 3) { trend3UpCnt = trend3UpCnt + 1 }
		if (shortperiod == 4) { trend4UpCnt = trend4UpCnt + 1 }
		if (shortperiod == 5) { trend5UpCnt = trend5UpCnt + 1 }
		if (shortperiod == 10) { trend10UpCnt = trend10UpCnt + 1 }
		return '升穿';
	} else {
		if (shortperiod == 3) { trend3DnCnt = trend3DnCnt + 1 }
		if (shortperiod == 4) { trend4DnCnt = trend4DnCnt + 1 }
		if (shortperiod == 5) { trend5DnCnt = trend5DnCnt + 1 }
		if (shortperiod == 10) { trend10DnCnt = trend10DnCnt + 1 }
		return '跌穿';
	}
}

function showStat() {
	statElement = document.createElement("div");

	// Calculate differences first
	let result = [];
	if (Object.keys(prevallResults).length !== 0) {
		result = findDifferences(allResults, prevallResults);
	} else {
		result = new Array(24).fill(0); // Create array of zeros for initial state
	}

	const tableHTML = `
        <div class="stat-table">
            <table>
                <tr>
                    <th colspan="4">${showDate()} ${showTime()} <r>上个交易日 </r> ${lastDateChop} Record Length: ${closepassArr.length}</th>
                </tr>
                <tr>
                    <td><bpk>收</bpk>比昨日升：<r>${cUpPrevCloseCnt}</r></td>
                    <td>差：<r>${result[22]}</r></td>
                    <td><bpk>收</bpk>比昨日跌：<gr>${cDnPrevCloseCnt}</gr></td>
                    <td>差：<gr>${result[23]}</gr></td>
                </tr>
                <tr>
                    <td><bpk>收</bpk>: 比3日线高：<r>${closepassCnt}</r></td>
                    <td>差：<r>${result[0]}</r></td>
                    <td><bpk>收</bpk>: 比3日线低：<gr>${closeFailCnt}</gr></td>
                    <td>差：<gr>${result[1]}</gr></td>
                </tr>
                <tr>
                    <td>高: 比3日线高：<r>${highpassCnt}</r></td>
                    <td>高: 差：<r>${result[2]}</r></td>
                    <td>高: 比3日线低：<gr>${highFailCnt}</gr></td>
                    <td>高: 差：<gr>${result[3]}</gr></td>
                </tr>
                <tr>
                    <td>低: 比3日线高：<r>${lowpassCnt}</r></td>
                    <td>低: 差：<r>${result[4]}</r></td>
                    <td>低: 比3日线低：<gr>${lowFailCnt}</gr></td>
                    <td>低: 差：<gr>${result[5]}</gr></td>
                </tr>
                <tr class="grayBG"><td></td><td></td><td></td><td></td></tr>                <tr class="trend-section">
                    <td><bpk>3</bpk>日线升：<r>${trend3UpCnt}</r></td>
                    <td>差：<r>${result[6]}</r></td>
                    <td>3日线跌：<gr>${trend3DnCnt}</gr></td>
                    <td>差：<gr>${result[7]}</gr></td>
                </tr>
                <tr>
                    <td>4日线升：<r>${trend4UpCnt}</r></td>
                    <td>差：<r>${result[8]}</r></td>
                    <td>4日线跌：<gr>${trend4DnCnt}</gr></td>
                    <td>差：<gr>${result[9]}</gr></td>
                </tr>
                <tr>
                    <td>5日线升：<r>${trend5UpCnt}</r></td>
                    <td>差：<r>${result[10]}</r></td>
                    <td>5日线跌：<gr>${trend5DnCnt}</gr></td>
                    <td>差：<gr>${result[11]}</gr></td>
                </tr>
                <tr>
                    <td>10日线升：<r>${trend10UpCnt}</r></td>
                    <td>差：<r>${result[12]}</r></td>
                    <td>10日线跌：<gr>${trend10DnCnt}</gr></td>
                    <td>差：<gr>${result[13]}</gr></td>
                </tr>
                <tr class="grayBG"><td></td><td></td><td></td><td></td></tr>                <tr class="cross-section">
                    <td>3日升穿6日：<r>${trendUpXCnt3}</r></td>
                    <td>差：<r>${result[14]}</r></td>
                    <td>3日跌穿6日：<gr>${trendDnXCnt3}</gr></td>
                    <td>差：<gr>${result[15]}</gr></td>
                </tr>
                <tr>
                    <td>4日升穿10日：<r>${trendUpXCnt4}</r></td>
                    <td>差：<r>${result[16]}</r></td>
                    <td>4日跌穿10日：<gr>${trendDnXCnt4}</gr></td>
                    <td>差：<gr>${result[17]}</gr></td>
                </tr>
                <tr>
                    <td>5日升穿10日：<r>${trendUpXCnt5}</r></td>
                    <td>差：<r>${result[18]}</r></td>
                    <td>5日跌穿10日：<gr>${trendDnXCnt5}</gr></td>
                    <td>差：<gr>${result[19]}</gr></td>
                </tr>
                <tr>
                    <td>10日升穿20日：<r>${trendUpXCnt10}</r></td>
                    <td>差：<r>${result[20]}</r></td>
                    <td>10日跌穿20日：<gr>${trendDnXCnt10}</gr></td>
                    <td>差：<gr>${result[21]}</gr></td>
                </tr>
            </table>
        </div>
    `;

	// Add some CSS for the table
	const styleElement = document.createElement('style');
	styleElement.textContent = `
        .stat-table table {
            border-collapse: collapse;
            width: 100%;
            margin: 0px 0;
            background-color: black;
        }
        .stat-table td, .stat-table th {
            padding: 5px;
            text-align: left;
            border: 1px solid #333;
        }
        .stat-table th {
            background-color: black;
        }
        .trend-section td {
            border-top: 2px solid #444;
        }
        .cross-section td {
            border-top: 2px solid #444;
        }
    `;
	document.head.appendChild(styleElement);

	statElement.innerHTML = tableHTML;
	const outputDiv = document.getElementById('output');
	//outputDiv.parentNode.insertBefore(statElement, outputDiv);
	outputDiv.innerHTML = tableHTML
}


function findDifferences(objA, objB) {
	const differences = [];

	// Get all keys from allResults
	const keys = Object.keys(objA);

	// Calculate differences and store in array
	keys.forEach(key => {
		if (objB.hasOwnProperty(key)) {
			differences.push(objA[key] - objB[key]);
		}
	});

	return differences;
}

// <y>加权移动平均 (WMA)</y>
function weightedMovingAverage(data, period) {
 const weights = Array.from({length: period}, (_, i) => period - i);
 const wma = new Array(period - 1).fill(null); // <y>填充 null</y>
 for (let i = period - 1; i < data.length; i++) {
  let sum = 0;
  let weightSum = 0;
  for (let j = 0; j < period; j++) {
   sum += data[i - j] * weights[j];
   weightSum += weights[j];
  }
  wma.push(sum / weightSum);
 }
 return wma;
}



function calculateWeightedMovingAverage(data, period, stkNum) {
	if (data.length < period) {
		console.log("stkNum: ", stkNum, "data.length: ", data.length, "period ", period)
		throw new Error("Data array is shorter than the period. stkNum: ", stkNum);
	}

	const weights = Array.from({ length: period }, (_, i) => i + 1);
	const weightSum = weights.reduce((a, b) => a + b, 0);

	const recentData = data.slice(data.length - period);

	const weightedSum = recentData.reduce((sum, value, index) => {
		return sum + value * weights[index];
	}, 0);
	return weightedSum / weightSum;
}


// <y>标准差</y>
function standardDeviation(data, period) {
	const std = new Array(period - 1).fill(null); // <y>填充 null</y>
	for (let i = period - 1; i < data.length; i++) {
		const avg = data.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0) / period;
		const variance = data.slice(i - period + 1, i + 1).reduce((a, b) => a + Math.pow(b - avg, 2), 0) / period;
		std.push(Math.sqrt(variance));
	}
	return std;
}



function plotChart(dataArray, chartId, label, color) {
     const title = document.createElement('pk');
     //title.textContent = label + "<br>";
     maxvalue = Math.max(...dataArray)
     minvalue = Math.min(...dataArray)
     curvalue = dataArray[dataArray.length-1]
     relPos = Math.round((curvalue - minvalue)*100/(maxvalue - minvalue))
     title.innerHTML = label + ` <md>最高: ${maxvalue} 最低: ${minvalue} <y>现在: ${curvalue} 相对位置:</y> <r>${relPos}</r>` +"</md><br>";

	// Create canvas element if it doesn't exist
	let chartContainer = document.getElementById(chartId);
	if (!chartContainer) {
		chartContainer = document.createElement('div');
		chartContainer.id = chartId;
		document.getElementById('chartOutput').appendChild(chartContainer);
	}
	chartContainer.innerHTML = '<canvas></canvas>';

	const minValue = Math.min(...dataArray);
	const ctx = chartContainer.querySelector('canvas').getContext('2d');

	new Chart(ctx, {
		type: 'line',
		data: {
			labels: timeArr,
			datasets: [{
				label: label,
				data: dataArray,
				borderColor: color,
				fill: false,
				borderWidth: 1,
				pointStyle: false,
			}]
		},
		options: {
		  plugins: {
		    legend: {
		      display: false // This hides the entire legend
		    }
		  },
			responsive: true,
			maintainAspectRatio: false,
			scales: {
				y: {
					beginAtZero: false,
					min: minValue,
				}
			}
		}
	});
}


// <y>计算保力加通道</y>
function bollingerBands(data, period, multiplier) {
 const wmaL1 = weightedMovingAverage(data, period);
 const wmaL2 = weightedMovingAverage(data, period*2);
 const wmaL3 = weightedMovingAverage(data, period*3);
 const wmaL4 = weightedMovingAverage(data, period*4);
 const wmaL5 = weightedMovingAverage(data, period*5);

 const std = standardDeviation(data, period);
 const upperBand = wmaL2.map((val, i) => val === null ? null : val + multiplier * std[i]);
 const lowerBand = wmaL2.map((val, i) => val === null ? null : val - multiplier * std[i]);
//console.log("lowerBand: ",lowerBand)
 return { wmaL1, wmaL2, wmaL3, wmaL4, wmaL5, upperBand, lowerBand, std };
}

function plotBollingerBands(data, period, multiplier, chartTitle) {
  // 计算保力加通道数据
  const bands = bollingerBands(data, period, multiplier);

  // 创建标题
  const title = document.createElement('pk');
  title.textContent = chartTitle;
  document.body.appendChild(title);

  // 动态创建画布
  const canvas = document.createElement('canvas');
  const aspectRatio = 1.2; // 预设宽高比
  const containerWidth = document.body.clientWidth; // 获取页面宽度
  canvas.style.width = '100%';
  canvas.width = containerWidth;
  canvas.height = containerWidth / aspectRatio; 
  document.body.appendChild(canvas);

  // 获取画布上下文
  const ctx = canvas.getContext('2d');

  // 绘制图表
  new Chart(ctx, {
    type: 'line',
    data: {
      labels: Array.from({ length: data.length }, (_, i) => i + 1),
      datasets: [
        {
          label: 'Price', data: data, borderColor: 'yellow',
          fill: false, borderWidth: 1, pointStyle: false,},
        {
          label: 'WMAL5', data: bands.wmaL1, borderColor: 'green',
          fill: false, borderWidth: 1, pointStyle: false,},
        {
          label: 'wmaL10', data: bands.wmaL2, borderColor: 'red',
          fill: false, borderWidth: 1, pointStyle: false,},
        {
          label: 'wmaL15', data: bands.wmaL3, borderColor: 'orange',
          fill: false, borderWidth: 1, pointStyle: false,},
        {
          label: 'wmaL20', data: bands.wmaL4, borderColor: 'brown',
          fill: false, borderWidth: 1, pointStyle: false,},
        {
          label: 'wmaL25', data: bands.wmaL5, borderColor: 'gray',
          fill: false, borderWidth: 1, pointStyle: false,},
        {
          label: 'Upper Band', data: bands.upperBand, borderColor: 'purple',
          fill: false, borderWidth: 1, pointStyle: false,},
        {
          label: 'Lower Band', data: bands.lowerBand, borderColor: 'purple',
          fill: false, borderWidth: 1, pointStyle: false,},
      ]
    },
    options: {
	 legend: { display: false },
      responsive: false,
      scales: {
        x: {
          display: true, title: { display: false, text: 'Time' }},
        y: {
          display: true, title: { display: false, text: 'Price' }}
      }
    }
  });
}

function plotWmaChart(dataArray, chartId, label, color) {
    // 创建标题元素
    title = document.createElement('pk');
    maxvalue = Math.max(...dataArray);
    minvalue = Math.min(...dataArray);
    curvalue = dataArray[dataArray.length - 1];
    relPos = Math.round((curvalue - minvalue) * 100 / (maxvalue - minvalue));
    title.innerHTML = label + ` <md>最高: ${maxvalue} 最低: ${minvalue} <y>现在: ${curvalue}</y> 相对位置: ${relPos}</md><br>`;

    // 创建图表容器（如果不存在）
    let chartContainer = document.getElementById(chartId);
    if (!chartContainer) {
        chartContainer = document.createElement('div');
        chartContainer.id = chartId;
        document.getElementById('chartOutput').appendChild(title);
        document.getElementById('chartOutput').appendChild(chartContainer);
        chartContainer.innerHTML = '<canvas></canvas>';
    } else {
        // 清空容器但保留标题
        chartContainer.innerHTML = '<canvas></canvas>';
    }

    // 获取画布上下文
    const ctx = chartContainer.querySelector('canvas').getContext('2d');

    // 准备数据集
    const datasets = [{
        label: label,
        data: dataArray,
        borderColor: color,
        fill: false,
        borderWidth: 1,
        pointStyle: false,
    }];

    // 计算并添加 WMA 线和标准差带
    const wmaPeriod = 5; // 用于标准差带的 WMA 周期
    const stdDevMultiplier = 1.8; // 标准差倍数，通常使用2倍

    if (dataArray.length >= wmaPeriod) {
        // 计算 WMA 中心线
        const wmaData = calculateWMALine(dataArray, wmaPeriod);
        
        // 计算标准差带
        const { upperBand, lowerBand } = calculateStandardDeviationBands(dataArray, wmaData, wmaPeriod, stdDevMultiplier);
        
        // 添加 WMA 中心线
        datasets.push({
            label: `WMA${wmaPeriod}`,
            data: wmaData,
            borderColor: '#3357FF',
            fill: false,
            borderWidth: 1,
            pointStyle: false,
        });
        
        // 添加标准差带上轨
        datasets.push({
            label: `+${stdDevMultiplier}σ`,
            data: upperBand,
            borderColor: 'purple',
            borderWidth: 1,
            //borderDash: [5, 5],
            pointStyle: false,
            fill: false,
        });
        
        // 添加标准差带下轨
        datasets.push({
            label: `- ${stdDevMultiplier}σ`,
            data: lowerBand,
            borderColor: 'purple',
            borderWidth: 1,
            //borderDash: [5, 5],
            pointStyle: false,
            fill: {
                target: 'previous',
                above: 'rgba(51, 87, 255, 0.1)', // 上轨和下轨之间填充半透明蓝色
            },
        });
    }

    // 创建图表
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: timeArr,
            datasets: datasets
        },
        options: {
            legend: { display: true },
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: false,
                    min: minvalue * 0.95,
                    max: maxvalue * 1.05
                }
            }
        }
    });
}

// 计算整条 WMA 线的数据
function calculateWMALine(data, period) {
    const result = [];
    for (let i = 0; i < data.length; i++) {
        if (i >= period - 1) {
            const weights = Array.from({ length: period }, (_, j) => j + 1);
            const weightSum = weights.reduce((a, b) => a + b, 0);
            let weightedSum = 0;
            for (let j = 0; j < period; j++) {
                weightedSum += data[i - j] * weights[period - 1 - j];
            }
            result.push(weightedSum / weightSum);
        } else {
            result.push(null); // 数据不足时显示为 null
        }
    }
    return result;
}

// 计算标准差带
function calculateStandardDeviationBands(data, wmaData, period, multiplier) {
    const upperBand = [];
    const lowerBand = [];
    
    for (let i = 0; i < data.length; i++) {
        if (i >= period - 1) {
            // 计算窗口数据
            const windowData = data.slice(i - period + 1, i + 1);
            const windowWMA = wmaData[i];
            
            // 计算标准差
            const mean = windowData.reduce((sum, value) => sum + value, 0) / period;
            const variance = windowData.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / period;
            const stdDev = Math.sqrt(variance);
            
            // 计算上下带
            upperBand.push(windowWMA + (stdDev * multiplier));
            lowerBand.push(windowWMA - (stdDev * multiplier));
        } else {
            // 数据不足时显示为 null
            upperBand.push(null);
            lowerBand.push(null);
        }
    }
    
    return { upperBand, lowerBand };
}


// Function to process the next request in the queue
async function processQueue() {
	// return after loop completed
	while (requestQueue.length > 0 || activeRequests > 0) {
		console.log("requestQueue.length ", requestQueue.length)
		if (activeRequests < MAX_CONCURRENT_REQUESTS && requestQueue.length > 0) {
			activeRequests++;
			const request = requestQueue.shift();
			await request();
			activeRequests--;
		} else {
			// Wait for a short time before checking the queue again
			await new Promise(resolve => setTimeout(resolve, 10));
		}
	}
}

// Main function to collect basic data
async function main() {
     // init shortcut keys
     document.getElementById("shortcutKeys").innerHTML = `快捷键: <lg>t</lg> 保力加图 <lg>a</lg> 数据表 <lg>e</lg> 底部 <lg>1</lg> 去掉首元素`;


	// fetchAllData --> processQueue -->
	await fetchAllData()

	compareAll()
	//console.log("fetchAllData loop")

	setInterval(updateChanges, 60000);

}

function chkKey() {
  var testkey = getChar(event);
  if(testkey == 't'){window.location = '#imgoutput';}
  else if(testkey == 'a'){window.location = '#output';}
  else if(testkey == 's'){window.location = '#chartOutput';}
  else if(testkey == 'e'){window.location = '#shortcutKeys';}
  else if(testkey == '1'){removeFirstElement()}
  else{chkOtherKeys(testkey)} 
}
function getChar(event) {
  if (event.which!=0 && event.charCode!=0) {
    return String.fromCharCode(event.which)   // the rest
  } else {
    return null // special key
  }
}

function removeFirstElement() {
    confiremKey = prompt("removeFirstElement y/n ", "n");
    if (confiremKey == "y") {
      cUpPrevCloseArr.shift();
      closepassArr.shift();
      trend3UpArr.shift();
      highpassArr.shift();
      lowpassArr.shift();
      lowfailArr.shift();
      timeArr.shift();
    }
}

function xunbao(xunbaocode) {
	sessionStorage.setItem("randomcode", xunbaocode)
	localStorage.setItem("randomcode", xunbaocode)
	localStorage.setItem("otherCode", xunbaocode)
	localStorage.setItem("stkCode", xunbaocode)

	window.open("Random Charts.html");
	// locs = ["HIghLowTrend.html", "Random Charts.html", ]
	//  window.open("HIghLowTrend.html")
}




// Start the main process
main();

