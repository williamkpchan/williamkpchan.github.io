w3PhpMySql=[
'<h2><span class="orange">PHP MySQL Database</span></h2>\nWith PHP, you can connect to and manipulate databases.\nMySQL is the most popular database system used with PHP.\nThe data in a MySQL database are stored in tables.\nA table is a collection of related data, and it consists of columns and rows.\n',
'<h2>Database Queries</h2>\n<r>A query is a question or a request.</r>\nWe can query a database for specific information and have a recordset returned.\n\nLook at the following query (using standard SQL):\nSELECT LastName FROM Employees\nThe query above selects all the data in the "LastName" column from the "Employees" table.\n',
'<h2><span class="orange">PHP Connect to MySQL</span></h2>\nPHP 5 and later can work with a MySQL database using:\n<k>MySQLi extension</k> (the <r>"i" stands for improved</r>)\n<k>PDO (<r>PHP Data Objects</r>)</k>\nEarlier versions of PHP used the MySQL extension.\nHowever, this extension was deprecated in 2012.\n',
'<h2>Should I Use MySQLi or PDO?</h2>\nIf you need a short answer, it would be "Whatever you like".\nBoth MySQLi and PDO have their advantages:\n\n<r>PDO will work on 12 different database systems</r>, whereas MySQLi will only work with MySQL databases.\nSo, if you have to switch your project to use another database, PDO makes the process easy.\nYou only have to change the connection string and a few queries.\n\nWith MySQLi, you will need to rewrite the entire code - queries included.\n\nBoth are object-oriented, but <r>MySQLi also offers a procedural API</r>.\nBoth support Prepared Statements.\n\n<r>Prepared Statements protect from SQL injection, and are very important for web application security.</r>\n',
'<h2>MySQL Examples in Both MySQLi and PDO Syntax</h2>\nIn this, and in the following chapters we demonstrate three ways of working with PHP and MySQL:\nMySQLi (object-oriented)\nMySQLi (procedural)\nPDO\n',
'<h2>MySQLi Installation</h2>\nFor Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed.\nFor installation details, go to:\n<a href="http://php.net/manual/en/mysqli.installation.php" target="_blank">http://php.net/manual/en/mysqli.installation.php</a>\n',
'<h2>PDO Installation</h2>\nFor installation details, go to:\n<a href="http://php.net/manual/en/pdo.installation.php" target="_blank">http://php.net/manual/en/pdo.installation.php</a>\n',
'<h2>Open a Connection to MySQL</h2>\nBefore we can access data in the MySQL database, we need to be able to connect to the server:\n<h3>Example (MySQLi Object-Oriented)</h3>\nobject oriented\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n// Create connection\n$conn = <r>new mysqli($servername, $username, $password);</r>\n// Check connection\n if ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n }\necho "Connected successfully";\n?>\n<k>Note on the object-oriented example above:</k> \n  $connect_error was broken until PHP 5.2.9 and 5.3.0.\n\nIf you need to ensure compatibility with PHP versions prior to 5.2.9 and 5.3.0, use the following code instead:\n// Check connection\nif (mysqli_connect_error()) {\n  die("Database connection failed: " . mysqli_connect_error());\n}\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password);\n// Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\necho "Connected successfully";\n?>\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\ntry {\n  $conn = new PDO("mysql:host=$servername;dbname=myDB", $username, $password);\n    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    echo "Connected successfully";\n} catch(PDOException $e) {\n  echo "Connection failed: " . $e->getMessage();\n}\n?>\n<k>Note:</k> In the PDO example above we have also <k>specified a database (myDB)</k>.\nPDO require a valid database to connect to.\nIf no database is specified, an exception is thrown.\n<k>Tip:</k> <r>A great benefit of PDO is that it has an exception class to handle any problems</r> that may occur in our database queries.\nIf an exception is thrown within the try{ } block, \nthe script stops executing and flows directly to the first catch(){ } block.\n',
'<h2>Close the Connection</h2>\nThe connection will be closed automatically when the script ends.\nTo close the connection before, use the following:\n<h3>MySQLi Object-Oriented:</h3>\n$conn->close();\n<h3>MySQLi Procedural:</h3>\nmysqli_close($conn);\n<h3>PDO:</h3>\n$conn = null;\n',
'<h2><span class="orange">PHP Create a MySQL Database</span></h2>\n<r>A database consists of one or more tables. </r>\nYou will need special CREATE privileges to create or to delete a MySQL database.\n',
'<h2>Create a MySQL Database Using MySQLi and PDO</h2>\nThe CREATE DATABASE statement is used to create a database in MySQL.\nThe following examples create a database named "myDB":\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n// Create connection\n$conn = new mysqli($servername, $username, $password);\n // Check connection\n if ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n}\n// Create database\n$sql = "CREATE DATABASE myDB";\nif ($conn->query($sql) === TRUE) {\n  echo "Database created successfully";\n} else {\n  echo "Error creating database: " . $conn->error;\n}\n$conn->close();\n?>\n<k>Note:</k> When you create a new database, you must only specify the first three arguments to the mysqli object (servername, username and password).\n<k>Tip:</k> If you have to use a specific port,\nadd an empty string for the database-name argument, like this: new mysqli("localhost", "username", "password", "", port)\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n// Create database\n$sql = "CREATE DATABASE myDB";\n if (mysqli_query($conn, $sql)) {\n  echo "Database created successfully";\n} else {\n  echo "Error creating database: " . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\n<k>Note:</k> The following PDO example create a database named "myDBPDO":\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\ntry {\n  $conn = new PDO("mysql:host=$servername", $username, $password);\n    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $sql = "CREATE DATABASE myDBPDO";\n  // use exec() because no results are returned\n    $conn->exec($sql);\n  echo "Database created successfully&lt;br>";\n} catch(PDOException $e) \n  {\n  echo $sql . "&lt;br>" . $e->getMessage();\n  }\n$conn = null;\n?>\n<k>Tip:</k> A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries.\nIf an exception is thrown within the try{ } block, \nthe script stops executing and flows directly to the first catch(){ } block.\nIn the catch block above we echo the SQL statement and the generated error message. \n      \n',
'<h2><span class="orange">PHP MySQL Create Table</span></h2>\nA database table has its own unique name and consists of columns and rows.\n',
'<h2>Create a MySQL Table Using MySQLi and PDO</h2>\nThe CREATE TABLE statement is used to create a table in MySQL.\nWe will create a table named "MyGuests", with five columns: "id", "firstname", "lastname", "email" and "reg_date":\nCREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)\n<b>Notes on the table above:</b>\nThe data type specifies what type of data the column can hold.\nFor a complete reference of all the available data types, go to our\n<a href="/sql/sql_datatypes.asp">Data Types reference</a>.\nAfter the data type, you can specify other optional attributes for each column:\nNOT NULL - Each row must contain a value for that column, null values are not allowed\n  DEFAULT value - Set a default value that is added when no other value is passed\n  UNSIGNED - Used for number types, limits the stored data to positive numbers and zero\n  AUTO INCREMENT - MySQL automatically increases the value of the field by 1 each time a new record is added\n  PRIMARY KEY - Used to uniquely identify the rows in a table.\nThe column with PRIMARY KEY setting is often an ID number, and is often used with AUTO_INCREMENT\nEach table should have a primary key column (in this case: the "id" column). \nIts value must be unique for each record in the table.\nThe following examples shows how to create the table in PHP:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n // Check connection\n if ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n}\n// sql to create table\n$sql = "CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP \n  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)";\nif ($conn->query($sql) === TRUE) {\n  echo "Table MyGuests created successfully";\n} else {\n    echo "Error creating table: " . $conn->error;\n}\n$conn->close();\n?>\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n// sql to create table\n$sql = "CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP \n  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)";\nif (mysqli_query($conn, $sql)) {\n  echo "Table MyGuests created successfully";\n} else {\n  echo "Error creating table: " . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\ntry {\n  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    // sql to create table$sql = "CREATE TABLE MyGuests (\n  id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n  firstname VARCHAR(30) NOT NULL,\n    lastname VARCHAR(30) NOT NULL,\n  email VARCHAR(50),\n  reg_date TIMESTAMP \n  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n  )";\n  // use exec() because no results are returned\n  $conn->exec($sql);\n    echo "Table MyGuests created successfully";\n} catch(PDOException $e) \n  {\n  echo $sql . "&lt;br>" . $e->getMessage();\n  }\n$conn = null;\n?>\n      \n',
'<h2><span class="orange">PHP MySQL Insert Data</span></h2>\n',
'<h2>Insert Data Into MySQL Using MySQLi and PDO</h2>\nAfter a database and a table have been created, we can start adding data in them.\nHere are some syntax rules to follow:\nThe SQL query must be quoted in PHP\n  String values inside the SQL query must be quoted\n  Numeric values must not be quoted\n  The word NULL must not be quoted\nThe INSERT INTO statement is used to add new records to a MySQL table:\nINSERT INTO table_name (column1, column2, column3,...)\nVALUES (value1, value2, value3,...)\nIn the previous chapter we created an empty table named "MyGuests" with five columns: "id", "firstname", "lastname", "email" and "reg_date". \nNow, let us fill the table with data.\n<k>Note:</k> If a column is AUTO_INCREMENT (like the "id" column) or TIMESTAMP with default update of current_timesamp \n(like the "reg_date" column), it is no need to be specified in the SQL query; MySQL will automatically add the value.\nThe following examples add a new record to the "MyGuests" table:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n // Check connection\n if ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n}\n$sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\')";\nif ($conn->query($sql) === TRUE) {\n  echo "New record created successfully";\n} else {\n    echo "Error: " . $sql . "&lt;br>" . $conn->error;\n}\n$conn->close();\n?>\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n$sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\')";\nif (mysqli_query($conn, $sql)) {\n  echo "New record created successfully";\n} else {\n  echo "Error: " . $sql . "&lt;br>" . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\ntry {\n  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\')";\n    // use exec() because no results are returned\n  $conn->exec($sql);\n    echo "New record created successfully";\n} catch(PDOException $e) \n  {\n  echo $sql . "&lt;br>" . $e->getMessage();\n  }\n$conn = null;\n?>\n      \n',
'<h2><span class="orange">PHP MySQL Get Last Inserted ID</span></h2>\n',
'<h2>Get ID of The Last Inserted Record</h2>\nIf we perform an INSERT or UPDATE on a table with an AUTO_INCREMENT field, we can get the ID of the last inserted/updated record immediately.\nIn the table "MyGuests", the "id" column is an AUTO_INCREMENT field:\nCREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)\nThe following examples are equal to the examples from the previous page (<a href="php_mysql_insert.asp">PHP Insert Data Into MySQL</a>), except that we have added one single line of code to retrieve the ID of the last inserted record.\nWe also echo the last inserted ID:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n // Check connection\n if ($conn->connect_error) {\n    die("Connection failed: " . $conn->connect_error);\n}\n$sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\')";\nif ($conn->query($sql) === TRUE) {\n  $last_id = $conn->insert_id;\n    echo "New record created successfully.\nLast inserted ID is: " . $last_id;\n} else {\n    echo "Error: " . $sql . "&lt;br>" . $conn->error;\n}\n$conn->close();\n?>\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n$sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\')";\nif (mysqli_query($conn, $sql)) {\n  $last_id = mysqli_insert_id($conn);\n  echo "New record created successfully.\nLast inserted ID is: " . $last_id;\n} else {\n  echo "Error: " . $sql . "&lt;br>" . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\ntry {\n  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n  // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\')";\n    // use exec() because no results are returned\n  $conn->exec($sql);\n  $last_id = $conn->lastInsertId();\n  echo "New record created successfully.\nLast inserted ID is: " . $last_id;\n} catch(PDOException $e) {\n  echo $sql . "&lt;br>" . $e->getMessage();\n  }\n$conn = null;\n?>\n      \n',
'<h2><span class="orange">PHP MySQL Insert Multiple Records</span></h2>\n',
'<h2>Insert Multiple Records Into MySQL Using MySQLi and PDO</h2>\nMultiple SQL statements must be executed with the <code class="w3-codespan">mysqli_multi_query()</code> function.\nThe following examples add three new records to the "MyGuests" table:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n // Check connection\n if ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n}\n$sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\');";\n$sql .= "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'Mary\', \'Moe\', \'mary@example.com\');";\n$sql .= "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'Julie\', \'Dooley\', \'julie@example.com\')";\nif ($conn->multi_query($sql) === TRUE) {\n  echo "New records created successfully";\n} else {\n  echo "Error: " . $sql . "&lt;br>" . $conn->error;\n}\n$conn->close();\n?>\nNote that each SQL statement must be separated by a semicolon.\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n$sql = "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'John\', \'Doe\', \'john@example.com\');";\n$sql .= "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'Mary\', \'Moe\', \'mary@example.com\');";\n$sql .= "INSERT INTO MyGuests (firstname, lastname, email)\n VALUES (\'Julie\', \'Dooley\', \'julie@example.com\')";\nif (mysqli_multi_query($conn, $sql)) {\n  echo "New records created successfully";\n} else {\n  echo "Error: " . $sql . "&lt;br>" . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\nThe PDO way is a little bit different:\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\ntry {\n    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    // begin the transaction\n  $conn->beginTransaction();\n  // our SQL statements\n    $conn->exec("INSERT INTO MyGuests (firstname, lastname, email) \n  VALUES (\'John\', \'Doe\', \'john@example.com\')");\n    $conn->exec("INSERT INTO MyGuests (firstname, lastname, email) \n  VALUES (\'Mary\', \'Moe\', \'mary@example.com\')");\n    $conn->exec("INSERT INTO MyGuests (firstname, lastname, email) \n  VALUES (\'Julie\', \'Dooley\', \'julie@example.com\')");\n  // commit the transaction\n  $conn->commit();\n  echo "New records created successfully";\n  } catch(PDOException $e) {\n  // roll back the transaction if something failed\n  $conn->rollback();\n    echo "Error: " . $e->getMessage();\n}\n$conn = null;\n?>\n      \n',
'<h2><span class="orange">PHP MySQL Prepared Statements</span></h2>\nPrepared statements are very useful against SQL injections.\n',
'<h2>Prepared Statements and Bound Parameters</h2>\nA prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency.\nPrepared statements basically work like this:\n<ol>\nPrepare: An SQL statement template is created and sent to the database.\nCertain values are left unspecified, called parameters (labeled "?").\nExample: INSERT INTO MyGuests VALUES(?, ?, ?)\n  The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it\n  Execute: At a later time, the application binds the values to the parameters, and the database executes the statement.\nThe application may execute the statement as many times as it wants with different values\n</ol>\nCompared to executing SQL statements directly, prepared statements have three main advantages:\nPrepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times)\n  Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query\n  Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped.\nIf the original statement template is not derived from external input, SQL injection cannot occur.\n',
'<h2>Prepared Statements in MySQLi</h2>\nThe following example uses prepared statements and bound parameters in MySQLi:\n<h3>Example (MySQLi with Prepared Statements)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n }\n// prepare and bind\n$stmt = $conn->prepare("INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)");\n$stmt->bind_param("sss", $firstname, $lastname, $email);\n// set parameters and execute\n$firstname = "John";\n$lastname = "Doe";\n$email = "john@example.com";\n$stmt->execute();\n$firstname = "Mary";\n$lastname = "Moe";\n$email = "mary@example.com";\n$stmt->execute();\n$firstname = "Julie";\n$lastname = "Dooley";\n$email = "julie@example.com";\n$stmt->execute();\necho "New records created successfully";\n$stmt->close();\n$conn->close();?>\nCode lines to explain from the example above:\n "INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)"\nIn our SQL, we insert a question mark (?) where we want to substitute in an integer, string, double or blob value.\nThen, have a look at the bind_param() function:\n$stmt->bind_param("sss", $firstname, $lastname, $email);\nThis function binds the parameters to the SQL query and tells the database what the parameters are.\nThe "sss" argument lists the types of data that the parameters are.\nThe s character tells mysql that the parameter is a string.\nThe argument may be one of four types:\ni - integer\n  d - double\n  s - \nstring\n  b - BLOB\nWe must have one of these for each parameter.\nBy telling mysql what type of data to expect, we minimize the risk of SQL injections.\n<k>Note:</k> If we want to insert any data from external sources \n(like user input), it is very important that the data is sanitized and validated.\n',
'<h2>Prepared Statements in PDO</h2>\nThe following example uses prepared statements and bound parameters in PDO:\n<h3>Example (PDO with Prepared Statements)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\ntry {\n    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    // prepare sql and bind parameters\n  $stmt = $conn->prepare("INSERT INTO MyGuests (firstname, lastname, email)\n  VALUES (:firstname, :lastname, :email)");\n  $stmt->bindParam(\':firstname\', $firstname);\n    $stmt->bindParam(\':lastname\', $lastname);\n  $stmt->bindParam(\':email\', $email);\n  // insert a row\n  $firstname = "John";\n  $lastname = "Doe";\n  $email = "john@example.com";\n    $stmt->execute();\n  // insert another row\n  $firstname = "Mary";\n  $lastname = "Moe";\n  $email = "mary@example.com";\n    $stmt->execute();\n  // insert another row\n  $firstname = "Julie";\n    $lastname = "Dooley";\n  $email = "julie@example.com";\n    $stmt->execute();\n  echo "New records created successfully";\n} catch(PDOException $e) \n  {\n    echo "Error: " . $e->getMessage();\n}\n$conn = null;\n?>\n      \n',
'<h2><span class="orange">PHP MySQL Select Data</span></h2>\n',
'<h2>Select Data From a MySQL Database</h2>\nThe SELECT statement is used to select data from one or more tables:\nSELECT column_name(s)\nFROM table_name\nor we can use the * character to select ALL columns from a table:\nSELECT *\nFROM table_name\n',
'<h2>Select Data With MySQLi</h2>\nThe following example selects the id, firstname and lastname columns from the MyGuests table and displays it on the page:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n    die("Connection failed: " . $conn->connect_error);\n } \n$sql = "SELECT id, firstname, lastname FROM MyGuests";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  // output data of each row\n    while($row = $result->fetch_assoc()) {\n    echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "&lt;br>";\n    }\n} else {\n  echo "0 results";\n}\n$conn->close();\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_oo">Run example <U+00BB></a>\nCode lines to explain from the example above:\nFirst, we set up an SQL query that selects the id, firstname and lastname columns from the MyGuests table.\nThe next line of code runs the query and puts the resulting data into a variable called $result.\nThen, the function <code class="w3-codespan">num_rows()</code> checks if there are more than zero rows returned.\nIf there are more than zero rows returned, the function <code class="w3-codespan">fetch_assoc()</code> puts all the results into an associative array that we can loop through.\nThe <code class="w3-codespan">while()</code> loop loops through the result set and outputs the data from the id, firstname and lastname columns.\nThe following example shows the same as the example above, in the MySQLi procedural way:\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n  die("Connection failed: " . mysqli_connect_error());\n}\n$sql = "SELECT id, firstname, lastname FROM MyGuests";\n$result = mysqli_query($conn, $sql);\nif (mysqli_num_rows($result) > 0) {\n    // output data of each row\n  while($row = mysqli_fetch_assoc($result)) {\n    echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "&lt;br>";\n    }\n} else {\n  echo "0 results";\n}\nmysqli_close($conn);\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_proc">Run example <U+00BB></a>\nYou can also put the result in an HTML table:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n    die("Connection failed: " . $conn->connect_error);\n } \n$sql = "SELECT id, firstname, lastname FROM MyGuests";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n    echo "&lt;table>&lt;tr>&lt;th>ID&lt;/th>&lt;th>Name&lt;/th>&lt;/tr>";\n    // output data of each row\n  while($row = $result->fetch_assoc()) {\n    echo "&lt;tr>&lt;td>".$row["id"]."&lt;/td>&lt;td>".$row["firstname"]." ".$row["lastname"]."&lt;/td>&lt;/tr>";\n    }\n  echo "&lt;/table>";\n} else {\n  echo "0 results";\n}\n$conn->close();\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_oo_table">Run example <U+00BB></a>\n',
'<h2>Select Data With PDO (+ Prepared Statements)</h2>\nThe following example uses prepared statements.\nIt selects the id, firstname and lastname columns from the MyGuests table and displays it in an HTML table:\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\necho "&lt;table style=\'border: solid 1px black;\'>";\n echo "&lt;tr>&lt;th>Id&lt;/th>&lt;th>Firstname&lt;/th>&lt;th>Lastname&lt;/th>&lt;/tr>";\nclass TableRows extends RecursiveIteratorIterator {\n  function __construct($it) { \n    parent::__construct($it, self::LEAVES_ONLY); \n    }\n  function current() {\n    return "&lt;td style=\'width:150px;border:1px solid black;\'>" .\nparent::current(). "&lt;/td>";\n    }\n  function beginChildren() { \n    echo "&lt;tr>"; \n    } \n  function endChildren() { \n    echo "&lt;/tr>" . "\n";\n    } \n} \n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\n try {\n  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  $stmt = $conn->prepare("SELECT id, firstname, lastname FROM MyGuests"); \n    $stmt->execute();\n  // set the resulting array to associative\n  $result = $stmt->setFetchMode(PDO::FETCH_ASSOC); \n  foreach(new TableRows(new RecursiveArrayIterator($stmt->fetchAll())) as $k=>$v) { \n    echo $v;\n    }\n} catch(PDOException $e) {\n  echo "Error: " . $e->getMessage();\n}\n$conn = null;\necho "&lt;/table>";?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_pdo">Run example <U+00BB></a>\n      \n',
'<h2><span class="orange">PHP MySQL Use The WHERE Clause</span></h2>\n',
'<h2>Select and Filter Data From a MySQL Database</h2>\nThe WHERE clause is used to filter records.\nThe WHERE clause is used to extract only those records that fulfill a specified condition.\nSELECT column_name(s)\nFROM table_name WHERE column_name operator value \n',
'<h2>Select and Filter Data With MySQLi</h2>\nThe following example selects the id, firstname and lastname columns from the MyGuests table where the lastname is "Doe", and displays it on the page:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n } \n$sql = "SELECT id, firstname, lastname FROM MyGuests WHERE \n  lastname=\'Doe\'";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  // output data of each row\n  while($row = $result->fetch_assoc()) {\n    echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "&lt;br>";\n    }\n} else {\n  echo "0 results";\n}\n$conn->close();\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_where_oo">Run example <U+00BB></a>\nCode lines to explain from the example above:\nFirst, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table where the lastname is "Doe".\nThe next line of code runs the query and puts the resulting data into a variable called $result.\nThen, the <code class="w3-codespan">function num_rows()</code> checks if there are more than zero rows returned.\nIf there are more than zero rows returned, the function <code class="w3-codespan">fetch_assoc()</code> puts all the results into an associative array that we can loop through.\nThe <code class="w3-codespan">while()</code> loop loops through the result set and outputs the data from the id, firstname and lastname columns.\nThe following example shows the same as the example above, in the MySQLi procedural way:\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n$sql = "SELECT id, firstname, lastname FROM MyGuests \n  WHERE lastname=\'Doe\'";\n$result = mysqli_query($conn, $sql);\nif (mysqli_num_rows($result) > 0) {\n  // output data of each row\n    while($row = mysqli_fetch_assoc($result)) {\n    echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "&lt;br>";\n    }\n} else {\n  echo "0 results";\n}\nmysqli_close($conn);\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_where_proc">Run example <U+00BB></a>\nYou can also put the result in an HTML table:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n } \n$sql = "SELECT id, firstname, lastname FROM MyGuests WHERE \n  lastname=\'Doe\'";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  echo "&lt;table>&lt;tr>&lt;th>ID&lt;/th>&lt;th>Name&lt;/th>&lt;/tr>";\n    // output data of each row\n  while($row = $result->fetch_assoc()) {\n    echo "&lt;tr>&lt;td>".$row["id"]."&lt;/td>&lt;td>".$row["firstname"]." ".$row["lastname"]."&lt;/td>&lt;/tr>";\n    }\n  echo "&lt;/table>";\n} else {\n  echo "0 results";\n}\n$conn->close();\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_where_oo_table">Run example <U+00BB></a>\n',
'<h2>Select Data With PDO (+ Prepared Statements)</h2>\nThe following example uses prepared statements.\nIt selects the id, firstname and lastname columns from the MyGuests table where the lastname is "Doe", and displays it in an HTML table:\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\necho "&lt;table style=\'border: solid 1px black;\'>";\n echo "&lt;tr>&lt;th>Id&lt;/th>&lt;th>Firstname&lt;/th>&lt;th>Lastname&lt;/th>&lt;/tr>";\nclass TableRows extends RecursiveIteratorIterator {\n  function __construct($it) { \n    parent::__construct($it, self::LEAVES_ONLY); \n    }\n  function current() {\n    return "&lt;td style=\'width:150px;border:1px solid black;\'>" .\nparent::current(). "&lt;/td>";\n    }\n  function beginChildren() { \n    echo "&lt;tr>"; \n    } \n  function endChildren() { \n    echo "&lt;/tr>" . "\n";\n    } \n} \n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\n try {\n  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  $stmt = $conn->prepare("SELECT id, firstname, lastname FROM MyGuests \n  WHERE lastname=\'Doe\'"); \n  $stmt->execute();\n  // set the resulting array to associative\n  $result = $stmt->setFetchMode(PDO::FETCH_ASSOC); \n  foreach(new TableRows(new RecursiveArrayIterator($stmt->fetchAll())) as $k=>$v) { \n      echo $v;\n  }\n}\ncatch(PDOException $e) {\n  echo "Error: " . $e->getMessage();\n}\n$conn = null;\necho "&lt;/table>";?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_where_pdo">Run example <U+00BB></a>\n      \n',
'<h2><span class="orange">PHP MySQL Use The ORDER BY Clause</span></h2>\n',
'<h2>Select and Order Data From a MySQL Database</h2>\nThe ORDER BY clause is used to sort the result-set in ascending or descending order.\nThe ORDER BY clause sorts the records in ascending order by default.\nTo sort the records in descending order, use the DESC keyword.\n  \nSELECT column_name(s)\nFROM table_name ORDER BY column_name(s) ASC|DESC \n',
'<h2>Select and Order Data With MySQLi</h2>\nThe following example selects the id, firstname and lastname columns from the MyGuests table.\nThe records will be ordered by the lastname column:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n    die("Connection failed: " . $conn->connect_error);\n } \n$sql = "SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  // output data of each row\n  while($row = $result->fetch_assoc()) {\n      echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "&lt;br>";\n    }\n} else {\n  echo "0 results";\n}\n$conn->close();\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_orderby_oo">Run example <U+00BB></a>\nCode lines to explain from the example above:\nFirst, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table.\nThe records will be ordered by the lastname column.\nThe next line of code runs the query and puts the resulting data into a variable called $result.\nThen, the <code class="w3-codespan">function num_rows()</code> checks if there are more than zero rows returned.\nIf there are more than zero rows returned, the function <code class="w3-codespan">fetch_assoc()</code> puts all the results into an associative array that we can loop through.\nThe <code class="w3-codespan">while()</code> loop loops through the result set and outputs the data from the id, firstname and lastname columns.\nThe following example shows the same as the example above, in the MySQLi procedural way:\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n$sql = "SELECT id, firstname, lastname FROM MyGuests \n  ORDER BY lastname";\n$result = mysqli_query($conn, $sql);\nif (mysqli_num_rows($result) > 0) {\n    // output data of each row\n  while($row = mysqli_fetch_assoc($result)) {\n    echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "&lt;br>";\n    }\n} else {\n  echo "0 results";\n}\nmysqli_close($conn);\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_orderby_proc">Run example <U+00BB></a>\nYou can also put the result in an HTML table:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n    die("Connection failed: " . $conn->connect_error);\n } \n$sql = "SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  echo "&lt;table>&lt;tr>&lt;th>ID&lt;/th>&lt;th>Name&lt;/th>&lt;/tr>";\n    // output data of each row\n  while($row = $result->fetch_assoc()) {\n    echo "&lt;tr>&lt;td>".$row["id"]."&lt;/td>&lt;td>".$row["firstname"]." ".$row["lastname"]."&lt;/td>&lt;/tr>";\n    }\n  echo "&lt;/table>";\n} else {\n  echo "0 results";\n}\n$conn->close();\n?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_orderby_oo_table">Run example <U+00BB></a>\n',
'<h2>Select Data With PDO (+ Prepared Statements)</h2>\nThe following example uses prepared statements.\nHere we select the id, firstname and lastname columns from the MyGuests table. \nThe records will be ordered by the lastname column, and it will be displayed in an HTML table:\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\necho "&lt;table style=\'border: solid 1px black;\'>";\n echo "&lt;tr>&lt;th>Id&lt;/th>&lt;th>Firstname&lt;/th>&lt;th>Lastname&lt;/th>&lt;/tr>";\nclass TableRows extends RecursiveIteratorIterator {\n  function __construct($it) { \n    parent::__construct($it, self::LEAVES_ONLY); \n    }\n  function current() {\n    return "&lt;td style=\'width:150px;border:1px solid black;\'>" .\nparent::current(). "&lt;/td>";\n    }\n  function beginChildren() { \n    echo "&lt;tr>"; \n    } \n  function endChildren() { \n    echo "&lt;/tr>" . "\n";\n    } \n} \n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\n try {\n  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $stmt = $conn->prepare("SELECT id, firstname, lastname FROM MyGuests \n  ORDER BY lastname"); \n  $stmt->execute();\n  // set the resulting array to associative\n  $result = $stmt->setFetchMode(PDO::FETCH_ASSOC); \n  foreach(new TableRows(new RecursiveArrayIterator($stmt->fetchAll())) as $k=>$v) { \n      echo $v;\n  }\n} catch(PDOException $e) {\n  echo "Error: " . $e->getMessage();\n}\n$conn = null;\necho "&lt;/table>";?>\n<a target="_blank" class="w3-btn w3-margin-bottom" href="https://tryphp.w3schools.com/showphpfile.php?filename=demo_db_select_orderby_pdo">Run example <U+00BB></a>\n      \n',
'<h2><span class="orange">PHP MySQL Delete Data</span></h2>\n',
'<h2>Delete Data From a MySQL Table Using MySQLi and PDO</h2>\nThe DELETE statement is used to delete records from a table:\nDELETE FROM table_name\nWHERE some_column = some_value\n<k>Notice the WHERE clause in the DELETE syntax:</k> The WHERE clause specifies which record or records that should be deleted.\nIf you omit the WHERE clause, all records will be deleted!\nLet\'s look at the "MyGuests" table:\n<table>\n<tr><th>id</th><th>firstname</th><th>lastname</th><th>email</th><th>reg_date</th></tr>\n<tr><td>1</td><td>John</td><td>Doe</td><td>john@example.com</td><td>2014-10-22 14:26:15</td></tr>\n<tr><td>2</td><td>Mary</td><td>Moe</td><td>mary@example.com</td><td>2014-10-23 10:22:30</td></tr>\n<tr><td>3</td><td>Julie</td><td>Dooley</td><td>julie@example.com</td><td>2014-10-26 10:48:23</td></tr>\n</table>\nThe following examples delete the record with id=3 in the "MyGuests" table:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n // Check connection\n if ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n}\n// sql to delete a record\n$sql = "DELETE FROM MyGuests WHERE id=3";\nif ($conn->query($sql) === TRUE) {\n  echo "Record deleted successfully";\n} else {\n    echo "Error deleting record: " . $conn->error;\n}\n$conn->close();\n?>\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n  die("Connection failed: " . mysqli_connect_error());\n}\n// sql to delete a record\n$sql = "DELETE FROM MyGuests WHERE id=3";\nif (mysqli_query($conn, $sql)) {\n  echo "Record deleted successfully";\n} else {\n    echo "Error deleting record: " . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\ntry {\n  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    // sql to delete a record$sql = "DELETE FROM MyGuests WHERE id=3";\n  // use exec() because no results are returned\n  $conn->exec($sql);\n    echo "Record deleted successfully";\n} catch(PDOException $e) {\n  echo $sql . "&lt;br>" . $e->getMessage();\n  }\n$conn = null;\n?>\nAfter the record is deleted, the table will look like this:\n<table>\n<tr><th>id</th><th>firstname</th><th>lastname</th><th>email</th><th>reg_date</th></tr>\n<tr><td>1</td><td>John</td><td>Doe</td><td>john@example.com</td><td>2014-10-22 14:26:15</td></tr>\n<tr><td>2</td><td>Mary</td><td>Moe</td><td>mary@example.com</td><td>2014-10-23 10:22:30</td></tr>\n</table>\n      \n',
'<h2><span class="orange">PHP MySQL Update Data</span></h2>\n',
'<h2>Update Data In a MySQL Table Using MySQLi and PDO</h2>\nThe UPDATE statement is used to update existing records in a table:\nUPDATE table_name\nSET column1=value, column2=value2,...\nWHERE some_column=some_value \n<k>Notice the WHERE clause in the UPDATE syntax:</k> The WHERE clause specifies which record or records that should be updated.\nIf you omit the WHERE clause, all records will be updated!\nLet\'s look at the "MyGuests" table:\n<table>\n<tr><th>id</th><th>firstname</th><th>lastname</th><th>email</th><th>reg_date</th></tr>\n<tr><td>1</td><td>John</td><td>Doe</td><td>john@example.com</td><td>2014-10-22 14:26:15</td></tr>\n<tr><td>2</td><td>Mary</td><td>Moe</td><td>mary@example.com</td><td>2014-10-23 10:22:30</td></tr>\n</table>\nThe following examples update the record with id=2 in the "MyGuests" table:\n<h3>Example (MySQLi Object-oriented)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n // Check connection\n if ($conn->connect_error) {\n  die("Connection failed: " . $conn->connect_error);\n}\n$sql = "UPDATE MyGuests SET lastname=\'Doe\' WHERE id=2";\nif ($conn->query($sql) === TRUE) {\n  echo "Record updated successfully";\n} else {\n  echo "Error updating record: " . $conn->error;\n}\n$conn->close();\n?>\n<h3>Example (MySQLi Procedural)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDB";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n // Check connection\n if (!$conn) {\n    die("Connection failed: " . mysqli_connect_error());\n}\n$sql = "UPDATE MyGuests SET lastname=\'Doe\' WHERE id=2";\nif (mysqli_query($conn, $sql)) {\n  echo "Record updated successfully";\n} else {\n    echo "Error updating record: " . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\n<h3>Example (PDO)</h3>\n\n<r>&lt;?php</r>\n$servername = "localhost";\n$username = "username";\n$password = "password";\n$dbname = "myDBPDO";\ntry {\n    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n  // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  $sql = "UPDATE MyGuests SET lastname=\'Doe\' WHERE id=2";\n  // Prepare statement\n  $stmt = $conn->prepare($sql);\n  // execute the query\n    $stmt->execute();\n  // echo a message to say the UPDATE succeeded\n    echo $stmt->rowCount() . " records UPDATED successfully";\n} catch(PDOException $e) \n  {\n  echo $sql . "&lt;br>" . $e->getMessage();\n}\n$conn = null;\n?>\nAfter the record is updated, the table will look like this:\n<table>\n<tr><th>id</th><th>firstname</th><th>lastname</th><th>email</th><th>reg_date</th></tr>\n<tr><td>1</td><td>John</td><td>Doe</td><td>john@example.com</td><td>2014-10-22 14:26:15</td></tr>\n<tr><td>2</td><td>Mary</td><td>Doe</td><td>mary@example.com</td><td>2014-10-23 10:22:30</td></tr>\n</table>\n      \n',
'<h2><span class="orange">PHP MySQL Limit Data Selections</span></h2>\n',
'<h2>Limit Data Selections From a MySQL Database</h2>\nMySQL provides a LIMIT clause that is used to specify the number of records to return.\nThe LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables.\nReturning a large number of records can impact on performance.\nAssume we wish to select all records from 1 - 30 (inclusive) from a table called "Orders".\nThe SQL query would then look like this:\n$sql = "SELECT * FROM Orders LIMIT 30";\nWhen the SQL query above is run, it will return the first 30 records.\nWhat if we want to select records 16 - 25 (inclusive)?\nMysql also provides a way to handle this: by using OFFSET.\nThe SQL query below says "return only 10 records, start on record 16 (OFFSET \n15)":\n  $sql = "SELECT * FROM Orders LIMIT 10 OFFSET 15";\nYou could also use a shorter syntax to achieve the same result:\n  $sql = "SELECT * FROM Orders LIMIT 15, 10";\nNotice that the numbers are reversed when you use a comma.\n\n',
'<h2><span class="orange">PHP MySQL CRUD Application</span></h2>\n<div id="PHPMySQLCRUDtoc" class="toc"><a href="#PHPMySQLCRUDtopic-0" target="_self">Creating the Database Table</a><br><a href="#PHPMySQLCRUDtopic-1" target="_self">Creating the Config File</a><br><a href="#PHPMySQLCRUDtopic-2" target="_self">Creating the Landing Page</a><br><a href="#PHPMySQLCRUDtopic-3" target="_self">Creating the Create Page</a><br><a href="#PHPMySQLCRUDtopic-4" target="_self">Creating the Read Page</a><br><a href="#PHPMySQLCRUDtopic-5" target="_self">Creating the Update Page</a><br><a href="#PHPMySQLCRUDtopic-6" target="_self">Creating the Delete Page</a><br><a href="#PHPMySQLCRUDtopic-7" target="_self">Creating the Error Page</a><br></div></center>\n<h3 id="PHPMySQLCRUDtopic-0">Creating the Database Table</h3>\nExecute the following SQL query to create a table named <i>employees</i> inside your MySQL database. We will use this table for all of our future operations.\n<h4>Example</h4>\n<a href="https://www.tutorialrepublic.com/examples/downloads/employees-table.zip" target="_top" class="download-btn" title="Download Countries Table">Download</a>\nCREATE TABLE employees (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\nname VARCHAR(100) NOT NULL,\naddress VARCHAR(255) NOT NULL,\nsalary INT(10) NOT NULL\n);\n\n<h3 id="PHPMySQLCRUDtopic-1">Creating the Config File</h3>\nAfter creating the table, we need create a PHP script in order to connect to the MySQL database server. Let\'s create a file named "config.php" and put the following code inside it.\nWe\'ll later include this config file in other pages using the PHP require_once() function.\n\n<h4>Example</h4>\nprocedural\n\n<r>&lt;?php</r>\n/* Database credentials. Assuming you are running MySQL\nserver with default setting (user \'root\' with no password) */\ndefine(\'DB_SERVER\', \'localhost\');\ndefine(\'DB_USERNAME\', \'root\');\ndefine(\'DB_PASSWORD\', \'\');\ndefine(\'DB_NAME\', \'demo\');\n\n/* Attempt to connect to MySQL database */\n$link = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n// Check connection\nif($link === false){\ndie("ERROR: Could not connect. " . mysqli_connect_error());\n}\n?&gt;\nObject oriented\n\n<r>&lt;?php</r>\n/* Database credentials. Assuming you are running MySQL\nserver with default setting (user \'root\' with no password) */\ndefine(\'DB_SERVER\', \'localhost\');\ndefine(\'DB_USERNAME\', \'root\');\ndefine(\'DB_PASSWORD\', \'\');\ndefine(\'DB_NAME\', \'demo\');\n\n/* Attempt to connect to MySQL database */\n$mysqli = new mysqli(DB_SERVER, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n// Check connection\nif($mysqli === false){\ndie("ERROR: Could not connect. " . $mysqli-&gt;connect_error);\n}\n?&gt;\nPDO\n\n<r>&lt;?php</r>\n/* Database credentials. Assuming you are running MySQL\nserver with default setting (user \'root\' with no password) */\ndefine(\'DB_SERVER\', \'localhost\');\ndefine(\'DB_USERNAME\', \'root\');\ndefine(\'DB_PASSWORD\', \'\');\ndefine(\'DB_NAME\', \'demo\');\n\n/* Attempt to connect to MySQL database */\ntry{\n$pdo = new PDO("mysql:host=" . DB_SERVER . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);\n// Set the PDO error mode to exception\n$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e){\ndie("ERROR: Could not connect. " . $e-&gt;getMessage());\n}\n?&gt;\n\nIf you\'ve downloaded the Object Oriented or PDO code examples using the download button, please remove the text "-oo-format" or "-pdo-format" from file names before testing the code.\n\n<strong>Note:</strong> Replace the credentials according to your MySQL server setting before testing this code, for example, replace the database name \'demo\' with your own database name, replace username \'root\' with your own database username, specify database password if there\'s any.\n\n\n<h3 id="PHPMySQLCRUDtopic-2">Creating the Landing Page</h3>\nFirst we will create a landing page for our CRUD application that contains a data grid showing the records from the <i>employees</i> database table. It also has action icons for each record displayed in the grid, that you may choose to view its details, update it, or delete it.\nWe\'ll also add a create button on the top of the data grid that can be used for creating new records in the <i>employees</i> table. Create a file named "index.php" and put the following code in it:\n\n<h4>Example</h4>\n<a href="https://www.tutorialrepublic.com/examples/bin/download-source.php?PHPMySQLCRUDtopic=php&amp;file=index" target="_top" class="download-btn" title="Download Source Code">Download</a>\n<i title="Maximize"></i>\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Dashboard&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"&gt;\n&lt;script src="https://code.jquery.com/jquery-3.5.1.min.js"&gt;&lt;/script&gt;\n&lt;script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"&gt;&lt;/script&gt;\n&lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&gt;&lt;/script&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\ntable tr td:last-child{\nwidth: 120px;\n}\n&lt;/style&gt;\n&lt;script&gt;\n$(document).ready(function(){\n$(\'[data-toggle="tooltip"]\').tooltip();   \n});\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;div class="mt-5 mb-3 clearfix"&gt;\n&lt;h2 class="pull-left"&gt;Employees Details&lt;/h2&gt;\n&lt;a href="create.php" class="btn btn-success pull-right"&gt;&lt;i class="fa fa-plus"&gt;&lt;/i&gt; Add New Employee&lt;/a&gt;\n&lt;/div&gt;\n\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Attempt select query execution\n$sql = "SELECT * FROM employees";\nif($result = mysqli_query($link, $sql)){\nif(mysqli_num_rows($result) &gt; 0){\necho \'&lt;table class="table table-bordered table-striped"&gt;\';\necho "&lt;thead&gt;";\necho "&lt;tr&gt;";\necho "&lt;th&gt;#&lt;/th&gt;";\necho "&lt;th&gt;Name&lt;/th&gt;";\necho "&lt;th&gt;Address&lt;/th&gt;";\necho "&lt;th&gt;Salary&lt;/th&gt;";\necho "&lt;th&gt;Action&lt;/th&gt;";\necho "&lt;/tr&gt;";\necho "&lt;/thead&gt;";\necho "&lt;tbody&gt;";\nwhile($row = mysqli_fetch_array($result)){\necho "&lt;tr&gt;";\necho "&lt;td&gt;" . $row[\'id\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'name\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'address\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'salary\'] . "&lt;/td&gt;";\necho "&lt;td&gt;";\necho \'&lt;a href="read.php?id=\'. $row[\'id\'] .\'" class="mr-3" title="View Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-eye"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho \'&lt;a href="update.php?id=\'. $row[\'id\'] .\'" class="mr-3" title="Update Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-pencil"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho \'&lt;a href="delete.php?id=\'. $row[\'id\'] .\'" title="Delete Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-trash"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho "&lt;/td&gt;";\necho "&lt;/tr&gt;";\n}\necho "&lt;/tbody&gt;";                            \necho "&lt;/table&gt;";\n// Free result set\nmysqli_free_result($result);\n} else{\necho \'&lt;div class="alert alert-danger"&gt;&lt;em&gt;No records were found.&lt;/em&gt;&lt;/div&gt;\';\n}\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n\n// Close connection\nmysqli_close($link);\n?&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Dashboard&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"&gt;\n&lt;script src="https://code.jquery.com/jquery-3.5.1.min.js"&gt;&lt;/script&gt;\n&lt;script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"&gt;&lt;/script&gt;\n&lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&gt;&lt;/script&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\ntable tr td:last-child{\nwidth: 120px;\n}\n&lt;/style&gt;\n&lt;script&gt;\n$(document).ready(function(){\n$(\'[data-toggle="tooltip"]\').tooltip();   \n});\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;div class="mt-5 mb-3 clearfix"&gt;\n&lt;h2 class="pull-left"&gt;Employees Details&lt;/h2&gt;\n&lt;a href="create.php" class="btn btn-success pull-right"&gt;&lt;i class="fa fa-plus"&gt;&lt;/i&gt; Add New Employee&lt;/a&gt;\n&lt;/div&gt;\n\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Attempt select query execution\n$sql = "SELECT * FROM employees";\nif($result = $mysqli-&gt;query($sql)){\nif($result-&gt;num_rows &gt; 0){\necho \'&lt;table class="table table-bordered table-striped"&gt;\';\necho "&lt;thead&gt;";\necho "&lt;tr&gt;";\necho "&lt;th&gt;#&lt;/th&gt;";\necho "&lt;th&gt;Name&lt;/th&gt;";\necho "&lt;th&gt;Address&lt;/th&gt;";\necho "&lt;th&gt;Salary&lt;/th&gt;";\necho "&lt;th&gt;Action&lt;/th&gt;";\necho "&lt;/tr&gt;";\necho "&lt;/thead&gt;";\necho "&lt;tbody&gt;";\nwhile($row = $result-&gt;fetch_array()){\necho "&lt;tr&gt;";\necho "&lt;td&gt;" . $row[\'id\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'name\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'address\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'salary\'] . "&lt;/td&gt;";\necho "&lt;td&gt;";\necho \'&lt;a href="read.php?id=\'. $row[\'id\'] .\'" class="mr-3" title="View Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-eye"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho \'&lt;a href="update.php?id=\'. $row[\'id\'] .\'" class="mr-3" title="Update Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-pencil"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho \'&lt;a href="delete.php?id=\'. $row[\'id\'] .\'" title="Delete Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-trash"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho "&lt;/td&gt;";\necho "&lt;/tr&gt;";\n}\necho "&lt;/tbody&gt;";                            \necho "&lt;/table&gt;";\n// Free result set\n$result-&gt;free();\n} else{\necho \'&lt;div class="alert alert-danger"&gt;&lt;em&gt;No records were found.&lt;/em&gt;&lt;/div&gt;\';\n}\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n\n// Close connection\n$mysqli-&gt;close();\n?&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Dashboard&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"&gt;\n&lt;script src="https://code.jquery.com/jquery-3.5.1.min.js"&gt;&lt;/script&gt;\n&lt;script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"&gt;&lt;/script&gt;\n&lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&gt;&lt;/script&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\ntable tr td:last-child{\nwidth: 120px;\n}\n&lt;/style&gt;\n&lt;script&gt;\n$(document).ready(function(){\n$(\'[data-toggle="tooltip"]\').tooltip();   \n});\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;div class="mt-5 mb-3 clearfix"&gt;\n&lt;h2 class="pull-left"&gt;Employees Details&lt;/h2&gt;\n&lt;a href="create.php" class="btn btn-success pull-right"&gt;&lt;i class="fa fa-plus"&gt;&lt;/i&gt; Add New Employee&lt;/a&gt;\n&lt;/div&gt;\n\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Attempt select query execution\n$sql = "SELECT * FROM employees";\nif($result = $pdo-&gt;query($sql)){\nif($result-&gt;rowCount() &gt; 0){\necho \'&lt;table class="table table-bordered table-striped"&gt;\';\necho "&lt;thead&gt;";\necho "&lt;tr&gt;";\necho "&lt;th&gt;#&lt;/th&gt;";\necho "&lt;th&gt;Name&lt;/th&gt;";\necho "&lt;th&gt;Address&lt;/th&gt;";\necho "&lt;th&gt;Salary&lt;/th&gt;";\necho "&lt;th&gt;Action&lt;/th&gt;";\necho "&lt;/tr&gt;";\necho "&lt;/thead&gt;";\necho "&lt;tbody&gt;";\nwhile($row = $result-&gt;fetch()){\necho "&lt;tr&gt;";\necho "&lt;td&gt;" . $row[\'id\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'name\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'address\'] . "&lt;/td&gt;";\necho "&lt;td&gt;" . $row[\'salary\'] . "&lt;/td&gt;";\necho "&lt;td&gt;";\necho \'&lt;a href="read.php?id=\'. $row[\'id\'] .\'" class="mr-3" title="View Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-eye"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho \'&lt;a href="update.php?id=\'. $row[\'id\'] .\'" class="mr-3" title="Update Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-pencil"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho \'&lt;a href="delete.php?id=\'. $row[\'id\'] .\'" title="Delete Record" data-toggle="tooltip"&gt;&lt;span class="fa fa-trash"&gt;&lt;/span&gt;&lt;/a&gt;\';\necho "&lt;/td&gt;";\necho "&lt;/tr&gt;";\n}\necho "&lt;/tbody&gt;";                            \necho "&lt;/table&gt;";\n// Free result set\nunset($result);\n} else{\necho \'&lt;div class="alert alert-danger"&gt;&lt;em&gt;No records were found.&lt;/em&gt;&lt;/div&gt;\';\n}\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n\n// Close connection\nunset($pdo);\n?&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nOnce <i>employees</i> table is populated with some records the landing page i.e. the CRUD data grid may look something like the picture shown below:\n<a href="#" target="_blank">\n<img src="https://www.tutorialrepublic.com/lib/images/php-mysql-crud-interface.png" width="730" alt="PHP MySQL CRUD Interface">\n</a>\n<!--Tip Box-->\n\n<strong>Tip:</strong> We\'ve used the Bootstrap framework to make this CRUD application layout quickly and beautifully. Bootstrap is the most popular and powerful front-end framework for faster and easier responsive web development. Please, checkout the <a href="/twitter-bootstrap-tutorial/">Bootstrap tutorial</a> section to learn more about this framework.\n\n<!--End:Tip Box-->\n<h3 id="PHPMySQLCRUDtopic-3">Creating the Create Page</h3>\nIn this section we\'ll build the <b>C</b>reate functionality of our CRUD application.\nLet\'s create a file named "create.php" and put the following code inside it. It will generate a web form that can be used to insert records in the <i>employees</i> table.\n\n<h4>Example</h4>\n<a href="https://www.tutorialrepublic.com/examples/bin/download-source.php?PHPMySQLCRUDtopic=php&amp;file=create" target="_top" class="download-btn" title="Download Source Code">Download</a>\n<i title="Maximize"></i>\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Define variables and initialize with empty values\n$name = $address = $salary = "";\n$name_err = $address_err = $salary_err = "";\n\n// Processing form data when form is submitted\nif($_SERVER["REQUEST_METHOD"] == "POST"){\n// Validate name\n$input_name = trim($_POST["name"]);\nif(empty($input_name)){\n$name_err = "Please enter a name.";\n} elseif(!filter_var($input_name, FILTER_VALIDATE_REGEXP, array("options"=&gt;array("regexp"=&gt;"/^[a-zA-Z\s]+$/")))){\n$name_err = "Please enter a valid name.";\n} else{\n$name = $input_name;\n}\n\n// Validate address\n$input_address = trim($_POST["address"]);\nif(empty($input_address)){\n$address_err = "Please enter an address.";     \n} else{\n$address = $input_address;\n}\n\n// Validate salary\n$input_salary = trim($_POST["salary"]);\nif(empty($input_salary)){\n$salary_err = "Please enter the salary amount.";     \n} elseif(!ctype_digit($input_salary)){\n$salary_err = "Please enter a positive integer value.";\n} else{\n$salary = $input_salary;\n}\n\n// Check input errors before inserting in database\nif(empty($name_err) &amp;&amp; empty($address_err) &amp;&amp; empty($salary_err)){\n// Prepare an insert statement\n$sql = "INSERT INTO employees (name, address, salary) VALUES (?, ?, ?)";\n\nif($stmt = mysqli_prepare($link, $sql)){\n// Bind variables to the prepared statement as parameters\nmysqli_stmt_bind_param($stmt, "sss", $param_name, $param_address, $param_salary);\n\n// Set parameters\n$param_name = $name;\n$param_address = $address;\n$param_salary = $salary;\n\n// Attempt to execute the prepared statement\nif(mysqli_stmt_execute($stmt)){\n// Records created successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nmysqli_stmt_close($stmt);\n}\n\n// Close connection\nmysqli_close($link);\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Create Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5"&gt;Create Record&lt;/h2&gt;\n&lt;p&gt;Please fill this form and submit to add employee record to the database.&lt;/p&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;input type="text" name="name" class="form-control \n\n&lt;?php echo (!empty($name_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $name; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $name_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;textarea name="address" class="form-control \n\n&lt;?php echo (!empty($address_err)) ? \'is-invalid\' : \'\'; ?&gt;"&gt;\n\n&lt;?php echo $address; ?&gt;&lt;/textarea&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $address_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;input type="text" name="salary" class="form-control \n\n&lt;?php echo (!empty($salary_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $salary; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $salary_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;input type="submit" class="btn btn-primary" value="Submit"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;Cancel&lt;/a&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Define variables and initialize with empty values\n$name = $address = $salary = "";\n$name_err = $address_err = $salary_err = "";\n\n// Processing form data when form is submitted\nif($_SERVER["REQUEST_METHOD"] == "POST"){\n// Validate name\n$input_name = trim($_POST["name"]);\nif(empty($input_name)){\n$name_err = "Please enter a name.";\n} elseif(!filter_var($input_name, FILTER_VALIDATE_REGEXP, array("options"=&gt;array("regexp"=&gt;"/^[a-zA-Z\s]+$/")))){\n$name_err = "Please enter a valid name.";\n} else{\n$name = $input_name;\n}\n\n// Validate address\n$input_address = trim($_POST["address"]);\nif(empty($input_address)){\n$address_err = "Please enter an address.";     \n} else{\n$address = $input_address;\n}\n\n// Validate salary\n$input_salary = trim($_POST["salary"]);\nif(empty($input_salary)){\n$salary_err = "Please enter the salary amount.";     \n} elseif(!ctype_digit($input_salary)){\n$salary_err = "Please enter a positive integer value.";\n} else{\n$salary = $input_salary;\n}\n\n// Check input errors before inserting in database\nif(empty($name_err) &amp;&amp; empty($address_err) &amp;&amp; empty($salary_err)){\n// Prepare an insert statement\n$sql = "INSERT INTO employees (name, address, salary) VALUES (?, ?, ?)";\n\nif($stmt = $mysqli-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bind_param("sss", $param_name, $param_address, $param_salary);\n\n// Set parameters\n$param_name = $name;\n$param_address = $address;\n$param_salary = $salary;\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n// Records created successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\n$stmt-&gt;close();\n}\n\n// Close connection\n$mysqli-&gt;close();\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Create Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5"&gt;Create Record&lt;/h2&gt;\n&lt;p&gt;Please fill this form and submit to add employee record to the database.&lt;/p&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;input type="text" name="name" class="form-control \n\n&lt;?php echo (!empty($name_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $name; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $name_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;textarea name="address" class="form-control \n\n&lt;?php echo (!empty($address_err)) ? \'is-invalid\' : \'\'; ?&gt;"&gt;\n\n&lt;?php echo $address; ?&gt;&lt;/textarea&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $address_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;input type="text" name="salary" class="form-control \n\n&lt;?php echo (!empty($salary_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $salary; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $salary_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;input type="submit" class="btn btn-primary" value="Submit"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;Cancel&lt;/a&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Define variables and initialize with empty values\n$name = $address = $salary = "";\n$name_err = $address_err = $salary_err = "";\n\n// Processing form data when form is submitted\nif($_SERVER["REQUEST_METHOD"] == "POST"){\n// Validate name\n$input_name = trim($_POST["name"]);\nif(empty($input_name)){\n$name_err = "Please enter a name.";\n} elseif(!filter_var($input_name, FILTER_VALIDATE_REGEXP, array("options"=&gt;array("regexp"=&gt;"/^[a-zA-Z\s]+$/")))){\n$name_err = "Please enter a valid name.";\n} else{\n$name = $input_name;\n}\n\n// Validate address\n$input_address = trim($_POST["address"]);\nif(empty($input_address)){\n$address_err = "Please enter an address.";     \n} else{\n$address = $input_address;\n}\n\n// Validate salary\n$input_salary = trim($_POST["salary"]);\nif(empty($input_salary)){\n$salary_err = "Please enter the salary amount.";     \n} elseif(!ctype_digit($input_salary)){\n$salary_err = "Please enter a positive integer value.";\n} else{\n$salary = $input_salary;\n}\n\n// Check input errors before inserting in database\nif(empty($name_err) &amp;&amp; empty($address_err) &amp;&amp; empty($salary_err)){\n// Prepare an insert statement\n$sql = "INSERT INTO employees (name, address, salary) VALUES (:name, :address, :salary)";\n\nif($stmt = $pdo-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bindParam(":name", $param_name);\n$stmt-&gt;bindParam(":address", $param_address);\n$stmt-&gt;bindParam(":salary", $param_salary);\n\n// Set parameters\n$param_name = $name;\n$param_address = $address;\n$param_salary = $salary;\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n// Records created successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nunset($stmt);\n}\n\n// Close connection\nunset($pdo);\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Create Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5"&gt;Create Record&lt;/h2&gt;\n&lt;p&gt;Please fill this form and submit to add employee record to the database.&lt;/p&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;input type="text" name="name" class="form-control \n\n&lt;?php echo (!empty($name_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $name; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $name_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;textarea name="address" class="form-control \n\n&lt;?php echo (!empty($address_err)) ? \'is-invalid\' : \'\'; ?&gt;"&gt;\n\n&lt;?php echo $address; ?&gt;&lt;/textarea&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $address_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;input type="text" name="salary" class="form-control \n\n&lt;?php echo (!empty($salary_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $salary; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $salary_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;input type="submit" class="btn btn-primary" value="Submit"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;Cancel&lt;/a&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nThe same "create.php" file will display the HTML form and process the submitted form data. It will also perform basic validation on user inputs (<i>line no-11 to 37</i>) before saving the data.\n<h3 id="PHPMySQLCRUDtopic-4">Creating the Read Page</h3>\nNow it\'s time to build the <b>R</b>ead functionality of our CRUD application.\nLet\'s create a file named "read.php" and put the following code inside it. It will simply retrieve the records from the <i>employees</i> table based the id attribute of the employee.\n\n<h4>Example</h4>\n<a href="https://www.tutorialrepublic.com/examples/bin/download-source.php?PHPMySQLCRUDtopic=php&amp;file=read" target="_top" class="download-btn" title="Download Source Code">Download</a>\n<i title="Maximize"></i>\n\n<r>&lt;?php</r>\n// Check existence of id parameter before processing further\nif(isset($_GET["id"]) &amp;&amp; !empty(trim($_GET["id"]))){\n// Include config file\nrequire_once "config.php";\n\n// Prepare a select statement\n$sql = "SELECT * FROM employees WHERE id = ?";\n\nif($stmt = mysqli_prepare($link, $sql)){\n// Bind variables to the prepared statement as parameters\nmysqli_stmt_bind_param($stmt, "i", $param_id);\n\n// Set parameters\n$param_id = trim($_GET["id"]);\n\n// Attempt to execute the prepared statement\nif(mysqli_stmt_execute($stmt)){\n$result = mysqli_stmt_get_result($stmt);\n\nif(mysqli_num_rows($result) == 1){\n/* Fetch result row as an associative array. Since the result set\ncontains only one row, we don\'t need to use while loop */\n$row = mysqli_fetch_array($result, MYSQLI_ASSOC);\n\n// Retrieve individual field value\n$name = $row["name"];\n$address = $row["address"];\n$salary = $row["salary"];\n} else{\n// URL doesn\'t contain valid id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nmysqli_stmt_close($stmt);\n\n// Close connection\nmysqli_close($link);\n} else{\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;View Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h1 class="mt-5 mb-3"&gt;View Record&lt;/h1&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["name"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["address"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["salary"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;a href="index.php" class="btn btn-primary"&gt;Back&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Check existence of id parameter before processing further\nif(isset($_GET["id"]) &amp;&amp; !empty(trim($_GET["id"]))){\n// Include config file\nrequire_once "config.php";\n\n// Prepare a select statement\n$sql = "SELECT * FROM employees WHERE id = ?";\n\nif($stmt = $mysqli-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bind_param("i", $param_id);\n\n// Set parameters\n$param_id = trim($_GET["id"]);\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n$result = $stmt-&gt;get_result();\n\nif($result-&gt;num_rows == 1){\n/* Fetch result row as an associative array. Since the result set\ncontains only one row, we don\'t need to use while loop */\n$row = $result-&gt;fetch_array(MYSQLI_ASSOC);\n\n// Retrieve individual field value\n$name = $row["name"];\n$address = $row["address"];\n$salary = $row["salary"];\n} else{\n// URL doesn\'t contain valid id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\n$stmt-&gt;close();\n\n// Close connection\n$mysqli-&gt;close();\n} else{\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;View Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h1 class="mt-5 mb-3"&gt;View Record&lt;/h1&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["name"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["address"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["salary"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;a href="index.php" class="btn btn-primary"&gt;Back&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Check existence of id parameter before processing further\nif(isset($_GET["id"]) &amp;&amp; !empty(trim($_GET["id"]))){\n// Include config file\nrequire_once "config.php";\n\n// Prepare a select statement\n$sql = "SELECT * FROM employees WHERE id = :id";\n\nif($stmt = $pdo-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bindParam(":id", $param_id);\n\n// Set parameters\n$param_id = trim($_GET["id"]);\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\nif($stmt-&gt;rowCount() == 1){\n/* Fetch result row as an associative array. Since the result set\ncontains only one row, we don\'t need to use while loop */\n$row = $stmt-&gt;fetch(PDO::FETCH_ASSOC);\n\n// Retrieve individual field value\n$name = $row["name"];\n$address = $row["address"];\n$salary = $row["salary"];\n} else{\n// URL doesn\'t contain valid id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nunset($stmt);\n\n// Close connection\nunset($pdo);\n} else{\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;View Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h1 class="mt-5 mb-3"&gt;View Record&lt;/h1&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["name"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["address"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;p&gt;&lt;b&gt;\n\n&lt;?php echo $row["salary"]; ?&gt;&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;a href="index.php" class="btn btn-primary"&gt;Back&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<h3 id="PHPMySQLCRUDtopic-5">Creating the Update Page</h3>\nSimilarly, we can build the <b>U</b>pdate functionality of our CRUD application.\nLet\'s create a file named "update.php" and put the following code inside it. It will update the existing records in the <i>employees</i> table based the id attribute of the employee.\n\n<h4>Example</h4>\n<a href="https://www.tutorialrepublic.com/examples/bin/download-source.php?PHPMySQLCRUDtopic=php&amp;file=update" target="_top" class="download-btn" title="Download Source Code">Download</a>\n<i title="Maximize"></i>\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Define variables and initialize with empty values\n$name = $address = $salary = "";\n$name_err = $address_err = $salary_err = "";\n\n// Processing form data when form is submitted\nif(isset($_POST["id"]) &amp;&amp; !empty($_POST["id"])){\n// Get hidden input value\n$id = $_POST["id"];\n\n// Validate name\n$input_name = trim($_POST["name"]);\nif(empty($input_name)){\n$name_err = "Please enter a name.";\n} elseif(!filter_var($input_name, FILTER_VALIDATE_REGEXP, array("options"=&gt;array("regexp"=&gt;"/^[a-zA-Z\s]+$/")))){\n$name_err = "Please enter a valid name.";\n} else{\n$name = $input_name;\n}\n\n// Validate address address\n$input_address = trim($_POST["address"]);\nif(empty($input_address)){\n$address_err = "Please enter an address.";     \n} else{\n$address = $input_address;\n}\n\n// Validate salary\n$input_salary = trim($_POST["salary"]);\nif(empty($input_salary)){\n$salary_err = "Please enter the salary amount.";     \n} elseif(!ctype_digit($input_salary)){\n$salary_err = "Please enter a positive integer value.";\n} else{\n$salary = $input_salary;\n}\n\n// Check input errors before inserting in database\nif(empty($name_err) &amp;&amp; empty($address_err) &amp;&amp; empty($salary_err)){\n// Prepare an update statement\n$sql = "UPDATE employees SET name=?, address=?, salary=? WHERE id=?";\n\nif($stmt = mysqli_prepare($link, $sql)){\n// Bind variables to the prepared statement as parameters\nmysqli_stmt_bind_param($stmt, "sssi", $param_name, $param_address, $param_salary, $param_id);\n\n// Set parameters\n$param_name = $name;\n$param_address = $address;\n$param_salary = $salary;\n$param_id = $id;\n\n// Attempt to execute the prepared statement\nif(mysqli_stmt_execute($stmt)){\n// Records updated successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nmysqli_stmt_close($stmt);\n}\n\n// Close connection\nmysqli_close($link);\n} else{\n// Check existence of id parameter before processing further\nif(isset($_GET["id"]) &amp;&amp; !empty(trim($_GET["id"]))){\n// Get URL parameter\n$id =  trim($_GET["id"]);\n\n// Prepare a select statement\n$sql = "SELECT * FROM employees WHERE id = ?";\nif($stmt = mysqli_prepare($link, $sql)){\n// Bind variables to the prepared statement as parameters\nmysqli_stmt_bind_param($stmt, "i", $param_id);\n\n// Set parameters\n$param_id = $id;\n\n// Attempt to execute the prepared statement\nif(mysqli_stmt_execute($stmt)){\n$result = mysqli_stmt_get_result($stmt);\n\nif(mysqli_num_rows($result) == 1){\n/* Fetch result row as an associative array. Since the result set\ncontains only one row, we don\'t need to use while loop */\n$row = mysqli_fetch_array($result, MYSQLI_ASSOC);\n\n// Retrieve individual field value\n$name = $row["name"];\n$address = $row["address"];\n$salary = $row["salary"];\n} else{\n// URL doesn\'t contain valid id. Redirect to error page\nheader("location: error.php");\nexit();\n}\n\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nmysqli_stmt_close($stmt);\n\n// Close connection\nmysqli_close($link);\n}  else{\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Update Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5"&gt;Update Record&lt;/h2&gt;\n&lt;p&gt;Please edit the input values and submit to update the employee record.&lt;/p&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars(basename($_SERVER[\'REQUEST_URI\'])); ?&gt;" method="post"&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;input type="text" name="name" class="form-control \n\n&lt;?php echo (!empty($name_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $name; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $name_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;textarea name="address" class="form-control \n\n&lt;?php echo (!empty($address_err)) ? \'is-invalid\' : \'\'; ?&gt;"&gt;\n\n&lt;?php echo $address; ?&gt;&lt;/textarea&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $address_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;input type="text" name="salary" class="form-control \n\n&lt;?php echo (!empty($salary_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $salary; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $salary_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;input type="hidden" name="id" value="\n\n&lt;?php echo $id; ?&gt;"/&gt;\n&lt;input type="submit" class="btn btn-primary" value="Submit"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;Cancel&lt;/a&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Define variables and initialize with empty values\n$name = $address = $salary = "";\n$name_err = $address_err = $salary_err = "";\n\n// Processing form data when form is submitted\nif(isset($_POST["id"]) &amp;&amp; !empty($_POST["id"])){\n// Get hidden input value\n$id = $_POST["id"];\n\n// Validate name\n$input_name = trim($_POST["name"]);\nif(empty($input_name)){\n$name_err = "Please enter a name.";\n} elseif(!filter_var($input_name, FILTER_VALIDATE_REGEXP, array("options"=&gt;array("regexp"=&gt;"/^[a-zA-Z\s]+$/")))){\n$name_err = "Please enter a valid name.";\n} else{\n$name = $input_name;\n}\n\n// Validate address address\n$input_address = trim($_POST["address"]);\nif(empty($input_address)){\n$address_err = "Please enter an address.";     \n} else{\n$address = $input_address;\n}\n\n// Validate salary\n$input_salary = trim($_POST["salary"]);\nif(empty($input_salary)){\n$salary_err = "Please enter the salary amount.";     \n} elseif(!ctype_digit($input_salary)){\n$salary_err = "Please enter a positive integer value.";\n} else{\n$salary = $input_salary;\n}\n\n// Check input errors before inserting in database\nif(empty($name_err) &amp;&amp; empty($address_err) &amp;&amp; empty($salary_err)){\n// Prepare an update statement\n$sql = "UPDATE employees SET name=?, address=?, salary=? WHERE id=?";\n\nif($stmt = $mysqli-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bind_param("sssi", $param_name, $param_address, $param_salary, $param_id);\n\n// Set parameters\n$param_name = $name;\n$param_address = $address;\n$param_salary = $salary;\n$param_id = $id;\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n// Records updated successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\n$stmt-&gt;close();\n}\n\n// Close connection\n$mysqli-&gt;close();\n} else{\n// Check existence of id parameter before processing further\nif(isset($_GET["id"]) &amp;&amp; !empty(trim($_GET["id"]))){\n// Get URL parameter\n$id =  trim($_GET["id"]);\n\n// Prepare a select statement\n$sql = "SELECT * FROM employees WHERE id = ?";\nif($stmt = $mysqli-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bind_param("i", $param_id);\n\n// Set parameters\n$param_id = $id;\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n$result = $stmt-&gt;get_result();\n\nif($result-&gt;num_rows == 1){\n/* Fetch result row as an associative array. Since the result set\ncontains only one row, we don\'t need to use while loop */\n$row = $result-&gt;fetch_array(MYSQLI_ASSOC);\n\n// Retrieve individual field value\n$name = $row["name"];\n$address = $row["address"];\n$salary = $row["salary"];\n} else{\n// URL doesn\'t contain valid id. Redirect to error page\nheader("location: error.php");\nexit();\n}\n\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\n$stmt-&gt;close();\n\n// Close connection\n$mysqli-&gt;close();\n}  else{\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Update Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5"&gt;Update Record&lt;/h2&gt;\n&lt;p&gt;Please edit the input values and submit to update the employee record.&lt;/p&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars(basename($_SERVER[\'REQUEST_URI\'])); ?&gt;" method="post"&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;input type="text" name="name" class="form-control \n\n&lt;?php echo (!empty($name_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $name; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $name_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;textarea name="address" class="form-control \n\n&lt;?php echo (!empty($address_err)) ? \'is-invalid\' : \'\'; ?&gt;"&gt;\n\n&lt;?php echo $address; ?&gt;&lt;/textarea&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $address_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;input type="text" name="salary" class="form-control \n\n&lt;?php echo (!empty($salary_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $salary; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $salary_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;input type="hidden" name="id" value="\n\n&lt;?php echo $id; ?&gt;"/&gt;\n&lt;input type="submit" class="btn btn-primary" value="Submit"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;Cancel&lt;/a&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Include config file\nrequire_once "config.php";\n\n// Define variables and initialize with empty values\n$name = $address = $salary = "";\n$name_err = $address_err = $salary_err = "";\n\n// Processing form data when form is submitted\nif(isset($_POST["id"]) &amp;&amp; !empty($_POST["id"])){\n// Get hidden input value\n$id = $_POST["id"];\n\n// Validate name\n$input_name = trim($_POST["name"]);\nif(empty($input_name)){\n$name_err = "Please enter a name.";\n} elseif(!filter_var($input_name, FILTER_VALIDATE_REGEXP, array("options"=&gt;array("regexp"=&gt;"/^[a-zA-Z\s]+$/")))){\n$name_err = "Please enter a valid name.";\n} else{\n$name = $input_name;\n}\n\n// Validate address address\n$input_address = trim($_POST["address"]);\nif(empty($input_address)){\n$address_err = "Please enter an address.";     \n} else{\n$address = $input_address;\n}\n\n// Validate salary\n$input_salary = trim($_POST["salary"]);\nif(empty($input_salary)){\n$salary_err = "Please enter the salary amount.";     \n} elseif(!ctype_digit($input_salary)){\n$salary_err = "Please enter a positive integer value.";\n} else{\n$salary = $input_salary;\n}\n\n// Check input errors before inserting in database\nif(empty($name_err) &amp;&amp; empty($address_err) &amp;&amp; empty($salary_err)){\n// Prepare an update statement\n$sql = "UPDATE employees SET name=:name, address=:address, salary=:salary WHERE id=:id";\n\nif($stmt = $pdo-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bindParam(":name", $param_name);\n$stmt-&gt;bindParam(":address", $param_address);\n$stmt-&gt;bindParam(":salary", $param_salary);\n$stmt-&gt;bindParam(":id", $param_id);\n\n// Set parameters\n$param_name = $name;\n$param_address = $address;\n$param_salary = $salary;\n$param_id = $id;\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n// Records updated successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nunset($stmt);\n}\n\n// Close connection\nunset($pdo);\n} else{\n// Check existence of id parameter before processing further\nif(isset($_GET["id"]) &amp;&amp; !empty(trim($_GET["id"]))){\n// Get URL parameter\n$id =  trim($_GET["id"]);\n\n// Prepare a select statement\n$sql = "SELECT * FROM employees WHERE id = :id";\nif($stmt = $pdo-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bindParam(":id", $param_id);\n\n// Set parameters\n$param_id = $id;\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\nif($stmt-&gt;rowCount() == 1){\n/* Fetch result row as an associative array. Since the result set\ncontains only one row, we don\'t need to use while loop */\n$row = $stmt-&gt;fetch(PDO::FETCH_ASSOC);\n\n// Retrieve individual field value\n$name = $row["name"];\n$address = $row["address"];\n$salary = $row["salary"];\n} else{\n// URL doesn\'t contain valid id. Redirect to error page\nheader("location: error.php");\nexit();\n}\n\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nunset($stmt);\n\n// Close connection\nunset($pdo);\n}  else{\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Update Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5"&gt;Update Record&lt;/h2&gt;\n&lt;p&gt;Please edit the input values and submit to update the employee record.&lt;/p&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars(basename($_SERVER[\'REQUEST_URI\'])); ?&gt;" method="post"&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Name&lt;/label&gt;\n&lt;input type="text" name="name" class="form-control \n\n&lt;?php echo (!empty($name_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $name; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $name_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Address&lt;/label&gt;\n&lt;textarea name="address" class="form-control \n\n&lt;?php echo (!empty($address_err)) ? \'is-invalid\' : \'\'; ?&gt;"&gt;\n\n&lt;?php echo $address; ?&gt;&lt;/textarea&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $address_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class="form-group"&gt;\n&lt;label&gt;Salary&lt;/label&gt;\n&lt;input type="text" name="salary" class="form-control \n\n&lt;?php echo (!empty($salary_err)) ? \'is-invalid\' : \'\'; ?&gt;" value="\n\n&lt;?php echo $salary; ?&gt;"&gt;\n&lt;span class="invalid-feedback"&gt;\n\n&lt;?php echo $salary_err;?&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;input type="hidden" name="id" value="\n\n&lt;?php echo $id; ?&gt;"/&gt;\n&lt;input type="submit" class="btn btn-primary" value="Submit"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;Cancel&lt;/a&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<h3 id="PHPMySQLCRUDtopic-6">Creating the Delete Page</h3>\nFinally, we will build the <b>D</b>elete functionality of our CRUD application.\nLet\'s create a file named "delete.php" and put the following code inside it. It will delete the existing records from the <i>employees</i> table based the id attribute of the employee.\n\n<h4>Example</h4>\n<a href="https://www.tutorialrepublic.com/examples/bin/download-source.php?PHPMySQLCRUDtopic=php&amp;file=delete" target="_top" class="download-btn" title="Download Source Code">Download</a>\n<i title="Maximize"></i>\n\n<r>&lt;?php</r>\n// Process delete operation after confirmation\nif(isset($_POST["id"]) &amp;&amp; !empty($_POST["id"])){\n// Include config file\nrequire_once "config.php";\n\n// Prepare a delete statement\n$sql = "DELETE FROM employees WHERE id = ?";\n\nif($stmt = mysqli_prepare($link, $sql)){\n// Bind variables to the prepared statement as parameters\nmysqli_stmt_bind_param($stmt, "i", $param_id);\n\n// Set parameters\n$param_id = trim($_POST["id"]);\n\n// Attempt to execute the prepared statement\nif(mysqli_stmt_execute($stmt)){\n// Records deleted successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nmysqli_stmt_close($stmt);\n\n// Close connection\nmysqli_close($link);\n} else{\n// Check existence of id parameter\nif(empty(trim($_GET["id"]))){\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Delete Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5 mb-3"&gt;Delete Record&lt;/h2&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;\n&lt;div class="alert alert-danger"&gt;\n&lt;input type="hidden" name="id" value="\n\n&lt;?php echo trim($_GET["id"]); ?&gt;"/&gt;\n&lt;p&gt;Are you sure you want to delete this employee record?&lt;/p&gt;\n&lt;p&gt;\n&lt;input type="submit" value="Yes" class="btn btn-danger"&gt;\n&lt;a href="index.php" class="btn btn-secondary"&gt;No&lt;/a&gt;\n&lt;/p&gt;\n&lt;/div&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Process delete operation after confirmation\nif(isset($_POST["id"]) &amp;&amp; !empty($_POST["id"])){\n// Include config file\nrequire_once "config.php";\n\n// Prepare a delete statement\n$sql = "DELETE FROM employees WHERE id = ?";\n\nif($stmt = $mysqli-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bind_param("i", $param_id);\n\n// Set parameters\n$param_id = trim($_POST["id"]);\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n// Records deleted successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\n$stmt-&gt;close();\n\n// Close connection\n$mysqli-&gt;close();\n} else{\n// Check existence of id parameter\nif(empty(trim($_GET["id"]))){\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Delete Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5 mb-3"&gt;Delete Record&lt;/h2&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;\n&lt;div class="alert alert-danger"&gt;\n&lt;input type="hidden" name="id" value="\n\n&lt;?php echo trim($_GET["id"]); ?&gt;"/&gt;\n&lt;p&gt;Are you sure you want to delete this employee record?&lt;/p&gt;\n&lt;p&gt;\n&lt;input type="submit" value="Yes" class="btn btn-danger"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;No&lt;/a&gt;\n&lt;/p&gt;\n&lt;/div&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<r>&lt;?php</r>\n// Process delete operation after confirmation\nif(isset($_POST["id"]) &amp;&amp; !empty($_POST["id"])){\n// Include config file\nrequire_once "config.php";\n\n// Prepare a delete statement\n$sql = "DELETE FROM employees WHERE id = :id";\n\nif($stmt = $pdo-&gt;prepare($sql)){\n// Bind variables to the prepared statement as parameters\n$stmt-&gt;bindParam(":id", $param_id);\n\n// Set parameters\n$param_id = trim($_POST["id"]);\n\n// Attempt to execute the prepared statement\nif($stmt-&gt;execute()){\n// Records deleted successfully. Redirect to landing page\nheader("location: index.php");\nexit();\n} else{\necho "Oops! Something went wrong. Please try again later.";\n}\n}\n\n// Close statement\nunset($stmt);\n\n// Close connection\nunset($pdo);\n} else{\n// Check existence of id parameter\nif(empty(trim($_GET["id"]))){\n// URL doesn\'t contain id parameter. Redirect to error page\nheader("location: error.php");\nexit();\n}\n}\n?&gt;\n\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Delete Record&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5 mb-3"&gt;Delete Record&lt;/h2&gt;\n&lt;form action="\n\n&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;\n&lt;div class="alert alert-danger"&gt;\n&lt;input type="hidden" name="id" value="\n\n&lt;?php echo trim($_GET["id"]); ?&gt;"/&gt;\n&lt;p&gt;Are you sure you want to delete this employee record?&lt;/p&gt;\n&lt;p&gt;\n&lt;input type="submit" value="Yes" class="btn btn-danger"&gt;\n&lt;a href="index.php" class="btn btn-secondary ml-2"&gt;No&lt;/a&gt;\n&lt;/p&gt;\n&lt;/div&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n<hr>\n<h3 id="PHPMySQLCRUDtopic-7">Creating the Error Page</h3>\nAt the end, let\'s create one more file "error.php". This page will be displayed if request is invalid i.e. if id parameter is missing from the URL query string or it is not valid.\n<h4>Example</h4><a href="https://www.tutorialrepublic.com/examples/bin/download-source.php?PHPMySQLCRUDtopic=php&amp;file=error" target="_top" class="download-btn" title="Download Source Code">Download</a><i title="Maximize"></i>\n\n<r>---</r>\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;meta charset="UTF-8"&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&gt;\n&lt;style&gt;\n.wrapper{\nwidth: 600px;\nmargin: 0 auto;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class="wrapper"&gt;\n&lt;div class="container-fluid"&gt;\n&lt;div class="row"&gt;\n&lt;div class="col-md-12"&gt;\n&lt;h2 class="mt-5 mb-3"&gt;Invalid Request&lt;/h2&gt;\n&lt;div class="alert alert-danger"&gt;Sorry, you\'ve made an invalid request. Please &lt;a href="index.php" class="alert-link"&gt;go back&lt;/a&gt; and try again.&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;        \n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n',
'<h2>PHP mysqli fetch_array()</h2>\nThe fetch_array() / mysqli_fetch_array() function fetches a result row as an associative array, a numeric array, or both.\n\nExample - Object Oriented style\nFetch a result row as a numeric array and as an associative array:\n\n<r>&lt;?php</r>\n  $mysqli = new mysqli("localhost","my_user","my_password","my_db");\n  \n  if ($mysqli -> connect_errno) {\n    echo "Failed to connect to MySQL: " . $mysqli -> connect_error;\n    exit();\n  }\n  \n  $sql = "SELECT Lastname, Age FROM Persons ORDER BY Lastname";\n  $result = $mysqli -> query($sql);\n  \n  // Numeric array\n  $row = $result -> fetch_array(MYSQLI_NUM);\n  printf ("%s (%s)\n", $row[0], $row[1]);\n  \n  // Associative array\n  $row = $result -> fetch_array(MYSQLI_ASSOC);\n  printf ("%s (%s)\n", $row["Lastname"], $row["Age"]);\n  \n  // Free result set\n  $result -> free_result();\n  \n  $mysqli -> close();\n?>\n\n',
'<h2>check character sets available in MySQL</h2>\nmysql> \nSELECT CHARACTER_SET_NAME, DESCRIPTION\nFROM INFORMATION_SCHEMA.CHARACTER_SETS\nWHERE DESCRIPTION LIKE \'%Chin%\'\nOR DESCRIPTION LIKE \'%Japanese%\'\nOR DESCRIPTION LIKE \'%Korean%\'\nORDER BY CHARACTER_SET_NAME;\n\n',
'<h2>Syntax error due to using a reserved or chinese word</h2>\nYou need to escape reserved words with backticks\nCREATE TABLE `order` ( ...\n\n',
'<h2>print an array</h2>\nTo print properly an array, you either loop through it and echo each element,\nor you can use print_r.\n\n    print_r($rows);\n    echo json_encode($rows);\n$langs = array("PHP", "JavaScript", "Python", "C++", "Ruby"); \n$newLangs = implode(", ", $langs);\necho $newLangs;\n',
'<a href="https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_var_print_r" class="whitebut " target="_blank">w3 test php</a>',
]
