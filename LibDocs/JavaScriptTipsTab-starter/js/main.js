// List of JavaScript tips
var JavaScriptTips = [
'onkeydown Event :<br><br>The user pushes a keyboard key<br>&lt;input type="text" onkeydown="myFunction()"><br>&lt;p id="demo">&lt;/p><br>function myFunction() {<br>  document.getElementById("demo").innerHTML = "You pressed a key";<br>}',
'onload Event :<br><br>The browser has finished loading the page<br>&lt;body onload="myFunction()">',
'difference between slice() and substring() :<br><br>substring() cannot accept negative indexes<br>Syntax: string.slice(start, stop);<br>Syntax: string.substring(start, stop);<br><br>Distinctions of substring():<br>If start > stop, then substring will swap those 2 arguments.<br>If either argument is negative or is NaN, it is treated as if it were 0.<br><br>Distinctions of slice():<br>If start > stop, slice() will return the empty string. ("")<br>If start is negative: sets char from the end of string<br>',
'Keywords: continue :<br><br>Jumps out of a loop and starts at the top<br>let text = "";<br><br>for (let i = 0; i < 5; i++) {<br>  if (i === 3) continue;<br>  text += i + "<br>";<br>} // 0 1 2 4<br>',
'Keywords: try ... catch :<br><br>Implements error handling to a block of statements<br>The try statement allows you to define a block of code to be tested for errors.<br>The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.<br>The finally statement lets you execute code, after try and catch, regardless of the result.<br><br>try {<br>  adddlert("Welcome guest!");<br>}<br>catch(err) {<br>  document.getElementById("demo").innerHTML = err.message;<br>}<br>finally {<br>  document.getElementById("demo").value = "";<br>}<br><br>try {<br>  eval("alert(\'Hello)");   // Missing \' will produce an error<br>}<br>catch(err) {<br>  document.getElementById("demo").innerHTML = err.name;<br>}<br>',
':input, eg. $(\":input\") :<br><br>selects All input elements<br>&lt;input type="button" value="Another useless button">&lt;br><br>&lt;input type="reset" value="Reset"><br>&lt;input type="submit" value="Submit">&lt;br><br><br>22 input types:<br>"button","checkbox","color","date","datetime-local","email","file","hidden","image","month","number","password","radio","range","reset","search","submit","tel","text","time","url","week"',
'event.which :<br><br>Returns which keyboard key or mouse button was pressed for the event<br>$("input").keydown(function(event){<br>  $("div").html("Key: " + event.which); // 32 for space, 50 for @<br>});<br>',
'prependTo() :<br><br>Inserts HTML elements at the beginning of selected elements<br>$("<span>Hello World!</span>").prependTo("p");',
'map() :<br><br>Passes each element in the matched set through a function, producing a new jQuery object containing the return values<br>Examples<br>const numbers = [4, 9, 16, 25];<br>const newArr = numbers.map(Math.sqrt)<br><br>const numbers = [65, 44, 12, 4];<br>const newArr = numbers.map(myFunction)<br>function myFunction(num) { return num * 10; }<br><br>const persons = [<br>  {firstname : "Malcom", lastname: "Reynolds"},<br>  {firstname : "Kaylee", lastname: "Frye"},<br>  {firstname : "Jayne", lastname: "Cobb"}<br>];<br>persons.map(getFullName);<br>function getFullName(item) { return [item.firstname,item.lastname].join(" "); }',
'$.post() :<br><br>Loads data from a server using an AJAX HTTP POST request<br>$("input").keyup(function(){<br>  var txt = $("input").val();<br>  $.post("demo_ajax_gethint.asp", {suggest: txt}, function(result){<br>    $("span").html(result);<br>  });<br>});<br><br>$("button").click(function(){<br>  $.post("demo_test.asp", function(data, status){<br>    alert("Data: " + data + "<br>Status: " + status);<br>  });<br>});<br>',
'serialize() :<br><br>Encodes a set of form elements as a string for submission<br>$("button").click(function(){<br>  $("div").text($("form").serialize());<br>});<br><br>$.ajax({<br>    type : "POST",<br>    url : "url",<br>    data : $("#form").serialize() + "&par1=1&par2=2&par3=232"<br>}<br>',
'JavaScript Class:<br><br><pre>Use the keyword <i>class</i> to create a class.<br>Always add a method named <i>constructor()</i> to define properties.<br>A JavaScript class is <b>not</b> an object.<br>It is a <b>template</b> for JavaScript objects.<br><br>class Car {<br>   constructor(name, year) {<br>    this.name = name;<br>    this.year = year;<br>  }<br>}<br><br>When you have a class, you can use the class to create objects:<br>let myCar1 = new Car("Ford", 2014);<br>let myCar2 = new Car("Audi", 2019);<br><h3>Class Methods</h3><br><br>Use the keyword <i>class</i> to create a class.<br>Always add a <i>constructor()</i> method.<br>Then add any number of methods.<br><br>class ClassName {<br>  constructor() { ... }<br>  method_1() { ... }<br>  method_2() { ... }<br>  method_3() { ... }<br>}<br><br>class Car {<br>   constructor(name, year) {<br>    this.name = name;<br>    this.year = year;<br>   }<br>  age() {<br>    let date = new Date();<br>    return date.getFullYear() - this.year;<br>   }<br>}<br><br>let myCar = new Car("Ford", 2014);<br>document.getElementById("demo").innerHTML =<br>"My car is " + myCar.age() + " years old.";</pre>',
'<h2>JavaScript Global Methods and Properties</h2><table><br><tr><th>Name</th><th>Description</th></tr><br><tr><td><a href="jsref_decodeuri.asp">decodeURI()</a></td><td>Decodes a URI</td></tr><br><tr><td><a href="jsref_decodeuricomponent.asp">decodeURI<br>Component()</a></td><td>Decodes a URI component</td></tr><br><tr><td><a href="jsref_encodeuri.asp">encodeURI()</a></td><td>Encodes a URI</td></tr><br><tr><td><a href="jsref_encodeuricomponent.asp">encodeURI<br>Component()</a></td><td>Encodes a URI component</td></tr><br><tr><td><a href="jsref_eval.asp">eval()</a></td><td>Evaluates a string and executes it as if it was script code</td></tr><br><tr><td><a href="jsref_infinity.asp">Infinity</a></td><td>A numeric value that represents positive/negative infinity</td></tr><br><tr><td><a href="jsref_isfinite.asp">isFinite()</a></td><td>Determines whether a value is a finite, legal number</td></tr><br><tr><td><a href="jsref_isnan.asp">isNaN()</a></td><td>Determines whether a value is an illegal number</td></tr><br><tr><td><a href="jsref_nan.asp">NaN</a></td><td>&quot;Not-a-Number&quot; value</td></tr><br><tr><td><a href="jsref_number.asp">Number()</a></td><td>Converts an object\'s value to a number</td></tr><br><tr><td><a href="jsref_parsefloat.asp">parseFloat()</a></td><td>Parses a string and returns a floating point number</td></tr><br><tr><td><a href="jsref_parseint.asp">parseInt()</a></td><td>Parses a string and returns an integer</td></tr><br><tr><td><a href="jsref_string.asp">String()</a></td><td>Converts an object\'s value to a string</td></tr><br><tr><td><a href="jsref_undefined.asp">undefined</a></td><td>Indicates that a variable has not been assigned a value</td></tr><br><tr><td><a href="jsref_unescape.asp">unescape()</a></td><td><span class="deprecated">Deprecated</span>. Use instead:<br><a href="jsref_decodeuri.asp">decodeURI()</a><br><a href="jsref_decodeuricomponent.asp">decodeURIComponent()</a></td></tr><br></table><br></div><br><h3>Note</h3><br>Since these methods are global, and global the object is the browser window, these methods are actually window methods:<br>isNaN() is the same as window.isNaN().',
'Don\'t forget the var keyword when assigning a variable\'s value for the first time.<br>When to Use JavaScript var?<br>Always declare JavaScript variables with var, let, or const.<br>If you want your code to run in older browsers, you must use var.',
'undefined, null, 0, false, NaN, and \'\' (empty string) are all falsy.',
'Declare a function with<br/> function <em>myFunctionName</em>() { <br>&nbsp;&nbsp;...<br> }',
'if/else statements look like <br/> if (<em>condition</em>) { <br/>&nbsp;&nbsp;...<br/>} else { <br/>&nbsp;&nbsp;...<br/>}',
'You can return the result of a function into a variable with return:<br><br>function timesFive(inputNumber) {<br> &nbsp;&nbsp;return inputNumber * 5; <br>}<br>console.log(timesFive(6));<br>// Output: 30 ',
'The && operator means both things must be true: <br/>true && true = true<br>true && false = false<br>false && false = false',
'The || operator means either can be true: <br/>true || true = true<br>true || false = true<br>false || false = false',
'A <k>for</k> has three condtions: a start condition, a stop condition, and an iterator: <br><br>for (var i = 0; i < myArray.length; i++) { <br>&nbsp;&nbsp;...<br>}',
'To interpolate a variable into a string, use the + operator, like this: <br><br>var myName = \'Jon\';<br/> \'Hello, my name is \' + myName;',
'To generate a random number, use JavaScript\'s built in function Math.random().',
'Arrays hold lists of data. You can access any of the list items by using bracket notation, like this: <br><br>var myArray = [\'pears\', \'asparagus\', \'bananas\'];<br>myArray[1]; // asparagus',
'jQuery selectors start with the dollar sign and parentheses :<br><br>$()',
'jQuery element selector selects element name :<br><br>$(\'p\'), $(\'div\'), $(\'p\').hide();',
'jQuery #id selector selects the id tag :<br><br>$(\'#test\'),  $(\'#test\').hide();',
'jQuery class selector finds a specific class \'test\' to hide it :<br><br>$(\'.test\').hide();',
'Selects all elements :<br><br>$(\'*\')',
'Selects the current HTML element :<br><br>$(this)',
'Selects all &lt;p&gt; elements with class=\'intro\' :<br><br>$(\'p.intro\')',
'Selects the first &lt;p&gt; element :<br><br>$(\'p:first\')',
'Selects the first &lt;li&gt; element of the first &lt;ul&gt; :<br><br>$(\'ul li:first\')',
'Selects the first &lt;li&gt; element of every &lt;ul&gt; :<br><br>$(\'ul li:first-child\')',
'Selects all elements with an href attribute :<br><br>$(\'[href]\')',
'Selects all &lt;a&gt; elements \"_blank\" :<br><br>$(\'a[target=\'_blank\']\')',
'Selects all &lt;a&gt; elements NOT \"_blank\" :<br><br>$(\'a[target!=\'_blank\']\')',
'Selects all &lt;button&gt; elements and &lt;input&gt; elements of type=\'button\' :<br><br>$(\':button\')',
'Selects all even &lt;tr&gt; elements :<br><br>$(\'tr:even\')',
'Selects all odd &lt;tr&gt; elements in a table :<br><br>$(\'tr:odd\')',
'display data by writing into an HTML element :<br><br>document.getElementById(\"demo\").innerHTML = 5 + 6;',
'display data by writing into the HTML output :<br><br>document.write(5 + 6); will delete all existing HTML',
'display data by writing into an alert box :<br><br>window.alert(5 + 6);',
'display data by writing into the browser console :<br><br>console.log(5 + 6);',
'Javascript Object :<br><br>var car = {type:\"Fiat\', model:\"500\', color:\"white\"};',
'Object Properties :<br><br>The name:values pairs',
'Object Methods :<br><br>Methods are properties stored as function<br>const person = {<br>  firstName: "John\',<br>  lastName: "Doe\',<br>  fullName: function() {<br>    return this.firstName + " " + this.lastName;<br>  }<br>};',
'Object Spaces and line breaks are not important :<br><br>Object definition can span multiple lines',
'Accessing Object Properties :<br><br>objectName.propertyName, or objectName[\"propertyName\"]',
'Accessing Object Methods :<br><br>objectName.methodName(), with ()',
'Local variables have local scope :<br><br>Local scope can only be accessed within the function.',
'Global variable has global scope :<br><br>All scripts and functions on a web page can access global variable',
'Assigning value to a not declared variable :<br><br>Automatically become a GLOBAL variable.',
'onchange Event :<br><br>An HTML element has been changed',
'convert number to string<br><br>num.toString()',
'onclick Event :<br><br>The user clicks an HTML element',
'onmouseover Event :<br><br>The user moves the mouse over an HTML element',
'onmouseout Event :<br><br>The user moves the mouse away from an HTML element',
'String Length Methods :<br><br>var sln = txt.length;',
'String indexOf() method:first occurrence of a specified text :<br><br>var pos = str.indexOf(\"locate\");',
'String lastIndexOf() method:last occurrence of a specified text :<br><br>var pos = str.lastIndexOf(\"locate\");',
'String lastIndexOf() method: accept a second parameter as starting position for the search :<br><br>var pos = str.indexOf(\"locate\',15);',
'String search() method: searches a string :<br><br>str=\"String search() method: searches a string :\"<br><br>pos = str.search(\"method\");',
'String slice() method: extracts a part of a string :<br><br>var res = str.slice(7, 13);',
'String slice() method: negative parameter, counted from the end :<br><br>var res = str.slice(-12, -6);',
'String slice() method: omit the second parameter, slice out the rest :<br><br>var res = str.slice(7);',
'String slice() method: counting from the end :<br><br>var res = str.slice(7);',
'difference between slice() and substr() :<br><br>second parameter specifies the length of the extracted part<br>String.slice( begin, end )<br>String.substr( start, length )<br>',
'replace() method replaces value :<br><br>var n = str.replace(\"Microsoft\', \"W3Schools\");',
'regular expression to replace all matches, with a /g flag :<br><br>var n = str.replace(/Microsoft/g, \"W3Schools\");',
'replace() is case sensitive, To replace case insensitive use /i flag :<br><br>var n = str.replace(/MICROSOFT/i, \"W3Schools\");',
'toUpperCase(): convert to upper case :<br><br>var text2 = text1.toUpperCase();',
'toLowerCase(): convert to lower case :<br><br>var text2 = text1.toLowerCase();',
'charAt() method returns the character at a specified position :<br><br>str.charAt(0);<br>let text = \'HELLO WORLD\';<br>let letter = text.charAt(1); // E',
'charCodeAt() method returns the unicode of the character at a specified index :<br><br>str.charCodeAt(0);',
'split() method convert string to an array :<br><br>txt.split(","); // Split on commas',
'to end each executable statement :<br><br>Add a semicolon',
'add white space to script to make it more readable :<br><br>JavaScript ignores multiple spaces',
'group javaScript statements in code blocks :<br><br>inside curly brackets {...}',
'Keywords: break :<br><br>Terminates a switch or a loop',
'Keywords: debugger :<br><br>Stops the execution and calls the debugging function',
'Keywords: do ... while :<br><br>Executes a block of statements, and repeats while a condition is true',
'Keywords: for :<br><br>Marks block of statements to be executed as long as condition is true',
'Keywords: function :<br><br>Declares a function',
'Keywords: if ... else :<br><br>Marks a block of statements to be executed, depending on condition<br>switch(expression) {<br>  case x:<br>    // code block<br>    break;<br>  case y:<br>    // code block<br>    break;<br>  default:<br>    // code block<br>}<br>let day;<br>switch (new Date().getDay()) {<br>  case 0:<br>    day = "Sunday";<br>    break;<br>  case 1:<br>    day = "Monday";<br>    break;<br>  case 2:<br>    day = "Tuesday";<br>    break;<br>  case 3:<br>    day = "Wednesday";<br>    break;<br>  case 4:<br>    day = "Thursday";<br>    break;<br>  case 5:<br>    day = "Friday";<br>    break;<br>  case  6:<br>    day = "Saturday";<br>}<br>',
'Keywords: return :<br><br>Exits a function',
'Keywords: switch :<br><br>Marks a block of statements to be executed, depending on different cases',
'Keywords: var :<br><br>Declares a variable',
'<h3>convert a string to a number</h3><br>using the unary plus operator (+)<br>quantity = "12";<br>+quantity<br><br>convert array of string to a number<br>var arr = ["1", "2", "3"];<br>var nums = arr.map(unaryOp);<br><br>// Function that converts string to number<br>function unaryOp(value) { return +value; }<br>',
'modular operator (%) :<br><br>returns the division remainder. var z = x % y',
'increment operator (++) :<br><br>increments numbers. x++;',
'Exponentiation ** :<br><br>10 ** 2',
'Shift left &lt;&lt; :<br><br>x &lt;&lt; 2<br>The left shift(<<) is a binary operator that takes two numbers,<br>left shifts the bits of the first operand,<br>and the second operand decides number of places to shift.<br><br>Left-shifting is equivalent to multiplying (2 raised to power b)<br><br>',
'Shift right (unsigned) &gt;&gt;&gt; :<br><br>x &gt;&gt;&gt; 2',
'Equal comparator :<br><br>x == y',
'Strict equal :<br><br>x === y<br>equal value and type<br>	5 === "5"	false',
'Logical and :<br><br>&&',
'Logical or :<br><br>||',
'<h3>jQuery get the image src</h3>$(".class").find("tag").attr("src");',
'Math.PI; :<br><br>returns 3.141592653589793',
'Math.round() :<br><br>Math.round(4.4); returns the value of x rounded to its nearest integer:',
'Math.pow() :<br><br>Math.pow(8, 2); returns the value of x to the power of y:',
'Math.sqrt() :<br><br>Math.sqrt(64);',
'Math.abs() :<br><br>Math.abs(-4.7);',
'Math.ceil() :<br><br>Math.ceil(4.4);',
'Math.floor() :<br><br>Math.floor(4.7);',
'Math.sin() :<br><br>Math.sin(90 * Math.PI / 180);',
'Math.min() :<br><br>Math.min(0, 150, 30, 20, -8, -200);',
'Math.random() :<br><br>Math.random();',
'Math.E :<br><br>returns Euler\'s number',
'Math.SQRT2 :<br><br>returns the square root of 2',
'Math.SQRT1_2 :<br><br>returns the square root of 1/2',
'Math.LN2 :<br><br>returns the natural logarithm of 2',
'Math.LN10 :<br><br>returns the natural logarithm of 10',
'Math.LOG2E :<br><br>returns base 2 logarithm of E',
'Math.LOG10E :<br><br>returns base 10 logarithm of E',
'<k>find unique items in array</k><br>myArray = ["a", 1, "a", 2, "1"];<br>uniqueItems = [...new Set(myArray)]<br>["a", 1, 2, "1"]<br>',
'abs(x) :<br><br>Returns the absolute value of x',
'acos(x) :<br><br>Returns the arccosine of x, in radians',
'asin(x) :<br><br>Returns the arcsine of x, in radians',
'atan(x) :<br><br>Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians',
'atan2(y, x) :<br><br>Returns the arctangent of the quotient of its arguments',
'ceil(x) :<br><br>Returns the value of x rounded up to its nearest integer',
'cos(x) :<br><br>Returns the cosine of x (x is in radians)',
'exp(x) :<br><br>Returns the value of Ex',
'floor(x) :<br><br>Returns the value of x rounded down to its nearest integer',
'log(x) :<br><br>Returns the natural logarithm (base E) of x',
'max(x, y, z, ..., n) :<br><br>Returns the number with the highest value',
'min(x, y, z, ..., n) :<br><br>Returns the number with the lowest value',
'pow(x, y) :<br><br>Returns the value of x to the power of y',
'random() :<br><br>Returns a random number between 0 and 1',
'round(x) :<br><br>Returns the value of x rounded to its nearest integer',
'sin(x) :<br><br>Returns the sine of x (x is in radians)',
'sqrt(x) :<br><br>Returns the square root of x',
'tan(x) :<br><br>Returns the tangent of an angle',
'Math.random() :<br><br>returns a random number between 0 (inclusive),  and 1 (exclusive) Math.random();',
'Random Integers :<br><br>Math.floor(Math.random() * 10);',
'Displaying Dates :<br><br>document.getElementById(\"demo\").innerHTML = Date();',
'Creating Date Objects :<br><br>new Date(dateString), Date(milliseconds)',
'date object from the specified date and time :<br><br>var d = new Date(\"October 13, 2014 11:13:00\");',
'HTML onclick event :<br><br>In HTML: &lt;element onclick=\"myScript\"&gt;',
'JavaScript onclick function :<br><br>In JavaScript: object.onclick = function(){myScript};',
'JavaScript onclick using the addEventListener() method :<br><br>object.addEventListener(\"click\', myScript);',
'JavaScript onclick object example :<br><br>document.getElementById(\"demo\").onclick = function() {myFunction()};',
'HTML set object content :<br><br>document.getElementById(\"demo\").innerHTML = \"Changed!\";',
'JavaScript prompt for input :<br><br>var person = prompt(\"Please enter your name\', \"Harry Potter\");',
'JavaScript Display an alert box :<br><br>alert(\"Hello! I am an alert box!!\");',
'HTML DOM writeln() Method :<br><br>document.writeln(\'Hello there!\');',
'HTML DOM writeln with attributes :<br><br>document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\');',
'HTML opening a new window :<br><br>&lt;a href=\"link.html\" target=\"_blank\"&gt;Click Here&lt;/a&gt;',
'HTML opening a new window with name :<br><br>&lt;a href=\"link.html\" target=\"mywindow\"&gt;Click Here&lt;/a&gt;',
'JavaScript Opening A Window :<br><br>window.open(\'link.html\',\'mywindow\');',
'JavaScript onclick Opening A Window :<br><br>&lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt;',
'JavaScript window.open set window features :<br><br>window.open(\'link.html\',\'mywindow\',\'window features\');',
'JavaScript window.open location bar and status bar :<br><br>window.open(\'link.html\',\'mywindow\',\'location, status\');',
'JavaScript window.open Features :<br><br>menubar, scrollbar, width, height, toolbar, location, resizable, directories',
'JavaScript window.open Features sample :<br><br>window.open(\'window1.htm\',\'newwindow\',\'height=300,width=200,status,scrollbars\');',
'Javascript Link Events :<br><br>including JavaScript without &lt;script&gt; tags in HTML',
'Javascript Link Events execute when certain things happen :<br><br>&lt;a href=\"#\" onClick=\"JavaScript Code\"&gt;Click Here&lt;/a&gt;',
'three ways of executing Link Events :<br><br>onClick, onMouseOver, onMouseOut',
'Link Events for image swaps (mouseover images) :<br><br>&lt;a href=\"index.htm\" onMouseOver=\"button.src=\'homeon.gif\';\" onMouseOut=\"button.src=\'home.gif\';\"&gt;&lt;img src=\"home.gif\" name=\"button\"&gt;&lt;/a&gt;',
'No id name &lt;a href=\"#\"&gt;Click Here&lt;/a&gt; :<br><br>specify the top position',
'JavaScript Link Events for Status Bar text :<br><br>window.status=\'Your Text In Here\';',
'Two JavaScripts most important functions :<br><br>If and Loops',
'JavaScript if function :<br><br>if(guess == 5){}',
'JavaScript while loop :<br><br>while(input != password){}',
'JavaScript for function :<br><br>for(loop=0; loop &lt; 11; loop++){}',
'HTML create a form :<br><br>&lt;form name=\"formname\"&gt;&lt;/form&gt;',
'HTML Place a text box :<br><br>&lt;input type=\"text\" name=\"boxname\"&gt;',
'set object value :<br><br>window.document.formname.first_text.value=\'Hi there\';',
'JavaScript onBlur Event :<br><br>cursor leaves an input field &lt;input type=\"text\" onblur=\"myFunction()\"&gt;',
'JavaScript onFocus Event :<br><br>cursor is moved into the field &lt;input type=\"text\" onfocus=\"myFunction()\"&gt;',
'JavaScript onchange Event :<br><br>the field is changed and the cursor moves out of it object.onchange = function(){myScript};',
'JavaScript onMouseOver sample :<br><br>&lt;a href=\"#\" onMouseOver=\"sayhi();\"&gt;Say Hi&lt;/a&gt;',
'JavaScript Submit Button :<br><br>&lt;form name=\"myform\" onSubmit=\"MyFunction();&gt;',
'Two form items :<br><br>Checkboxes and radio buttons',
'to check Checkboxes :<br><br>if(window.document.example1.my_checkbox.checked=true){}',
'JavaScript Switch Statement :<br><br>switch(expression) {case n: ... break; default: ... }',
'JavaScript For/In Loop :<br><br>for (x in person) {}',
'JavaScript Break :<br><br>for (i = 0; i &lt; 10; i++) {if (i === 3) { break; }}',
'JavaScript Continue :<br><br>for (i = 0; i &lt; 10; i++) {if (i === 3) { continue; }}',
'JavaScript Labels :<br><br>label: ... break labelname; continue labelname;',
'JavaScript open window and write content :<br><br>var imgWindow = window.open(\"\"); imgWindow.document.write(theListDom);',
'JavaScript history.back function :<br><br>$(\'.keys\').click(function(){parent.history.back();}',
'Jquery load file :<br><br>$.get(\'5FC.txt\', function (d) {var theList = d.split(\',\');}',
'object.append :<br><br>$( \"#codelist\" ).append(\"Total: \" + theList.length + \"&lt;br&gt;\");',
'Jquery getChar(event) :<br><br>{return String.fromCharCode(event.which)}',
'Jquery chkKey() :<br><br>var testkey = getChar(event); if(testkey == \'9\'){...}',
'JavaScript window.scrollTo :<br><br>&lt;b class=\"left\" onclick=\"window.scrollTo(0,document.body.scrollHeight);\"&gt;Go Bottom&lt;/b&gt;',
'The JavaScript labeled statement can be used with... :<br><br>break or continue statements, useful in nested loops (loops inside loops)',
'JavaScript Form submit() Method :<br><br>Submit a form: document.getElementById(\"myForm\").submit();',
'load jquery script :<br><br>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.js\"&gt;&lt;/script&gt;',
'define an empty object :<br><br>&lt;div id=\"toc\"&gt;&lt;/div&gt;',
'assign an empty object to a variable :<br><br>var toc = $(\'#toc\');',
'a makeLine function to create HTML lines :<br><br>function makeLi(text, href) {return $(\'&lt;a href=\"\' + href + \'\"&gt;\' + text + \'&lt;/a&gt;&lt;br&gt;\');}',
'Jquery each function :<br><br>$(\'h1, h2\').each(function(i) {...}',
'Jquery this selector :<br><br>Selects the current HTML element',
'Jquery this selector sample :<br><br>var chapter = $(this), chapterNumber = i + 1;',
'Javascript append method :<br><br>toc.append(makeLi(\'Chapter \' + chapterNumber + \': \' + chapter.text(), \'#chapter-\' + chapterNumber));',
'jQuery attr() Method :<br><br>chapter.attr(\'id\', \'chapter-\' + chapterNumber);',
'jQuery prepend() Method :<br><br>chapter.prepend(\'&lt;p class=\"toc\"&gt;&lt;a title=\"Back to top\" href=\"#toc\"&gt;Top&lt;/a&gt;&lt;/p&gt;\');',
'$(\"*\") :<br><br>Jquery Selects all elements',
'$(this) :<br><br>Jquery Selects the current HTML element',
'$(\"p.intro\") :<br><br>Jquery Selects all &lt;p&gt; elements with class=\"intro\"',
'$(\"p:first\") :<br><br>Jquery Selects the first &lt;p&gt; element',
'$(\"ul li:first\") :<br><br>Jquery Selects the first &lt;li&gt; element of the first &lt;ul&gt;',
'$(\"ul li:first-child\") :<br><br>Jquery Selects the first &lt;li&gt; element of every &lt;ul&gt;',
'$(\"[href]\") :<br><br>Jquery Selects all elements with an href attribute',
'$(\"a[target=\'_blank\']\") :<br><br>Jquery Selects all &lt;a&gt; elements with a target attribute value equal to \"_blank\"',
'$(\"a[target!=\'_blank\']\") :<br><br>Jquery Selects all &lt;a&gt; elements with a target attribute value NOT equal to \"_blank\"',
'$(\":button\") :<br><br>Jquery Selects all &lt;button&gt; elements and &lt;input&gt; elements of type=\"button\"',
'$(\"tr:even\") :<br><br>Jquery Selects all even &lt;tr&gt; elements',
'$(\"tr:odd\") :<br><br>Jquery Selects all odd &lt;tr&gt; elements',
'*, eg. $(\"*\") :<br><br>selects All elements',
'#id, eg. $(\"#lastname\") :<br><br>selects The element with id=\"lastname\"',
'.class, eg. $(\".intro\") :<br><br>selects All elements with class=\"intro\"',
'.class,.class, eg. $(\".intro,.demo\") :<br><br>selects All elements with the class \"intro\" or \"demo\"',
'element, eg. $(\"p\") :<br><br>selects All &lt;p&gt; elements',
'el1, el2, el3, eg. $(\"h1,div,p\") :<br><br>selects All &lt;h1&gt;, &lt;div&gt; and &lt;p&gt; elements',
':first, eg. $(\"p:first\") :<br><br>selects The first &lt;p&gt; element',
':last, eg. $(\"p:last\") :<br><br>selects The last &lt;p&gt; element',
':even, eg. $(\"tr:even\") :<br><br>selects All even &lt;tr&gt; elements',
':odd, eg. $(\"tr:odd\") :<br><br>selects All odd &lt;tr&gt; elements',
':first-child, eg. $(\"p:first-child\") :<br><br>selects All &lt;p&gt; elements that are the first child of their parent',
':first-of-type, eg. $(\"p:first-of-type\") :<br><br>selects All &lt;p&gt; elements that are the first &lt;p&gt; element of their parent',
':last-child, eg. $(\"p:last-child\") :<br><br>selects All &lt;p&gt; elements that are the last child of their parent',
':last-of-type, eg. $(\"p:last-of-type\") :<br><br>selects All &lt;p&gt; elements that are the last &lt;p&gt; element of their parent',
':nth-child(n), eg. $(\"p:nth-child(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd child of their parent',
':nth-last-child(n), eg. $(\"p:nth-last-child(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd child of their parent, counting from the last child',
':nth-of-type(n), eg. $(\"p:nth-of-type(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent',
':nth-last-of-type(n), eg. $(\"p:nth-last-of-type(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent, counting from the last child',
':only-child, eg. $(\"p:only-child\") :<br><br>selects All &lt;p&gt; elements that are the only child of their parent',
':only-of-type, eg. $(\"p:only-of-type\") :<br><br>selects All &lt;p&gt; elements that are the only child, of its type, of their parent<br>element that has no siblings of the given type<br>li:only-of-type { color: red; }<br>&lt;ul> &lt;li>I\'m all alone!&lt;/li> &lt;/ul>  // this is red<br>&lt;ul><br>  &lt;li>We are together.&lt;/li><br>  &lt;li>We are together.&lt;/li><br>  &lt;li>We are together.&lt;/li><br>&lt;/ul>  <br>',
'parent &gt; child, eg. $(\"div &gt; p\") :<br><br>selects All &lt;p&gt; elements that are a direct child of a &lt;div&gt; element',
'parent descendant, eg. $(\"div p\") :<br><br>selects All &lt;p&gt; elements that are descendants of a &lt;div&gt; element',
'element + next, eg. $(\"div + p\") :<br><br>selects The &lt;p&gt; element that are next to each &lt;div&gt; elements',
'element ~ siblings, eg. $(\"div ~ p\") :<br><br>selects All &lt;p&gt; elements that are siblings of a &lt;div&gt; element',
':eq(index), eg. $(\"ul li:eq(3)\") :<br><br>selects The fourth element in a list (index starts at 0)',
':gt(no), eg. $(\"ul li:gt(3)\") :<br><br>selects List elements with an index greater than 3',
':lt(no), eg. $(\"ul li:lt(3)\") :<br><br>selects List elements with an index less than 3',
':not(selector), eg. $(\"input:not(:empty)\") :<br><br>selects All input elements that are not empty',
':header, eg. $(\":header\") :<br><br>selects All header elements &lt;h1&gt;, &lt;h2&gt; ...',
':animated, eg. $(\":animated\") :<br><br>selects All animated elements',
':focus, eg. $(\":focus\") :<br><br>selects The element that currently has focus',
':contains(text), eg. $(\":contains(\'Hello\')\") :<br><br>selects All elements which contains the text \"Hello\"',
':has(selector), eg. $(\"div:has(p)\") :<br><br>selects All &lt;div&gt; elements that have a &lt;p&gt; element',
':empty, eg. $(\":empty\") :<br><br>selects All elements that are empty',
':parent, eg. $(\":parent\") :<br><br>selects All elements that are a parent of another element',
':hidden, eg. $(\"p:hidden\") :<br><br>selects All hidden &lt;p&gt; elements',
':visible, eg. $(\"table:visible\") :<br><br>selects All visible tables',
':root, eg. $(\":root\") :<br><br>selects The document\'s root element',
':lang(language), eg. $(\"p:lang(de)\") :<br><br>selects All &lt;p&gt; elements with a lang attribute value starting with \"de\"',
'[attribute], eg. $(\"[href]\") :<br><br>selects All elements with a href attribute',
'[attribute=value], eg. $(\"[href=\'default.htm\']\") :<br><br>selects All elements with a href attribute value equal to \"default.htm\"',
'[attribute!=value], eg. $(\"[href!=\'default.htm\']\") :<br><br>selects All elements with a href attribute value not equal to \"default.htm\"',
'[attribute$=value], eg. $(\"[href$=\'.jpg\']\") :<br><br>selects All elements with a href attribute value ending with \".jpg\"',
'[attribute|=value], eg. $(\"[title|=\'Tomorrow\']\") :<br><br>selects All elements with a title attribute value equal to \'Tomorrow\', or starting with \'Tomorrow\' followed by a hyphen',
'[attribute^=value], eg. $(\"[title^=\'Tom\']\") :<br><br>selects All elements with a title attribute value starting with \"Tom\"',
'[attribute~=value], eg. $(\"[title~=\'hello\']\") :<br><br>selects All elements with a title attribute value containing the specific word \"hello\"',
'[attribute*=value], eg. $(\"[title*=\'hello\']\") :<br><br>selects All elements with a title attribute value containing the word \"hello\"',
':text, eg. $(\":text\") :<br><br>selects All input elements with type=\"text\"',
':password, eg. $(\":password\") :<br><br>selects All input elements with type=\"password\"',
':radio, eg. $(\":radio\") :<br><br>selects All input elements with type=\"radio\"',
':checkbox, eg. $(\":checkbox\") :<br><br>selects All input elements with type=\"checkbox\"',
':submit, eg. $(\":submit\") :<br><br>selects All input elements with type=\"submit\"',
':reset, eg. $(\":reset\") :<br><br>selects All input elements with type=\"reset\"',
':button, eg. $(\":button\") :<br><br>selects All input elements with type=\"button\"',
':image, eg. $(\":image\") :<br><br>selects All input elements with type=\"image\"',
':file, eg. $(\":file\") :<br><br>selects All input elements with type=\"file\"',
':enabled, eg. $(\":enabled\") :<br><br>selects All enabled input elements',
':disabled, eg. $(\":disabled\") :<br><br>selects All disabled input elements',
':selected, eg. $(\":selected\") :<br><br>selects All selected input elements',
':checked, eg. $(\":checked\") :<br><br>selects All checked input elements',
'blur() :<br><br>Attaches/Triggers the blur event',
'change() :<br><br>Attaches/Triggers the change event',
'click() :<br><br>Attaches/Triggers the click event',
'dblclick() :<br><br>Attaches/Triggers the double click event',
'die() :<br><br>Removed in version 1.9. Removes all event handlers added with the live() method',
'event.currentTarget :<br><br>The current DOM element within the event bubbling phase',
'event.data :<br><br>Contains the optional data passed to an event method when the current executing handler is bound',
'event.delegateTarget :<br><br>Returns the element where the currently-called jQuery event handler was attached',
'event.isDefaultPrevented() :<br><br>Returns whether event.preventDefault() was called for the event object',
'event.isImmediatePropagationStopped() :<br><br>Returns whether event.stopImmediatePropagation() was called for the event object',
'event.isPropagationStopped() :<br><br>Returns whether event.stopPropagation() was called for the event object',
'event.namespace :<br><br>Returns the namespace specified when the event was triggered',
'event.pageX :<br><br>Returns the mouse position relative to the left edge of the document',
'event.pageY :<br><br>Returns the mouse position relative to the top edge of the document',
'event.preventDefault() :<br><br>Prevents the default action of the event',
'event.relatedTarget :<br><br>Returns which element being entered or exited on mouse movement.',
'event.result :<br><br>Contains the last/previous value returned by an event handler triggered by the specified event',
'event.stopImmediatePropagation() :<br><br>Prevents other event handlers from being called',
'event.stopPropagation() :<br><br>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event',
'event.target :<br><br>Returns which DOM element triggered the event',
'event.timeStamp :<br><br>Returns the number of milliseconds since January 1, 1970, when the event is triggered',
'event.type :<br><br>Returns which event type was triggered',
'focus() :<br><br>Attaches/Triggers the focus event',
'focusin() :<br><br>Attaches an event handler to the focusin event',
'focusout() :<br><br>Attaches an event handler to the focusout event',
'hover() :<br><br>Attaches two event handlers to the hover event',
'keydown() :<br><br>Attaches/Triggers the keydown event',
'keypress() :<br><br>Attaches/Triggers the keypress event',
'keyup() :<br><br>Attaches/Triggers the keyup event',
'live() :<br><br>Removed in version 1.9. Adds one or more event handlers to current, or future, selected elements',
'mousedown() :<br><br>Attaches/Triggers the mousedown event',
'mouseenter() :<br><br>Attaches/Triggers the mouseenter event',
'mouseleave() :<br><br>Attaches/Triggers the mouseleave event',
'mousemove() :<br><br>Attaches/Triggers the mousemove event',
'mouseout() :<br><br>Attaches/Triggers the mouseout event\nThe mouseout event occurs when the mouse pointer leaves the selected element.\n$("p").mouseout(function(){\n  $("p").css("background-color", "gray");\n});',
'mouseover() :<br><br>Attaches/Triggers the mouseover event',
'mouseup() :<br><br>Attaches/Triggers the mouseup event',
'off() :<br><br>Removes event handlers attached with the on() method',
'on() :<br><br>Attaches event handlers to elements',
'one() :<br><br>Adds one or more event handlers to selected elements. This handler can only be triggered once per element',
'$.proxy() :<br><br>Takes an existing function and returns a new one with a particular context',
'ready() :<br><br>Specifies a function to execute when the DOM is fully loaded',
'resize() :<br><br>Attaches/Triggers the resize event',
'scroll() :<br><br>Attaches/Triggers the scroll event',
'select() :<br><br>Attaches/Triggers the select event',
'submit() :<br><br>Attaches/Triggers the submit event',
'toggle() :<br><br>Removed in version 1.9. Attaches two or more functions to toggle between for the click event',
'trigger() :<br><br>Triggers all events bound to the selected elements',
'triggerHandler() :<br><br>Triggers all functions bound to a specified event for the selected elements',
'animate() :<br><br>Runs a custom animation on the selected elements',
'clearQueue() :<br><br>Removes all remaining queued functions from the selected elements',
'delay() :<br><br>Sets a delay for all queued functions on the selected elements<br>$(\'button\').click(function(){<br>  $(\'#div1\').delay(\'slow\').fadeIn();<br>  $(\'#div2\').delay(\'fast\').fadeIn();<br>});<br><br>var delayInMilliseconds = 1000; //1 second<br>setTimeout(function() {<br>  //your code to be executed after 1 second<br>}, delayInMilliseconds);<br>',
'dequeue() :<br><br>Removes the next function from the queue, and then executes the function',
'fadeIn() :<br><br>Fades in the selected elements',
'fadeOut() :<br><br>Fades out the selected elements',
'fadeTo() :<br><br>Fades in/out the selected elements to a given opacity',
'fadeToggle() :<br><br>Toggles between the fadeIn() and fadeOut() methods',
'finish() :<br><br>Stops, removes and completes all queued animations for the selected elements',
'hide() :<br><br>Hides the selected elements',
'queue() :<br><br>Shows the queued functions on the selected elements',
'show() :<br><br>Shows the selected elements',
'slideDown() :<br><br>Slides-down (shows) the selected elements<br>Slide-down (show) all hidden <p> elements:<br>  $("p").slideDown();<br>',
'slideToggle() :<br><br><br>The slideToggle() method toggles between slideUp() and slideDown() for the selected elements.<br>Toggle between slideUp() and slideDown() for all <p> elements:<br>  $("p").slideToggle();<br><br>',
'slideUp() :<br><br>Slides-up (hides) the selected elements',
'stop() :<br><br>Stops the currently running animation for the selected elements',
'toggle() :<br><br>Toggles between the hide() and show() methods',
'addClass() :<br><br>Adds one or more class names to selected elements',
'after() :<br><br>Inserts content after selected elements',
'append() :<br><br>Inserts content at the end of selected elements',
'appendTo() :<br><br>Inserts HTML elements at the end of selected elements',
'attr() :<br><br>Sets or returns attributes/values of selected elements',
'before() :<br><br>Inserts content before selected elements',
'clone() :<br><br>Makes a copy of selected elements',
'css() :<br><br>Sets or returns one or more style properties for selected elements',
'detach() :<br><br>Removes selected elements (keeps data and events)',
'empty() :<br><br>Removes all child nodes and content from selected elements',
'hasClass() :<br><br>Checks if any of the selected elements have a specified class name',
'height() :<br><br>Sets or returns the height of selected elements',
'html() :<br><br>Sets or returns the content of selected elements',
'innerHeight() :<br><br>Returns the height of an element (includes padding, but not border)',
'innerWidth() :<br><br>Returns the width of an element (includes padding, but not border)',
'insertAfter() :<br><br>Inserts HTML elements after selected elements',
'insertBefore() :<br><br>Inserts HTML elements before selected elements',
'offset() :<br><br>Sets or returns the offset coordinates for selected elements (relative to the document)',
'offsetParent() :<br><br>Returns the first positioned parent element',
'outerHeight() :<br><br>Returns the height of an element (includes padding and border)',
'outerWidth() :<br><br>Returns the width of an element (includes padding and border)',
'position() :<br><br>Returns the position (relative to the parent element) of an element',
'prepend() :<br><br>Inserts content at the beginning of selected elements',
'jQuery prop() Method\t\nsets or returns property value of the selected elements.\n  var $x = $("div");\n  $x.prop("color", "FF0000");\n  $x.append("The color property: " + $x.prop("color"));\n  $x.removeProp("color");',
'remove() :<br><br>Removes the selected elements (including data and events)',
'removeAttr() :<br><br>Removes one or more attributes from selected elements',
'removeClass() :<br><br>Removes one or more classes from selected elements',
'removeProp() :<br><br>Removes a property set by the prop() method',
'replaceAll() :<br><br>Replaces selected elements with new HTML elements',
'replaceWith() :<br><br>Replaces selected elements with new content',
'scrollLeft() :<br><br>Sets or returns the horizontal scrollbar position of selected elements',
'scrollTop() :<br><br>Sets or returns the vertical scrollbar position of selected elements',
'text() :<br><br>Sets or returns the text content of selected elements',
'toggleClass() :<br><br>Toggles between adding/removing one or more classes from selected elements',
'unwrap() :<br><br>Removes the parent element of the selected elements',
'val() :<br><br>Sets or returns the value attribute of the selected elements (for form elements)',
'width() :<br><br>Sets or returns the width of selected elements',
'wrap() :<br><br>Wraps HTML element(s) around each selected element',
'wrapAll() :<br><br>Wraps HTML element(s) around all selected elements',
'wrapInner() :<br><br>Wraps HTML element(s) around the content of each selected element',
'add() :<br><br>Adds elements to the set of matched elements',
'addBack() :<br><br>Adds the previous set of elements to the current set',
'children() :<br><br>Returns all direct children of the selected element',
'closest() :<br><br>Returns the first ancestor of the selected element',
'contents() :<br><br>Returns all direct children of the selected element (including text and comment nodes)',
'each() :<br><br>Executes a function for each matched element',
'end() :<br><br>Ends the most recent filtering operation in the current chain, and return the set of matched elements to its previous state',
'eq() :<br><br>Returns an element with a specific index number of the selected elements',
'filter() :<br><br>Reduce the set of matched elements to those that match the selector or pass the function\'s test',
'find() :<br><br>jQuery find() Method<br>$(document).ready(function(){<br>  $("ul").find("span").css({"color": "red", "border": "2px solid"});<br>});<br>Return all <span> elements that are descendants of <ul>:<br>The find() method returns descendant elements of the selected element.<br><br>JavaScript Array find()<br>Find the value of the first element with a value over 18:<br><br>const ages = [3, 10, 18, 20];<br>function checkAge(age) { return age > 18; }<br>function myFunction() {<br>  document.getElementById("demo").innerHTML = ages.find(checkAge);<br>}<br>',
'first() :<br><br>Returns the first element of the selected elements',
'has() :<br><br>Returns all elements that have one or more elements inside of them',
'is() :<br><br>Checks the set of matched elements against a selector/element/jQuery object, and return true if at least one of these elements matches the given arguments',
'last() :<br><br>Returns the last element of the selected elements',
'next() :<br><br>Returns the next sibling element of the selected element',
'nextAll() :<br><br>Returns all next sibling elements of the selected element',
'nextUntil() :<br><br>Returns all next sibling elements between two given arguments',
'not() :<br><br>Remove elements from the set of matched elements',
'offsetParent() :<br><br>Returns the first positioned parent element',
'parent() :<br><br>Returns the direct parent element of the selected element',
'parents() :<br><br>Returns all ancestor elements of the selected element',
'parentsUntil() :<br><br>Returns all ancestor elements between two given arguments',
'prev() :<br><br>Returns the previous sibling element of the selected element<br>$( \'li.third-item\' ).prev().css( \'background-color\', \'red\' );',
'prevAll() :<br><br>Returns all previous sibling elements of the selected element',
'prevUntil() :<br><br>Returns all previous sibling elements between two given arguments',
'siblings() :<br><br>Returns all sibling elements of the selected element',
'slice() :<br><br>Reduces the set of matched elements to a subset specified by a range of indices',
'$.ajax() :<br><br>Performs an async AJAX request',
'$.ajaxPrefilter() :<br><br>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax()',
'$.ajaxSetup() :<br><br>Sets the default values for future AJAX requests',
'$.ajaxTransport() :<br><br>Creates an object that handles the actual transmission of Ajax data',
'$.getJSON() :<br><br>Loads JSON-encoded data from a server using a HTTP GET request',
'$.getScript() :<br><br>Loads (and executes) a JavaScript from a server using an AJAX HTTP GET request',
'$.param() :<br><br>Creates a serialized representation of an array or object (can be used as URL query string for AJAX requests)',
'ajaxComplete() :<br><br>Specifies a function to run when the AJAX request completes',
'ajaxError() :<br><br>Specifies a function to run when the AJAX request completes with an error',
'ajaxSend() :<br><br>Specifies a function to run before the AJAX request is sent',
'ajaxStart() :<br><br>Specifies a function to run when the first AJAX request begins',
'ajaxStop() :<br><br>Specifies a function to run when all AJAX requests have completed',
'ajaxSuccess() :<br><br>Specifies a function to run when an AJAX request completes successfully',
'load() :<br><br>Loads data from a server and puts the returned data into the selected element',
'serializeArray() :<br><br>Encodes a set of form elements as an array of names and values',
'data() :<br><br>Attaches data to, or gets data from, selected elements',
'each() :<br><br>Execute a function for each matched element',
'get() :<br><br>Get the DOM elements matched by the selector',
'index() :<br><br>Search for a given element from among the matched elements',
'$.noConflict() :<br><br>Release jQuery\'s control of the $ variable',
'$.param() :<br><br>Create a serialized representation of an array or object (can be used as URL query string for AJAX requests)',
'jQuery removeData() Method<br>Remove previously attached data from a &lt;div> element<br>  $("div").removeData("greeting");<br>  alert("Greeting is: " + $("div").data("greeting"));<br>',
'toArray() :<br><br>Retrieve all the DOM elements contained in the jQuery set, as an array',
'jquery Property:<br><br>Contains the jQuery version number',
'jQuery.fx.interval Property:<br><br>Change the animation firing rate in milliseconds',
'jQuery.fx.off Property:<br><br>Globally disable/enable all animations',
'jQuery.support Property:<br><br>A collection of properties representing different browser features or bugs (Intended for jQuery\'s internal use)',
'jQuery length Property<br>$(selector).length<br>alert($("li").length);<br>Alert the number of <li> elements',
'onclick event :<br><br>document.getElementById(\"demo\").onclick = function() {myFunction()};',
'writeln() :<br><br>writes any number of expressions in the document window',
'alert() :<br><br>displays an alert dialog box with a message and an OK button',
'prompt() :<br><br>displays a prompt dialog box with a message and an input field',
'document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\'); :<br><br>writes an expression in the document window',
'writeln(), document.write() :<br><br>they are identical, writeln() add with the a newline character',
'window.open(\'link.html\',\'mywindow\'); :<br><br>Opening A Window With JavaScript',
'&lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt; :<br><br>Opening A Window',
'window.open(\'link.html\',\'mywindow\',\'window features\'); :<br><br>Adding Windows features',
'Link Events :<br><br>onClick, onMouseOver, onMouseOut<br>HTML has the ability to let events trigger actions in a browser<br><br>Window Event<br>Form Events<br>Keyboard Events<br>Mouse Events<br>Drag Events<br>Clipboard Events<br>Media Events<br>Misc Events<br><strong>Link Events</strong>There are nine events that are associated with the links. <table><tbody><tr><td>Event</td><td>Event Handling Attribute</td><td>Description</td></tr><tr><td>Click</td><td>OnClick</td><td>This link event occurred when a user clicks the link.</td></tr><tr><td>DblClick</td><td>OnDblClick</td><td>This link event occurred when a user double clicks the link.</td></tr><tr><td>MouseDown</td><td>OnMouseDown</td><td>This link event occurred when a user presses the mouse button over the link.</td></tr><tr><td>MouseUp</td><td>OnMouseUp</td><td>This link event occurred when a user releases the pressed mouse button.</td></tr><tr><td>MouseOver</td><td>OnMouseOver</td><td>This link event is occurred when the user moves the mouse pointer over a link.</td></tr><tr><td>MouseOut</td><td>OnMouseOut</td><td>This link event is occurred when the user moves he mouse pointer from within a link to outside of that link.</td></tr><tr><td>KeyDown</td><td>OnKeyDown</td><td>This event  is occurred when the user pressed a key on the keyboard.</td></tr><tr><td>KeyUp</td><td>OnKeyUp</td><td>This event handling is occurred when the user release the pressed key of the keyboard.</td></tr><tr><td>KeyPress</td><td>OnKeyPress</td><td>This event handling is occurred when the user presses a key or when the user keeps a key pressed down.</td></tr></tbody></table>',
'&lt;a href="index.htm"\n onMouseOver="home_button.src=\'homeon.gif\';"\n onMouseOut="home_button.src=\'home.gif\';"\n>\n&lt;img src="home.gif" alt="Home" name="home_button" border="0">\n&lt;/a>',
'if(){}else{} :<br><br>if else function',
'if(){} :<br><br>if function',
'while(){} :<br><br>while loop condition',
'for(){} :<br><br>for function',
'&lt;form name=\"formname\"&gt;&lt;/form&gt; :<br><br>create a form',
'&lt;input type=\"text\" name=\"boxname\"&gt; :<br><br>Place a text box',
'window.document.formname.first_text.value=\'Hi there\'; :<br><br>put \'Hi there!\' into the value of the item called \'first_text\' in the form called \'formname\'',
'onBlur Events :<br><br>when the cursor is moved out of the field\nThe onblur event occurs when an HTML element loses focus.\nCall a function when a user leaves an input field\n&lt;input type="text" onblur="myFunction()">\n\n',
'onFocus Events :<br><br>when the cursor is moved into the field\nCall a function when an input field gets focus:\n&lt;input type="text" onfocus="myFunction()">\n',
'onChange Events :<br><br>when the field is changed and the cursor moves out of it',
'&lt;input type=\"text\" onBlur=\"dothis\"&gt; :<br><br>onBlur Events',
'function sayhi(){} :<br><br>JavaScript Functions',
'&lt;input type=\"submit\" value=\"Submit\"&gt; :<br><br>Submit Button',
'&lt;form name=\"myform\" onSubmit=\"MyFunction(); return false;\"&gt; :<br><br>onSubmit take action',
'if(window.document.example1.my_checkbox.checked=true){} :<br><br>Checkboxes action',
'switch(expression){case n: ... break; default: ...} :<br><br>Switch Statement',
'switch (new Date().getDay()) {case 5: text = \"Soon it is Weekend\"; break; case 6: text = \"It is Weekend\"; break; default: text = \"Waiting\";} :<br><br>Common week day Code Blocks',
'for (x in person) {text += person[x];} :<br><br>The For/In Loop',
'if (i === 3) { break;}, if (i === 3) { continue;} :<br><br>Break and Continue',
'label: statements; break labelname; continue labelname; :<br><br>JavaScript Labels',
'var array_name = [item1, item2, ...]; :<br><br>Creating an Array',
'arrays use numbered indexes, objects use named indexes :<br><br>Difference Between Arrays and Objects',
'var car = {type:\"Fiat\', model:\"500\', color:\"white\"}; :<br><br>Objects are variables containing many values',
'$(\'.keys\').click(function(){parent.history.back();return false;}); :<br><br>history.back function',
'$(\"#codelist\").load(\"HKCodelist.txt\"); :<br><br>load function',
'set html go to bottom automatically :<br><br>onclick=\"window.scrollTo(0,document.body.scrollHeight);\"',
'javascript load script :<br><br>&lt;script type=\"text/javascript\" src=theUrl&gt;&lt;/script&gt;',
'<h3>HTML DOM Events</h3>abort&emsp;The loading of a media is aborted<br>afterprint&emsp;A page has started printing<br>animationend&emsp;A CSS animation has completed<br>animationiteration&emsp;A CSS animation is repeated<br>animationstart&emsp;A CSS animation has started<br>beforeprint&emsp;A page is about to be printed<br>beforeunload&emsp;Before a document is about to be unloaded<br>blur&emsp;An element loses focus<br>canplay&emsp;The browser can start playing a media (has buffered enough to begin)<br>canplaythrough&emsp;The browser can play through a media without stopping for buffering<br>change&emsp;The content of a form element has changed<br>click&emsp;An element is clicked on<br>contextmenu&emsp;An element is right-clicked to open a context menu<br>copy&emsp;The content of an element is copied<br>cut&emsp;The content of an element is cutted<br>dblclick&emsp;An element is double-clicked<br>drag&emsp;An element is being dragged<br>dragend&emsp;Dragging of an element has ended<br>dragenter&emsp;A dragged element enters the drop target<br>dragleave&emsp;A dragged element leaves the drop target<br>dragover&emsp;A dragged element is over the drop target<br>dragstart&emsp;Dragging of an element has started<br>drop&emsp;A dragged element is dropped on the target<br>durationchange&emsp;The duration of a media is changed<br>ended&emsp;A media has reach the end ("thanks for listening")<br>error&emsp;An error has occurred while loading a file<br>focus&emsp;An element gets focus<br>focusin&emsp;An element is about to get focus<br>focusout&emsp;An element is about to lose focus<br>fullscreenchange&emsp;An element is displayed in fullscreen mode<br>fullscreenerror&emsp;An element can not be displayed in fullscreen mode<br>hashchange&emsp;There has been changes to the anchor part of a URL<br>input&emsp;An element gets user input<br>invalid&emsp;An element is invalid<br>keydown&emsp;A key is down<br>keypress&emsp;A key is pressed<br>keyup&emsp;A key is released<br>load&emsp;An object has loaded<br>loadeddata&emsp;Media data is loaded<br>loadedmetadata&emsp;Meta data (like dimensions and duration) are loaded<br>loadstart&emsp;The browser starts looking for the specified media<br>message&emsp;A message is received through the event source<br>mousedown&emsp;The mouse button is pressed over an element<br>mouseenter&emsp;The pointer is moved onto an element<br>mouseleave&emsp;The pointer is moved out of an element<br>mousemove&emsp;The pointer is moved over an element<br>mouseover&emsp;The pointer is moved onto an element<br>mouseout&emsp;The pointer is moved out of an element<br>mouseup&emsp;A user releases a mouse button over an element<br>offline&emsp;The browser starts working offline<br>online&emsp;The browser starts working online<br>open&emsp;A connection with the event source is opened<br>pagehide&emsp;User navigates away from a webpage<br>pageshow&emsp;User navigates to a webpage<br>paste&emsp;Some content is pasted in an element<br>pause&emsp;A media is paused<br>play&emsp;The media has started or is no longer paused<br>playing&emsp;The media is playing after beeing paused or buffered<br>popstate&emsp;The window\'s history changes<br>progress&emsp;The browser is downloading media data<br>ratechange&emsp;The playing speed of a media is changed<br>resize&emsp;The document view is resized<br>reset&emsp;A form is reset<br>scroll&emsp;An scrollbar is being scrolled<br>search&emsp;Something is written in a search field<br>seeked&emsp;Skipping to a media position is finished<br>seeking&emsp;Skipping to a media position is started<br>select&emsp;User selects some text<br>show&emsp;A <menu> element is shown as a context menu<br>stalled&emsp;The browser is trying to get unavailable media data<br>storage&emsp;A Web Storage area is updated<br>submit&emsp;A form is submitted<br>suspend&emsp;The browser is intentionally not getting media data<br>timeupdate&emsp;The playing position has changed (the user moves to a different point in the media)<br>toggle&emsp;The user opens or closes the <details> element<br>touchcancel&emsp;The touch is interrupted<br>touchend&emsp;A finger is removed from a touch screen<br>touchmove&emsp;A finger is dragged across the screen<br>touchstart&emsp;A finger is placed on a touch screen<br>transitionend&emsp;A CSS transition has completed<br>unload&emsp;A page has unloaded<br>volumechange&emsp;The volume of a media is changed (includes muting)<br>waiting&emsp;A media is paused but is expected to resume (e.g. buffering)<br>wheel&emsp;The mouse wheel rolls up or down over an element',
'<h3>jQuery Event Methods</h3><br>blur()&emsp;Attaches/Triggers the blur event<br>change()&emsp;Attaches/Triggers the change event<br>click()&emsp;Attaches/Triggers the click event<br>dblclick()&emsp;Attaches/Triggers the double click event<br>event.currentTarget&emsp;The current DOM element within the event bubbling phase<br>event.data&emsp;Contains the optional data passed to an event method when the current executing handler is bound<br>event.delegateTarget&emsp;Returns the element where the currently-called jQuery event handler was attached<br>event.isDefaultPrevented()&emsp;Returns whether event.preventDefault() was called for the event object<br>event.isImmediatePropagationStopped()&emsp;Returns whether event.stopImmediatePropagation() was called for the event object<br>event.isPropagationStopped()&emsp;Returns whether event.stopPropagation() was called for the event object<br>event.namespace&emsp;Returns the namespace specified when the event was triggered<br>event.pageX&emsp;Returns the mouse position relative to the left edge of the document<br>event.pageY&emsp;Returns the mouse position relative to the top edge of the document<br>event.preventDefault()&emsp;Prevents the default action of the event<br>event.relatedTarget&emsp;Returns which element being entered or exited on mouse movement<br>event.result&emsp;Contains the last/previous value returned by an event handler triggered by the specified event<br>event.stopImmediatePropagation()&emsp;Prevents other event handlers from being called<br>event.stopPropagation()&emsp;Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event<br>event.target&emsp;Returns which DOM element triggered the event<br>event.timeStamp&emsp;Returns the number of milliseconds since January 1, 1970, when the event is triggered<br>event.type&emsp;Returns which event type was triggered<br>event.which&emsp;Returns which keyboard key or mouse button was pressed for the event<br>focus()&emsp;Attaches/Triggers the focus event<br>focusin()&emsp;Attaches an event handler to the focusin event<br>focusout()&emsp;Attaches an event handler to the focusout event<br>hover()&emsp;Attaches two event handlers to the hover event<br>keydown()&emsp;Attaches/Triggers the keydown event<br>keypress()&emsp;Attaches/Triggers the keypress event<br>keyup()&emsp;Attaches/Triggers the keyup event<br>mousedown()&emsp;Attaches/Triggers the mousedown event<br>mouseenter()&emsp;Attaches/Triggers the mouseenter event<br>mouseleave()&emsp;Attaches/Triggers the mouseleave event<br>mousemove()&emsp;Attaches/Triggers the mousemove event<br>mouseout()&emsp;Attaches/Triggers the mouseout event<br>mouseover()&emsp;Attaches/Triggers the mouseover event<br>mouseup()&emsp;Attaches/Triggers the mouseup event<br>off()&emsp;Removes event handlers attached with the on() method<br>on()&emsp;Attaches event handlers to elements<br>one()&emsp;Adds one or more event handlers to selected elements. This handler can only be triggered once per element<br>$.proxy()&emsp;Takes an existing function and returns a new one with a particular context<br>ready()&emsp;Specifies a function to execute when the DOM is fully loaded<br>resize()&emsp;Attaches/Triggers the resize event<br>scroll()&emsp;Attaches/Triggers the scroll event<br>select()&emsp;Attaches/Triggers the select event<br>submit()&emsp;Attaches/Triggers the submit event<br>trigger()&emsp;Triggers all events bound to the selected elements<br>triggerHandler()&emsp;Triggers all functions bound to a specified event for the selected elements<br>',
'$.get() :<br><br>Loads data from a server using an AJAX HTTP GET request<br>Request "test.php" and alert the result of the request:<br>$("button").click(function(){<br>  $.get("test.php", function(data){ alert("Data: " + data); });  <br>});<br>',
'<h4>Global Modules: CommonJS modules Module caching caveats</h4><br>Modules are cached based on their resolved filename.<br>Since modules may resolve to a different filename based on the location of the calling module (loading from <k>node_modules</k> folders), it is not a <em>guarantee</em> that <k>require(\'foo\')</k> will always return the exact same object, if it would resolve to different files.<br>Additionally, on case-insensitive file systems or operating systems, different resolved filenames can point to the same file, but the cache will still treat them as different modules and will reload the file multiple times.<br>For example,<br><k>require(\'./foo\')</k> and <k>require(\'./FOO\')</k> return two different objects, irrespective of whether or not <k>./foo</k> and <k>./FOO</k> are the same file.',
'<h4>Global Modules: CommonJS modules<br><k>__dirname</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a><br>The directory name of the current module.<br>This is the same as the <a href="path.html#pathdirnamepath"><k>path.dirname()</k></a> of the <k>__filename</k>.<br>Example: running <k>node example.js</k> from <k>/Users/mjr</k><br><k>console.log(__dirname);<br>// Prints: /Users/mjr console.log(path.dirname(__filename));<br>// Prints: /Users/mjr</k>',
'<h4>Global Modules: CommonJS modules<br><k>__filename</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a><br>The file name of the current module.<br>This is the current module file\'s absolute path with symlinks resolved.<br>For a main program this is not necessarily the same as the file name used in the command line.<br>See <k>__dirname</k> for the directory name of the current module.<br>Examples:<br>Running <k>node example.js</k> from <k>/Users/mjr</k><br><k>console.log(__filename);<br>// Prints: /Users/mjr/example.js console.log(__dirname);<br>// Prints: /Users/mjr</k><br>Given two modules: <k>a</k> and <k>b</k>, where <k>b</k> is a dependency of<br><k>a</k> and there is a directory structure of:<br><k>/Users/mjr/app/a.js</k><br><k>/Users/mjr/app/node_modules/b/b.js</k><br>References to <k>__filename</k> within <k>b.js</k> will return<br><k>/Users/mjr/app/node_modules/b/b.js</k> while references to <k>__filename</k> within<br><k>a.js</k> will return <k>/Users/mjr/app/a.js</k>.',
'<h4>Global Modules: CommonJS modules<br><k>exports</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object></a><br>A reference to the <k>module.exports</k> that is shorter to type.<br>See the section about the exports shortcut for details on when to use<br><k>exports</k> and when to use <k>module.exports</k>.',
'<h4>Global Modules: CommonJS modules<br><k>module</k></h4><br><a href="https://nodejs.org/api/modules.html#the-module-object">&lt;module></a><br>A reference to the current module, see the section about the<br><k>module</k> object.<br>In particular, <k>module.exports</k> is used for defining what a module exports and makes available through <k>require()</k>.',
'<h4>Global Modules: CommonJS modules<br><k>require(id)</k></h4><br><k>id</k> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a> module name or path Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types">&lt;any></a> exported module content<br>Used to import modules, <k>JSON</k>, and local files.<br>Modules can be imported from <k>node_modules</k>.<br>Local modules and JSON files can be imported using a relative path (e.g.<br><k>./</k>, <k>./foo</k>, <k>./bar/baz</k>, <k>../foo</k>) that will be resolved against the directory named by <k>__dirname</k> (if defined) or the current working directory.<br>The relative paths of POSIX style are resolved in an OS independent fashion, meaning that the examples above will work on Windows in the same way they would on Unix systems.<br><k>// Importing a local module with a path relative to the `__dirname` or current<br>// working directory.<br>(On Windows, this would resolve to .\path\myLocalModule.)<br>const myLocalModule = require(\'./path/myLocalModule\');<br>// Importing a JSON file:<br>const jsonData = require(\'./path/filename.json\');<br>// Importing a module from node_modules or Node.js built-in module:<br>const crypto = require(\'node:crypto\');</k>',
'<h5>Global Modules: CommonJS modules<br><k>require.cache</k></h5><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object></a><br>Modules are cached in this object when they are required.<br>By deleting a key value from this object, the next <k>require</k> will reload the module.<br>This does not apply to <a href="addons.html">native addons</a>, for which reloading will result in an error.<br>Adding or replacing entries is also possible.<br>This cache is checked before built-in modules and if a name matching a built-in module is added to the cache,<br>only <k>node:</k>-prefixed require calls are going to receive the built-in module.<br>Use with care!<br><k>const assert = require(\'node:assert\');<br>const realFs = require(\'node:fs\');<br>const fakeFs = {};<br>require.cache.fs = { exports: fakeFs };<br>assert.strictEqual(require(\'fs\'), fakeFs);<br>assert.strictEqual(require(\'node:fs\'), realFs);</k>',
'<h5>Global Modules: CommonJS modules<br><k>require.main</k></h5><br><a href="https://nodejs.org/api/modules.html#the-module-object">&lt;module></a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type">&lt;undefined></a><br>The <k>Module</k> object representing the entry script loaded when the Node.js process launched, or <k>undefined</k> if the entry point of the program is not a CommonJS module.<br>See "Accessing the main module".<br>In <k>entry.js</k> script:<br><k>console.log(require.main);</k><br><k>node entry.js</k><br><k>Module {<br>  id: \'.\',<br>  path: \'/absolute/path/to\',<br>  exports: {},<br>  filename: \'/absolute/path/to/entry.js\',<br>  loaded: false,<br>  children: [],<br>  paths:<br>   [ \'/absolute/path/to/node_modules\',<br>     \'/absolute/path/node_modules\',<br>     \'/absolute/node_modules\',<br>     \'/node_modules\' ] }</k>',
'<h5>Global Modules: CommonJS modules<br><k>require.resolve(request[, options])</k></h5><br><k>request</k> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a> The module path to resolve.<br><k>options</k> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object></a><br><k>paths</k> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string[]></a> Paths to resolve module location from.<br>If present, these paths are used instead of the default resolution paths, with the exception of GLOBAL_FOLDERS like <k>$HOME/.node_modules</k>, which are always included.<br>Each of these paths is used as a starting point for the module resolution algorithm, meaning that the <k>node_modules</k> hierarchy is checked from this location.<br>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a><br>Use the internal <k>require()</k> machinery to look up the location of a module,<br>but rather than loading the module, just return the resolved filename.<br>If the module can not be found, a <k>MODULE_NOT_FOUND</k> error is thrown.<h6><k>require.resolve.paths(request)</k>#</h6><br><k>request</k> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a> The module path whose lookup paths are being retrieved.<br>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string[]></a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type">&lt;null></a><br>Returns an array containing the paths searched during resolution of <k>request</k> or<br><k>null</k> if the <k>request</k> string references a core module, for example <k>http</k> or<br><k>fs</k>.',
'<h4>Global Modules: CommonJS modules<br><k>module.children</k></h4><br><a href="https://nodejs.org/api/modules.html#the-module-object">&lt;module[]></a><br>The module objects required for the first time by this one.',
'<h4>Global Modules: CommonJS modules<br><k>module.exports</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object></a><br>The <k>module.exports</k> object is created by the <k>Module</k> system.<br>Sometimes this is not acceptable; many want their module to be an instance of some class.<br>To do this, assign the desired export object to <k>module.exports</k>.<br>Assigning the desired object to <k>exports</k> will simply rebind the local <k>exports</k> variable,<br>which is probably not what is desired.<br>For example, suppose we were making a module called <k>a.js</k>:<br><k>const EventEmitter = require(\'node:events\');<br>module.exports = new EventEmitter();<br>// Do some work, and after some time emit<br>// the \'ready\' event from the module itself.<br>setTimeout(() => {<br>  module.exports.emit(\'ready\');<br>}, 1000);</k><br>Then in another file we could do:<br><k>const a = require(\'./a\');<br>a.on(\'ready\', () => {<br>  console.log(\'module "a" is ready\');<br>});</k><br>Assignment to <k>module.exports</k> must be done immediately.<br>It cannot be done in any callbacks.<br>This does not work:<br><k>x.js</k>:<br><k>setTimeout(() => {<br>  module.exports = { a: \'hello\' };<br>}, 0);</k><br><k>y.js</k>:<br><k>const x = require(\'./x\');<br>console.log(x.a);</k>',
'<h5>Global Modules: CommonJS modules<br><k>exports</k> shortcut</h5><br>The <k>exports</k> variable is available within a module\'s file-level scope, and is assigned the value of <k>module.exports</k> before the module is evaluated.<br>It allows a shortcut, so that <k>module.exports.f = ...</k> can be written more succinctly as <k>exports.f = ...</k>.<br>However, be aware that like any variable, if a new value is assigned to <k>exports</k>, it is no longer bound to <k>module.exports</k>:<br><k>module.exports.hello = true; // Exported from require of module exports = { hello: false };  // Not exported, only available in the module</k><br>When the <k>module.exports</k> property is being completely replaced by a new object, it is common to also reassign <k>exports</k>:<br><k>module.exports = exports = function Constructor() {<br>  // ...<br>etc.<br>};</k><br>To illustrate the behavior, imagine this hypothetical implementation of<br><k>require()</k>, which is quite similar to what is actually done by <k>require()</k>:<br><k>function require(/* ...<br>*/) {<br>  const module = { exports: {} };<br>  ((module, exports) => {<br>    // Module code here.<br>In this example, define a function.<br>    function someFunc() {}<br>    exports = someFunc;<br>    // At this point, exports is no longer a shortcut to module.exports, and<br>    // this module will still export an empty default object.<br>    module.exports = someFunc;<br>    // At this point, the module will now export someFunc, instead of the<br>    // default object.<br>  })(module, module.exports);<br>  return module.exports;<br>}</k>',
'<h4>Global Modules: CommonJS modules<br><k>module.filename</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a><br>The fully resolved filename of the module.',
'<h4>Global Modules: CommonJS modules<br><k>module.id</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a><br>The identifier for the module.<br>Typically this is the fully resolved filename.',
'<h4>Global Modules: CommonJS modules<br><k>module.isPreloading</k></h4><br>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type">&lt;boolean></a> <k>true</k> if the module is running during the Node.js preload phase.',
'<h4>Global Modules: CommonJS modules<br><k>module.loaded</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type">&lt;boolean></a><br>Whether or not the module is done loading, or is in the process of loading.',
'<h4>Global Modules: CommonJS modules<br><k>module.parent</k></h4><br>Deprecated: Please use <k>require.main</k> and<br><k>module.children</k> instead.<br><a href="https://nodejs.org/api/modules.html#the-module-object">&lt;module></a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type">&lt;null></a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type">&lt;undefined></a><br>The module that first required this one, or <k>null</k> if the current module is the entry point of the current process, or <k>undefined</k> if the module was loaded by something that is not a CommonJS module (E.G.: REPL or <k>import</k>).',
'<h4>Global Modules: CommonJS modules<br><k>module.path</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a><br>The directory name of the module.<br>This is usually the same as the<br><a href="path.html#pathdirnamepath"><k>path.dirname()</k></a> of the <k>module.id</k>.',
'<h4>Global Modules: CommonJS modules<br><k>module.paths</k></h4><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string[]></a><br>The search paths for the module.',
'<h4>Global Modules: CommonJS modules<br><k>module.require(id)</k></h4><br><k>id</k> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type">&lt;string></a><br>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types">&lt;any></a> exported module content<br>The <k>module.require()</k> method provides a way to load a module as if<br><k>require()</k> was called from the original module.<br>In order to do this, it is necessary to get a reference to the <k>module</k> object.<br>Since <k>require()</k> returns the <k>module.exports</k>, and the <k>module</k> is typically<br><em>only</em> available within a specific module\'s code, it must be explicitly exported in order to be used.',
'<h3>Global Modules: CommonJS modules</h3><br>CommonJS modules are the original way to package JavaScript code for Node.js.<br>Node.js also supports the <a href="esm.html">ECMAScript modules</a> standard used by browsers and other JavaScript runtimes.<br>In Node.js, each file is treated as a separate module.<br>For example, consider a file named <k>foo.js</k>:<br><k>const circle = require(\'./circle.js\');<br>console.log(`The area of a circle of radius 4 is ${circle.area(4)}`);</k><br>On the first line, <k>foo.js</k> loads the module <k>circle.js</k> that is in the same directory as <k>foo.js</k>.<br>Here are the contents of <k>circle.js</k>:<br><k>const { PI } = Math;<br>exports.area = (r) => PI * r ** 2;<br>exports.circumference = (r) => 2 * PI * r;</k><br>The module <k>circle.js</k> has exported the functions <k>area()</k> and<br><k>circumference()</k>.<br>Functions and objects are added to the root of a module by specifying additional properties on the special <k>exports</k> object.<br>Variables local to the module will be private, because the module is wrapped in a function by Node.js (see module wrapper).<br>In this example, the variable <k>PI</k> is private to <k>circle.js</k>.<br>The <k>module.exports</k> property can be assigned a new value (such as a function or object).<br>Below, <k>bar.js</k> makes use of the <k>square</k> module, which exports a Square class:<br><k>const Square = require(\'./square.js\');<br>const mySquare = new Square(2);<br>console.log(`The area of mySquare is ${mySquare.area()}`);</k><br>The <k>square</k> module is defined in <k>square.js</k>:<br><k>// Assigning to exports will not modify module, must use module.exports module.exports = class Square {<br>  constructor(width) {<br>    this.width = width;<br>  }<br>  area() {<br>    return this.width ** 2;<br>  }<br>};</k><br>The CommonJS module system is implemented in the <a href="https://nodejs.org/api/module.html"><k>module</k> core module</a>.',
'<h3>Global Modules: CommonJS modules Enabling</h3><br>Node.js has two module systems: CommonJS modules and <a href="esm.html">ECMAScript modules</a>.<br>By default, Node.js will treat the following as CommonJS modules:<br>Files with a <k>.cjs</k> extension;<br>Files with a <k>.js</k> extension when the nearest parent <k>package.json</k> file contains a top-level field <a href="packages.html#type"><k>"type"</k></a> with a value of <k>"commonjs"</k>.<br>Files with a <k>.js</k> extension when the nearest parent <k>package.json</k> file doesn\'t contain a top-level field <a href="packages.html#type"><k>"type"</k></a>.<br>Package authors should include the <a href="packages.html#type"><k>"type"</k></a> field, even in packages where all sources are CommonJS.<br>Being explicit about the <k>type</k> of the package will make things easier for build tools and loaders to determine how the files in the package should be interpreted.<br>Files with an extension that is not <k>.mjs</k>, <k>.cjs</k>, <k>.json</k>, <k>.node</k>, or <k>.js</k><br>(when the nearest parent <k>package.json</k> file contains a top-level field<br><a href="packages.html#type"><k>"type"</k></a> with a value of <k>"module"</k>, those files will be recognized as CommonJS modules only if they are being included via <k>require()</k>, not when used as the command-line entry point of the program).<br>See <a href="packages.html#determining-module-system">Determining module system</a> for more details.<br>Calling <k>require()</k> always use the CommonJS module loader.<br>Calling <k>import()</k><br>always use the ECMAScript module loader.',
'<h3>Global Modules: CommonJS modules Accessing the main module</h3><br>When a file is run directly from Node.js, <k>require.main</k> is set to its<br><k>module</k>.<br>That means that it is possible to determine whether a file has been run directly by testing <k>require.main === module</k>.<br>For a file <k>foo.js</k>, this will be <k>true</k> if run via <k>node foo.js</k>, but<br><k>false</k> if run by <k>require(\'./foo\')</k>.<br>When the entry point is not a CommonJS module, <k>require.main</k> is <k>undefined</k>, and the main module is out of reach.',
'<h3>Global Modules: CommonJS modules Package manager tips</h3><br>The semantics of the Node.js <k>require()</k> function were designed to be general enough to support reasonable directory structures.<br>Package manager programs such as <k>dpkg</k>, <k>rpm</k>, and <k>npm</k> will hopefully find it possible to build native packages from Node.js modules without modification.<br>Below we give a suggested directory structure that could work:<br>Let\'s say that we wanted to have the folder at<br><k>/usr/lib/node/&lt;some-package>/&lt;some-version></k> hold the contents of a specific version of a package.<br>Packages can depend on one another.<br>In order to install package <k>foo</k>, it may be necessary to install a specific version of package <k>bar</k>.<br>The <k>bar</k> package may itself have dependencies, and in some cases, these may even collide or form cyclic dependencies.<br>Because Node.js looks up the <k>realpath</k> of any modules it loads (that is, it resolves symlinks) and then looks for their dependencies in <k>node_modules</k> folders, this situation can be resolved with the following architecture:<br><k>/usr/lib/node/foo/1.2.3/</k>: Contents of the <k>foo</k> package, version 1.2.3.<br><k>/usr/lib/node/bar/4.3.2/</k>: Contents of the <k>bar</k> package that <k>foo</k> depends on.<br><k>/usr/lib/node/foo/1.2.3/node_modules/bar</k>: Symbolic link to<br><k>/usr/lib/node/bar/4.3.2/</k>.<br><k>/usr/lib/node/bar/4.3.2/node_modules/*</k>: Symbolic links to the packages that<br><k>bar</k> depends on.<br>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.<br>When the code in the <k>foo</k> package does <k>require(\'bar\')</k>, it will get the version that is symlinked into <k>/usr/lib/node/foo/1.2.3/node_modules/bar</k>.<br>Then, when the code in the <k>bar</k> package calls <k>require(\'quux\')</k>, it\'ll get the version that is symlinked into<br><k>/usr/lib/node/bar/4.3.2/node_modules/quux</k>.<br>Furthermore, to make the module lookup process even more optimal, rather than putting packages directly in <k>/usr/lib/node</k>, we could put them in<br><k>/usr/lib/node_modules/&lt;name>/&lt;version></k>.<br>Then Node.js will not bother looking for missing dependencies in <k>/usr/node_modules</k> or <k>/node_modules</k>.<br>In order to make modules available to the Node.js REPL, it might be useful to also add the <k>/usr/lib/node_modules</k> folder to the <k>$NODE_PATH</k> environment variable.<br>Since the module lookups using <k>node_modules</k> folders are all relative, and based on the real path of the files making the calls to<br><k>require()</k>, the packages themselves can be anywhere.',
'<h3>Global Modules: CommonJS modules The <k>.mjs</k> extension</h3><br>Due to the synchronous nature of <k>require()</k>, it is not possible to use it to load ECMAScript module files.<br>Attempting to do so will throw a<br><a href="errors.html#err_require_esm"><k>ERR_REQUIRE_ESM</k></a> error.<br>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"><k>import()</k></a> instead.<br>The <k>.mjs</k> extension is reserved for <a href="esm.html">ECMAScript Modules</a> which cannot be loaded via <k>require()</k>.<br>See <a href="packages.html#determining-module-system">Determining module system</a> section for more info regarding which files are parsed as ECMAScript modules.',
'<h3>Global Modules: CommonJS modules All together</h3><br>To get the exact filename that will be loaded when <k>require()</k> is called, use the <k>require.resolve()</k> function.<br>Putting together all of the above, here is the high-level algorithm in pseudocode of what <k>require()</k> does:<br>require(X) from module at path Y<br>1. If X is a core module,<br>   a. return the core module<br>   b. STOP<br>2. If X begins with \'/\'<br>   a. set Y to be the filesystem root<br>3. If X begins with \'./\' or \'/\' or \'../\'<br>   a. LOAD_AS_FILE(Y + X)<br>   b. LOAD_AS_DIRECTORY(Y + X)<br>   c. THROW "not found"<br>4. If X begins with \'#\'<br>   a. LOAD_PACKAGE_IMPORTS(X, dirname(Y))<br>5. LOAD_PACKAGE_SELF(X, dirname(Y))<br>6. LOAD_NODE_MODULES(X, dirname(Y))<br>7. THROW "not found"<br>LOAD_AS_FILE(X)<br>1. If X is a file, load X as its file extension format.<br>STOP<br>2. If X.js is a file, load X.js as JavaScript text.<br>STOP<br>3. If X.json is a file, parse X.json to a JavaScript Object.<br>STOP<br>4. If X.node is a file, load X.node as binary addon.<br>STOP<br>LOAD_INDEX(X)<br>1. If X/index.js is a file, load X/index.js as JavaScript text.<br>STOP<br>2. If X/index.json is a file, parse X/index.json to a JavaScript object.<br>STOP<br>3. If X/index.node is a file, load X/index.node as binary addon.<br>STOP<br>LOAD_AS_DIRECTORY(X)<br>1. If X/package.json is a file,<br>   a. Parse X/package.json, and look for "main" field.<br>   b. If "main" is a falsy value, GOTO 2.<br>   c. let M = X + (json main field)<br>   d. LOAD_AS_FILE(M)<br>   e. LOAD_INDEX(M)<br>   f. LOAD_INDEX(X) DEPRECATED<br>   g. THROW "not found"<br>2. LOAD_INDEX(X)<br>LOAD_NODE_MODULES(X, START)<br>1. let DIRS = NODE_MODULES_PATHS(START)<br>2. for each DIR in DIRS:<br>   a.LOAD_PACKAGE_EXPORTS(X, DIR)<br>   b.LOAD_AS_FILE(DIR/X)<br>   c.LOAD_AS_DIRECTORY(DIR/X)<br>NODE_MODULES_PATHS(START)<br>1. let PARTS = path split(START)<br>2. let I = count of PARTS - 1<br>3. let DIRS = []<br>4. while I >= 0,<br>   a.if PARTS[I] = "node_modules" CONTINUE<br>   b.DIR = path join(PARTS[0 ..<br>I] + "node_modules")<br>   c.DIRS = DIR + DIRS<br>   d.let I = I - 1<br>5. return DIRS + GLOBAL_FOLDERS<br>LOAD_PACKAGE_IMPORTS(X, DIR)<br>1. Find the closest package scope SCOPE to DIR.<br>2. If no scope was found, return.<br>3. If the SCOPE/package.json "imports" is null or undefined, return.<br>4. let MATCH = PACKAGE_IMPORTS_RESOLVE(X, pathToFileURL(SCOPE),<br>  ["node", "require"]) <a href="esm.md#resolver-algorithm-specification">defined in the ESM resolver</a>.<br>5. RESOLVE_ESM_MATCH(MATCH).<br>LOAD_PACKAGE_EXPORTS(X, DIR)<br>1. Try to interpret X as a combination of NAME and SUBPATH where the name may have a @scope/ prefix and the subpath begins with a slash (`/`).<br>2. If X does not match this pattern or DIR/NAME/package.json is not a file, return.<br>3. Parse DIR/NAME/package.json, and look for "exports" field.<br>4. If "exports" is null or undefined, return.<br>5. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(DIR/NAME), "." + SUBPATH, `package.json` "exports", ["node", "require"]) <a href="esm.md#resolver-algorithm-specification">defined in the ESM resolver</a>.<br>6. RESOLVE_ESM_MATCH(MATCH)<br>LOAD_PACKAGE_SELF(X, DIR)<br>1. Find the closest package scope SCOPE to DIR.<br>2. If no scope was found, return.<br>3. If the SCOPE/package.json "exports" is null or undefined, return.<br>4. If the SCOPE/package.json "name" is not the first segment of X, return.<br>5. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(SCOPE), "." + X.slice("name".length), `package.json` "exports", ["node", "require"]) <a href="esm.md#resolver-algorithm-specification">defined in the ESM resolver</a>.<br>6. RESOLVE_ESM_MATCH(MATCH)<br>RESOLVE_ESM_MATCH(MATCH)<br>1. let RESOLVED_PATH = fileURLToPath(MATCH)<br>2. If the file at RESOLVED_PATH exists, load RESOLVED_PATH as its extension format.<br>STOP<br>3. THROW "not found"',
'<h3>Global Modules: CommonJS modules Caching</h3><br>Modules are cached after the first time they are loaded.<br>This means (among other things) that every call to <k>require(\'foo\')</k> will get exactly the same object returned, if it would resolve to the same file.<br>Provided <k>require.cache</k> is not modified, multiple calls to <k>require(\'foo\')</k> will not cause the module code to be executed multiple times.<br>This is an important feature.<br>With it, "partially done" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.<br>To have a module execute code multiple times, export a function, and call that function.',
'<h3>Global Modules: CommonJS modules Core modules</h3><br>Node.js has several modules compiled into the binary.<br>These modules are described in greater detail elsewhere in this documentation.<br>The core modules are defined within the Node.js source and are located in the<br><k>lib/</k> folder.<br>Core modules can be identified using the <k>node:</k> prefix, in which case it bypasses the <k>require</k> cache.<br>For instance, <k>require(\'node:http\')</k> will always return the built in HTTP module, even if there is <k>require.cache</k> entry by that name.<br>Some core modules are always preferentially loaded if their identifier is passed to <k>require()</k>.<br>For instance, <k>require(\'http\')</k> will always return the built-in HTTP module, even if there is a file by that name.<br>The list of core modules that can be loaded without using the <k>node:</k> prefix is exposed as <a href="https://nodejs.org/api/module.html#modulebuiltinmodules"><k>module.builtinModules</k></a>.',
'<h3>Global Modules: CommonJS modules Cycles</h3><br>When there are circular <k>require()</k> calls, a module might not have finished executing when it is returned.<br>Consider this situation:<br><k>a.js</k>:<br><k>console.log(\'a starting\');<br>exports.done = false;<br>const b = require(\'./b.js\');<br>console.log(\'in a, b.done = %j\', b.done);<br>exports.done = true;<br>console.log(\'a done\');</k><br><k>b.js</k>:<br><k>console.log(\'b starting\');<br>exports.done = false;<br>const a = require(\'./a.js\');<br>console.log(\'in b, a.done = %j\', a.done);<br>exports.done = true;<br>console.log(\'b done\');</k><br><k>main.js</k>:<br><k>console.log(\'main starting\');<br>const a = require(\'./a.js\');<br>const b = require(\'./b.js\');<br>console.log(\'in main, a.done = %j, b.done = %j\', a.done, b.done);</k><br>When <k>main.js</k> loads <k>a.js</k>, then <k>a.js</k> in turn loads <k>b.js</k>.<br>At that point, <k>b.js</k> tries to load <k>a.js</k>.<br>In order to prevent an infinite loop, an <strong>unfinished copy</strong> of the <k>a.js</k> exports object is returned to the<br><k>b.js</k> module.<br><k>b.js</k> then finishes loading, and its <k>exports</k> object is provided to the <k>a.js</k> module.<br>By the time <k>main.js</k> has loaded both modules, they\'re both finished.<br>The output of this program would thus be:<br><k>$ node main.js main starting a starting b starting in b, a.done = false b done in a, b.done = true a done in main, a.done = true, b.done = true</k><br>Careful planning is required to allow cyclic module dependencies to work correctly within an application.',
'<h3>Global Modules: CommonJS modules File modules</h3><br>If the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: <k>.js</k>, <k>.json</k>, and finally<br><k>.node</k>.<br>When loading a file that has a different extension (e.g.<br><k>.cjs</k>), its full name must be passed to <k>require()</k>, including its file extension (e.g.<br><k>require(\'./file.cjs\')</k>).<br><k>.json</k> files are parsed as JSON text files, <k>.node</k> files are interpreted as compiled addon modules loaded with <k>process.dlopen()</k>.<br>Files using any other extension (or no extension at all) are parsed as JavaScript text files.<br>Refer to the <a href="packages.html#determining-module-system">Determining module system</a> section to understand what parse goal will be used.<br>A required module prefixed with <k>\'/\'</k> is an absolute path to the file.<br>For example, <k>require(\'/home/marco/foo.js\')</k> will load the file at<br><k>/home/marco/foo.js</k>.<br>A required module prefixed with <k>\'./\'</k> is relative to the file calling<br><k>require()</k>.<br>That is, <k>circle.js</k> must be in the same directory as <k>foo.js</k> for<br><k>require(\'./circle\')</k> to find it.<br>Without a leading <k>\'/\'</k>, <k>\'./\'</k>, or <k>\'../\'</k> to indicate a file, the module must either be a core module or is loaded from a <k>node_modules</k> folder.<br>If the given path does not exist, <k>require()</k> will throw a<br><a href="errors.html#module_not_found"><k>MODULE_NOT_FOUND</k></a> error.',
'<h3>Global Modules: CommonJS modules Folders as modules</h3><br>There are three ways in which a folder may be passed to <k>require()</k> as an argument.<br>The first is to create a <a href="packages.html#nodejs-packagejson-field-definitions"><k>package.json</k></a> file in the root of the folder,<br>which specifies a <k>main</k> module.<br>An example <a href="packages.html#nodejs-packagejson-field-definitions"><k>package.json</k></a> file might look like this:<br><k>{ "name" : "some-library",<br>  "main" : "./lib/some-library.js" }</k><br>If this was in a folder at <k>./some-library</k>, then<br><k>require(\'./some-library\')</k> would attempt to load<br><k>./some-library/lib/some-library.js</k>.<br>If there is no <a href="packages.html#nodejs-packagejson-field-definitions"><k>package.json</k></a> file present in the directory, or if the<br><a href="packages.html#main"><k>"main"</k></a> entry is missing or cannot be resolved, then Node.js will attempt to load an <k>index.js</k> or <k>index.node</k> file out of that directory.<br>For example, if there was no <a href="packages.html#nodejs-packagejson-field-definitions"><k>package.json</k></a> file in the previous example, then <k>require(\'./some-library\')</k> would attempt to load:<br><k>./some-library/index.js</k><br><k>./some-library/index.node</k><br>If these attempts fail, then Node.js will report the entire module as missing with the default error:<br><k>Error: Cannot find module \'some-library\'</k><br>In all three above cases, an <k>import(\'./some-library\')</k> call would result in a<br><a href="errors.html#err_unsupported_dir_import"><k>ERR_UNSUPPORTED_DIR_IMPORT</k></a> error.<br>Using package <a href="packages.html#subpath-exports">subpath exports</a> or<br><a href="packages.html#subpath-imports">subpath imports</a> can provide the same containment organization benefits as folders as modules, and work for both <k>require</k> and <k>import</k>.',
'<h3>Global Modules: CommonJS modules Loading from <k>node_modules</k> folders</h3><br>If the module identifier passed to <k>require()</k> is not a core module, and does not begin with <k>\'/\'</k>, <k>\'../\'</k>, or<br><k>\'./\'</k>, then Node.js starts at the directory of the current module, and adds <k>/node_modules</k>, and attempts to load the module from that location.<br>Node.js will not append <k>node_modules</k> to a path already ending in<br><k>node_modules</k>.<br>If it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.<br>For example, if the file at <k>\'/home/ry/projects/foo.js\'</k> called<br><k>require(\'bar.js\')</k>, then Node.js would look in the following locations, in this order:<br><k>/home/ry/projects/node_modules/bar.js</k><br><k>/home/ry/node_modules/bar.js</k><br><k>/home/node_modules/bar.js</k><br><k>/node_modules/bar.js</k><br>This allows programs to localize their dependencies, so that they do not clash.<br>It is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name.<br>For instance<br><k>require(\'example-module/path/to/file\')</k> would resolve <k>path/to/file</k><br>relative to where <k>example-module</k> is located.<br>The suffixed path follows the same module resolution semantics.',
'<h3>Global Modules: CommonJS modules Loading from the global folders</h3><br>If the <k>NODE_PATH</k> environment variable is set to a colon-delimited list of absolute paths, then Node.js will search those paths for modules if they are not found elsewhere.<br>On Windows, <k>NODE_PATH</k> is delimited by semicolons (<k>;</k>) instead of colons.<br><k>NODE_PATH</k> was originally created to support loading modules from varying paths before the current module resolution algorithm was defined.<br><k>NODE_PATH</k> is still supported, but is less necessary now that the Node.js ecosystem has settled on a convention for locating dependent modules.<br>Sometimes deployments that rely on <k>NODE_PATH</k> show surprising behavior when people are unaware that <k>NODE_PATH</k> must be set.<br>Sometimes a module\'s dependencies change, causing a different version (or even a different module) to be loaded as the <k>NODE_PATH</k> is searched.<br>Additionally, Node.js will search in the following list of GLOBAL_FOLDERS:<br>1: <k>$HOME/.node_modules</k><br>2: <k>$HOME/.node_libraries</k><br>3: <k>$PREFIX/lib/node</k><br>Where <k>$HOME</k> is the user\'s home directory, and <k>$PREFIX</k> is the Node.js configured <k>node_prefix</k>.<br>These are mostly for historic reasons.<br>It is strongly encouraged to place dependencies in the local <k>node_modules</k><br>folder.<br>These will be loaded faster, and more reliably.',
'<h3>Global Modules: CommonJS modules The module wrapper</h3><br>Before a module\'s code is executed, Node.js will wrap it with a function wrapper that looks like the following:<br><k>(function(exports, require, module, __filename, __dirname) {<br>// Module code actually lives in here<br>});</k><br>By doing this, Node.js achieves a few things:<br>It keeps top-level variables (defined with <k>var</k>, <k>const</k>, or <k>let</k>) scoped to the module rather than the global object.<br>It helps to provide some global-looking variables that are actually specific to the module, such as:<br>The <k>module</k> and <k>exports</k> objects that the implementor can use to export values from the module.<br>The convenience variables <k>__filename</k> and <k>__dirname</k>, containing the module\'s absolute filename and directory path.<br>',
'<h3>Global Modules: CommonJS modules The <k>module</k> object</h3><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">&lt;Object></a><br>In each module, the <k>module</k> free variable is a reference to the object representing the current module.<br>For convenience, <k>module.exports</k> is also accessible via the <k>exports</k> module-global.<br><k>module</k> is not actually a global but rather local to each module.',
'<h3>Global Modules: CommonJS modules The <k>Module</k> object</h3><br>This section was moved to<br><a href="https://nodejs.org/api/module.html#the-module-object">Modules: <k>module</k> core module</a>.<br><a href="https://nodejs.org/api/module.html#modulebuiltinmodules"><k>module.builtinModules</k></a><br><a href="https://nodejs.org/api/module.html#modulecreaterequirefilename"><k>module.createRequire(filename)</k></a><br><a href="https://nodejs.org/api/module.html#modulesyncbuiltinesmexports"><k>module.syncBuiltinESMExports()</k></a>',
'<h3>Global Modules: CommonJS modules Source map v3 support</h3><br>This section was moved to<br><a href="https://nodejs.org/api/module.html#source-map-v3-support">Modules: <k>module</k> core module</a>.<br><a href="https://nodejs.org/api/module.html#modulefindsourcemappath"><k>module.findSourceMap(path)</k></a><br><a href="https://nodejs.org/api/module.html#class-modulesourcemap">Class: <k>module.SourceMap</k></a><br><a href="https://nodejs.org/api/module.html#new-sourcemappayload"><k>new SourceMap(payload)</k></a><br><a href="https://nodejs.org/api/module.html#sourcemappayload"><k>sourceMap.payload</k></a><br><a href="https://nodejs.org/api/module.html#sourcemapfindentrylinenumber-columnnumber"><k>sourceMap.findEntry(lineNumber, columnNumber)</k></a>',
'<h3>JavaScript Promises</h3><br>"Producing code" is code that can take some time<br>"Consuming code" is code that must wait for the result<br>A Promise is a JavaScript object that links producing code and consuming code<br>A JavaScript Promise object contains both the producing code and calls to the consuming code:<br>let myPromise = new Promise(function(myResolve, myReject) {<br>// "Producing Code" (May take some time)<br>  myResolve(); // when successful<br>  myReject();  // when error<br>});<br>// "Consuming Code" (Must wait for a fulfilled Promise)<br>myPromise.then(<br>  function(value) { /* code if successful */ },<br>  function(error) { /* code if some error */ }<br>);<br>how to use a Promise:<br>myPromise.then(<br>  function(value) { /* code if successful */ },<br>  function(error) { /* code if some error */ }<br>);<br>Promise.then() takes two arguments, a callback for success and another for failure.<br>Both are optional, so you can add a callback for success or failure only.<br><br>Example<br>function getFile(myCallback) {<br>  let req = new XMLHttpRequest();<br>  req.open(\'GET\', "mycar.html");<br>  req.onload = function() {<br>    if (req.status == 200) {<br>      myCallback(req.responseText);<br>    } else {<br>      myCallback("Error: " + req.status);<br>    }<br>  }<br>  req.send();<br>}<br>getFile(myDisplayer);<br>',
'<k>count the number of div elements inside a container</k><br>use the querySelectorAll() method and the length property.<br><br>// Get the reference to the container element<br>const container = document.querySelector(\'#your-container-id\');<br><br>// Get the count of div elements inside the container<br>const divCount = container.querySelectorAll(\'div\').length;<br><br>console.log(\'Number of div elements inside the container:\', divCount);<br><br><k>To jump to the nth child element inside a div</k><br>use the childNodes property and the querySelector() method.<br><br>// Get the reference to the div element<br>const divElement = document.querySelector(\'#your-div-id\');<br><br>// Get the nth child element inside the div<br>const nthChild = divElement.childNodes[n];<br><br>// Scroll to the nth child element<br>nthChild.scrollIntoView({ behavior: \'smooth\' });',
'to chop a string by space character:\n  str = "123 r"\n  myArray = str.split(" ");  // ["123", "r"]\nto chop an array of strings by space character:\n  str = ["123 r", "456 t"]\n  myArray = str.map(item => item.split(" ")[0]); // ["123", "456"]\n\n',
'to join array into one string with space separated\n  str = ["123", "456"]\n  myArray = str.join(" ") // "123 456"',
'<a href="https://mochajs.org/" class="whitebut ">Mocha</a>\nMocha is a JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun.\nMocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases.\nHosted on GitHub.\n<a href="https://www.chaijs.com/" class="whitebut ">Chai is a BDD / TDD assertion library for node and the browser that can be paired with any javascript testing framework.</a>\n<a href="https://junit.org/junit5/" class="whitebut ">testing framework for Java and the JVM</a>\n<a href="https://www.freecodecamp.org/news/how-to-start-unit-testing-javascript/" class="whitebut ">How to Test JavaScript Code</a>',
'<a href="https://www.w3schools.com/js/tryit.asp?filename=tryjs_statements" class="whitebut " target="_blank">w3 js test</a>',
'<o>生成随机数</o>\n得益于箭头函数、解构赋值、扩展运算符、Set和Map等特性。\n生成指定范围内的随机整数，只需一行代码：\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n使用示例：\nconsole.log(getRandomInt(1, 100)); // 1到100之间的随机整数\n',
'<o>检查变量类型</o>\n准确获取变量类型，一行代码搞定：\nconst getType = (value) => Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\n使用示例：\nconsole.log(getType(123)); // \'number\'\nconsole.log(getType([]));  // \'array\'\n',
'<o>深拷贝对象</o>\n简单高效的深拷贝，只需一行代码：\nconst cloneDeep = (obj) => JSON.parse(JSON.stringify(obj));\n使用示例：\nconst original = { a: 1, b: { c: 2 } };\nconst cloned = cloneDeep(original);\nconsole.log(cloned); // { a: 1, b: { c: 2 } }\n',
'<o>交换两个变量的值</o>\nES6的解构赋值，让变量交换变得简单：\nlet x = 1, y = 2;\n[x, y] = [y, x];\n使用示例：\nconsole.log(x, y); // 2, 1\n',
'<o>生成UUID</o>\n快速生成符合规范的UUID，一行代码即可：\nconst generateUUID = () => \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, (c) => (Math.random() * 16) | 0).toString(16);\n使用示例：\nconsole.log(generateUUID()); // 例如 \'e4e6c7c4-d5ad-4cc1-9be8-d497c1a9d461\'\n',
'<h2>window.open 被浏览器拦截解决方案</h2>\n<div id="被浏览器拦截toc" class="toc"><a href="#被浏览器拦截topic-0" target="_self">分析原因</a><br><a href="#被浏览器拦截topic-1" target="_self">注意：</a><br><a href="#被浏览器拦截topic-2" target="_self">解决方案</a><br><a href="#被浏览器拦截topic-3" target="_self">总结</a><br><a href="#被浏览器拦截topic-4" target="_self">直接绑定 window.open 到用户事件回调</a><br><a href="#被浏览器拦截topic-5" target="_self">先打开空白窗口后填充 URL</a><br><a href="#被浏览器拦截topic-6" target="_self">最优方案</a><br></div></center><br><br>\n\n<h3 id="被浏览器拦截topic-0">分析原因</h3>当浏览器检测到非用户操作产生的新弹出窗口时，会对其进行阻止，因为浏览器认为这可能是广告，不是用户期望的页面。\n<k id="被浏览器拦截topic-1">注意：</k> 如果 window.open 是在用户触发事件（如点击事件）或页面加载时调用，则不会被拦截；\n而一旦将弹出代码放入 Ajax 回调或异步代码中，可能就会被拦截。\n例如：\nasync function handleJump() {\n    let url = await getData();\n    // 5 秒后\n    if (url) {\n        window.open(url, \'_blank\');\n    }\n}\n在这种情况下，可能会被浏览器拦截，导致不必要的问题发生。\n<h3 id="被浏览器拦截topic-2">解决方案</h3>\n<h4>1. 绑定 window.open 到点击事件</h4>将打开新窗口的代码绑定到 click 事件回调中，这样可以避免大多数浏览器对弹窗的拦截。\n示例：\n// 获取按钮元素\nvar button = document.getElementById(\'openWindowBtn\');\n// 添加点击事件监听器\nbutton.addEventListener(\'click\', function () {\n    // 在点击事件中打开新窗口\n    var newWindow = window.open(\'https://www.example.com\', \'newWindow\', \'width=800,height=600\');\n    // 检查窗口是否成功打开\n    if (newWindow) {\n        console.log(\'新窗口已成功打开\');\n    } else {\n        console.log(\'未能打开新窗口，可能被浏览器拦截\');\n    }\n});\n这种方式有效，但有局限性。\n在处理异步操作时，无法避免拦截问题，因此需要其他解决方案。\n<h4>2. 先打开空白窗口，后填充 URL</h4>在处理异步操作时，可以先打开一个空白窗口，待异步请求返回后，再填充 URL。\n// 先打开新的空白窗口\nconst newWindow = window.open(\'about:blank\', \'_blank\');\n// 设置新窗口标题\nnewWindow.document.title = \'正在跳转...\';\nnewWindow.document.write(\'加载中...\');\ntry {\n    // 异步请求返回后填充 URL\n    newWindow.location.href = await getUrl();\n} catch (error) {\n    newWindow.close();\n    alert(\'打开新窗口失败\');\n}\n此方案的体验不太好，因为在异步请求期间，新窗口会显示空白页，用户可能会感到困惑，交互体验不佳。\n<h4>3. 最优解决方案</h4>通过分析，我们知道浏览器会在一定时间后阻止弹窗。\n因此，更多的从业务逻辑入手是解决问题的关键。\n<h5>3.1 改为提示用户手动跳转</h5>当异步请求返回 URL 时，不是直接调用 window.open，而是弹出一个提示框，要求用户手动点击跳转按钮，从而规避浏览器的安全策略。\n示例：\nfunction openModal(url) {\n    // 包含打开弹窗事件，以及一个确认或取消按钮\n    // 点击“确认”按钮时调用 window.open(url, \'_blank\');\n    // 点击“取消”按钮时关闭弹窗\n}\nasync function handleJump() {\n    let url = await getData();\n    // 异步操作完成后弹出提示框\n    openModal(url);\n}\n<h5>3.2 提示用户当窗口被拦截</h5>window.open() 会返回一个 Window 对象的引用，如果窗口被拦截，则返回 null，利用这一特性可以给出提示信息。\n示例：\nconst newWindow = window.open(\'https://www.mozilla.org/\', \'_blank\');\nif (!newWindow) {\n    alert(\'页面跳转已被浏览器拦截\');\n}\n此方法可以提供简单的提示，也可以结合 UI 框架，给用户提供更友好的交互体验。\n<h5>3.3 兜底策略</h5>如果不想增加复杂的交互逻辑或改变流程，同时又想保证业务正常实现，可以使用兜底策略。\n示例：\nconst newWindow = window.open(redirectUrl, \'_blank\');\nif (newWindow) {\n    // 如果窗口成功打开，确保新窗口获得焦点\n    newWindow.focus();\n} else {\n    // 如果窗口被拦截，则直接在当前页面跳转\n    window.location.href = redirectUrl;\n}\n<h3 id="被浏览器拦截topic-3">总结</h3><k id="被浏览器拦截topic-4">直接绑定 window.open 到用户事件回调</k> 是最简单的方式，但局限性较大，无法适应复杂的异步场景。\n<k id="被浏览器拦截topic-5">先打开空白窗口后填充 URL</k> 可以解决拦截问题，但用户体验不佳。\n<k id="被浏览器拦截topic-6">最优方案</k> 是通过提示用户手动跳转或检测 window.open 的返回值并提供兜底策略，从而确保用户体验和业务逻辑的完整性。\n',
'<h2>reduce 方法</h2>\n<div id="reduce方法toc" class="toc"><a href="#reduce方法topic-0" target="_self">数字的求和</a><br><a href="#reduce方法topic-1" target="_self">数组扁平化</a><br><a href="#reduce方法topic-2" target="_self">根据属性去分类对象</a><br><a href="#reduce方法topic-3" target="_self">对象数组生成映射关系</a><br><a href="#reduce方法topic-4" target="_self">统计元素出现次数</a><br><a href="#reduce方法topic-5" target="_self">计算平均值</a><br></div></center><br><br>\n\nreduce() 对数组中的每个元素按序执行一个 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\n第一次执行回调函数时，不存在“上一次的计算结果”。\n\n如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。\n否则，数组索引为 0 的元素将被用作初始值，迭代器将从第二个元素开始执行（即从索引为 1 而不是 0 的位置开始）\n\n<h3 id="reduce方法topic-0">数字的求和</h3>如果你想要对一堆数字进行求和计算，那么 reduce 是不二之选~\n\n<img src="https://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjn4QO8w0y7qAIGu2XMk6MDPrF3vVlkia3la4e0dhcJ0dPUKW1ibyAt5vZp32IUicfQxvrO3beHxoRuw/640">\n\n<h3 id="reduce方法topic-1">数组扁平化</h3>如果你想要对一个数组进行扁平化，也可以选择 reduce 来完成\n\n<img src="https://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjn4QO8w0y7qAIGu2XMk6MDaHKqD0nONzKOlQlnJmmx8kUsoGxYictSPcFnUdexT9lP7Dnq3F0AQ3A/640">\n\n<h3 id="reduce方法topic-2">根据属性去分类对象</h3>比如有一个对象数组，你想要根据每个对象的某一个属性，去对这些对象进行分组，就可以使用 reduce 来完成\n\n<img src="https://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjn4QO8w0y7qAIGu2XMk6MDf7RW4XhsfCYjC05D71DoP6ibnsZiaqFIwNYEsHINZN4iaMsOgVkMn9u6A/640">\n\n<h3 id="reduce方法topic-3">对象数组生成映射关系</h3>比如有一个对象数组，我想要根据每一个对象的 id 去生成映射关系，方便后面根据 id 去匹配，就可以使用 reduce 来完成\n\n<img src="https://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjn4QO8w0y7qAIGu2XMk6MDkBBm1nqlDke8YXjEQ8XCMJjUAI74ibnPvA2w5loA6vibSeRamqxjZRZQ/640">\n\n<h3 id="reduce方法topic-4">统计元素出现次数</h3>你想要统计一个数组中各个元素出现的次数，就可以使用 reduce 来完成\n\n<img src="https://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjn4QO8w0y7qAIGu2XMk6MDvquoZ9icnghg5Fw6TTT8RHJCeKqOz9CjurWYIuF3zUYWrJJ3ylD859g/640">\n\n<h3 id="reduce方法topic-5">计算平均值</h3>计算一个数字数组的平均值\n\n<img src="https://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjn4QO8w0y7qAIGu2XMk6MDbiaAW12zjXZFtGzOqImvibGek9l0fwZ1ME83WHo1H3UPhcdQKxTlgJkQ/640">\n',
'<y>concat() joins two or more strings :</y>\n"Hello " + person + "! How are you?";\ntext3 = text1.concat(text2);\n\nconcat() method can use the plus operator :\nvar text = "Hello" + " " + "World!";\n\n',
'<h2>JavaScript 变量命名</h2>\n<div id="变量命名toc" class="toc"><a href="#变量命名topic-0" target="_self">避免使用 var：使用 let 和 const 替代</a><br><a href="#变量命名topic-1" target="_self">变量名要清晰且描述性强</a><br><a href="#变量命名topic-2" target="_self">遵循驼峰命名法</a><br><a href="#变量命名topic-3" target="_self">常量使用全大写字母</a><br><a href="#变量命名topic-4" target="_self">避免使用单字母变量名</a><br><a href="#变量命名topic-5" target="_self">数组使用复数命名</a><br><a href="#变量命名topic-6" target="_self">布尔变量加前缀</a><br><a href="#变量命名topic-7" target="_self">按作用域命名</a><br><a href="#变量命名topic-8" target="_self">每行声明一个变量</a><br></div></center><br><br>\n\n变量命名是提升代码可读性和维护性的重要环节。\n<h3 id="变量命名topic-0">避免使用 var：使用 let 和 const 替代</h3>var 是 ES6 之前的变量声明方式，但它容易带来作用域混乱的问题。\n现代 JavaScript 推荐使用 let 和 const，它们具有块级作用域和更好的行为预测性。\nlet：用于值会发生变化的变量。\nconst：用于值不会发生变化的常量，优先使用。\n<h3 id="变量命名topic-1">变量名要清晰且描述性强</h3>变量名应直接反映其内容和用途，避免使用无意义的缩写或单字母变量名。\n✅ 好例子: firstName, totalPrice, productDescription\n❌ 坏例子: x, a, temp\n<h3 id="变量命名topic-2">遵循驼峰命名法</h3>在 JavaScript 中，驼峰命名法是最常用的命名规范。\n首字母小写，单词间用大写字母分隔。\n✅ 好例子: fullName, dateOfBirth, shippingAddress\n❌ 坏例子: full_name, dateofbirth\n<h3 id="变量命名topic-3">常量使用全大写字母</h3>对于不会改变的常量，使用大写字母和下划线分隔单词。\n✅ 好例子: TAX_RATE, API_KEY, MAX_ATTEMPTS\n❌ 坏例子: taxRate, apiKey\n<h3 id="变量命名topic-4">避免使用单字母变量名</h3>除了循环计数器（如 i）等特殊情况外，应尽量避免单字母变量名。\n✅ 好例子: counter, index, sum\n❌ 坏例子: i, j, k\n<h3 id="变量命名topic-5">数组使用复数命名</h3>数组变量应使用复数形式，以表明它包含多个元素。\n✅ 好例子: productNames, orderItems, employeeList\n❌ 坏例子: productName, orderItem\n<h3 id="变量命名topic-6">布尔变量加前缀</h3>布尔类型变量可加上 is、has 或 can 等前缀，清晰表达其含义。\n✅ 好例子: isActive, hasDiscount, canEdit\n❌ 坏例子: active, discountApplied\n<h3 id="变量命名topic-7">按作用域命名</h3>根据变量所在的作用域，适当添加前缀或后缀，帮助理解它的作用范围。\n✅ 好例子: globalCounter, localIndex, moduleConfig\n❌ 坏例子: counter, index\n<h3 id="变量命名topic-8">每行声明一个变量</h3>为了提升可读性，应避免多变量一行声明。\n✅ 好例子:\nlet isActive = false;\nlet canEdit = true;\n❌ 坏例子:\nlet isActive = false, canEdit = true;\n',
'<h2>JavaScript性能优化技巧</h2>\n<div id="JavaScript性能优化技巧toc" class="toc"><a href="#JavaScript性能优化技巧topic-0" target="_self">使用严格模式</a><br><a href="#JavaScript性能优化技巧topic-1" target="_self">最小化DOM操作</a><br><a href="#JavaScript性能优化技巧topic-2" target="_self">使用事件委托</a><br><a href="#JavaScript性能优化技巧topic-3" target="_self">避免内存泄漏</a><br><a href="#JavaScript性能优化技巧topic-4" target="_self">优化循环</a><br><a href="#JavaScript性能优化技巧topic-5" target="_self">防抖和节流高开销函数</a><br><a href="#JavaScript性能优化技巧topic-6" target="_self">智能使用异步代码</a><br><a href="#JavaScript性能优化技巧topic-7" target="_self">利用浏览器缓存</a><br></div></center><br><br>\n\n<h3 id="JavaScript性能优化技巧topic-0">使用严格模式</h3>在JavaScript中启用严格模式可以捕获常见的编码错误，防止使用未声明的变量，并使代码运行更快。\n<k>如何启用严格模式：</k>\n"use strict";\nfunction myFunction() {\n  // 你的代码在这里\n}\n“use strict;”可以告诉浏览器以严格模式执行，这可以提高性能。\n<h3 id="JavaScript性能优化技巧topic-1">最小化DOM操作</h3>操作文档对象模型（DOM）是JavaScript中最慢的操作之一。\n减少直接DOM操作的数量可以显著提高性能。\n<k>而不是这样：</k>\nconst list = document.getElementById(\'myList\');\nconst items = [\'Item 1\', \'Item 2\', \'Item 3\'];\nitems.forEach(item =&gt; {\n  const li = document.createElement(\'li\');\n  li.textContent = item;\n  list.appendChild(li);\n});\n<k>使用文档片段：</k>\nconst list = document.getElementById(\'myList\');\nconst items = [\'Item 1\', \'Item 2\', \'Item 3\'];\nconst fragment = document.createDocumentFragment();\n// 使用文档片段批量更新DOM，这样更高效\n<k>个人备注：</k> 在动态列表中切换到文档片段后，我注意到渲染时间显著减少，尤其是在处理大型数据集时。\n<h3 id="JavaScript性能优化技巧topic-2">使用事件委托</h3>给多个DOM元素附加事件监听器可能效率低下。\n事件委托允许你在DOM的更高层级处理事件。\n<k>而不是这样：</k>\nconst buttons = document.querySelectorAll(\'.myButton\');\nbuttons.forEach(button =&gt; {\n  button.addEventListener(\'click\', function() {\n    // 处理点击\n  });\n});\n<k>使用事件委托：</k>\ndocument.body.addEventListener(\'click\', function(event) {\n  if (event.target.classList.contains(\'myButton\')) {\n    // 处理点击\n  }\n});\n这样，你只需给父元素附加一个事件监听器，减少内存使用并提高性能。\n<k>个人备注：</k> 实施事件委托后，我的代码更简洁、更易维护，尤其是在动态添加新元素时。\n<h3 id="JavaScript性能优化技巧topic-3">避免内存泄漏</h3>内存泄漏会减慢甚至崩溃你的应用程序。\n注意闭包和阻止垃圾回收的不必要引用。\n<k>常见陷阱：</k>\nlet element = document.getElementById(\'myElement\');\nelement.addEventListener(\'click\', function() {\n  console.log(\'Clicked!\');\n});\n// 后面的代码\nelement = null; // 这并不能移除事件监听器\n<k>正确清理：</k>\nlet element = document.getElementById(\'myElement\');\nfunction handleClick() {\n  console.log(\'Clicked!\');\n}\nelement.addEventListener(\'click\', handleClick);\n// 后面的代码\nelement.removeEventListener(\'click\', handleClick);\nelement = null;\n通过在不再需要时移除事件监听器，你可以防止内存泄漏。\n<k>个人备注：</k> 发现我的应用随时间变慢后，我意识到我没有正确清理事件监听器。\n修复这个问题后，性能显著提升。\n<h3 id="JavaScript性能优化技巧topic-4">优化循环</h3>循环可能是性能瓶颈。\n简单的更改可以使它们更高效。\n<k>而不是这样：</k>\nfor (let i = 0; i &lt; array.length; i++) {\n  // 对array[i]做些操作\n}\n<k>缓存长度：</k>\nfor (let i = 0, len = array.length; i &lt; len; i++) {\n  // 对array[i]做些操作\n}\n或者使用现代方法如for...of或数组方法如forEach，这些方法已经优化。\n<k>个人备注：</k> 在一个性能关键的应用中，循环中缓存数组长度显著减少了执行时间。\n<h3 id="JavaScript性能优化技巧topic-5">防抖和节流高开销函数</h3>对于频繁调用的函数，如窗口大小调整或滚动，使用防抖或节流来限制它们的运行频率。\n<k>防抖示例：</k>\nfunction debounce(func, delay) {\nlet timeout;\nreturnfunction() {\n    clearTimeout(timeout);\n    timeout = setTimeout(func, delay);\n  }\n}\nwindow.addEventListener(\'resize\', debounce(function() {\n// 处理大小调整\n}, 250));\n<k>节流示例：</k>\nfunction throttle(func, limit) {\nlet inThrottle;\nreturnfunction() {\n    if (!inThrottle) {\n      func();\n      inThrottle = true;\n      setTimeout(() =&gt; inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener(\'scroll\', throttle(function() {\n// 处理滚动\n}, 250));\n<k>个人备注：</k> 在窗口大小调整事件处理程序上实施防抖，修复了我的UI中的延迟问题，使其响应更快。\n<h3 id="JavaScript性能优化技巧topic-6">智能使用异步代码</h3>非阻塞代码使你的应用程序保持响应。\n使用异步编程特性如async/await和Promises。\n<k>示例：</k>\nasync function fetchData() {\n  try {\n    const response = await fetch(\'https://api.example.com/data\');\n    const data = await response.json();\n    // 处理数据\n  } catch (error) {\n    console.error(error);\n  }\n}\n通过异步处理操作，你防止了阻塞主线程。\n<k>个人备注：</k> 切换到async/await使我的代码更简洁，并且在数据获取期间不阻塞UI，从而提高了性能。\n<h3 id="JavaScript性能优化技巧topic-7">利用浏览器缓存</h3>缓存资源可以大大提高加载时间。\n在服务器上设置适当的缓存头，并使用服务工作者进行高级缓存。\n<k>服务工作者示例：</k>\nself.addEventListener(\'install\', function(event) {\n  event.waitUntil(\n    caches.open(\'v1\').then(function(cache) {\n      return cache.addAll([\n        \'/index.html\',\n        \'/styles.css\',\n        \'/script.js\',\n      ]);\n    })\n  );\n});\n通过缓存静态资源，你减少了网络请求并提高了性能。\n',
'<h2>JavaScript高阶函数</h2>\n<div id="JavaScript高阶函数toc" class="toc"><a href="#JavaScript高阶函数topic-0" target="_self">一、什么是高阶函数</a><br><a href="#JavaScript高阶函数topic-1" target="_self">二、常见高阶函数详解</a><br><a href="#JavaScript高阶函数topic-2" target="_self"> Array.prototype.map</a><br><a href="#JavaScript高阶函数topic-3" target="_self"> Array.prototype.filter</a><br><a href="#JavaScript高阶函数topic-4" target="_self"> Array.prototype.reduce</a><br><a href="#JavaScript高阶函数topic-5" target="_self">三、自定义高阶函数</a><br><a href="#JavaScript高阶函数topic-6" target="_self"> 函数组合器</a><br><a href="#JavaScript高阶函数topic-7" target="_self"> 事件监听器注册器</a><br><a href="#JavaScript高阶函数topic-8" target="_self">四、高阶函数的优势与应用场景</a><br><a href="#JavaScript高阶函数topic-9" target="_self"> 优势</a><br><a href="#JavaScript高阶函数topic-10" target="_self"> 应用场景</a><br></div></center><br><br>\n\n在JavaScript的世界里，高阶函数是极为强大的特性，它赋予了开发者简洁、高效处理数据和逻辑的能力。\n本文将以最通俗易懂的方式，带你全面深入地了解高阶函数，从基础概念到复杂应用，逐步揭开其神秘面纱。\n<h3 id="JavaScript高阶函数topic-0">一、什么是高阶函数</h3>\n高阶函数（Higher - Order Function），简单来说，就是满足以下一个或两个条件的函数：\n1. 接受一个或多个函数作为参数：在JavaScript中，函数是一等公民，这意味着函数可以像其他数据类型（如数字、字符串）一样被传递和操作。\n例如，我们可以将一个函数作为参数传递给另一个函数，让接收函数根据不同的逻辑来调用传入的函数。\n2. 返回一个函数：高阶函数执行完毕后，返回的结果也是一个函数。\n这使得我们能够根据不同的条件动态生成可执行的函数。\n<h3 id="JavaScript高阶函数topic-1">二、常见高阶函数详解</h3>\n（一）<o id="JavaScript高阶函数topic-2"> Array.prototype.map</o>\n1. 基本概念与语法\n map 方法是数组的原型方法，它遍历数组中的每个元素，并对每个元素执行传入的回调函数，然后返回一个新数组，新数组的元素是回调函数的返回值。\n其语法为：\nconst newArray = array.map((element, index, array) =&gt; {\n    // 对element进行操作，返回新值\n});\n  element ：当前正在处理的数组元素。\n index （可选）：当前元素在数组中的索引。\n array （可选）：调用 map 方法的数组本身。\n2.实例演示\n假设我们有一个数组 [1, 2, 3, 4] ，想要将每个元素都乘以2，代码如下：\nconst numbers = [1, 2, 3, 4];\nconst doubledNumbers = numbers.map((num) =&gt; num * 2);\nconsole.log(doubledNumbers); // 输出: [2, 4, 6, 8]\n \n在这个例子中， map 方法遍历 numbers 数组，对于每个元素 num ，都执行 num * 2 的操作，并将结果放入新数组 doubledNumbers 中。\n（二）<o id="JavaScript高阶函数topic-3"> Array.prototype.filter</o>\n1. 基本概念与语法\n filter 方法用于过滤数组，它遍历数组中的每个元素，根据传入的回调函数的返回值来决定是否保留该元素。\n语法为：\nconst filteredArray = array.filter((element, index, array) =&gt; {\n    // 返回true或false，决定是否保留该元素\n});\n \n回调函数返回 true 时，对应的元素会被保留在新数组中；\n返回 false 时，元素则被过滤掉。\n2. 实例演示\n从数组 [1, 2, 3, 4, 5] 中筛选出所有偶数，代码如下：\nconst numbers = [1, 2, 3, 4, 5];\nconst evenNumbers = numbers.filter((num) =&gt; num % 2 === 0);\nconsole.log(evenNumbers); // 输出: [2, 4]\n \n这里， filter 方法遍历 numbers 数组，对于每个元素 num ，判断 num % 2 === 0 是否成立。\n如果成立（即 num 是偶数），则将该元素保留在 evenNumbers 数组中。\n（三）<o id="JavaScript高阶函数topic-4"> Array.prototype.reduce</o>\n1. 基本概念与语法\n reduce 方法对数组中的所有元素执行一个累加器函数，从左到右将数组“缩减”为一个值。\n语法为：\nconst result = array.reduce((accumulator, element, index, array) =&gt; {\n    // 对accumulator和element进行操作，返回新的accumulator\n}, initialValue);\n \n accumulator ：累加器，它是上一次调用回调函数时返回的值。\n在第一次调用时，如果提供了 initialValue ，则 accumulator 初始值为 initialValue ；\n否则为数组的第一个元素。\n element ：当前正在处理的数组元素。\nindex （可选）：当前元素在数组中的索引。\narray （可选）：调用 reduce 方法的数组本身。\n  initialValue （可选）：作为第一次调用回调函数时的 accumulator 初始值。\n2. 实例演示\n计算数组 [1, 2, 3, 4] 中所有元素的总和，代码如下：\nconst numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) =&gt; acc + num, 0);\nconsole.log(sum); // 输出: 10\n \n在这个例子中， reduce 方法从左到右遍历 numbers 数组。\n初始时， acc 为 0 （因为我们提供了 initialValue 为 0 ），对于第一个元素 1 ，执行 0 + 1 ，结果为 1 ，这个 1 作为下一次调用的 acc 。\n接着对第二个元素 2 ，执行 1 + 2 ，结果为 3 ，依此类推，最终得到所有元素的总和 10 。\n<h3 id="JavaScript高阶函数topic-5">三、自定义高阶函数</h3>\n除了JavaScript内置的高阶函数，我们还可以自己创建高阶函数。\n下面通过几个例子来展示如何实现。\n（一）<o id="JavaScript高阶函数topic-6"> 函数组合器</o>\n1. 功能描述\n函数组合器是一种将多个函数组合成一个新函数的高阶函数。\n它的作用是让我们可以按照顺序依次调用多个函数，前一个函数的输出作为后一个函数的输入。\n2.\n代码实现\nfunction compose(...funcs) {\n    return function (arg) {\n        return funcs.reduceRight((acc, func) =&gt; func(acc), arg);\n    };\n}\n \n这里的 compose 函数接受多个函数作为参数（通过 ...funcs 展开运算符收集），然后返回一个新函数。\n这个新函数接受一个参数 arg ，在内部通过 reduceRight 方法从右到左依次调用传入的函数，将 arg 作为初始值，每个函数的输出作为下一个函数的输入。\n3. 示例解析\n假设有两个函数 addOne 和 multiplyByTwo ，我们使用 compose 函数将它们组合起来：\nfunction addOne(num) {\n    return num + 1;\n}\nfunction multiplyByTwo(num) {\n    return num * 2;\n}\nconst composedFunction = compose(multiplyByTwo, addOne);\nconsole.log(composedFunction(3)); \n// 输出: 8\n \n在这个例子中， composedFunction 首先对 3 执行 addOne 函数，得到 4 ，然后对 4 执行 multiplyByTwo 函数，最终得到 8 。\n（二）<o id="JavaScript高阶函数topic-7"> 事件监听器注册器</o>\n1. 功能描述\n在JavaScript中，我们经常需要为DOM元素添加事件监听器。\n通过创建一个高阶函数，可以将事件监听器的注册逻辑封装起来，提高代码的复用性。\n2. 代码实现\nfunction addEventListenerFactory(eventType) {\n    return function (element, callback) {\n        element.addEventListener(eventType, callback);\n    };\n}\n \n这里的 addEventListenerFactory 函数接受一个事件类型（如 \'click\' 、 \'mouseover\' 等）作为参数，返回一个新函数。\n这个新函数接受DOM元素和回调函数作为参数，用于为指定的DOM元素添加指定类型的事件监听器。\n3. 实例演示\n为一个按钮元素添加点击事件监听器：\nconst button = document.getElementById(\'myButton\');\nconst addClickListener = addEventListenerFactory(\'click\');\naddClickListener(button, () =&gt; {\n    console.log(\'Button clicked!\');\n});\n \n在这个例子中，首先通过 addEventListenerFactory(\'click\') 创建了一个专门用于添加点击事件监听器的函数 addClickListener 。\n然后，使用这个函数为 id 为 myButton 的按钮元素添加了一个点击事件监听器，当按钮被点击时，会在控制台输出 Button clicked! 。\n<h3 id="JavaScript高阶函数topic-8">四、高阶函数的优势与应用场景</h3>\n（一）<o id="JavaScript高阶函数topic-9"> 优势</o>\n1. 代码简洁性：通过使用高阶函数，可以用更少的代码实现复杂的逻辑。\n例如，使用 map 、 filter 和 reduce 等方法可以避免使用冗长的 for 循环，使代码更加简洁易读。\n2. 可维护性：将功能封装成函数并作为参数传递，使得代码结构更加清晰，易于维护和修改。\n当需要修改某个功能的实现时，只需修改对应的函数，而不会影响到其他部分的代码。\n3. 函数复用性：高阶函数可以接受不同的函数作为参数，从而实现不同的功能。\n这提高了函数的复用性，减少了重复代码的编写。\n（二）<o id="JavaScript高阶函数topic-10"> 应用场景</o>\n1. 数据处理：在处理数组数据时， map 、 filter 和 reduce 等高阶函数是非常强大的工具。\n例如，在数据清洗、转换和统计等方面都有广泛应用。\n2. 事件处理：如前面提到的事件监听器注册器，通过高阶函数可以方便地管理和复用事件处理逻辑。\n3. 函数式编程：高阶函数是函数式编程的核心概念之一。\n在函数式编程中，我们强调将函数作为基本的构建块，通过函数的组合和变换来实现复杂的功能。\n高阶函数的使用使得JavaScript能够更好地支持函数式编程风格。\n',
'<h2>JavaScript 质量代码</h2>\n<div id="质量代码toc" class="toc"><a href="#质量代码topic-0" target="_self">用 async/await 替换嵌套回调</a><br><a href="#质量代码topic-1" target="_self">使用解构赋值使代码更清晰</a><br><a href="#质量代码topic-2" target="_self">提前返回以避免嵌套条件</a><br><a href="#质量代码topic-3" target="_self">使用有意义的变量名</a><br><a href="#质量代码topic-4" target="_self">实施正确的错误处理</a><br></div></center><br><br>\n\n<h3 id="质量代码topic-0">用 async/await 替换嵌套回调</h3><k>之前：</k>\ngetData((result) =&gt; {\n  processData(result, (processed) =&gt; {\n    saveData(processed, (saved) =&gt; {\n      console.log(\'Done!\');\n    });\n  });\n});\n<k>之后：</k>\nasync function handleData() {\n  const result = await getData();\n  const processed = await processData(result);\n  await saveData(processed);\n  console.log(\'Done!\');\n}\n<h3 id="质量代码topic-1">使用解构赋值使代码更清晰</h3><k>之前：</k>\nconst user = getUser();\nconst name = user.name;\nconst email = user.email;\n<k>之后：</k>\nconst { name, email } = getUser();\n<h3 id="质量代码topic-2">提前返回以避免嵌套条件</h3><k>之前：</k>\nfunction processUser(user) {\n  if (user) {\n    if (user.isActive) {\n      if (user.hasPermission) {\n        // 执行操作\n        return true;\n      }\n    }\n  }\n  return false;\n}\n<k>之后：</k>\nfunction processUser(user) {\nif (!user) returnfalse;\nif (!user.isActive) returnfalse;\nif (!user.hasPermission) returnfalse;\n// 执行操作\nreturntrue;\n}\n<h3 id="质量代码topic-3">使用有意义的变量名</h3><k>之前：</k>\nconst x = users.filter(u =&gt; u.a &gt; 18);\n<k>之后：</k>\nconst activeUsers = users.filter(user =&gt; user.age &gt; 18);\n<h3 id="质量代码topic-4">实施正确的错误处理</h3><k>之前：</k>\ntry {\n  doSomething();\n} catch (e) {\n  console.log(e);\n}\n<k>之后：</k>\ntry {\n  await doSomething();\n} catch (error) {\n  logger.error(\'Operation failed:\', {\n    error: error.message,\n    stack: error.stack,\n    context: \'doSomething operation\'\n  });\n  throw new CustomError(\'Operation failed\', error);\n}\n',
'<h2>array methods</h2>\n<div id="arraymethodstoc" class="toc"><a href="#arraymethodstopic-0" target="_self">map() - 变形</a><br><a href="#arraymethodstopic-1" target="_self">filter() - 筛选</a><br><a href="#arraymethodstopic-2" target="_self">reduce() - 归并</a><br><a href="#arraymethodstopic-3" target="_self">forEach() - 最常用</a><br><a href="#arraymethodstopic-4" target="_self">find() - 查找</a><br><a href="#arraymethodstopic-5" target="_self">some() - 条件判断</a><br><a href="#arraymethodstopic-6" target="_self">every() - 检查</a><br><a href="#arraymethodstopic-7" target="_self">组合使用</a><br><a href="#arraymethodstopic-8" target="_self">性能优化</a><br><a href="#arraymethodstopic-9" target="_self">合并多个数组方法。使用 concat()</a><br><a href="#arraymethodstopic-10" target="_self">使用 spread operator (...)</a><br><a href="#arraymethodstopic-11" target="_self">使用 Array.from()</a><br><a href="#arraymethodstopic-12" target="_self">使用 reduce() 方法</a><br><a href="#arraymethodstopic-13" target="_self">数组去重</a><br><a href="#arraymethodstopic-14" target="_self">数组方法</a><br><a href="#arraymethodstopic-15" target="_self">copyWithin()</a><br><a href="#arraymethodstopic-16" target="_self">at() 与 with()</a><br><a href="#arraymethodstopic-17" target="_self">reduceRight()</a><br><a href="#arraymethodstopic-18" target="_self">findLast()</a><br><a href="#arraymethodstopic-19" target="_self">toSorted(), toReversed(), toSpliced()</a><br><a href="#arraymethodstopic-20" target="_self">lastIndexOf()</a><br><a href="#arraymethodstopic-21" target="_self">flatMap()</a><br><a href="#arraymethodstopic-22" target="_self">额外想法</a><br></div></center><br><br>\n\n<h3 id="arraymethodstopic-0">map() - 变形</h3>map()方法创建一个新数组，其结果是对原数组中的每个元素调用提供的函数。\n// 基础用法\nconst numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num =&gt; num * 2);\nconsole.log(doubled); // [2, 4, 6, 8]\n// 实际应用：处理API返回数据\nconst users = [\n    { id: 1, name: \'John\', age: 30 },\n    { id: 2, name: \'Jane\', age: 25 }\n];\nconst userNames = users.map(user =&gt; user.name);\nconsole.log(userNames); // [\'John\', \'Jane\']\n// 链式调用\nconst prices = [99.99, 199.99, 299.99];\nconst formattedPrices = prices\n    .map(price =&gt; price * 0.8) // 打八折\n    .map(price =&gt; price.toFixed(2)); // 格式化\nconsole.log(formattedPrices); // [\'79.99\', \'159.99\', \'239.99\']\n<h3 id="arraymethodstopic-1">filter() - 筛选</h3>filter()方法创建一个新数组，其中包含通过所提供函数测试的所有元素。\n// 基础用法\nconst scores = [65, 90, 75, 85, 55];\nconst passingScores = scores.filter(score =&gt; score &gt;= 60);\nconsole.log(passingScores); // [65, 90, 75, 85]\n// 实际应用：复杂条件过滤\nconst products = [\n    { name: \'Phone\', price: 999, inStock: true },\n    { name: \'Laptop\', price: 1999, inStock: false },\n    { name: \'Tablet\', price: 499, inStock: true }\n];\nconst availableProducts = products.filter(\n    product =&gt; product.inStock &amp;&amp; product.price &lt; 1000\n);\nconsole.log(availableProducts); // [{ name: \'Phone\'...\n}, { name: \'Tablet\'...\n}]\n<h3 id="arraymethodstopic-2">reduce() - 归并</h3>reduce()方法将数组缩减为单个值，是最强大但也最容易被误解的方法。\n// 基础用法：求和\nconst numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce((acc, cur) =&gt; acc + cur, 0);\nconsole.log(sum); // 15\n// 高级应用：数据分组\nconst orders = [\n    { product: \'A\', category: \'Electronics\', price: 100 },\n    { product: \'B\', category: \'Books\', price: 50 },\n    { product: \'C\', category: \'Electronics\', price: 200 }\n];\nconst groupedByCategory = orders.reduce((acc, cur) =&gt; {\n    acc[cur.category] = acc[cur.category] || [];\n    acc[cur.category].push(cur);\n    return acc;\n}, {});\nconsole.log(groupedByCategory);\n// {\n//     Electronics: [{ product: \'A\'...\n}, { product: \'C\'...\n}],\n//     Books: [{ product: \'B\'...\n}]\n// }\n<h3 id="arraymethodstopic-3">forEach() - 最常用</h3>forEach()方法对数组的每个元素执行一次给定的函数，是最直观的遍历方法。\n// 基础用法\nconst items = [\'apple\', \'banana\', \'orange\'];\nitems.forEach((item, index) =&gt; {\n    console.log(`${index + 1}: ${item}`);\n});\n// 1: apple\n// 2: banana\n// 3: orange\n// 实际应用：DOM操作\nconst buttons = document.querySelectorAll(\'button\');\nbuttons.forEach(button =&gt; {\n    button.addEventListener(\'click\', () =&gt; {\n        console.log(\'Button clicked\');\n    });\n});\n// 累加计算\nlet total = 0;\nconst prices = [29.99, 39.99, 49.99];\nprices.forEach(price =&gt; {\n    total += price;\n});\nconsole.log(total.toFixed(2)); // \'119.97\'\n<h3 id="arraymethodstopic-4">find() - 查找</h3>find()方法返回数组中满足提供的测试函数的第一个元素的值。\n// 基础用法\nconst users = [\n    { id: 1, name: \'John\' },\n    { id: 2, name: \'Jane\' },\n    { id: 3, name: \'Bob\' }\n];\nconst user = users.find(user =&gt; user.id === 2);\nconsole.log(user); // { id: 2, name: \'Jane\' }\n// 实际应用：状态查找\nconst tasks = [\n    { id: 1, status: \'pending\' },\n    { id: 2, status: \'completed\' },\n    { id: 3, status: \'pending\' }\n];\nconst completedTask = tasks.find(task =&gt; task.status === \'completed\');\nconsole.log(completedTask); // { id: 2, status: \'completed\' }\n<h3 id="arraymethodstopic-5">some() - 条件判断</h3>some()方法测试数组中是否至少有一个元素通过了提供的函数测试。\n// 基础用法\nconst numbers = [1, 2, 3, 4, 5];\nconst hasEven = numbers.some(num =&gt; num % 2 === 0);\nconsole.log(hasEven); // true\n// 实际应用：权限检查\nconst userRoles = [\'user\', \'editor\', \'viewer\'];\nconst canEdit = userRoles.some(role =&gt; role === \'editor\');\nconsole.log(canEdit); // true\n// 复杂条件检查\nconst products = [\n    { name: \'Phone\', price: 999 },\n    { name: \'Laptop\', price: 1999 },\n    { name: \'Tablet\', price: 499 }\n];\nconst hasAffordableProduct = products.some(\n    product =&gt; product.price &lt; 500\n);\nconsole.log(hasAffordableProduct); // true\n<h3 id="arraymethodstopic-6">every() - 检查</h3>every()方法测试数组的所有元素是否都通过了提供的函数测试。\n// 基础用法\nconst scores = [90, 85, 95, 100];\nconst allPassed = scores.every(score =&gt; score &gt;= 60);\nconsole.log(allPassed); // true\n// 实际应用：表单验证\nconst formFields = [\n    { value: \'John\', required: true },\n    { value: \'john@example.com\', required: true },\n    { value: \'123456\', required: true }\n];\nconst isFormValid = formFields.every(\n    field =&gt; field.required ? field.value.length &gt; 0 : true\n);\nconsole.log(isFormValid); // true\n<h3 id="arraymethodstopic-7">组合使用</h3>这些方法可以链式调用，解决复杂问题：\nconst data = [\n    { id: 1, name: \'John\', score: 85, active: true },\n    { id: 2, name: \'Jane\', score: 92, active: false },\n    { id: 3, name: \'Bob\', score: 78, active: true },\n];\n// 获取活跃用户的平均分\nconst averageScore = data\n    .filter(user =&gt; user.active) // 筛选活跃用户\n    .map(user =&gt; user.score) // 提取分数\n    .reduce((acc, curr, _, arr) =&gt; acc + curr / arr.length, 0); // 计算平均值\nconsole.log(averageScore); // 81.5\n<h3 id="arraymethodstopic-8">性能优化</h3>避免在forEach中使用async/await\n// 不推荐\narray.forEach(async item =&gt; {\n    await process(item);\n});\n// 推荐\nfor (const item of array) {\n    await process(item);\n}\n大数据量处理时考虑使用for…of\n// 处理大数组时更高效\nfor (const item of largeArray) {\n    // 处理逻辑\n}\n合理使用break和continue\n// 使用some代替forEach提前退出\nconst found = array.some(item =&gt; {\n    if (condition) {\n        // 找到后立即退出\n        return true;\n    }\n    return false;\n});\n\n<h3 id="arraymethodstopic-9">合并多个数组方法。使用 concat()</h3>\nconcat() 方法可以将一个或多个数组合并到一个数组中。\n这是最直接的方法。\nlet array1 = [1, 2, 3];\nlet array2 = [4, 5, 6];\nlet array3 = array1.concat(array2); // 结果是 [1, 2, 3, 4, 5, 6]\n<h3 id="arraymethodstopic-10">使用 spread operator (...)</h3>\nES6 引入了扩展运算符，它允许将可迭代的对象（如数组）展开为单独的元素。\nlet array1 = [1, 2, 3];\nlet array2 = [4, 5, 6];\nlet array3 = [...array1, ...array2]; // 结果是 [1, 2, 3, 4, 5, 6]\n<h3 id="arraymethodstopic-11">使用 Array.from()</h3>\n虽然 Array.from() 主要用于从类数组对象或可迭代对象创建新的数组实例，但它也可以与扩展运算符结合使用来合并数组。\nlet array1 = [1, 2, 3];\nlet array2 = [4, 5, 6];\nlet array3 = Array.from({length: 1}, (_, i) =&gt; [...array1, ...array2][i]);\n// 这里只是为了演示 Array.from(), 实际上应该直接使用扩展运算符\n<h3 id="arraymethodstopic-12">使用 reduce() 方法</h3>\n如果你有很多数组需要合并，可以使用 reduce() 方法来简化代码。\nlet arrays = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nlet merged = arrays.reduce((acc, curr) =&gt; acc.concat(curr), []);\n// 合并后的结果是 [1, 2, 3, 4, 5, 6, 7, 8, 9]\n以上就是几种常用的合并数组的方法，你可以根据自己的需求选择合适的方式。\n\n<h3 id="arraymethodstopic-13">数组去重</h3>\n利用Set的天然去重特性，一行代码解决数组去重问题：\nconst uniqueArray = (arr) =&gt; [...new Set(arr)];\n使用示例：\nconsole.log(uniqueArray([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]\n\n<h3 id="arraymethodstopic-14">数组方法</h3>\n很多人使用 JavaScript 数组时，最多就是 for 循环、map() 或者 filter() 等常见方法，但其实数组还有不少“隐藏招数”。\n\n<h3 id="arraymethodstopic-15">copyWithin()</h3>想象一下：取走一片披萨，然后又把它塞回披萨盒的另一个角落，这就是 copyWithin() 的感觉。\n它会将数组中指定范围的元素复制到同一个数组的其他位置，数组长度并不会改变。\nconst arr = [1, 2, 3, 4, 5];\narr.copyWithin(0, 3); // [4, 5, 3, 4, 5]\n在这里，从索引 3 开始的内容 (即 [4, 5]) 被复制到索引 0 的位置，替换了原来的 [1, 2]。\n也可以再加一个结束索引来限定要复制的范围。\n<k>何时使用</k>\n快速地在数组内部进行重排，而不想新建数组。\n可以写一些奇妙的“滑动窗口”或排序前的临时处理逻辑。\n<h3 id="arraymethodstopic-16">at() 与 with()</h3>这是近几年新增的方法。\nat() 先出现，可以用负数轻松获取数组末尾元素；\n然后在 2023 年新增的 with() 则能对数组的某个位置做“不可变替换”——返回一个全新的数组而不改变原数组。\nconst colors = [\'red\', \'blue\', \'green\', \'yellow\'];\nconsole.log(colors.at(-1));     // \'yellow\'\nconsole.log(colors.with(1, \'purple\')); \n// [\'red\', \'purple\', \'green\', \'yellow\']\nat(-1) 就是取最后一个元素。\nwith() 可以在索引 1 上替换为 \'purple\'，并返回新数组，非常适合需要保持原数组不变的场景，比如在 Redux 这类数据管理中。\n<h3 id="arraymethodstopic-17">reduceRight()</h3>大部分人熟悉 reduce()，它被称为数组方法里的“瑞士军刀”，可以实现各种聚合操作。\n不过，想反向迭代数组怎么办？\n那就是 reduceRight()。\nconst arr = [\'a\', \'b\', \'c\', \'d\'];\nconst result = arr.reduceRight((acc, curr) =&gt; acc + curr);\nconsole.log(result); // \'dcba\'\n和 reduce() 不同之处在于，它从数组末尾往前处理元素。\n这对于需要反向拼接字符串或逆序计算的场景特别有用。\n<h3 id="arraymethodstopic-18">findLast()</h3>findLast() 是 ES13（2022）中的新成员，和 find() 类似，但搜索方向相反，它会从数组的末尾开始查找。\nconst nums = [1, 2, 3, 4, 5, 6, 7];\nconsole.log(nums.findLast(n =&gt; n % 2 === 0)); // 6\n当你知道需要查找的元素更可能出现在数组后半部分时，findLast() 就很便捷，避免做无意义的前段搜索。\n<h3 id="arraymethodstopic-19">toSorted(), toReversed(), toSpliced()</h3>这是 ES2023 里为数组新增的“不变（immutable）”版本，功能对应老牌的 sort(), reverse(), splice()，但它们不会修改原数组，会返回一个新数组。\nconst arr = [3, 1, 4, 1, 5];\n// 不影响原数组的排序\nconsole.log(arr.toSorted());   // [1, 1, 3, 4, 5]\nconsole.log(arr);              // [3, 1, 4, 1, 5]\n// 不影响原数组的反转\nconsole.log(arr.toReversed()); // [5, 1, 4, 1, 3]\nconsole.log(arr);              // [3, 1, 4, 1, 5]\n对于喜欢函数式编程、或在项目中需要维持状态不可变的场景，这些方法能避免“写着写着，原数组就被改掉了”的坑，提高可维护性。\n<h3 id="arraymethodstopic-20">lastIndexOf()</h3>比 indexOf() 更少被提及的是 lastIndexOf()，它能找到指定元素最后一次出现的位置，还可以指定搜索的起始点。\nconst arr = [\'apple\', \'banana\', \'cherry\', \'apple\'];\nconsole.log(arr.lastIndexOf(\'apple\'));      // 3\nconsole.log(arr.lastIndexOf(\'apple\', 2));   // 0\n当数组里有重复元素、你又需要从后往前找的时候，lastIndexOf() 就格外顺手。\n<h3 id="arraymethodstopic-21">flatMap()</h3>这是将 map() 和 flat() 合二为一的方法。\n它会对每个元素执行映射，然后把结果拍平一层。\nconst arr = [1, 2, [3], 4];\nconsole.log(arr.flatMap(x =&gt; [x * 2])); // [2, 4, 6, 8]\n这样就不用先 map() 再 flat()，一次搞定，代码更简洁。\n<h3 id="arraymethodstopic-22">额外想法</h3>这些数组方法知名度不如 push()、filter() 那么高，但都很有用。\n<k>小技巧</k>\n在需要“从末尾取元素”或“只更新数组某个位置但保持不可变”时，直接用 at() / with() 就能省不少功夫。\n在操作复杂数据时，尝试使用 toSorted()、toReversed() 等不可变方法，可以避免状态被意外改写。\n如果想让代码逻辑更直观，可以把 reduceRight() 和 flatMap() 同时用起来，一边翻转一边拍平，能得到很多创造性玩法。\n<k>记住</k>：对数组的掌控，不止于 for 和 map()，这些鲜为人知的方法同样值得尝试。\n',
'<h2>10个JavaScript技巧</h2>\n<div id="10个JavaScript技巧toc" class="toc"><a href="#10个JavaScript技巧topic-0" target="_self">1. 带默认值的解构</a><br><a href="#10个JavaScript技巧topic-1" target="_self">2. 动态对象键</a><br><a href="#10个JavaScript技巧topic-2" target="_self">3. 使用可选链（?.）访问深层对象</a><br><a href="#10个JavaScript技巧topic-3" target="_self">4. 空值合并运算符（??）</a><br><a href="#10个JavaScript技巧topic-4" target="_self">5. 使用逻辑运算符进行短路操作</a><br><a href="#10个JavaScript技巧topic-5" target="_self">6. 使用闭包进行缓存</a><br><a href="#10个JavaScript技巧topic-6" target="_self">7. 使用Intl进行本地化格式化</a><br><a href="#10个JavaScript技巧topic-7" target="_self">8. 使用防抖和节流优化性能</a><br><a href="#10个JavaScript技巧topic-8" target="_self">9. 使用forEach自定义Map迭代</a><br><a href="#10个JavaScript技巧topic-9" target="_self">10. 使用for await...of进行异步迭代</a><br></div></center><br><br>\n\n<h3 id="10个JavaScript技巧topic-0">1. 带默认值的解构</h3>在JavaScript中，解构是一个流行的特性，但高级开发者会结合默认值使用它，使代码更加健壮。\nconst user = { name: "Alice" };\nconst { name, age = 25 } = user;\nconsole.log(name); // Alice\nconsole.log(age);  // 25\n这个技巧特别适用于处理不完整的数据对象，而无需冗长的空值检查。\n<h3 id="10个JavaScript技巧topic-1">2. 动态对象键</h3>高级JavaScript允许你动态创建对象键，使你的代码更具适应性。\nconst key = "dynamicKey";\nconst obj = {\n  [key]: "value",\n};\nconsole.log(obj.dynamicKey); // value\n这对于从用户输入或外部数据创建对象特别有用。\n<h3 id="10个JavaScript技巧topic-2">3. 使用可选链（?.）访问深层对象</h3>可选链操作符（?.）简化了访问嵌套属性的过程，无需担心undefined错误。\nconst user = { address: { city: "New York" } };\nconsole.log(user.address?.city);    // New York\nconsole.log(user.profile?.age);    // undefined\n这消除了冗长的if检查，使代码更简洁。\n<h3 id="10个JavaScript技巧topic-3">4. 空值合并运算符（??）</h3>虽然||常用于回退值，但它将0、false和\'\'视为假值。\n??运算符仅检查null或undefined。\nconst value = 0;\nconsole.log(value || 10); // 10 (应用回退)\nconsole.log(value ?? 10); // 0  (不应用回退)\n这种细微的差别可以防止逻辑操作中的意外行为。\n<h3 id="10个JavaScript技巧topic-4">5. 使用逻辑运算符进行短路操作</h3>逻辑运算符（&amp;&amp;和||）不仅用于条件判断，还可以有效地进行短路操作。\nconst isAuthenticated = true;\nisAuthenticated &amp;&amp; console.log("User is authenticated");\nconst fallback = "default";\nconst data = null || fallback;\nconsole.log(data); // default\n这些技巧减少了样板代码，同时保持了可读性。\n<h3 id="10个JavaScript技巧topic-5">6. 使用闭包进行缓存</h3>缓存是一种技术，用于缓存昂贵的函数调用。\nJavaScript闭包使这变得优雅。\nconst memoizedAdd = (() =&gt; {\nconst cache = {};\nreturn(a, b) =&gt; {\n    const key = `${a},${b}`;\n    if (cache[key]) return cache[key];\n    const result = a + b;\n    cache[key] = result;\n    return result;\n  };\n})();\nconsole.log(memoizedAdd(2, 3)); // 5 (计算)\nconsole.log(memoizedAdd(2, 3)); // 5 (缓存)\n这对于重复的计算任务是一个实用的优化。\n<h3 id="10个JavaScript技巧topic-6">7. 使用Intl进行本地化格式化</h3>Intl对象简化了如日期、数字和货币的全球格式化任务。\nconst number = 1234567.89;\nconst formatted = new Intl.NumberFormat("en-US", {\n  style: "currency",\n  currency: "USD",\n}).format(number);\nconsole.log(formatted); // $1,234,567.89\n高级开发者使用这个特性以确保应用程序优雅地处理本地化。\n<h3 id="10个JavaScript技巧topic-7">8. 使用防抖和节流优化性能</h3>防抖和节流对于优化事件处理至关重要。\n<k>防抖：</k> 在延迟后执行函数，如果在延迟期间再次调用，则重置计时器。\nconst debounce = (fn, delay) =&gt; {\nlet timer;\nreturn(...args) =&gt; {\n    clearTimeout(timer);\n    timer = setTimeout(() =&gt;fn(...args), delay);\n  };\n};\nconst onResize = debounce(() =&gt;console.log("Resized!"), 300);\nwindow.addEventListener("resize", onResize);\n<k>节流：</k> 限制函数执行频率，每个指定间隔执行一次。\nconst throttle = (fn, interval) =&gt; {\nlet lastTime = 0;\nreturn(...args) =&gt; {\n    const now = Date.now();\n    if (now - lastTime &gt;= interval) {\n      lastTime = now;\n      fn(...args);\n    }\n  };\n};\nconst onScroll = throttle(() =&gt;console.log("Scrolling!"), 500);\nwindow.addEventListener("scroll", onScroll);\n<h3 id="10个JavaScript技巧topic-8">9. 使用forEach自定义Map迭代</h3>Map对象保持了键的插入顺序，并允许自定义迭代。\nconst map = new Map([\n  ["key1", "value1"],\n  ["key2", "value2"],\n]);\nmap.forEach((value, key) =&gt; {\n  console.log(`${key}: ${value}`);\n});\n与普通对象不同，Map支持非字符串键并保持顺序，使其适用于高级用例。\n<h3 id="10个JavaScript技巧topic-9">10. 使用for await...of进行异步迭代</h3>使用for await...of可以无缝处理异步数据流。\nasync function* fetchData() {\nyieldawaitfetch("https://api.example.com/data1").then((res) =&gt; res.json());\nyieldawaitfetch("https://api.example.com/data2").then((res) =&gt; res.json());\n}\n(async () =&gt; {\nforawait (const data offetchData()) {\n    console.log(data);\n  }\n})();\n这种模式简化了与API、流和其他异步任务的工作。\n',
'<h2>JavaScript Object Looping</h2>\n<div id="ObjectLoopingtoc" class="toc"><a href="#ObjectLoopingtopic-0" target="_self">循环对象键</a><br><a href="#ObjectLoopingtopic-1" target="_self">方法 1：JavaScript 使用 Object.keys() 循环对象键</a><br><a href="#ObjectLoopingtopic-2" target="_self">方法 2：使用 Object.values() 循环对象值</a><br><a href="#ObjectLoopingtopic-3" target="_self">方法 3：使用 Object.entries() 循环对象条目</a><br><a href="#ObjectLoopingtopic-4" target="_self">方法 4：JavaScript 使用 for...in 循环对象属性</a><br><a href="#ObjectLoopingtopic-5" target="_self">不同循环对象属性的比较</a><br></div></center><br><br>\n\n如何在JavaScript 中循环对象属性和值？\n它与数组不同，它们没有内置的循环方法。\n\n<h3 id="ObjectLoopingtopic-0">循环对象键</h3>JavaScript 对象键或属性是存储在对象中的值的名称或标识符。\nJavaScript 对象是JavaScript 中的非原始数据类型之一。\n它们可以是字符串、符号或数字，用于访问或修改对象的值。\n例如，person.name 是一个返回 person 对象的名称值的属性。\nconst={  name:"John",  age:30,  favoriteColors:["Red","Green"]};\n我们将在整篇文章中使用同一个对象。\n\n<h3 id="ObjectLoopingtopic-1">方法 1：JavaScript 使用 Object.keys() 循环对象键</h3>JavaScript Object.keys()方法返回对象的所有键（或属性名称）的数组。\n然后，您可以使用 for 循环或 forEach() 方法来迭代数组并访问键。\n要循环访问 person 对象的键，您可以使用 Object.keys() 静态方法，如下所示：\nconst keys = Object.keys(person); // Output: ["name", "age", "favoriteColors"]\n// 1.\nUsing a for() loopfor (let i = 0; i &lt; keys.length; i++) {  console.log(keys[i]);}// Output: "name", "age", "favoriteColors"\n// 2.\nUsing a forEach() methodkeys.forEach(key =&gt; {  console.log(key); });// Output: "name", "age", "favoriteColors"\n\n这种方法的优点是：\n它简单易用。\n它适用于任何对象，无论其结构或复杂性如何。\n它与旧版浏览器兼容，因为它是 ECMAScript 5 标准的一部分。\n\n这种方法的缺点是：\n此方法为您提供对象自己的键。\n它忽略从原型链获得的密钥。\n有时，这正是您所需要的。\n其他时候，您可能也想包含这些键。\n对象的键没有固定的顺序。\n\n这意味着您不能总是期望它们以相同的顺序出现。\n如果您的逻辑取决于按键顺序，请小心，因为它可能不会按您的预期工作。\n这段代码创建了另一个数组。\n这会减慢您的代码速度并使用更多内存。\n如果物体很大或有很多部分，情况会更糟。\n<h3 id="ObjectLoopingtopic-2">方法 2：使用 Object.values() 循环对象值</h3>Object.values() 为我们提供了一个包含对象所有值的数组。\n您可以循环数组并轻松获取值。\n例如，看看这个 person 对象。\n您可以像这样使用 Object.values() ：\n// Output: ["John", 40, ["Red", "Green"]]\n// 1.\nUsing a for() loopfor (let index = 0; index &lt; values.length; index++) {  console.log(values[index]);}// Output: ["John", 40, ["Red", "Green"]\n// 2.\nUsing a forEach() methodvalues.forEach(key =&gt; {  });// Output: ["John", 40, ["Red", "Green"]\n\n这种方法的优点是：\n它简单易用。\n它适用于任何对象，无论其结构或复杂性如何。\n它是 ECMAScript 2017 标准的一部分，这意味着它是一项现代且受到广泛支持的功能。\n\n这种方法的缺点是：\n它只返回对象本身的值。\n这意味着它不包括从对象原型链继承的值。\n这可能是也可能不是您想要的，具体取决于您的用例。\n\nObject.values() 不关心值的顺序，因为对象没有排序。\n如果您的代码依赖于顺序，这可能会成为问题。\n\n这是一个新功能，因此一些旧浏览器不支持它。\n在这些情况下，您可能需要使用一些技巧才能使其发挥作用。\nObject.values() 使用值创建一个新数组，这会影响代码使用的速度和内存量。\n如果您的对象很大或很复杂，这可能是一个问题。\n<h3 id="ObjectLoopingtopic-3">方法 3：使用 Object.entries() 循环对象条目</h3>你想获取一个对象的键值对吗？\n你可以使用Object.entries()！它为您提供了一个数组数组，其中每个子数组都有一个键和一个值。\n然后，您可以使用 for 或 forEach 循环数组，并根据需要使用条目。\n\n例如，使用与之前相同的 person 对象，您可以使用 Object.entries() 方法，如下所示：\n// 1.\nUsing a for() loopfor (let index = 0; index &lt; entries.length; index++) {  }// Output: ["name", "John"], ["age", 30], ["favoriteColors", ["Red", "Green"]]\n// 2.\nUsing a forEach() methodentries.forEach(entry =&gt; {  });// Output: ["name", "John"], ["age", 30], ["favoriteColors", ["Red", "Green"]]\n\n这种方法的优点是：\n它简单易用。\n它适用于任何对象，无论其结构或复杂性如何。\n它是 ECMAScript 2017 标准的一部分，这意味着它是一项现代且受到广泛支持的功能。\n它返回对象的键和值，如果您需要在逻辑中访问这两个键和值，这会很有用。\n\n这种方法的缺点是：\n它只返回对象自己的条目，这意味着它不包括从对象原型链继承的条目。\n这可能是也可能不是您想要的，具体取决于您的用例。\n它不保证条目的顺序，因为对象本质上是无序的。\n\n如果您的逻辑依赖于条目的顺序，这可能会导致一些问题。\n它会创建一个额外的数组，这可能会影响代码的性能和内存使用情况，特别是在对象很大或嵌套的情况下。\n它与旧版浏览器不兼容，因为它是一个相对较新的功能。\n您可能需要使用 polyfill 或转译器才能使其在较旧的环境中工作。\n<h3 id="ObjectLoopingtopic-4">方法 4：JavaScript 使用 for...in 循环对象属性</h3>使用 for...in 循环，您可以遍历对象的所有属性。\n它为您提供一个保存属性名称的变量。\n然后您可以使用带有点或括号的变量来获取属性值。\n例如，使用与之前相同的 person 对象，我们可以使用 for...in 语句，如下所示：\nconst person = {  name: "John",  age: 30,  favoriteColors: ["Red", "Green"]};\n // Using a for...in statementfor (let key in person) {  console.log(key);         // Output: "name", "age", "favoriteColors"  console.log(person[key]); // Output: "John", 30, ["Red", "Green"]}\n\n这种方法的优点是：\n它简单易用。\n它不会创建额外的数组，这可能会提高代码的性能和内存使用率，特别是在对象很大或嵌套的情况下。\n它返回对象的键和值，如果您需要在逻辑中访问这两个键和值，这会很有用。\n\n这种方法的缺点是：\n它返回对象的所有可枚举属性，这意味着它包括从对象原型链继承的属性。\n这可能是也可能不是您想要的，具体取决于您的用例。\n如果只想循环对象自身的属性，则需要使用 hasOwnProperty() 方法过滤掉继承的属性。\n它不保证属性的顺序，因为对象本质上是无序的。\n\n如果您的逻辑依赖于属性的顺序，这可能会导致一些问题。\n它与 JavaScript 的一些新功能不兼容，例如 Symbol 属性或 Object.defineProperty()。\n这些功能可以创建 for…in 语句不可见的不可枚举属性。\n<h3 id="ObjectLoopingtopic-5">不同循环对象属性的比较</h3>这是四种方法的快速比较表：\n<table><thead><tr><th>方法</th><th>退货</th><th>拥有/全部</th><th>命令</th><th>表现</th><th>兼容性</th></tr></thead><tbody><tr><td>Object.keys()</td><td>按键</td><td>自己的</td><td>不</td><td>低的</td><td>高的</td></tr><tr><td>Object.values()</td><td>价值观</td><td>自己的</td><td>不</td><td>低的</td><td>中等的</td></tr><tr><td>对象.entries（）</td><td>键值</td><td>自己的</td><td>不</td><td>低的</td><td>中等的</td></tr><tr><td>for...in</td><td>特性</td><td>全部</td><td>不</td><td>高的</td><td>低的</td></tr></tbody></table>在 JavaScript 中循环对象的最佳方法取决于您想要实现的目标以及您想要如何编写代码。\n但是，一般的经验法则是，如果要访问对象的键、值或条目，则使用 Object 方法；\n如果要访问对象的属性及其原型链，则使用 for...in 语句。\n',
'<h2>Most basic network chart in d3.js</h2><a href="basic network chart with d3.html" class="whitebut ">basic network chart with d3</a>',
'<h2>HTML read .txt file from URL</h2>\nconst url = "http://www.puzzlers.org/pub/wordlists/pocket.txt"\nfetch(url)\n   .then( r => r.text() )\n   .then( t => //process your text! )\n',
'Three different ways to duplicate an array in JavaScript:\n1. Using the slice() Method\nlet originalArray = [1, 2, 3, 4, 5];\nlet duplicateArray = originalArray.slice();\nconsole.log(duplicateArray); // Output: [1, 2, 3, 4, 5]\n\n2. Using the Spread Operator\nlet originalArray = [1, 2, 3, 4, 5];\nlet duplicateArray = [...originalArray];\nconsole.log(duplicateArray); // Output: [1, 2, 3, 4, 5]\n\n3. Using the Array.from() Method\nlet originalArray = [1, 2, 3, 4, 5];\nlet duplicateArray = Array.from(originalArray);\nconsole.log(duplicateArray); // Output: [1, 2, 3, 4, 5]\n\nEach of these methods will create a shallow copy of the original array.',
];
