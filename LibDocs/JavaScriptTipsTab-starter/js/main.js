// List of JavaScript tips
var tipsList = [

"<pre>Don't forget the var keyword when assigning a variable's value for the first time.",
"<pre>undefined, null, 0, false, NaN, and '' (empty string) are all falsy.",
"<pre>Declare a function with<br/> function <em>myFunctionName</em>() { <br>&nbsp;&nbsp;...<br> }",
"<pre>if/else statements look like <br/> if (<em>condition</em>) { <br/>&nbsp;&nbsp;...<br/>} else { <br/>&nbsp;&nbsp;...<br/>}",
"<pre>You can return the result of a function into a variable with return:<br><br>function timesFive(inputNumber) {<br> &nbsp;&nbsp;return inputNumber * 5; <br>}<br>console.log(timesFive(6));<br>// Output: 30 ",
"<pre>The && operator means both things must be true: <br/>  true && true = true<br>true && false = false<br>false && false = false",
"<pre>The || operator means either can be true: <br/>  true || true = true<br>true || false = true<br>false || false = false",
"<pre>A for has three condtions: a start condition, a stop condition, and an iterator: <br><br>for (var i = 0; i < myArray.length; i++) { <br>&nbsp;&nbsp;...<br>}",
"<pre>To interpolate a variable into a string, use the + operator, like this: <br><br>var myName = 'Jon';<br/> 'Hello, my name is ' + myName;",
"<pre>To generate a random number, use JavaScript's built in function Math.random().",
"<pre>Arrays hold lists of data. You can access any of the list items by using bracket notation, like this: <br><br>var myArray = ['pears', 'asparagus', 'bananas'];<br>myArray[1]; // asparagus",
"<pre>jQuery selectors start with the dollar sign and parentheses :<br><br>$()",
"<pre>jQuery element selector selects element name :<br><br>$('p'), $('div'), $('p').hide();",
"<pre>jQuery #id selector selects the id tag :<br><br>$('#test'),  $('#test').hide();",
"<pre>jQuery class selector finds a specific class 'test' to hide it :<br><br>$('.test').hide();",
"<pre>Selects all elements :<br><br>$('*')",
"<pre>Selects the current HTML element :<br><br>$(this)",
"<pre>Selects all &lt;p&gt; elements with class='intro' :<br><br>$('p.intro')",
"<pre>Selects the first &lt;p&gt; element :<br><br>$('p:first')",
"<pre>Selects the first &lt;li&gt; element of the first &lt;ul&gt; :<br><br>$('ul li:first')",
"<pre>Selects the first &lt;li&gt; element of every &lt;ul&gt; :<br><br>$('ul li:first-child')",
"<pre>Selects all elements with an href attribute :<br><br>$('[href]')",
"<pre>Selects all &lt;a&gt; elements \"_blank\" :<br><br>$('a[target='_blank']')",
"<pre>Selects all &lt;a&gt; elements NOT \"_blank\" :<br><br>$('a[target!='_blank']')",
"<pre>Selects all &lt;button&gt; elements and &lt;input&gt; elements of type='button' :<br><br>$(':button')",
"<pre>Selects all even &lt;tr&gt; elements :<br><br>$('tr:even')",
"<pre>Selects all odd &lt;tr&gt; elements in a table :<br><br>$('tr:odd')",
"<pre>display data by writing into an HTML element :<br><br>document.getElementById(\"demo\").innerHTML = 5 + 6;",
"<pre>display data by writing into the HTML output :<br><br>document.write(5 + 6); will delete all existing HTML",
"<pre>display data by writing into an alert box :<br><br>window.alert(5 + 6);",
"<pre>display data by writing into the browser console :<br><br>console.log(5 + 6);",
"<pre>Javascript Object :<br><br>var car = {type:\"Fiat\", model:\"500\", color:\"white\"};",
"<pre>Object Properties :<br><br>The name:values pairs",
"<pre>Object Methods :<br><br>Methods are properties stored as function",
"<pre>Object Spaces and line breaks are not important :<br><br>Object definition can span multiple lines",
"<pre>Accessing Object Properties :<br><br>objectName.propertyName, or objectName[\"propertyName\"]",
"<pre>Accessing Object Methods :<br><br>objectName.methodName(), with ()",
"<pre>Local variables have local scope :<br><br>Local scope can only be accessed within the function.",
"<pre>Global variable has global scope :<br><br>All scripts and functions on a web page can access global variable",
"<pre>Assigning value to a not declared variable :<br><br>Automatically become a GLOBAL variable.",
"<pre>onchange Event :<br><br>An HTML element has been changed",
"<pre>onclick Event :<br><br>The user clicks an HTML element",
"<pre>onmouseover Event :<br><br>The user moves the mouse over an HTML element",
"<pre>onmouseout Event :<br><br>The user moves the mouse away from an HTML element",
"<pre>onkeydown Event :<br><br>The user pushes a keyboard key",
"<pre>onload Event :<br><br>The browser has finished loading the page",
"<pre>String Length Methods :<br><br>var sln = txt.length;",
"<pre>String indexOf() method:first occurrence of a specified text :<br><br>var pos = str.indexOf(\"locate\");",
"<pre>String lastIndexOf() method:last occurrence of a specified text :<br><br>var pos = str.lastIndexOf(\"locate\");",
"<pre>String lastIndexOf() method: accept a second parameter as starting position for the search :<br><br>var pos = str.indexOf(\"locate\",15);",
"<pre>String search() method: searches a string :<br><br>var pos = str.search(\"locate\");",
"<pre>String slice() method: extracts a part of a string :<br><br>var res = str.slice(7, 13);",
"<pre>String slice() method: negative parameter, counted from the end :<br><br>var res = str.slice(-12, -6);",
"<pre>String slice() method: omit the second parameter, slice out the rest :<br><br>var res = str.slice(7);",
"<pre>String slice() method: counting from the end :<br><br>var res = str.slice(7);",
'<pre>difference between slice() and substring() :<br><br>substring() cannot accept negative indexes<br>Syntax: string.slice(start, stop);<br>Syntax: string.substring(start, stop);<br><br>Distinctions of substring():<br>If start > stop, then substring will swap those 2 arguments.<br>If either argument is negative or is NaN, it is treated as if it were 0.<br><br>Distinctions of slice():<br>If start > stop, slice() will return the empty string. ("")<br>If start is negative: sets char from the end of string<br>',
"<pre>difference between slice() and substr() :<br><br>second parameter specifies the length of the extracted part<br>String.slice( begin, end )<br>String.substr( start, length )<br>",
"<pre>replace() method replaces value :<br><br>var n = str.replace(\"Microsoft\", \"W3Schools\");",
"<pre>regular expression to replace all matches, with a /g flag :<br><br>var n = str.replace(/Microsoft/g, \"W3Schools\");",
"<pre>replace() is case sensitive, To replace case insensitive use /i flag :<br><br>var n = str.replace(/MICROSOFT/i, \"W3Schools\");",
"<pre>toUpperCase(): convert to upper case :<br><br>var text2 = text1.toUpperCase();",
"<pre>toLowerCase(): convert to lower case :<br><br>var text2 = text1.toLowerCase();",
"<pre>concat() joins two or more strings :<br><br>var text3 = text1.concat(\" \", text2);",
"<pre>concat() method can use the plus operator :<br><br>var text = \"Hello\" + \" \" + \"World!\";",
"<pre>charAt() method returns the character at a specified position :<br><br>str.charAt(0);<br>let text = 'HELLO WORLD';<br>let letter = text.charAt(1); // E",
"<pre>charCodeAt() method returns the unicode of the character at a specified index :<br><br>str.charCodeAt(0);",
"<pre>split() method convert string to an array :<br><br>txt.split(\",\"); // Split on commas",
"<pre>to end each executable statement :<br><br>Add a semicolon",
"<pre>add white space to script to make it more readable :<br><br>JavaScript ignores multiple spaces",
"<pre>groupe javaScript statements in code blocks :<br><br>inside curly brackets {...}",
"<pre>Keywords: break :<br><br>Terminates a switch or a loop",
'<pre>Keywords: continue :<br><br>Jumps out of a loop and starts at the top<br>let text = "";<br>for (let i = 0; i < 5; i++) {<br>  if (i === 3) continue;<br>  text += i + "<br>";<br>} // 0 1 2 4<br>',
"<pre>Keywords: debugger :<br><br>Stops the execution and calls the debugging function",
"<pre>Keywords: do ... while :<br><br>Executes a block of statements, and repeats while a condition is true",
"<pre>Keywords: for :<br><br>Marks block of statements to be executed as long as condition is true",
"<pre>Keywords: function :<br><br>Declares a function",
"<pre>Keywords: if ... else :<br><br>Marks a block of statements to be executed, depending on condition",
"<pre>Keywords: return :<br><br>Exits a function",
"<pre>Keywords: switch :<br><br>Marks a block of statements to be executed, depending on different cases",
'<pre>Keywords: try ... catch :<br><br>Implements error handling to a block of statements<br>The try statement allows you to define a block of code to be tested for errors.<br>The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.<br>The finally statement lets you execute code, after try and catch, regardless of the result.<br><br>try {<br>  adddlert("Welcome guest!");<br>}<br>catch(err) {<br>  document.getElementById("demo").innerHTML = err.message;<br>}<br>finally {<br>  document.getElementById("demo").value = "";<br>}<br><br>try {<br>  eval("alert(\'Hello)");   // Missing \' will produce an error<br>}<br>catch(err) {<br>  document.getElementById("demo").innerHTML = err.name;<br>}<br>',
"<pre>Keywords: var :<br><br>Declares a variable",
"<pre>modular operator (%) :<br><br>returns the division remainder. var z = x % y",
"<pre>increment operator (++) :<br><br>increments numbers. x++;",
"<pre>Exponentiation ** :<br><br>10 ** 2",
"<pre>Shift left &lt;&lt; :<br><br>x &lt;&lt; 2",
"<pre>Shift right (unsigned) &gt;&gt;&gt; :<br><br>x &gt;&gt;&gt; 2",
"<pre>Equal comparator :<br><br>x == y",
"<pre>Strict equal :<br><br>x === y",
"<pre>Logical and :<br><br>&&",
"<pre>Logical or :<br><br>||",
"<pre>Math.PI; :<br><br>returns 3.141592653589793",
"<pre>Math.round() :<br><br>Math.round(4.4); returns the value of x rounded to its nearest integer:",
"<pre>Math.pow() :<br><br>Math.pow(8, 2); returns the value of x to the power of y:",
"<pre>Math.sqrt() :<br><br>Math.sqrt(64);",
"<pre>Math.abs() :<br><br>Math.abs(-4.7);",
"<pre>Math.ceil() :<br><br>Math.ceil(4.4);",
"<pre>Math.floor() :<br><br>Math.floor(4.7);",
"<pre>Math.sin() :<br><br>Math.sin(90 * Math.PI / 180);",
"<pre>Math.min() :<br><br>Math.min(0, 150, 30, 20, -8, -200);",
"<pre>Math.random() :<br><br>Math.random();",
"<pre>Math.E :<br><br>returns Euler\'s number",
"<pre>Math.SQRT2 :<br><br>returns the square root of 2",
"<pre>Math.SQRT1_2 :<br><br>returns the square root of 1/2",
"<pre>Math.LN2 :<br><br>returns the natural logarithm of 2",
"<pre>Math.LN10 :<br><br>returns the natural logarithm of 10",
"<pre>Math.LOG2E :<br><br>returns base 2 logarithm of E",
"<pre>Math.LOG10E :<br><br>returns base 10 logarithm of E",
"<pre>abs(x) :<br><br>Returns the absolute value of x",
"<pre>acos(x) :<br><br>Returns the arccosine of x, in radians",
"<pre>asin(x) :<br><br>Returns the arcsine of x, in radians",
"<pre>atan(x) :<br><br>Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians",
"<pre>atan2(y, x) :<br><br>Returns the arctangent of the quotient of its arguments",
"<pre>ceil(x) :<br><br>Returns the value of x rounded up to its nearest integer",
"<pre>cos(x) :<br><br>Returns the cosine of x (x is in radians)",
"<pre>exp(x) :<br><br>Returns the value of Ex",
"<pre>floor(x) :<br><br>Returns the value of x rounded down to its nearest integer",
"<pre>log(x) :<br><br>Returns the natural logarithm (base E) of x",
"<pre>max(x, y, z, ..., n) :<br><br>Returns the number with the highest value",
"<pre>min(x, y, z, ..., n) :<br><br>Returns the number with the lowest value",
"<pre>pow(x, y) :<br><br>Returns the value of x to the power of y",
"<pre>random() :<br><br>Returns a random number between 0 and 1",
"<pre>round(x) :<br><br>Returns the value of x rounded to its nearest integer",
"<pre>sin(x) :<br><br>Returns the sine of x (x is in radians)",
"<pre>sqrt(x) :<br><br>Returns the square root of x",
"<pre>tan(x) :<br><br>Returns the tangent of an angle",
"<pre>Math.random() :<br><br>returns a random number between 0 (inclusive),  and 1 (exclusive) Math.random();",
"<pre>Random Integers :<br><br>Math.floor(Math.random() * 10);",
"<pre>Displaying Dates :<br><br>document.getElementById(\"demo\").innerHTML = Date();",
"<pre>Creating Date Objects :<br><br>new Date(dateString), Date(milliseconds)",
"<pre>date object from the specified date and time :<br><br>var d = new Date(\"October 13, 2014 11:13:00\");",
"<pre>HTML onclick event :<br><br>In HTML: &lt;element onclick=\"myScript\"&gt;",
"<pre>JavaScript onclick function :<br><br>In JavaScript: object.onclick = function(){myScript};",
"<pre>JavaScript onclick using the addEventListener() method :<br><br>object.addEventListener(\"click\", myScript);",
"<pre>JavaScript onclick object example :<br><br>document.getElementById(\"demo\").onclick = function() {myFunction()};",
"<pre>HTML set object content :<br><br>document.getElementById(\"demo\").innerHTML = \"Changed!\";",
"<pre>JavaScript prompt for input :<br><br>var person = prompt(\"Please enter your name\", \"Harry Potter\");",
"<pre>JavaScript concat strings :<br><br>\"Hello \" + person + \"! How are you?\";",
"<pre>JavaScript Display an alert box :<br><br>alert(\"Hello! I am an alert box!!\");",
"<pre>HTML DOM writeln() Method :<br><br>document.writeln(\'Hello there!\');",
"<pre>HTML DOM writeln with attributes :<br><br>document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\');",
"<pre>HTML opening a new window :<br><br>&lt;a href=\"link.html\" target=\"_blank\"&gt;Click Here&lt;/a&gt;",
"<pre>HTML opening a new window with name :<br><br>&lt;a href=\"link.html\" target=\"mywindow\"&gt;Click Here&lt;/a&gt;",
"<pre>JavaScript Opening A Window :<br><br>window.open(\'link.html\',\'mywindow\');",
"<pre>JavaScript onclick Opening A Window :<br><br>&lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt;",
"<pre>JavaScript window.open set window features :<br><br>window.open(\'link.html\',\'mywindow\',\'window features\');",
"<pre>JavaScript window.open location bar and status bar :<br><br>window.open(\'link.html\',\'mywindow\',\'location, status\');",
"<pre>JavaScript window.open Features :<br><br>menubar, scrollbar, width, height, toolbar, location, resizable, directories",
"<pre>JavaScript window.open Features sample :<br><br>window.open(\'window1.htm\',\'newwindow\',\'height=300,width=200,status,scrollbars\');",
"<pre>Javascript Link Events :<br><br>including JavaScript without &lt;script&gt; tags in HTML",
"<pre>Javascript Link Events execute when certain things happen :<br><br>&lt;a href=\"#\" onClick=\"JavaScript Code\"&gt;Click Here&lt;/a&gt;",
"<pre>three ways of executing Link Events :<br><br>onClick, onMouseOver, onMouseOut",
"<pre>Link Events for image swaps (mouseover images) :<br><br>&lt;a href=\"index.htm\" onMouseOver=\"button.src=\'homeon.gif\';\" onMouseOut=\"button.src=\'home.gif\';\"&gt;&lt;img src=\"home.gif\" name=\"button\"&gt;&lt;/a&gt;",
"<pre>No id name &lt;a href=\"#\"&gt;Click Here&lt;/a&gt; :<br><br>specify the top position",
"<pre>JavaScript Link Events for Status Bar text :<br><br>window.status=\'Your Text In Here\';",
"<pre>Two JavaScripts most important functions :<br><br>If and Loops",
"<pre>JavaScript if function :<br><br>if(guess == 5){}",
"<pre>JavaScript while function :<br><br>while(input != password){}",
"<pre>JavaScript for function :<br><br>for(loop=0; loop &lt; 11; loop++){}",
"<pre>HTML create a form :<br><br>&lt;form name=\"formname\"&gt;&lt;/form&gt;",
"<pre>HTML Place a text box :<br><br>&lt;input type=\"text\" name=\"boxname\"&gt;",
"<pre>set object value :<br><br>window.document.formname.first_text.value=\'Hi there\';",
"<pre>JavaScript onBlur Event :<br><br>cursor leaves an input field &lt;input type=\"text\" onblur=\"myFunction()\"&gt;",
"<pre>JavaScript onFocus Event :<br><br>cursor is moved into the field &lt;input type=\"text\" onfocus=\"myFunction()\"&gt;",
"<pre>JavaScript onchange Event :<br><br>the field is changed and the cursor moves out of it object.onchange = function(){myScript};",
"<pre>JavaScript onMouseOver sample :<br><br>&lt;a href=\"#\" onMouseOver=\"sayhi();\"&gt;Say Hi&lt;/a&gt;",
"<pre>JavaScript Submit Button :<br><br>&lt;form name=\"myform\" onSubmit=\"MyFunction();&gt;",
"<pre>Two form items :<br><br>Checkboxes and radio buttons",
"<pre>to check Checkboxes :<br><br>if(window.document.example1.my_checkbox.checked=true){}",
"<pre>JavaScript Switch Statement :<br><br>switch(expression) {case n: ... break; default: ... }",
"<pre>JavaScript For/In Loop :<br><br>for (x in person) {}",
"<pre>JavaScript Break :<br><br>for (i = 0; i &lt; 10; i++) {if (i === 3) { break; }}",
"<pre>JavaScript Continue :<br><br>for (i = 0; i &lt; 10; i++) {if (i === 3) { continue; }}",
"<pre>JavaScript Labels :<br><br>label: ... break labelname; continue labelname;",
"<pre>JavaScript open window and write content :<br><br>var imgWindow = window.open(\"\"); imgWindow.document.write(theListDom);",
"<pre>JavaScript history.back function :<br><br>$(\'.keys\').click(function(){parent.history.back();}",
"<pre>Jquery load file :<br><br>$.get(\'5FC.txt\', function (d) {var theList = d.split(\',\');}",
"<pre>object.append :<br><br>$( \"#codelist\" ).append(\"Total: \" + theList.length + \"&lt;br&gt;\");",
"<pre>Jquery getChar(event) :<br><br>{return String.fromCharCode(event.which)}",
"<pre>Jquery chkKey() :<br><br>var testkey = getChar(event); if(testkey == \'9\'){...}",
"<pre>JavaScript window.scrollTo :<br><br>&lt;b class=\"left\" onclick=\"window.scrollTo(0,document.body.scrollHeight);\"&gt;Go Bottom&lt;/b&gt;",
"<pre>The JavaScript labeled statement can be used with... :<br><br>break or continue statements, useful in nested loops (loops inside loops)",
"<pre>JavaScript Form submit() Method :<br><br>Submit a form: document.getElementById(\"myForm\").submit();",
"<pre>load jquery script :<br><br>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.js\"&gt;&lt;/script&gt;",
"<pre>define an empty object :<br><br>&lt;div id=\"toc\"&gt;&lt;/div&gt;",
"<pre>assign an empty object to a variable :<br><br>var toc = $(\'#toc\');",
"<pre>a makeLine function to create HTML lines :<br><br>function makeLi(text, href) {return $(\'&lt;a href=\"\' + href + \'\"&gt;\' + text + \'&lt;/a&gt;&lt;br&gt;\');}",
"<pre>Jquery each function :<br><br>$(\'h1, h2\').each(function(i) {...}",
"<pre>Jquery this selector :<br><br>Selects the current HTML element",
"<pre>Jquery this selector sample :<br><br>var chapter = $(this), chapterNumber = i + 1;",
"<pre>Javascript append method :<br><br>toc.append(makeLi(\'Chapter \' + chapterNumber + \': \' + chapter.text(), \'#chapter-\' + chapterNumber));",
"<pre>jQuery attr() Method :<br><br>chapter.attr(\'id\', \'chapter-\' + chapterNumber);",
"<pre>jQuery prepend() Method :<br><br>chapter.prepend(\'&lt;p class=\"toc\"&gt;&lt;a title=\"Back to top\" href=\"#toc\"&gt;Top&lt;/a&gt;&lt;/p&gt;\');",
"<pre>$(\"*\") :<br><br>Jquery Selects all elements",
"<pre>$(this) :<br><br>Jquery Selects the current HTML element",
"<pre>$(\"p.intro\") :<br><br>Jquery Selects all &lt;p&gt; elements with class=\"intro\"",
"<pre>$(\"p:first\") :<br><br>Jquery Selects the first &lt;p&gt; element",
"<pre>$(\"ul li:first\") :<br><br>Jquery Selects the first &lt;li&gt; element of the first &lt;ul&gt;",
"<pre>$(\"ul li:first-child\") :<br><br>Jquery Selects the first &lt;li&gt; element of every &lt;ul&gt;",
"<pre>$(\"[href]\") :<br><br>Jquery Selects all elements with an href attribute",
"<pre>$(\"a[target=\'_blank\']\") :<br><br>Jquery Selects all &lt;a&gt; elements with a target attribute value equal to \"_blank\"",
"<pre>$(\"a[target!=\'_blank\']\") :<br><br>Jquery Selects all &lt;a&gt; elements with a target attribute value NOT equal to \"_blank\"",
"<pre>$(\":button\") :<br><br>Jquery Selects all &lt;button&gt; elements and &lt;input&gt; elements of type=\"button\"",
"<pre>$(\"tr:even\") :<br><br>Jquery Selects all even &lt;tr&gt; elements",
"<pre>$(\"tr:odd\") :<br><br>Jquery Selects all odd &lt;tr&gt; elements",
"<pre>*, eg. $(\"*\") :<br><br>selects All elements",
"<pre>#id, eg. $(\"#lastname\") :<br><br>selects The element with id=\"lastname\"",
"<pre>.class, eg. $(\".intro\") :<br><br>selects All elements with class=\"intro\"",
"<pre>.class,.class, eg. $(\".intro,.demo\") :<br><br>selects All elements with the class \"intro\" or \"demo\"",
"<pre>element, eg. $(\"p\") :<br><br>selects All &lt;p&gt; elements",
"<pre>el1, el2, el3, eg. $(\"h1,div,p\") :<br><br>selects All &lt;h1&gt;, &lt;div&gt; and &lt;p&gt; elements",
"<pre>:first, eg. $(\"p:first\") :<br><br>selects The first &lt;p&gt; element",
"<pre>:last, eg. $(\"p:last\") :<br><br>selects The last &lt;p&gt; element",
"<pre>:even, eg. $(\"tr:even\") :<br><br>selects All even &lt;tr&gt; elements",
"<pre>:odd, eg. $(\"tr:odd\") :<br><br>selects All odd &lt;tr&gt; elements",
"<pre>:first-child, eg. $(\"p:first-child\") :<br><br>selects All &lt;p&gt; elements that are the first child of their parent",
"<pre>:first-of-type, eg. $(\"p:first-of-type\") :<br><br>selects All &lt;p&gt; elements that are the first &lt;p&gt; element of their parent",
"<pre>:last-child, eg. $(\"p:last-child\") :<br><br>selects All &lt;p&gt; elements that are the last child of their parent",
"<pre>:last-of-type, eg. $(\"p:last-of-type\") :<br><br>selects All &lt;p&gt; elements that are the last &lt;p&gt; element of their parent",
"<pre>:nth-child(n), eg. $(\"p:nth-child(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd child of their parent",
"<pre>:nth-last-child(n), eg. $(\"p:nth-last-child(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd child of their parent, counting from the last child",
"<pre>:nth-of-type(n), eg. $(\"p:nth-of-type(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent",
"<pre>:nth-last-of-type(n), eg. $(\"p:nth-last-of-type(2)\") :<br><br>selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent, counting from the last child",
"<pre>:only-child, eg. $(\"p:only-child\") :<br><br>selects All &lt;p&gt; elements that are the only child of their parent",
"<pre>:only-of-type, eg. $(\"p:only-of-type\") :<br><br>selects All &lt;p&gt; elements that are the only child, of its type, of their parent<br>element that has no siblings of the given type<br>li:only-of-type { color: red; }<br>&lt;ul> &lt;li>I'm all alone!&lt;/li> &lt;/ul>  // this is red<br>&lt;ul><br>  &lt;li>We are together.&lt;/li><br>  &lt;li>We are together.&lt;/li><br>  &lt;li>We are together.&lt;/li><br>&lt;/ul>  <br>",
"<pre>parent &gt; child, eg. $(\"div &gt; p\") :<br><br>selects All &lt;p&gt; elements that are a direct child of a &lt;div&gt; element",
"<pre>parent descendant, eg. $(\"div p\") :<br><br>selects All &lt;p&gt; elements that are descendants of a &lt;div&gt; element",
"<pre>element + next, eg. $(\"div + p\") :<br><br>selects The &lt;p&gt; element that are next to each &lt;div&gt; elements",
"<pre>element ~ siblings, eg. $(\"div ~ p\") :<br><br>selects All &lt;p&gt; elements that are siblings of a &lt;div&gt; element",
"<pre>:eq(index), eg. $(\"ul li:eq(3)\") :<br><br>selects The fourth element in a list (index starts at 0)",
"<pre>:gt(no), eg. $(\"ul li:gt(3)\") :<br><br>selects List elements with an index greater than 3",
"<pre>:lt(no), eg. $(\"ul li:lt(3)\") :<br><br>selects List elements with an index less than 3",
"<pre>:not(selector), eg. $(\"input:not(:empty)\") :<br><br>selects All input elements that are not empty",
"<pre>:header, eg. $(\":header\") :<br><br>selects All header elements &lt;h1&gt;, &lt;h2&gt; ...",
"<pre>:animated, eg. $(\":animated\") :<br><br>selects All animated elements",
"<pre>:focus, eg. $(\":focus\") :<br><br>selects The element that currently has focus",
"<pre>:contains(text), eg. $(\":contains(\'Hello\')\") :<br><br>selects All elements which contains the text \"Hello\"",
"<pre>:has(selector), eg. $(\"div:has(p)\") :<br><br>selects All &lt;div&gt; elements that have a &lt;p&gt; element",
"<pre>:empty, eg. $(\":empty\") :<br><br>selects All elements that are empty",
"<pre>:parent, eg. $(\":parent\") :<br><br>selects All elements that are a parent of another element",
"<pre>:hidden, eg. $(\"p:hidden\") :<br><br>selects All hidden &lt;p&gt; elements",
"<pre>:visible, eg. $(\"table:visible\") :<br><br>selects All visible tables",
"<pre>:root, eg. $(\":root\") :<br><br>selects The document\'s root element",
"<pre>:lang(language), eg. $(\"p:lang(de)\") :<br><br>selects All &lt;p&gt; elements with a lang attribute value starting with \"de\"",
"<pre>[attribute], eg. $(\"[href]\") :<br><br>selects All elements with a href attribute",
"<pre>[attribute=value], eg. $(\"[href=\'default.htm\']\") :<br><br>selects All elements with a href attribute value equal to \"default.htm\"",
"<pre>[attribute!=value], eg. $(\"[href!=\'default.htm\']\") :<br><br>selects All elements with a href attribute value not equal to \"default.htm\"",
"<pre>[attribute$=value], eg. $(\"[href$=\'.jpg\']\") :<br><br>selects All elements with a href attribute value ending with \".jpg\"",
"<pre>[attribute|=value], eg. $(\"[title|=\'Tomorrow\']\") :<br><br>selects All elements with a title attribute value equal to \'Tomorrow\', or starting with \'Tomorrow\' followed by a hyphen",
"<pre>[attribute^=value], eg. $(\"[title^=\'Tom\']\") :<br><br>selects All elements with a title attribute value starting with \"Tom\"",
"<pre>[attribute~=value], eg. $(\"[title~=\'hello\']\") :<br><br>selects All elements with a title attribute value containing the specific word \"hello\"",
"<pre>[attribute*=value], eg. $(\"[title*=\'hello\']\") :<br><br>selects All elements with a title attribute value containing the word \"hello\"",
'<pre>:input, eg. $(\":input\") :<br><br>selects All input elements<br>&lt;input type="button" value="Another useless button">&lt;br><br>&lt;input type="reset" value="Reset"><br>&lt;input type="submit" value="Submit">&lt;br><br>',
"<pre>:text, eg. $(\":text\") :<br><br>selects All input elements with type=\"text\"",
"<pre>:password, eg. $(\":password\") :<br><br>selects All input elements with type=\"password\"",
"<pre>:radio, eg. $(\":radio\") :<br><br>selects All input elements with type=\"radio\"",
"<pre>:checkbox, eg. $(\":checkbox\") :<br><br>selects All input elements with type=\"checkbox\"",
"<pre>:submit, eg. $(\":submit\") :<br><br>selects All input elements with type=\"submit\"",
"<pre>:reset, eg. $(\":reset\") :<br><br>selects All input elements with type=\"reset\"",
"<pre>:button, eg. $(\":button\") :<br><br>selects All input elements with type=\"button\"",
"<pre>:image, eg. $(\":image\") :<br><br>selects All input elements with type=\"image\"",
"<pre>:file, eg. $(\":file\") :<br><br>selects All input elements with type=\"file\"",
"<pre>:enabled, eg. $(\":enabled\") :<br><br>selects All enabled input elements",
"<pre>:disabled, eg. $(\":disabled\") :<br><br>selects All disabled input elements",
"<pre>:selected, eg. $(\":selected\") :<br><br>selects All selected input elements",
"<pre>:checked, eg. $(\":checked\") :<br><br>selects All checked input elements",
"<pre>blur() :<br><br>Attaches/Triggers the blur event",
"<pre>change() :<br><br>Attaches/Triggers the change event",
"<pre>click() :<br><br>Attaches/Triggers the click event",
"<pre>dblclick() :<br><br>Attaches/Triggers the double click event",
"<pre>die() :<br><br>Removed in version 1.9. Removes all event handlers added with the live() method",
"<pre>event.currentTarget :<br><br>The current DOM element within the event bubbling phase",
"<pre>event.data :<br><br>Contains the optional data passed to an event method when the current executing handler is bound",
"<pre>event.delegateTarget :<br><br>Returns the element where the currently-called jQuery event handler was attached",
"<pre>event.isDefaultPrevented() :<br><br>Returns whether event.preventDefault() was called for the event object",
"<pre>event.isImmediatePropagationStopped() :<br><br>Returns whether event.stopImmediatePropagation() was called for the event object",
"<pre>event.isPropagationStopped() :<br><br>Returns whether event.stopPropagation() was called for the event object",
"<pre>event.namespace :<br><br>Returns the namespace specified when the event was triggered",
"<pre>event.pageX :<br><br>Returns the mouse position relative to the left edge of the document",
"<pre>event.pageY :<br><br>Returns the mouse position relative to the top edge of the document",
"<pre>event.preventDefault() :<br><br>Prevents the default action of the event",
"<pre>event.relatedTarget :<br><br>Returns which element being entered or exited on mouse movement.",
"<pre>event.result :<br><br>Contains the last/previous value returned by an event handler triggered by the specified event",
"<pre>event.stopImmediatePropagation() :<br><br>Prevents other event handlers from being called",
"<pre>event.stopPropagation() :<br><br>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event",
"<pre>event.target :<br><br>Returns which DOM element triggered the event",
"<pre>event.timeStamp :<br><br>Returns the number of milliseconds since January 1, 1970, when the event is triggered",
"<pre>event.type :<br><br>Returns which event type was triggered",
'<pre>event.which :<br><br>Returns which keyboard key or mouse button was pressed for the event<br>$("input").keydown(function(event){<br>  $("div").html("Key: " + event.which); // 32 for space, 50 for @<br>});<br>',
"<pre>focus() :<br><br>Attaches/Triggers the focus event",
"<pre>focusin() :<br><br>Attaches an event handler to the focusin event",
"<pre>focusout() :<br><br>Attaches an event handler to the focusout event",
"<pre>hover() :<br><br>Attaches two event handlers to the hover event",
"<pre>keydown() :<br><br>Attaches/Triggers the keydown event",
"<pre>keypress() :<br><br>Attaches/Triggers the keypress event",
"<pre>keyup() :<br><br>Attaches/Triggers the keyup event",
"<pre>live() :<br><br>Removed in version 1.9. Adds one or more event handlers to current, or future, selected elements",
"<pre>mousedown() :<br><br>Attaches/Triggers the mousedown event",
"<pre>mouseenter() :<br><br>Attaches/Triggers the mouseenter event",
"<pre>mouseleave() :<br><br>Attaches/Triggers the mouseleave event",
"<pre>mousemove() :<br><br>Attaches/Triggers the mousemove event",
"<pre>mouseout() :<br><br>Attaches/Triggers the mouseout event",
"<pre>mouseover() :<br><br>Attaches/Triggers the mouseover event",
"<pre>mouseup() :<br><br>Attaches/Triggers the mouseup event",
"<pre>off() :<br><br>Removes event handlers attached with the on() method",
"<pre>on() :<br><br>Attaches event handlers to elements",
"<pre>one() :<br><br>Adds one or more event handlers to selected elements. This handler can only be triggered once per element",
"<pre>$.proxy() :<br><br>Takes an existing function and returns a new one with a particular context",
"<pre>ready() :<br><br>Specifies a function to execute when the DOM is fully loaded",
"<pre>resize() :<br><br>Attaches/Triggers the resize event",
"<pre>scroll() :<br><br>Attaches/Triggers the scroll event",
"<pre>select() :<br><br>Attaches/Triggers the select event",
"<pre>submit() :<br><br>Attaches/Triggers the submit event",
"<pre>toggle() :<br><br>Removed in version 1.9. Attaches two or more functions to toggle between for the click event",
"<pre>trigger() :<br><br>Triggers all events bound to the selected elements",
"<pre>triggerHandler() :<br><br>Triggers all functions bound to a specified event for the selected elements",
"<pre>animate() :<br><br>Runs a custom animation on the selected elements",
"<pre>clearQueue() :<br><br>Removes all remaining queued functions from the selected elements",
"<pre>delay() :<br><br>Sets a delay for all queued functions on the selected elements<br>$('button').click(function(){<br>  $('#div1').delay('slow').fadeIn();<br>  $('#div2').delay('fast').fadeIn();<br>});<br><br>var delayInMilliseconds = 1000; //1 second<br>setTimeout(function() {<br>  //your code to be executed after 1 second<br>}, delayInMilliseconds);<br>",
"<pre>dequeue() :<br><br>Removes the next function from the queue, and then executes the function",
"<pre>fadeIn() :<br><br>Fades in the selected elements",
"<pre>fadeOut() :<br><br>Fades out the selected elements",
"<pre>fadeTo() :<br><br>Fades in/out the selected elements to a given opacity",
"<pre>fadeToggle() :<br><br>Toggles between the fadeIn() and fadeOut() methods",
"<pre>finish() :<br><br>Stops, removes and completes all queued animations for the selected elements",
"<pre>hide() :<br><br>Hides the selected elements",
"<pre>queue() :<br><br>Shows the queued functions on the selected elements",
"<pre>show() :<br><br>Shows the selected elements",
"<pre>slideDown() :<br><br>Slides-down (shows) the selected elements",
"<pre>slideToggle() :<br><br>Toggles between the slideUp() and slideDown() methods",
"<pre>slideUp() :<br><br>Slides-up (hides) the selected elements",
"<pre>stop() :<br><br>Stops the currently running animation for the selected elements",
"<pre>toggle() :<br><br>Toggles between the hide() and show() methods",
"<pre>addClass() :<br><br>Adds one or more class names to selected elements",
"<pre>after() :<br><br>Inserts content after selected elements",
"<pre>append() :<br><br>Inserts content at the end of selected elements",
"<pre>appendTo() :<br><br>Inserts HTML elements at the end of selected elements",
"<pre>attr() :<br><br>Sets or returns attributes/values of selected elements",
"<pre>before() :<br><br>Inserts content before selected elements",
"<pre>clone() :<br><br>Makes a copy of selected elements",
"<pre>css() :<br><br>Sets or returns one or more style properties for selected elements",
"<pre>detach() :<br><br>Removes selected elements (keeps data and events)",
"<pre>empty() :<br><br>Removes all child nodes and content from selected elements",
"<pre>hasClass() :<br><br>Checks if any of the selected elements have a specified class name",
"<pre>height() :<br><br>Sets or returns the height of selected elements",
"<pre>html() :<br><br>Sets or returns the content of selected elements",
"<pre>innerHeight() :<br><br>Returns the height of an element (includes padding, but not border)",
"<pre>innerWidth() :<br><br>Returns the width of an element (includes padding, but not border)",
"<pre>insertAfter() :<br><br>Inserts HTML elements after selected elements",
"<pre>insertBefore() :<br><br>Inserts HTML elements before selected elements",
"<pre>offset() :<br><br>Sets or returns the offset coordinates for selected elements (relative to the document)",
"<pre>offsetParent() :<br><br>Returns the first positioned parent element",
"<pre>outerHeight() :<br><br>Returns the height of an element (includes padding and border)",
"<pre>outerWidth() :<br><br>Returns the width of an element (includes padding and border)",
"<pre>position() :<br><br>Returns the position (relative to the parent element) of an element",
"<pre>prepend() :<br><br>Inserts content at the beginning of selected elements",
'<pre>prependTo() :<br><br>Inserts HTML elements at the beginning of selected elements<br>$("<span>Hello World!</span>").prependTo("p");',
"<pre>prop() :<br><br>Sets or returns properties/values of selected elements",
"<pre>remove() :<br><br>Removes the selected elements (including data and events)",
"<pre>removeAttr() :<br><br>Removes one or more attributes from selected elements",
"<pre>removeClass() :<br><br>Removes one or more classes from selected elements",
"<pre>removeProp() :<br><br>Removes a property set by the prop() method",
"<pre>replaceAll() :<br><br>Replaces selected elements with new HTML elements",
"<pre>replaceWith() :<br><br>Replaces selected elements with new content",
"<pre>scrollLeft() :<br><br>Sets or returns the horizontal scrollbar position of selected elements",
"<pre>scrollTop() :<br><br>Sets or returns the vertical scrollbar position of selected elements",
"<pre>text() :<br><br>Sets or returns the text content of selected elements",
"<pre>toggleClass() :<br><br>Toggles between adding/removing one or more classes from selected elements",
"<pre>unwrap() :<br><br>Removes the parent element of the selected elements",
"<pre>val() :<br><br>Sets or returns the value attribute of the selected elements (for form elements)",
"<pre>width() :<br><br>Sets or returns the width of selected elements",
"<pre>wrap() :<br><br>Wraps HTML element(s) around each selected element",
"<pre>wrapAll() :<br><br>Wraps HTML element(s) around all selected elements",
"<pre>wrapInner() :<br><br>Wraps HTML element(s) around the content of each selected element",
"<pre>add() :<br><br>Adds elements to the set of matched elements",
"<pre>addBack() :<br><br>Adds the previous set of elements to the current set",
"<pre>andSelf() :<br><br>Add the previous set of elements on the stack to the current set. Deprecated. An alias for addBack()",
"<pre>children() :<br><br>Returns all direct children of the selected element",
"<pre>closest() :<br><br>Returns the first ancestor of the selected element",
"<pre>contents() :<br><br>Returns all direct children of the selected element (including text and comment nodes)",
"<pre>each() :<br><br>Executes a function for each matched element",
"<pre>end() :<br><br>Ends the most recent filtering operation in the current chain, and return the set of matched elements to its previous state",
"<pre>eq() :<br><br>Returns an element with a specific index number of the selected elements",
"<pre>filter() :<br><br>Reduce the set of matched elements to those that match the selector or pass the function\'s test",
"<pre>find() :<br><br>Returns descendant elements of the selected element",
"<pre>first() :<br><br>Returns the first element of the selected elements",
"<pre>has() :<br><br>Returns all elements that have one or more elements inside of them",
"<pre>is() :<br><br>Checks the set of matched elements against a selector/element/jQuery object, and return true if at least one of these elements matches the given arguments",
"<pre>last() :<br><br>Returns the last element of the selected elements",
'<pre>map() :<br><br>Passes each element in the matched set through a function, producing a new jQuery object containing the return values<br>Examples<br>const numbers = [4, 9, 16, 25];<br>const newArr = numbers.map(Math.sqrt)<br><br>const numbers = [65, 44, 12, 4];<br>const newArr = numbers.map(myFunction)<br>function myFunction(num) { return num * 10; }<br><br>const persons = [<br>  {firstname : "Malcom", lastname: "Reynolds"},<br>  {firstname : "Kaylee", lastname: "Frye"},<br>  {firstname : "Jayne", lastname: "Cobb"}<br>];<br>persons.map(getFullName);<br>function getFullName(item) { return [item.firstname,item.lastname].join(" "); }',
"<pre>next() :<br><br>Returns the next sibling element of the selected element",
"<pre>nextAll() :<br><br>Returns all next sibling elements of the selected element",
"<pre>nextUntil() :<br><br>Returns all next sibling elements between two given arguments",
"<pre>not() :<br><br>Remove elements from the set of matched elements",
"<pre>offsetParent() :<br><br>Returns the first positioned parent element",
"<pre>parent() :<br><br>Returns the direct parent element of the selected element",
"<pre>parents() :<br><br>Returns all ancestor elements of the selected element",
"<pre>parentsUntil() :<br><br>Returns all ancestor elements between two given arguments",
"<pre>prev() :<br><br>Returns the previous sibling element of the selected element<br>$( 'li.third-item' ).prev().css( 'background-color', 'red' );",
"<pre>prevAll() :<br><br>Returns all previous sibling elements of the selected element",
"<pre>prevUntil() :<br><br>Returns all previous sibling elements between two given arguments",
"<pre>siblings() :<br><br>Returns all sibling elements of the selected element",
"<pre>slice() :<br><br>Reduces the set of matched elements to a subset specified by a range of indices",
"<pre>$.ajax() :<br><br>Performs an async AJAX request",
"<pre>$.ajaxPrefilter() :<br><br>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax()",
"<pre>$.ajaxSetup() :<br><br>Sets the default values for future AJAX requests",
"<pre>$.ajaxTransport() :<br><br>Creates an object that handles the actual transmission of Ajax data",
'<pre>$.get() :<br><br>Loads data from a server using an AJAX HTTP GET request<br>Request "test.php" and alert the result of the request:<br>$("button").click(function(){<br>  $.get("test.php", function(data){ alert("Data: " + data); });<br>});<br>',
"<pre>$.getJSON() :<br><br>Loads JSON-encoded data from a server using a HTTP GET request",
"<pre>$.getScript() :<br><br>Loads (and executes) a JavaScript from a server using an AJAX HTTP GET request",
"<pre>$.param() :<br><br>Creates a serialized representation of an array or object (can be used as URL query string for AJAX requests)",
'<pre>$.post() :<br><br>Loads data from a server using an AJAX HTTP POST request<br>$("input").keyup(function(){<br>  var txt = $("input").val();<br>  $.post("demo_ajax_gethint.asp", {suggest: txt}, function(result){<br>    $("span").html(result);<br>  });<br>});<br><br>$("button").click(function(){<br>  $.post("demo_test.asp", function(data, status){<br>    alert("Data: " + data + "\nStatus: " + status);<br>  });<br>});<br>',
"<pre>ajaxComplete() :<br><br>Specifies a function to run when the AJAX request completes",
"<pre>ajaxError() :<br><br>Specifies a function to run when the AJAX request completes with an error",
"<pre>ajaxSend() :<br><br>Specifies a function to run before the AJAX request is sent",
"<pre>ajaxStart() :<br><br>Specifies a function to run when the first AJAX request begins",
"<pre>ajaxStop() :<br><br>Specifies a function to run when all AJAX requests have completed",
"<pre>ajaxSuccess() :<br><br>Specifies a function to run when an AJAX request completes successfully",
"<pre>load() :<br><br>Loads data from a server and puts the returned data into the selected element",
'<pre>serialize() :<br><br>Encodes a set of form elements as a string for submission<br>$("button").click(function(){<br>  $("div").text($("form").serialize());<br>});<br><br>$.ajax({<br>    type : "POST",<br>    url : "url",<br>    data : $("#form").serialize() + "&par1=1&par2=2&par3=232"<br>}<br>',
"<pre>serializeArray() :<br><br>Encodes a set of form elements as an array of names and values",
"<pre>data() :<br><br>Attaches data to, or gets data from, selected elements",
"<pre>each() :<br><br>Execute a function for each matched element",
"<pre>get() :<br><br>Get the DOM elements matched by the selector",
"<pre>index() :<br><br>Search for a given element from among the matched elements",
"<pre>$.noConflict() :<br><br>Release jQuery\'s control of the $ variable",
"<pre>$.param() :<br><br>Create a serialized representation of an array or object (can be used as URL query string for AJAX requests)",
"<pre>removeData() :<br><br>Removes a previously-stored piece of data",
"<pre>toArray() :<br><br>Retrieve all the DOM elements contained in the jQuery set, as an array",
"<pre>jquery :<br><br>Contains the jQuery version number",
"<pre>jQuery.fx.interval :<br><br>Change the animation firing rate in milliseconds",
"<pre>jQuery.fx.off :<br><br>Globally disable/enable all animations",
"<pre>jQuery.support :<br><br>A collection of properties representing different browser features or bugs (Intended for jQuery\'s internal use)",
"<pre>length :<br><br>Contains the number of elements in the jQuery object",
"<pre>onclick event :<br><br>document.getElementById(\"demo\").onclick = function() {myFunction()};",
"<pre>writeln() :<br><br>writes any number of expressions in the document window",
"<pre>alert() :<br><br>displays an alert dialog box with a message and an OK button",
"<pre>prompt() :<br><br>displays a prompt dialog box with a message and an input field",
"<pre>document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\'); :<br><br>writes an expression in the document window",
"<pre>writeln(), document.write() :<br><br>they are identical, writeln() add with the a newline character",
"<pre>window.open(\'link.html\',\'mywindow\'); :<br><br>Opening A Window With JavaScript",
"<pre>&lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt; :<br><br>Opening A Window",
"<pre>window.open(\'link.html\',\'mywindow\',\'window features\'); :<br><br>Adding Windows features",
"<pre>Link Events :<br><br>onClick, onMouseOver, onMouseOut<br>HTML has the ability to let events trigger actions in a browser<br><br>Window Event<br>Form Events<br>Keyboard Events<br>Mouse Events<br>Drag Events<br>Clipboard Events<br>Media Events<br>Misc Events<br><strong>Link Events</strong>There are nine events that are associated with the links. <table><tbody><tr><td>Event</td><td>Event Handling Attribute</td><td>Description</td></tr><tr><td>Click</td><td>OnClick</td><td>This link event occurred when a user clicks the link.</td></tr><tr><td>DblClick</td><td>OnDblClick</td><td>This link event occurred when a user double clicks the link.</td></tr><tr><td>MouseDown</td><td>OnMouseDown</td><td>This link event occurred when a user presses the mouse button over the link.</td></tr><tr><td>MouseUp</td><td>OnMouseUp</td><td>This link event occurred when a user releases the pressed mouse button.</td></tr><tr><td>MouseOver</td><td>OnMouseOver</td><td>This link event is occurred when the user moves the mouse pointer over a link.</td></tr><tr><td>MouseOut</td><td>OnMouseOut</td><td>This link event is occurred when the user moves he mouse pointer from within a link to outside of that link.</td></tr><tr><td>KeyDown</td><td>OnKeyDown</td><td>This event  is occurred when the user pressed a key on the keyboard.</td></tr><tr><td>KeyUp</td><td>OnKeyUp</td><td>This event handling is occurred when the user release the pressed key of the keyboard.</td></tr><tr><td>KeyPress</td><td>OnKeyPress</td><td>This event handling is occurred when the user presses a key or when the user keeps a key pressed down.</td></tr></tbody></table>",
"<pre>&lt;a href=\"index.htm\" onMouseOver=\"home_button.src=\'homeon.gif\';\" onMouseOut=\"home_button.src=\'home.gif\';\"&gt;&lt;img src=\"home.gif\" alt=\"Home\" name=\"home_button\" border=\"0\"&gt;&lt;/a&gt; :<br><br>Assign Link Events",
"<pre>if(){}else{} :<br><br>if else function",
"<pre>if(){} :<br><br>if function",
"<pre>while(){} :<br><br>while function",
"<pre>for(){} :<br><br>for function",
"<pre>&lt;form name=\"formname\"&gt;&lt;/form&gt; :<br><br>create a form",
"<pre>&lt;input type=\"text\" name=\"boxname\"&gt; :<br><br>Place a text box",
"<pre>window.document.formname.first_text.value=\'Hi there\'; :<br><br>put \'Hi there!\' into the value of the item called \'first_text\' in the form called \'formname\'",
"<pre>onBlur Events :<br><br>when the cursor is moved out of the field",
"<pre>onFocus Events :<br><br>when the cursor is moved into the field",
"<pre>onChange Events :<br><br>when the field is changed and the cursor moves out of it",
"<pre>&lt;input type=\"text\" onBlur=\"dothis\"&gt; :<br><br>onBlur Events",
"<pre>function sayhi(){} :<br><br>JavaScript Functions",
"<pre>&lt;input type=\"submit\" value=\"Submit\"&gt; :<br><br>Submit Button",
"<pre>&lt;form name=\"myform\" onSubmit=\"MyFunction(); return false;\"&gt; :<br><br>onSubmit take action",
"<pre>if(window.document.example1.my_checkbox.checked=true){} :<br><br>Checkboxes action",
"<pre>switch(expression){case n: ... break; default: ...} :<br><br>Switch Statement",
"<pre>switch (new Date().getDay()) {case 5: text = \"Soon it is Weekend\"; break; case 6: text = \"It is Weekend\"; break; default: text = \"Waiting\";} :<br><br>Common week day Code Blocks",
"<pre>for (x in person) {text += person[x];} :<br><br>The For/In Loop",
"<pre>if (i === 3) { break;}, if (i === 3) { continue;} :<br><br>Break and Continue",
"<pre>label: statements; break labelname; continue labelname; :<br><br>JavaScript Labels",
"<pre>var array_name = [item1, item2, ...]; :<br><br>Creating an Array",
"<pre>arrays use numbered indexes, objects use named indexes :<br><br>Difference Between Arrays and Objects",
"<pre>var car = {type:\"Fiat\", model:\"500\", color:\"white\"}; :<br><br>Objects are variables containing many values",
"<pre>$(\'.keys\').click(function(){parent.history.back();return false;}); :<br><br>history.back function",
"<pre>$(\"#codelist\").load(\"HKCodelist.txt\"); :<br><br>load function",
"<pre>set html go to bottom automatically :<br><br>onclick=\"window.scrollTo(0,document.body.scrollHeight);\"",
"<pre>javascript load script :<br><br>&lt;script type=\"text/javascript\" src=theUrl&gt;&lt;/script&gt;",
'<pre>JavaScript Class:<br><br><pre>Use the keyword <i>class</i> to create a class.<br>Always add a method named <i>constructor()</i> to define properties.<br>A JavaScript class is <b>not</b> an object.<br>It is a <b>template</b> for JavaScript objects.<br><br>class Car {<br>   constructor(name, year) {<br>    this.name = name;<br>    this.year = year;<br>  }<br>}<br><br>When you have a class, you can use the class to create objects:<br>let myCar1 = new Car("Ford", 2014);<br>let myCar2 = new Car("Audi", 2019);<br><h3>Class Methods</h3><br>Use the keyword <i>class</i> to create a class.<br>Always add a <i>constructor()</i> method.<br>Then add any number of methods.<br><br>class ClassName {<br>  constructor() { ... }<br>  method_1() { ... }<br>  method_2() { ... }<br>  method_3() { ... }<br>}<br><br>class Car {<br>   constructor(name, year) {<br>    this.name = name;<br>    this.year = year;<br>   }<br>  age() {<br>    let date = new Date();<br>    return date.getFullYear() - this.year;<br>   }<br>}<br><br>let myCar = new Car("Ford", 2014);<br>document.getElementById("demo").innerHTML =<br>"My car is " + myCar.age() + " years old.";</pre>',

];

// Tip Limit counter
  var tipLimit = tipsList.length;

// Generate a number
function generateNumber() {
//  return tipsList.length-1;
  return Math.floor(Math.random() * tipsList.length);
}

function generateTip() {
  var tip = tipsList[generateNumber()];
  var tipElement = document.querySelector('.js-tip');
  tipElement.innerHTML = tip;
  var tipLimitCount = document.querySelector('.tip-limit-count');
  tipLimitCount.innerHTML = tipLimit;
  document.querySelector('.tip-button').focus();

}

function onTipButtonClick() {
  var tipButton = document.querySelector('.tip-button');
  tipButton.addEventListener('click', function() {
    tipLimit = tipLimit - 1;
    if (tipLimit >= 0) {
      generateTip();

      if (tipLimit === 0) {
        tipButton.innerHTML = 'See you in another tab!';
        tipButton.classList.add('disabled');
      }
    }
  });
}

// Get the first tip
generateTip();
onTipButtonClick();
