// List of JavaScript tips
var tipsList = [
"Don't forget the <span class='code'>var</span> keyword when assigning a variable's value for the first time.",
"<span class='code'>undefined</span>, <span class='code'>null</span>, <span class='code'>0</span>, <span class='code'>false</span>, <span class='code'>NaN</span>, and <span class='code'>''</span> (empty string) are all falsy.",
"Declare a function with<br/> <span class='code-block'>function <em>myFunctionName</em>() { <br>&nbsp;&nbsp;...<br> }</span>",
"<span class='code'>if</span>/<span class='code'>else</span> statements look like <br/> <span class='code-block'>if (<em>condition</em>) { <br/>&nbsp;&nbsp;...<br/>} else { <br/>&nbsp;&nbsp;...<br/>}",
"You can return the result of a function into a variable with <span class='code'>return</span>:<br><span class='code-block'>function timesFive(inputNumber) {<br> &nbsp;&nbsp;return inputNumber * 5; <br>}<br>console.log(timesFive(6));<br>// Output: 30</span> ",
"The <span class='code'>&&</span> operator means both things must be true: <br/> <span class='code-block'> true && true = true<br>true && false = false<br>false && false = false</span>",
"The <span class='code'>||</span> operator means either can be true: <br/> <span class='code-block'> true || true = true<br>true || false = true<br>false || false = false</span>",
"A <span class='code'>for</span> has three condtions: a start condition, a stop condition, and an iterator: <br><br> <span class='code-block'>for (var i = 0; i < myArray.length; i++) { <br>&nbsp;&nbsp;...<br>}</span>",
"To interpolate a variable into a string, use the <span class='code'>+</span> operator, like this: <br><br> <span class='code-block'>var myName = 'Jon';<br/> 'Hello, my name is ' + myName;</span>",
"To generate a random number, use JavaScript's built in function <span class='code'>Math.random()</span>.",
"Arrays hold lists of data. You can access any of the list items by using bracket notation, like this: <br><br> <span class='code-block'>var myArray = ['pears', 'asparagus', 'bananas'];<br>myArray[1]; // asparagus</span>",
"jQuery selectors start with the dollar sign and parentheses :<br><br> <span class='code'>$()</span>",
"jQuery element selector selects element name :<br><br> <span class='code'>$('p'), $('div'), $('p').hide();</span>",
"jQuery #id selector selects the id tag :<br><br> <span class='code'>$('#test'),  $('#test').hide();</span>",
"jQuery class selector finds a specific class 'test' to hide it :<br><br> <span class='code'>$('.test').hide();</span>",
"Selects all elements :<br><br> <span class='code'>$('*')</span>",
"Selects the current HTML element :<br><br> <span class='code'>$(this)</span>",
"Selects all &lt;p&gt; elements with class='intro' :<br><br> <span class='code'>$('p.intro')</span>",
"Selects the first &lt;p&gt; element :<br><br> <span class='code'>$('p:first')</span>",
"Selects the first &lt;li&gt; element of the first &lt;ul&gt; :<br><br> <span class='code'>$('ul li:first')</span>",
"Selects the first &lt;li&gt; element of every &lt;ul&gt; :<br><br> <span class='code'>$('ul li:first-child')</span>",
"Selects all elements with an href attribute :<br><br> <span class='code'>$('[href]')</span>",
"Selects all &lt;a&gt; elements \"_blank\" :<br><br> <span class='code'>$('a[target='_blank']')</span>",
"Selects all &lt;a&gt; elements NOT \"_blank\" :<br><br> <span class='code'>$('a[target!='_blank']')</span>",
"Selects all &lt;button&gt; elements and &lt;input&gt; elements of type='button' :<br><br> <span class='code'>$(':button')</span>",
"Selects all even &lt;tr&gt; elements :<br><br> <span class='code'>$('tr:even')</span>",
"Selects all odd &lt;tr&gt; elements in a table :<br><br> <span class='code'>$('tr:odd')</span>",
"display data by writing into an HTML element :<br><br> <span class='code'>document.getElementById(\"demo\").innerHTML = 5 + 6;</span>",
"display data by writing into the HTML output :<br><br> <span class='code'>document.write(5 + 6); will delete all existing HTML</span>",
"display data by writing into an alert box :<br><br> <span class='code'>window.alert(5 + 6);</span>",
"display data by writing into the browser console :<br><br> <span class='code'>console.log(5 + 6);</span>",
"Javascript Object :<br><br> <span class='code'>var car = {type:\"Fiat\", model:\"500\", color:\"white\"};</span>",
"Object Properties :<br><br> <span class='code'>The name:values pairs</span>",
"Object Methods :<br><br> <span class='code'>Methods are properties stored as function</span>",
"Object Spaces and line breaks are not important :<br><br> <span class='code'>Object definition can span multiple lines</span>",
"Accessing Object Properties :<br><br> <span class='code'>objectName.propertyName, or objectName[\"propertyName\"]</span>",
"Accessing Object Methods :<br><br> <span class='code'>objectName.methodName(), with ()</span>",
"Local variables have local scope :<br><br> <span class='code'>Local scope can only be accessed within the function.</span>",
"Global variable has global scope :<br><br> <span class='code'>All scripts and functions on a web page can access global variable</span>",
"Assigning value to a not declared variable :<br><br> <span class='code'>Automatically become a GLOBAL variable.</span>",
"onchange Event :<br><br> <span class='code'>An HTML element has been changed</span>",
"onclick Event :<br><br> <span class='code'>The user clicks an HTML element</span>",
"onmouseover Event :<br><br> <span class='code'>The user moves the mouse over an HTML element</span>",
"onmouseout Event :<br><br> <span class='code'>The user moves the mouse away from an HTML element</span>",
"onkeydown Event :<br><br> <span class='code'>The user pushes a keyboard key</span>",
"onload Event :<br><br> <span class='code'>The browser has finished loading the page</span>",
"String Length Methods :<br><br> <span class='code'>var sln = txt.length;</span>",
"String indexOf() method:first occurrence of a specified text :<br><br> <span class='code'>var pos = str.indexOf(\"locate\");</span>",
"String lastIndexOf() method:last occurrence of a specified text :<br><br> <span class='code'>var pos = str.lastIndexOf(\"locate\");</span>",
"String lastIndexOf() method: accept a second parameter as starting position for the search :<br><br> <span class='code'>var pos = str.indexOf(\"locate\",15);</span>",
"String search() method: searches a string :<br><br> <span class='code'>var pos = str.search(\"locate\");</span>",
"String slice() method: extracts a part of a string :<br><br> <span class='code'>var res = str.slice(7, 13);</span>",
"String slice() method: negative parameter, counted from the end :<br><br> <span class='code'>var res = str.slice(-12, -6);</span>",
"String slice() method: omit the second parameter, slice out the rest :<br><br> <span class='code'>var res = str.slice(7);</span>",
"String slice() method: counting from the end :<br><br> <span class='code'>var res = str.slice(7);</span>",
"difference between slice() and substring() :<br><br> <span class='code'>substring() cannot accept negative indexes</span>",
"difference between slice() and substr() :<br><br> <span class='code'>second parameter specifies the length of the extracted part</span>",
"replace() method replaces value :<br><br> <span class='code'>var n = str.replace(\"Microsoft\", \"W3Schools\");</span>",
"regular expression to replace all matches, with a /g flag :<br><br> <span class='code'>var n = str.replace(/Microsoft/g, \"W3Schools\");</span>",
"replace() is case sensitive, To replace case insensitive use /i flag :<br><br> <span class='code'>var n = str.replace(/MICROSOFT/i, \"W3Schools\");</span>",
"toUpperCase(): convert to upper case :<br><br> <span class='code'>var text2 = text1.toUpperCase();</span>",
"toLowerCase(): convert to lower case :<br><br> <span class='code'>var text2 = text1.toLowerCase();</span>",
"concat() joins two or more strings :<br><br> <span class='code'>var text3 = text1.concat(\" \", text2);</span>",
"concat() method can use the plus operator :<br><br> <span class='code'>var text = \"Hello\" + \" \" + \"World!\";</span>",
"charAt() method returns the character at a specified position :<br><br> <span class='code'>str.charAt(0);</span>",
"charCodeAt() method returns the unicode of the character at a specified index :<br><br> <span class='code'>str.charCodeAt(0);</span>",
"split() method convert string to an array :<br><br> <span class='code'>txt.split(\",\"); // Split on commas</span>",
"to end each executable statement :<br><br> <span class='code'>Add a semicolon</span>",
"add white space to script to make it more readable :<br><br> <span class='code'>JavaScript ignores multiple spaces</span>",
"groupe javaScript statements in code blocks :<br><br> <span class='code'>inside curly brackets {...}</span>",
"Keywords: break :<br><br> <span class='code'>Terminates a switch or a loop</span>",
"Keywords: continue :<br><br> <span class='code'>Jumps out of a loop and starts at the top</span>",
"Keywords: debugger :<br><br> <span class='code'>Stops the execution and calls the debugging function</span>",
"Keywords: do ... while :<br><br> <span class='code'>Executes a block of statements, and repeats while a condition is true</span>",
"Keywords: for :<br><br> <span class='code'>Marks block of statements to be executed as long as condition is true</span>",
"Keywords: function :<br><br> <span class='code'>Declares a function</span>",
"Keywords: if ... else :<br><br> <span class='code'>Marks a block of statements to be executed, depending on condition</span>",
"Keywords: return :<br><br> <span class='code'>Exits a function</span>",
"Keywords: switch :<br><br> <span class='code'>Marks a block of statements to be executed, depending on different cases</span>",
"Keywords: try ... catch :<br><br> <span class='code'>Implements error handling to a block of statements</span>",
"Keywords: var :<br><br> <span class='code'>Declares a variable</span>",
"modular operator (%) :<br><br> <span class='code'>returns the division remainder. var z = x % y</span>",
"increment operator (++) :<br><br> <span class='code'>increments numbers. x++;</span>",
"Exponentiation ** :<br><br> <span class='code'>10 ** 2</span>",
"Shift left &lt;&lt; :<br><br> <span class='code'>x &lt;&lt; 2</span>",
"Shift right (unsigned) &gt;&gt;&gt; :<br><br> <span class='code'>x &gt;&gt;&gt; 2</span>",
"Equal comparator :<br><br> <span class='code'>x == y</span>",
"Strict equal :<br><br> <span class='code'>x === y</span>",
"Logical and :<br><br> <span class='code'>&&</span>",
"Logical or :<br><br> <span class='code'>||</span>",
"Math.PI; :<br><br> <span class='code'>returns 3.141592653589793</span>",
"Math.round() :<br><br> <span class='code'>Math.round(4.4); returns the value of x rounded to its nearest integer:</span>",
"Math.pow() :<br><br> <span class='code'>Math.pow(8, 2); returns the value of x to the power of y:</span>",
"Math.sqrt() :<br><br> <span class='code'>Math.sqrt(64);</span>",
"Math.abs() :<br><br> <span class='code'>Math.abs(-4.7);</span>",
"Math.ceil() :<br><br> <span class='code'>Math.ceil(4.4);</span>",
"Math.floor() :<br><br> <span class='code'>Math.floor(4.7);</span>",
"Math.sin() :<br><br> <span class='code'>Math.sin(90 * Math.PI / 180);</span>",
"Math.min() :<br><br> <span class='code'>Math.min(0, 150, 30, 20, -8, -200);</span>",
"Math.random() :<br><br> <span class='code'>Math.random();</span>",
"Math.E :<br><br> <span class='code'>returns Euler\'s number</span>",
"Math.SQRT2 :<br><br> <span class='code'>returns the square root of 2</span>",
"Math.SQRT1_2 :<br><br> <span class='code'>returns the square root of 1/2</span>",
"Math.LN2 :<br><br> <span class='code'>returns the natural logarithm of 2</span>",
"Math.LN10 :<br><br> <span class='code'>returns the natural logarithm of 10</span>",
"Math.LOG2E :<br><br> <span class='code'>returns base 2 logarithm of E</span>",
"Math.LOG10E :<br><br> <span class='code'>returns base 10 logarithm of E</span>",
"abs(x) :<br><br> <span class='code'>Returns the absolute value of x</span>",
"acos(x) :<br><br> <span class='code'>Returns the arccosine of x, in radians</span>",
"asin(x) :<br><br> <span class='code'>Returns the arcsine of x, in radians</span>",
"atan(x) :<br><br> <span class='code'>Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians</span>",
"atan2(y, x) :<br><br> <span class='code'>Returns the arctangent of the quotient of its arguments</span>",
"ceil(x) :<br><br> <span class='code'>Returns the value of x rounded up to its nearest integer</span>",
"cos(x) :<br><br> <span class='code'>Returns the cosine of x (x is in radians)</span>",
"exp(x) :<br><br> <span class='code'>Returns the value of Ex</span>",
"floor(x) :<br><br> <span class='code'>Returns the value of x rounded down to its nearest integer</span>",
"log(x) :<br><br> <span class='code'>Returns the natural logarithm (base E) of x</span>",
"max(x, y, z, ..., n) :<br><br> <span class='code'>Returns the number with the highest value</span>",
"min(x, y, z, ..., n) :<br><br> <span class='code'>Returns the number with the lowest value</span>",
"pow(x, y) :<br><br> <span class='code'>Returns the value of x to the power of y</span>",
"random() :<br><br> <span class='code'>Returns a random number between 0 and 1</span>",
"round(x) :<br><br> <span class='code'>Returns the value of x rounded to its nearest integer</span>",
"sin(x) :<br><br> <span class='code'>Returns the sine of x (x is in radians)</span>",
"sqrt(x) :<br><br> <span class='code'>Returns the square root of x</span>",
"tan(x) :<br><br> <span class='code'>Returns the tangent of an angle</span>",
"Math.random() :<br><br> <span class='code'>returns a random number between 0 (inclusive),  and 1 (exclusive) Math.random();</span>",
"Random Integers :<br><br> <span class='code'>Math.floor(Math.random() * 10);</span>",
"Displaying Dates :<br><br> <span class='code'>document.getElementById(\"demo\").innerHTML = Date();</span>",
"Creating Date Objects :<br><br> <span class='code'>new Date(dateString), Date(milliseconds)</span>",
"date object from the specified date and time :<br><br> <span class='code'>var d = new Date(\"October 13, 2014 11:13:00\");</span>",
"HTML onclick event :<br><br> <span class='code'>In HTML: &lt;element onclick=\"myScript\"&gt;</span>",
"JavaScript onclick function :<br><br> <span class='code'>In JavaScript: object.onclick = function(){myScript};</span>",
"JavaScript onclick using the addEventListener() method :<br><br> <span class='code'>object.addEventListener(\"click\", myScript);</span>",
"JavaScript onclick object example :<br><br> <span class='code'>document.getElementById(\"demo\").onclick = function() {myFunction()};</span>",
"HTML set object content :<br><br> <span class='code'>document.getElementById(\"demo\").innerHTML = \"Changed!\";</span>",
"JavaScript prompt for input :<br><br> <span class='code'>var person = prompt(\"Please enter your name\", \"Harry Potter\");</span>",
"JavaScript concat strings :<br><br> <span class='code'>\"Hello \" + person + \"! How are you?\";</span>",
"JavaScript Display an alert box :<br><br> <span class='code'>alert(\"Hello! I am an alert box!!\");</span>",
"HTML DOM writeln() Method :<br><br> <span class='code'>document.writeln(\'Hello there!\');</span>",
"HTML DOM writeln with attributes :<br><br> <span class='code'>document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\');</span>",
"HTML opening a new window :<br><br> <span class='code'>&lt;a href=\"link.html\" target=\"_blank\"&gt;Click Here&lt;/a&gt;</span>",
"HTML opening a new window with name :<br><br> <span class='code'>&lt;a href=\"link.html\" target=\"mywindow\"&gt;Click Here&lt;/a&gt;</span>",
"JavaScript Opening A Window :<br><br> <span class='code'>window.open(\'link.html\',\'mywindow\');</span>",
"JavaScript onclick Opening A Window :<br><br> <span class='code'>&lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt;</span>",
"JavaScript window.open set window features :<br><br> <span class='code'>window.open(\'link.html\',\'mywindow\',\'window features\');</span>",
"JavaScript window.open location bar and status bar :<br><br> <span class='code'>window.open(\'link.html\',\'mywindow\',\'location, status\');</span>",
"JavaScript window.open Features :<br><br> <span class='code'>menubar, scrollbar, width, height, toolbar, location, resizable, directories</span>",
"JavaScript window.open Features sample :<br><br> <span class='code'>window.open(\'window1.htm\',\'newwindow\',\'height=300,width=200,status,scrollbars\');</span>",
"Javascript Link Events :<br><br> <span class='code'>including JavaScript without &lt;script&gt; tags in HTML</span>",
"Javascript Link Events execute when certain things happen :<br><br> <span class='code'>&lt;a href=\"#\" onClick=\"JavaScript Code\"&gt;Click Here&lt;/a&gt;</span>",
"three ways of executing Link Events :<br><br> <span class='code'>onClick, onMouseOver, onMouseOut</span>",
"Link Events for image swaps (mouseover images) :<br><br> <span class='code'>&lt;a href=\"index.htm\" onMouseOver=\"button.src=\'homeon.gif\';\" onMouseOut=\"button.src=\'home.gif\';\"&gt;&lt;img src=\"home.gif\" name=\"button\"&gt;&lt;/a&gt;</span>",
"No id name &lt;a href=\"#\"&gt;Click Here&lt;/a&gt; :<br><br> <span class='code'>specify the the top position</span>",
"JavaScript Link Events for Status Bar text :<br><br> <span class='code'>window.status=\'Your Text In Here\';</span>",
"Two JavaScripts most important functions :<br><br> <span class='code'>If and Loops</span>",
"JavaScript if function :<br><br> <span class='code'>if(guess == 5){}</span>",
"JavaScript while function :<br><br> <span class='code'>while(input != password){}</span>",
"JavaScript for function :<br><br> <span class='code'>for(loop=0; loop &lt; 11; loop++){}</span>",
"HTML create a form :<br><br> <span class='code'>&lt;form name=\"formname\"&gt;&lt;/form&gt;</span>",
"HTML Place a text box :<br><br> <span class='code'>&lt;input type=\"text\" name=\"boxname\"&gt;</span>",
"set object value :<br><br> <span class='code'>window.document.formname.first_text.value=\'Hi there\';</span>",
"JavaScript onBlur Event :<br><br> <span class='code'>cursor leaves an input field &lt;input type=\"text\" onblur=\"myFunction()\"&gt;</span>",
"JavaScript onFocus Event :<br><br> <span class='code'>cursor is moved into the field &lt;input type=\"text\" onfocus=\"myFunction()\"&gt;</span>",
"JavaScript onchange Event :<br><br> <span class='code'>the field is changed and the cursor moves out of it object.onchange = function(){myScript};</span>",
"JavaScript onMouseOver sample :<br><br> <span class='code'>&lt;a href=\"#\" onMouseOver=\"sayhi();\"&gt;Say Hi&lt;/a&gt;</span>",
"JavaScript Submit Button :<br><br> <span class='code'>&lt;form name=\"myform\" onSubmit=\"MyFunction();&gt;</span>",
"Two form items :<br><br> <span class='code'>Checkboxes and radio buttons</span>",
"to check Checkboxes :<br><br> <span class='code'>if(window.document.example1.my_checkbox.checked=true){}</span>",
"JavaScript Switch Statement :<br><br> <span class='code'>switch(expression) {case n: ... break; default: ... }</span>",
"JavaScript For/In Loop :<br><br> <span class='code'>for (x in person) {}</span>",
"JavaScript Break :<br><br> <span class='code'>for (i = 0; i &lt; 10; i++) {if (i === 3) { break; }}</span>",
"JavaScript Continue :<br><br> <span class='code'>for (i = 0; i &lt; 10; i++) {if (i === 3) { continue; }}</span>",
"JavaScript Labels :<br><br> <span class='code'>label: ... break labelname; continue labelname;</span>",
"JavaScript open window and write content :<br><br> <span class='code'>var imgWindow = window.open(\"\"); imgWindow.document.write(theListDom);</span>",
"JavaScript history.back function :<br><br> <span class='code'>$(\'.keys\').click(function(){parent.history.back();}</span>",
"Jquery load file :<br><br> <span class='code'>$.get(\'5FC.txt\', function (d) {var theList = d.split(\',\');}</span>",
"object.append :<br><br> <span class='code'>$( \"#codelist\" ).append(\"Total: \" + theList.length + \"&lt;br&gt;\");</span>",
"Jquery getChar(event) :<br><br> <span class='code'>{return String.fromCharCode(event.which)}</span>",
"Jquery chkKey() :<br><br> <span class='code'>var testkey = getChar(event); if(testkey == \'9\'){...}</span>",
"JavaScript window.scrollTo :<br><br> <span class='code'>&lt;b class=\"left\" onclick=\"window.scrollTo(0,document.body.scrollHeight);\"&gt;Go Bottom&lt;/b&gt;</span>",
"The JavaScript labeled statement can be used with... :<br><br> <span class='code'>break or continue statements, useful in nested loops (loops inside loops)</span>",
"JavaScript Form submit() Method :<br><br> <span class='code'>Submit a form: document.getElementById(\"myForm\").submit();</span>",
"load jquery script :<br><br> <span class='code'>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.js\"&gt;&lt;/script&gt;</span>",
"define an empty object :<br><br> <span class='code'>&lt;div id=\"toc\"&gt;&lt;/div&gt;</span>",
"assign an empty object to a variable :<br><br> <span class='code'>var toc = $(\'#toc\');</span>",
"a makeLine function to create HTML lines :<br><br> <span class='code'>function makeLi(text, href) {return $(\'&lt;a href=\"\' + href + \'\"&gt;\' + text + \'&lt;/a&gt;&lt;br&gt;\');}</span>",
"Jquery each function :<br><br> <span class='code'>$(\'h1, h2\').each(function(i) {...}</span>",
"Jquery this selector :<br><br> <span class='code'>Selects the current HTML element</span>",
"Jquery this selector sample :<br><br> <span class='code'>var chapter = $(this), chapterNumber = i + 1;</span>",
"Javascript append method :<br><br> <span class='code'>toc.append(makeLi(\'Chapter \' + chapterNumber + \': \' + chapter.text(), \'#chapter-\' + chapterNumber));</span>",
"jQuery attr() Method :<br><br> <span class='code'>chapter.attr(\'id\', \'chapter-\' + chapterNumber);</span>",
"jQuery prepend() Method :<br><br> <span class='code'>chapter.prepend(\'&lt;p class=\"toc\"&gt;&lt;a title=\"Back to top\" href=\"#toc\"&gt;Top&lt;/a&gt;&lt;/p&gt;\');</span>",
"$(\"*\") :<br><br> <span class='code'>Jquery Selects all elements</span>",
"$(this) :<br><br> <span class='code'>Jquery Selects the current HTML element</span>",
"$(\"p.intro\") :<br><br> <span class='code'>Jquery Selects all &lt;p&gt; elements with class=\"intro\"</span>",
"$(\"p:first\") :<br><br> <span class='code'>Jquery Selects the first &lt;p&gt; element</span>",
"$(\"ul li:first\") :<br><br> <span class='code'>Jquery Selects the first &lt;li&gt; element of the first &lt;ul&gt;</span>",
"$(\"ul li:first-child\") :<br><br> <span class='code'>Jquery Selects the first &lt;li&gt; element of every &lt;ul&gt;</span>",
"$(\"[href]\") :<br><br> <span class='code'>Jquery Selects all elements with an href attribute</span>",
"$(\"a[target=\'_blank\']\") :<br><br> <span class='code'>Jquery Selects all &lt;a&gt; elements with a target attribute value equal to \"_blank\"</span>",
"$(\"a[target!=\'_blank\']\") :<br><br> <span class='code'>Jquery Selects all &lt;a&gt; elements with a target attribute value NOT equal to \"_blank\"</span>",
"$(\":button\") :<br><br> <span class='code'>Jquery Selects all &lt;button&gt; elements and &lt;input&gt; elements of type=\"button\"</span>",
"$(\"tr:even\") :<br><br> <span class='code'>Jquery Selects all even &lt;tr&gt; elements</span>",
"$(\"tr:odd\") :<br><br> <span class='code'>Jquery Selects all odd &lt;tr&gt; elements</span>",
"*, eg. $(\"*\") :<br><br> <span class='code'>selects All elements</span>",
"#id, eg. $(\"#lastname\") :<br><br> <span class='code'>selects The element with id=\"lastname\"</span>",
".class, eg. $(\".intro\") :<br><br> <span class='code'>selects All elements with class=\"intro\"</span>",
".class,.class, eg. $(\".intro,.demo\") :<br><br> <span class='code'>selects All elements with the class \"intro\" or \"demo\"</span>",
"element, eg. $(\"p\") :<br><br> <span class='code'>selects All &lt;p&gt; elements</span>",
"el1,el2,el3, eg. $(\"h1,div,p\") :<br><br> <span class='code'>selects All &lt;h1&gt;, &lt;div&gt; and &lt;p&gt; elements</span>",
":first, eg. $(\"p:first\") :<br><br> <span class='code'>selects The first &lt;p&gt; element</span>",
":last, eg. $(\"p:last\") :<br><br> <span class='code'>selects The last &lt;p&gt; element</span>",
":even, eg. $(\"tr:even\") :<br><br> <span class='code'>selects All even &lt;tr&gt; elements</span>",
":odd, eg. $(\"tr:odd\") :<br><br> <span class='code'>selects All odd &lt;tr&gt; elements</span>",
":first-child, eg. $(\"p:first-child\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the first child of their parent</span>",
":first-of-type, eg. $(\"p:first-of-type\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the first &lt;p&gt; element of their parent</span>",
":last-child, eg. $(\"p:last-child\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the last child of their parent</span>",
":last-of-type, eg. $(\"p:last-of-type\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the last &lt;p&gt; element of their parent</span>",
":nth-child(n), eg. $(\"p:nth-child(2)\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the 2nd child of their parent</span>",
":nth-last-child(n), eg. $(\"p:nth-last-child(2)\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the 2nd child of their parent, counting from the last child</span>",
":nth-of-type(n), eg. $(\"p:nth-of-type(2)\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent</span>",
":nth-last-of-type(n), eg. $(\"p:nth-last-of-type(2)\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent, counting from the last child</span>",
":only-child, eg. $(\"p:only-child\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the only child of their parent</span>",
":only-of-type, eg. $(\"p:only-of-type\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are the only child, of its type, of their parent</span>",
"parent &gt; child, eg. $(\"div &gt; p\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are a direct child of a &lt;div&gt; element</span>",
"parent descendant, eg. $(\"div p\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are descendants of a &lt;div&gt; element</span>",
"element + next, eg. $(\"div + p\") :<br><br> <span class='code'>selects The &lt;p&gt; element that are next to each &lt;div&gt; elements</span>",
"element ~ siblings, eg. $(\"div ~ p\") :<br><br> <span class='code'>selects All &lt;p&gt; elements that are siblings of a &lt;div&gt; element</span>",
":eq(index), eg. $(\"ul li:eq(3)\") :<br><br> <span class='code'>selects The fourth element in a list (index starts at 0)</span>",
":gt(no), eg. $(\"ul li:gt(3)\") :<br><br> <span class='code'>selects List elements with an index greater than 3</span>",
":lt(no), eg. $(\"ul li:lt(3)\") :<br><br> <span class='code'>selects List elements with an index less than 3</span>",
":not(selector), eg. $(\"input:not(:empty)\") :<br><br> <span class='code'>selects All input elements that are not empty</span>",
":header, eg. $(\":header\") :<br><br> <span class='code'>selects All header elements &lt;h1&gt;, &lt;h2&gt; ...</span>",
":animated, eg. $(\":animated\") :<br><br> <span class='code'>selects All animated elements</span>",
":focus, eg. $(\":focus\") :<br><br> <span class='code'>selects The element that currently has focus</span>",
":contains(text), eg. $(\":contains(\'Hello\')\") :<br><br> <span class='code'>selects All elements which contains the text \"Hello\"</span>",
":has(selector), eg. $(\"div:has(p)\") :<br><br> <span class='code'>selects All &lt;div&gt; elements that have a &lt;p&gt; element</span>",
":empty, eg. $(\":empty\") :<br><br> <span class='code'>selects All elements that are empty</span>",
":parent, eg. $(\":parent\") :<br><br> <span class='code'>selects All elements that are a parent of another element</span>",
":hidden, eg. $(\"p:hidden\") :<br><br> <span class='code'>selects All hidden &lt;p&gt; elements</span>",
":visible, eg. $(\"table:visible\") :<br><br> <span class='code'>selects All visible tables</span>",
":root, eg. $(\":root\") :<br><br> <span class='code'>selects The document\'s root element</span>",
":lang(language), eg. $(\"p:lang(de)\") :<br><br> <span class='code'>selects All &lt;p&gt; elements with a lang attribute value starting with \"de\"</span>",
"[attribute], eg. $(\"[href]\") :<br><br> <span class='code'>selects All elements with a href attribute</span>",
"[attribute=value], eg. $(\"[href=\'default.htm\']\") :<br><br> <span class='code'>selects All elements with a href attribute value equal to \"default.htm\"</span>",
"[attribute!=value], eg. $(\"[href!=\'default.htm\']\") :<br><br> <span class='code'>selects All elements with a href attribute value not equal to \"default.htm\"</span>",
"[attribute$=value], eg. $(\"[href$=\'.jpg\']\") :<br><br> <span class='code'>selects All elements with a href attribute value ending with \".jpg\"</span>",
"[attribute|=value], eg. $(\"[title|=\'Tomorrow\']\") :<br><br> <span class='code'>selects All elements with a title attribute value equal to \'Tomorrow\', or starting with \'Tomorrow\' followed by a hyphen</span>",
"[attribute^=value], eg. $(\"[title^=\'Tom\']\") :<br><br> <span class='code'>selects All elements with a title attribute value starting with \"Tom\"</span>",
"[attribute~=value], eg. $(\"[title~=\'hello\']\") :<br><br> <span class='code'>selects All elements with a title attribute value containing the specific word \"hello\"</span>",
"[attribute*=value], eg. $(\"[title*=\'hello\']\") :<br><br> <span class='code'>selects All elements with a title attribute value containing the word \"hello\"</span>",
":input, eg. $(\":input\") :<br><br> <span class='code'>selects All input elements</span>",
":text, eg. $(\":text\") :<br><br> <span class='code'>selects All input elements with type=\"text\"</span>",
":password, eg. $(\":password\") :<br><br> <span class='code'>selects All input elements with type=\"password\"</span>",
":radio, eg. $(\":radio\") :<br><br> <span class='code'>selects All input elements with type=\"radio\"</span>",
":checkbox, eg. $(\":checkbox\") :<br><br> <span class='code'>selects All input elements with type=\"checkbox\"</span>",
":submit, eg. $(\":submit\") :<br><br> <span class='code'>selects All input elements with type=\"submit\"</span>",
":reset, eg. $(\":reset\") :<br><br> <span class='code'>selects All input elements with type=\"reset\"</span>",
":button, eg. $(\":button\") :<br><br> <span class='code'>selects All input elements with type=\"button\"</span>",
":image, eg. $(\":image\") :<br><br> <span class='code'>selects All input elements with type=\"image\"</span>",
":file, eg. $(\":file\") :<br><br> <span class='code'>selects All input elements with type=\"file\"</span>",
":enabled, eg. $(\":enabled\") :<br><br> <span class='code'>selects All enabled input elements</span>",
":disabled, eg. $(\":disabled\") :<br><br> <span class='code'>selects All disabled input elements</span>",
":selected, eg. $(\":selected\") :<br><br> <span class='code'>selects All selected input elements</span>",
":checked, eg. $(\":checked\") :<br><br> <span class='code'>selects All checked input elements</span>",
"blur() :<br><br> <span class='code'>Attaches/Triggers the blur event</span>",
"change() :<br><br> <span class='code'>Attaches/Triggers the change event</span>",
"click() :<br><br> <span class='code'>Attaches/Triggers the click event</span>",
"dblclick() :<br><br> <span class='code'>Attaches/Triggers the double click event</span>",
"die() :<br><br> <span class='code'>Removed in version 1.9. Removes all event handlers added with the live() method</span>",
"event.currentTarget :<br><br> <span class='code'>The current DOM element within the event bubbling phase</span>",
"event.data :<br><br> <span class='code'>Contains the optional data passed to an event method when the current executing handler is bound</span>",
"event.delegateTarget :<br><br> <span class='code'>Returns the element where the currently-called jQuery event handler was attached</span>",
"event.isDefaultPrevented() :<br><br> <span class='code'>Returns whether event.preventDefault() was called for the event object</span>",
"event.isImmediatePropagationStopped() :<br><br> <span class='code'>Returns whether event.stopImmediatePropagation() was called for the event object</span>",
"event.isPropagationStopped() :<br><br> <span class='code'>Returns whether event.stopPropagation() was called for the event object</span>",
"event.namespace :<br><br> <span class='code'>Returns the namespace specified when the event was triggered</span>",
"event.pageX :<br><br> <span class='code'>Returns the mouse position relative to the left edge of the document</span>",
"event.pageY :<br><br> <span class='code'>Returns the mouse position relative to the top edge of the document</span>",
"event.preventDefault() :<br><br> <span class='code'>Prevents the default action of the event</span>",
"event.relatedTarget :<br><br> <span class='code'>Returns which element being entered or exited on mouse movement.</span>",
"event.result :<br><br> <span class='code'>Contains the last/previous value returned by an event handler triggered by the specified event</span>",
"event.stopImmediatePropagation() :<br><br> <span class='code'>Prevents other event handlers from being called</span>",
"event.stopPropagation() :<br><br> <span class='code'>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event</span>",
"event.target :<br><br> <span class='code'>Returns which DOM element triggered the event</span>",
"event.timeStamp :<br><br> <span class='code'>Returns the number of milliseconds since January 1, 1970, when the event is triggered</span>",
"event.type :<br><br> <span class='code'>Returns which event type was triggered</span>",
"event.which :<br><br> <span class='code'>Returns which keyboard key or mouse button was pressed for the event</span>",
"focus() :<br><br> <span class='code'>Attaches/Triggers the focus event</span>",
"focusin() :<br><br> <span class='code'>Attaches an event handler to the focusin event</span>",
"focusout() :<br><br> <span class='code'>Attaches an event handler to the focusout event</span>",
"hover() :<br><br> <span class='code'>Attaches two event handlers to the hover event</span>",
"keydown() :<br><br> <span class='code'>Attaches/Triggers the keydown event</span>",
"keypress() :<br><br> <span class='code'>Attaches/Triggers the keypress event</span>",
"keyup() :<br><br> <span class='code'>Attaches/Triggers the keyup event</span>",
"live() :<br><br> <span class='code'>Removed in version 1.9. Adds one or more event handlers to current, or future, selected elements</span>",
"mousedown() :<br><br> <span class='code'>Attaches/Triggers the mousedown event</span>",
"mouseenter() :<br><br> <span class='code'>Attaches/Triggers the mouseenter event</span>",
"mouseleave() :<br><br> <span class='code'>Attaches/Triggers the mouseleave event</span>",
"mousemove() :<br><br> <span class='code'>Attaches/Triggers the mousemove event</span>",
"mouseout() :<br><br> <span class='code'>Attaches/Triggers the mouseout event</span>",
"mouseover() :<br><br> <span class='code'>Attaches/Triggers the mouseover event</span>",
"mouseup() :<br><br> <span class='code'>Attaches/Triggers the mouseup event</span>",
"off() :<br><br> <span class='code'>Removes event handlers attached with the on() method</span>",
"on() :<br><br> <span class='code'>Attaches event handlers to elements</span>",
"one() :<br><br> <span class='code'>Adds one or more event handlers to selected elements. This handler can only be triggered once per element</span>",
"$.proxy() :<br><br> <span class='code'>Takes an existing function and returns a new one with a particular context</span>",
"ready() :<br><br> <span class='code'>Specifies a function to execute when the DOM is fully loaded</span>",
"resize() :<br><br> <span class='code'>Attaches/Triggers the resize event</span>",
"scroll() :<br><br> <span class='code'>Attaches/Triggers the scroll event</span>",
"select() :<br><br> <span class='code'>Attaches/Triggers the select event</span>",
"submit() :<br><br> <span class='code'>Attaches/Triggers the submit event</span>",
"toggle() :<br><br> <span class='code'>Removed in version 1.9. Attaches two or more functions to toggle between for the click event</span>",
"trigger() :<br><br> <span class='code'>Triggers all events bound to the selected elements</span>",
"triggerHandler() :<br><br> <span class='code'>Triggers all functions bound to a specified event for the selected elements</span>",
"animate() :<br><br> <span class='code'>Runs a custom animation on the selected elements</span>",
"clearQueue() :<br><br> <span class='code'>Removes all remaining queued functions from the selected elements</span>",
"delay() :<br><br> <span class='code'>Sets a delay for all queued functions on the selected elements</span>",
"dequeue() :<br><br> <span class='code'>Removes the next function from the queue, and then executes the function</span>",
"fadeIn() :<br><br> <span class='code'>Fades in the selected elements</span>",
"fadeOut() :<br><br> <span class='code'>Fades out the selected elements</span>",
"fadeTo() :<br><br> <span class='code'>Fades in/out the selected elements to a given opacity</span>",
"fadeToggle() :<br><br> <span class='code'>Toggles between the fadeIn() and fadeOut() methods</span>",
"finish() :<br><br> <span class='code'>Stops, removes and completes all queued animations for the selected elements</span>",
"hide() :<br><br> <span class='code'>Hides the selected elements</span>",
"queue() :<br><br> <span class='code'>Shows the queued functions on the selected elements</span>",
"show() :<br><br> <span class='code'>Shows the selected elements</span>",
"slideDown() :<br><br> <span class='code'>Slides-down (shows) the selected elements</span>",
"slideToggle() :<br><br> <span class='code'>Toggles between the slideUp() and slideDown() methods</span>",
"slideUp() :<br><br> <span class='code'>Slides-up (hides) the selected elements</span>",
"stop() :<br><br> <span class='code'>Stops the currently running animation for the selected elements</span>",
"toggle() :<br><br> <span class='code'>Toggles between the hide() and show() methods</span>",
"addClass() :<br><br> <span class='code'>Adds one or more class names to selected elements</span>",
"after() :<br><br> <span class='code'>Inserts content after selected elements</span>",
"append() :<br><br> <span class='code'>Inserts content at the end of selected elements</span>",
"appendTo() :<br><br> <span class='code'>Inserts HTML elements at the end of selected elements</span>",
"attr() :<br><br> <span class='code'>Sets or returns attributes/values of selected elements</span>",
"before() :<br><br> <span class='code'>Inserts content before selected elements</span>",
"clone() :<br><br> <span class='code'>Makes a copy of selected elements</span>",
"css() :<br><br> <span class='code'>Sets or returns one or more style properties for selected elements</span>",
"detach() :<br><br> <span class='code'>Removes selected elements (keeps data and events)</span>",
"empty() :<br><br> <span class='code'>Removes all child nodes and content from selected elements</span>",
"hasClass() :<br><br> <span class='code'>Checks if any of the selected elements have a specified class name</span>",
"height() :<br><br> <span class='code'>Sets or returns the height of selected elements</span>",
"html() :<br><br> <span class='code'>Sets or returns the content of selected elements</span>",
"innerHeight() :<br><br> <span class='code'>Returns the height of an element (includes padding, but not border)</span>",
"innerWidth() :<br><br> <span class='code'>Returns the width of an element (includes padding, but not border)</span>",
"insertAfter() :<br><br> <span class='code'>Inserts HTML elements after selected elements</span>",
"insertBefore() :<br><br> <span class='code'>Inserts HTML elements before selected elements</span>",
"offset() :<br><br> <span class='code'>Sets or returns the offset coordinates for selected elements (relative to the document)</span>",
"offsetParent() :<br><br> <span class='code'>Returns the first positioned parent element</span>",
"outerHeight() :<br><br> <span class='code'>Returns the height of an element (includes padding and border)</span>",
"outerWidth() :<br><br> <span class='code'>Returns the width of an element (includes padding and border)</span>",
"position() :<br><br> <span class='code'>Returns the position (relative to the parent element) of an element</span>",
"prepend() :<br><br> <span class='code'>Inserts content at the beginning of selected elements</span>",
"prependTo() :<br><br> <span class='code'>Inserts HTML elements at the beginning of selected elements</span>",
"prop() :<br><br> <span class='code'>Sets or returns properties/values of selected elements</span>",
"remove() :<br><br> <span class='code'>Removes the selected elements (including data and events)</span>",
"removeAttr() :<br><br> <span class='code'>Removes one or more attributes from selected elements</span>",
"removeClass() :<br><br> <span class='code'>Removes one or more classes from selected elements</span>",
"removeProp() :<br><br> <span class='code'>Removes a property set by the prop() method</span>",
"replaceAll() :<br><br> <span class='code'>Replaces selected elements with new HTML elements</span>",
"replaceWith() :<br><br> <span class='code'>Replaces selected elements with new content</span>",
"scrollLeft() :<br><br> <span class='code'>Sets or returns the horizontal scrollbar position of selected elements</span>",
"scrollTop() :<br><br> <span class='code'>Sets or returns the vertical scrollbar position of selected elements</span>",
"text() :<br><br> <span class='code'>Sets or returns the text content of selected elements</span>",
"toggleClass() :<br><br> <span class='code'>Toggles between adding/removing one or more classes from selected elements</span>",
"unwrap() :<br><br> <span class='code'>Removes the parent element of the selected elements</span>",
"val() :<br><br> <span class='code'>Sets or returns the value attribute of the selected elements (for form elements)</span>",
"width() :<br><br> <span class='code'>Sets or returns the width of selected elements</span>",
"wrap() :<br><br> <span class='code'>Wraps HTML element(s) around each selected element</span>",
"wrapAll() :<br><br> <span class='code'>Wraps HTML element(s) around all selected elements</span>",
"wrapInner() :<br><br> <span class='code'>Wraps HTML element(s) around the content of each selected element</span>",
"add() :<br><br> <span class='code'>Adds elements to the set of matched elements</span>",
"addBack() :<br><br> <span class='code'>Adds the previous set of elements to the current set</span>",
"andSelf() :<br><br> <span class='code'>Add the previous set of elements on the stack to the current set. Deprecated. An alias for addBack()</span>",
"children() :<br><br> <span class='code'>Returns all direct children of the selected element</span>",
"closest() :<br><br> <span class='code'>Returns the first ancestor of the selected element</span>",
"contents() :<br><br> <span class='code'>Returns all direct children of the selected element (including text and comment nodes)</span>",
"each() :<br><br> <span class='code'>Executes a function for each matched element</span>",
"end() :<br><br> <span class='code'>Ends the most recent filtering operation in the current chain, and return the set of matched elements to its previous state</span>",
"eq() :<br><br> <span class='code'>Returns an element with a specific index number of the selected elements</span>",
"filter() :<br><br> <span class='code'>Reduce the set of matched elements to those that match the selector or pass the function\'s test</span>",
"find() :<br><br> <span class='code'>Returns descendant elements of the selected element</span>",
"first() :<br><br> <span class='code'>Returns the first element of the selected elements</span>",
"has() :<br><br> <span class='code'>Returns all elements that have one or more elements inside of them</span>",
"is() :<br><br> <span class='code'>Checks the set of matched elements against a selector/element/jQuery object, and return true if at least one of these elements matches the given arguments</span>",
"last() :<br><br> <span class='code'>Returns the last element of the selected elements</span>",
"map() :<br><br> <span class='code'>Passes each element in the matched set through a function, producing a new jQuery object containing the return values</span>",
"next() :<br><br> <span class='code'>Returns the next sibling element of the selected element</span>",
"nextAll() :<br><br> <span class='code'>Returns all next sibling elements of the selected element</span>",
"nextUntil() :<br><br> <span class='code'>Returns all next sibling elements between two given arguments</span>",
"not() :<br><br> <span class='code'>Remove elements from the set of matched elements</span>",
"offsetParent() :<br><br> <span class='code'>Returns the first positioned parent element</span>",
"parent() :<br><br> <span class='code'>Returns the direct parent element of the selected element</span>",
"parents() :<br><br> <span class='code'>Returns all ancestor elements of the selected element</span>",
"parentsUntil() :<br><br> <span class='code'>Returns all ancestor elements between two given arguments</span>",
"prev() :<br><br> <span class='code'>Returns the previous sibling element of the selected element</span>",
"prevAll() :<br><br> <span class='code'>Returns all previous sibling elements of the selected element</span>",
"prevUntil() :<br><br> <span class='code'>Returns all previous sibling elements between two given arguments</span>",
"siblings() :<br><br> <span class='code'>Returns all sibling elements of the selected element</span>",
"slice() :<br><br> <span class='code'>Reduces the set of matched elements to a subset specified by a range of indices</span>",
"$.ajax() :<br><br> <span class='code'>Performs an async AJAX request</span>",
"$.ajaxPrefilter() :<br><br> <span class='code'>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax()</span>",
"$.ajaxSetup() :<br><br> <span class='code'>Sets the default values for future AJAX requests</span>",
"$.ajaxTransport() :<br><br> <span class='code'>Creates an object that handles the actual transmission of Ajax data</span>",
"$.get() :<br><br> <span class='code'>Loads data from a server using an AJAX HTTP GET request</span>",
"$.getJSON() :<br><br> <span class='code'>Loads JSON-encoded data from a server using a HTTP GET request</span>",
"$.getScript() :<br><br> <span class='code'>Loads (and executes) a JavaScript from a server using an AJAX HTTP GET request</span>",
"$.param() :<br><br> <span class='code'>Creates a serialized representation of an array or object (can be used as URL query string for AJAX requests)</span>",
"$.post() :<br><br> <span class='code'>Loads data from a server using an AJAX HTTP POST request</span>",
"ajaxComplete() :<br><br> <span class='code'>Specifies a function to run when the AJAX request completes</span>",
"ajaxError() :<br><br> <span class='code'>Specifies a function to run when the AJAX request completes with an error</span>",
"ajaxSend() :<br><br> <span class='code'>Specifies a function to run before the AJAX request is sent</span>",
"ajaxStart() :<br><br> <span class='code'>Specifies a function to run when the first AJAX request begins</span>",
"ajaxStop() :<br><br> <span class='code'>Specifies a function to run when all AJAX requests have completed</span>",
"ajaxSuccess() :<br><br> <span class='code'>Specifies a function to run when an AJAX request completes successfully</span>",
"load() :<br><br> <span class='code'>Loads data from a server and puts the returned data into the selected element</span>",
"serialize() :<br><br> <span class='code'>Encodes a set of form elements as a string for submission</span>",
"serializeArray() :<br><br> <span class='code'>Encodes a set of form elements as an array of names and values</span>",
"data() :<br><br> <span class='code'>Attaches data to, or gets data from, selected elements</span>",
"each() :<br><br> <span class='code'>Execute a function for each matched element</span>",
"get() :<br><br> <span class='code'>Get the DOM elements matched by the selector</span>",
"index() :<br><br> <span class='code'>Search for a given element from among the matched elements</span>",
"$.noConflict() :<br><br> <span class='code'>Release jQuery\'s control of the $ variable</span>",
"$.param() :<br><br> <span class='code'>Create a serialized representation of an array or object (can be used as URL query string for AJAX requests)</span>",
"removeData() :<br><br> <span class='code'>Removes a previously-stored piece of data</span>",
"toArray() :<br><br> <span class='code'>Retrieve all the DOM elements contained in the jQuery set, as an array</span>",
"jquery :<br><br> <span class='code'>Contains the jQuery version number</span>",
"jQuery.fx.interval :<br><br> <span class='code'>Change the animation firing rate in milliseconds</span>",
"jQuery.fx.off :<br><br> <span class='code'>Globally disable/enable all animations</span>",
"jQuery.support :<br><br> <span class='code'>A collection of properties representing different browser features or bugs (Intended for jQuery\'s internal use)</span>",
"length :<br><br> <span class='code'>Contains the number of elements in the jQuery object</span>",
"onclick event :<br><br> <span class='code'>document.getElementById(\"demo\").onclick = function() {myFunction()};</span>",
"writeln() :<br><br> <span class='code'>writes any number of expressions in the document window</span>",
"alert() :<br><br> <span class='code'>displays an alert dialog box with a message and an OK button</span>",
"prompt() :<br><br> <span class='code'>displays a prompt dialog box with a message and an input field</span>",
"document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\'); :<br><br> <span class='code'>writes an expression in the document window</span>",
"writeln(), document.write() :<br><br> <span class='code'>they are identical, writeln() add with the a newline character</span>",
"window.open(\'link.html\',\'mywindow\'); :<br><br> <span class='code'>Opening A Window With JavaScript</span>",
"&lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt; :<br><br> <span class='code'>Opening A Window</span>",
"window.open(\'link.html\',\'mywindow\',\'window features\'); :<br><br> <span class='code'>Adding Windows features</span>",
"Link Events :<br><br> <span class='code'>onClick, onMouseOver, onMouseOut</span>",
"&lt;a href=\"index.htm\" onMouseOver=\"home_button.src=\'homeon.gif\';\" onMouseOut=\"home_button.src=\'home.gif\';\"&gt;&lt;img src=\"home.gif\" alt=\"Home\" name=\"home_button\" border=\"0\"&gt;&lt;/a&gt; :<br><br> <span class='code'>Assign Link Events</span>",
"if(){}else{} :<br><br> <span class='code'>if else function</span>",
"if(){} :<br><br> <span class='code'>if function</span>",
"while(){} :<br><br> <span class='code'>while function</span>",
"for(){} :<br><br> <span class='code'>for function</span>",
"&lt;form name=\"formname\"&gt;&lt;/form&gt; :<br><br> <span class='code'>create a form</span>",
"&lt;input type=\"text\" name=\"boxname\"&gt; :<br><br> <span class='code'>Place a text box</span>",
"window.document.formname.first_text.value=\'Hi there\'; :<br><br> <span class='code'>put \'Hi there!\' into the value of the item called \'first_text\' in the form called \'formname\'</span>",
"onBlur Events :<br><br> <span class='code'>when the cursor is moved out of the field</span>",
"onFocus Events :<br><br> <span class='code'>when the cursor is moved into the field</span>",
"onChange Events :<br><br> <span class='code'>when the field is changed and the cursor moves out of it</span>",
"&lt;input type=\"text\" onBlur=\"dothis\"&gt; :<br><br> <span class='code'>onBlur Events</span>",
"function sayhi(){} :<br><br> <span class='code'>JavaScript Functions</span>",
"&lt;input type=\"submit\" value=\"Submit\"&gt; :<br><br> <span class='code'>Submit Button</span>",
"&lt;form name=\"myform\" onSubmit=\"MyFunction(); return false;\"&gt; :<br><br> <span class='code'>onSubmit take action</span>",
"if(window.document.example1.my_checkbox.checked=true){} :<br><br> <span class='code'>Checkboxes action</span>",
"switch(expression){case n: ... break; default: ...} :<br><br> <span class='code'>Switch Statement</span>",
"switch (new Date().getDay()) {case 5: text = \"Soon it is Weekend\"; break; case 6: text = \"It is Weekend\"; break; default: text = \"Waiting\";} :<br><br> <span class='code'>Common week day Code Blocks</span>",
"for (x in person) {text += person[x];} :<br><br> <span class='code'>The For/In Loop</span>",
"if (i === 3) { break;}, if (i === 3) { continue;} :<br><br> <span class='code'>Break and Continue</span>",
"label: statements; break labelname; continue labelname; :<br><br> <span class='code'>JavaScript Labels</span>",
"var array_name = [item1, item2, ...]; :<br><br> <span class='code'>Creating an Array</span>",
"arrays use numbered indexes, objects use named indexes :<br><br> <span class='code'>Difference Between Arrays and Objects</span>",
"var car = {type:\"Fiat\", model:\"500\", color:\"white\"}; :<br><br> <span class='code'>Objects are variables containing many values</span>",
"$(\'.keys\').click(function(){parent.history.back();return false;}); :<br><br> <span class='code'>history.back function</span>",
"$(\"#codelist\").load(\"HKCodelist.txt\"); :<br><br> <span class='code'>load function</span>",
"set html go to bottom automatically :<br><br> <span class='code'>onclick=\"window.scrollTo(0,document.body.scrollHeight);\"</span>",
"javascript load script :<br><br> <span class='code'>&lt;script type=\"text/javascript\" src=theUrl&gt;&lt;/script&gt;</span>"
];

// Tip Limit counter
var tipLimit = tipsList.length;

function shuffle(array) {
    var i = tipsList.length,
        j = 0,
        temp;
    while (i--) {
        j = Math.floor(Math.random() * (i+1));
        // swap randomly chosen element with current element
        temp = tipsList[i];
        tipsList[i] = tipsList[j];
        tipsList[j] = temp;
    }
    return tipsList;
}

var ranNums = shuffle(Array.from(Array(tipsList.length).keys()));

function generateTip(tipsNum) {
  var tip = ranNums[tipsNum];
  var tipElement = document.querySelector('.js-tip');
  tipElement.innerHTML = tip;
  var tipLimitCount = document.querySelector('.tip-limit-count');
  tipLimitCount.innerHTML = tipLimit;
  document.querySelector('.tip-button').focus();

}

function onTipButtonClick() {
  var tipButton = document.querySelector('.tip-button');
  tipButton.addEventListener('click', function() {
    tipLimit = tipLimit - 1;
    if (tipLimit >= 0) {
	generateTip(tipLimit);

      if (tipLimit === 0) {
        tipButton.innerHTML = 'See you in another tab!';
        tipButton.classList.add('disabled');
      }
    }
  });
}

// Get the first tip shown
generateTip(tipLimit - 1);

onTipButtonClick();
