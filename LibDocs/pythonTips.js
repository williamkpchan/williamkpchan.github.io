pythonTips = [
'<h2>Automating My Projects With Python</h2>\n<a href="https://www.youtube.com/watch?v=7Y8Ppin12r4">Automating My Projects With Python</a>\n',
'<h2>Classes and Objects Tutorial</h2>\n<a href="Classes and Objects Tutorial.html" class="bordwhite2 borRad10 red goldbs">Classes and Objects Tutorial</a>\n',
'<h2>Python data types:</h2>\nint, or integer: a number without a fractional part.\nfloat, or floating point: a number that has both an integer and fractional part, separated by a point. \nfactor, with the value 1.10, is an example of a float.\nstr, or string: a type to represent text.\nYou can use single or double quotes to build a string.\nbool, or boolean: a type to represent logical values. Can only be True or False (the capitalization is important!).\ntype() function\nTo determine the type of a, simply execute:\ntype(a)\nUsing the + operator to paste together two strings.\nprint("I started with $" + savings + " and now have $" + result + ". Awesome!")\nThis will not work, though, as you cannot simply sum strings and floats.\nTo fix the error, you\'ll need to explicitly convert the types of your variables. More specifically, you\'ll need str(), to convert a value into a string. str(savings), for example, will convert the float savings to a string.\nSimilar functions such as int(), float() and bool() will help you convert Python values into any type.\nUsing the + operator to paste together two strings.\nprint("I started with $" + savings + " and now have $" + result + ". Awesome!")\nThis will not work, though, as you cannot simply sum strings and floats.\nTo fix the error, you\'ll need to explicitly convert the types of your variables. More specifically, you\'ll need str(), to convert a value into a string. str(savings), for example, will convert the float savings to a string.\nSimilar functions such as int(), float() and bool() will help you convert Python values into any type.\nManipulating lists\n.append()	 method\n.extend()	 method on the list\n.index()	method\n.pop()	method\naList = [123, \'xyz\', \'zara\', \'abc\'];\naList.append( 2009 );\nprint("Updated List : ", aList)\n# Create a list containing the names: baby_names\nbaby_names = [\'Ximena\', \'Aliza\', \'Ayden\', \'Calvin\']\n# Extend baby_names with \'Rowen\' and \'Sandeep\'\nbaby_names.extend([\'Rowen\', \'Sandeep\'])\n# Print(baby_names)\nprint(baby_names)\n# Find the position of \'Aliza\': position\nposition = baby_names.index(\'Aliza\')\n# Remove \'Aliza\' from baby_names\nbaby_names.pop(position)\n# Print(baby_names)\nprint(baby_names)\nLooping over lists\nfor loop\nsorted()\nThe sorted() function returns a new list and does not affect the list you passed into the function.\nA a list of this form:\n[\'2011\', \'FEMALE\', \'HISPANIC\', \'GERALDINE\', \'13\', \'75\']\nloop over this list of lists and append the names of each baby to a new list called baby_names.\nbaby_names =[]\nfor x in range(0, 3):\n print("We\'re on time %d" % (x))\nfruits = [\'banana\', \'apple\',  \'mango\']\nfor fruit in fruits:\n print(\'Current fruit :\', fruit)\n<a href="https://stackoverflow.com/questions/25050311/extract-first-item-of-each-sublist-in-python">extract-first-item-of-each-sublist-in-python</a>\n# Create the empty list: baby_names\nbaby_names =[]\n# Loop over records \nfor baby in records:\n # Add the name to the list\n baby_names.append(baby[3])\n \n# Sort the names in alphabetical order\nfor name in sorted(baby_names):\n # Print(each name)\n print(name)\nTuples are fixed size in nature whereas lists are dynamic.\nIn other words, a tuple is immutable whereas a list is mutable.\nUsing and unpacking tuples\nTuples are made of several items just like a list, but they cannot be modified in any way. \nIt is very common for tuples to be used to represent data from a database. \nIf you have a tuple like (\'chocolate chip cookies\', 15) and you want to access each part of the data, \nyou can use an index just like a list. \nHowever, you can also "unpack" the tuple into multiple variables such as \ntype, count = (\'chocolate chip cookies\', 15) \nthat will set type to \'chocolate chip cookies\' and count to 15.\nOften you\'ll want to pair up multiple array data types. The zip() function does just that. It will return a list of tuples containing one element from each list passed into zip().\nWhen looping over a list, you can also track your position in the list by using the enumerate() function. The function returns the index of the list item you are currently on in the list and the list item itself.\nYou\'ll practice using the enumerate() and zip() functions in this exercise, in which your job is to pair up the most common boy and girl names. Two lists - girl_names and boy_names - have been pre-loaded into your workspace.\nInstructions\nUse the zip() function to pair up girl_names and boy_names into a variable called pairs.\nUse a for loop to loop through pairs, using enumerate() to keep track of your position. Unpack pairs into the variables idx and pair.\nInside the for loop:\nUnpack pair into the variables girl_name and boy_name.\nPrint(the rank, girl name, and boy name, in that order. The rank is contained )in idx.\n==========================\nget webpage contents with python\n<a href="https://www.youtube.com/watch?v=LosIGgon_KM" class="red bordyellow1 white2bs">Urllib - GET Requests</a>\nimport urllib2\nresponse = urllib2.urlopen(\'http://python.org/\')\nhtml = response.read()\nimport urllib2\nresp = urllib2.urlopen(\'http://hiscore.runescape.com/index_lite.ws?player=zezima\')\npage = resp.read()\nusing Python 3.1\nurllib.request.urlopen(\'http://www.python.org/\')\n<a href="https://campus.datacamp.com/courses/data-types-for-data-science/fundamental-data-types?ex=6">data-types-for-data-science</a>\n==========\n',
'<h2>import</h2>\nimport sys\nprint(sys.path)\nimport sys\nfor pth in sys.path:\n print(pth)\nimport os\nos.getcwd()\nos.chdir("/tmp/")\nos.getcwd()\n在 Python 中，import、import as 與 from import 可以出現在程式中可出現的任何位置\nimport xmath\nprint((xmath.max(10, 5)))\nprint((xmath.sum(1, 2, 3, 4, 5)))\n \nimport xmath as math # 為 xmath 模組取別名為 math\nprint((math.e))\n \nfrom xmath import min  # 將 min 複製至目前模組，不建議 from modu import *，易造成名稱衝突\nprint((min(10, 5)))\n==========\n',
'<h2>import os</h2>\nos.system("your command")\nprint("\n")\nimport os\nos.system("dir c:\\")\n==========\n',
'<h2>print(statement without newline or space</h2>)\nIn Python 3, the print(statement print(without newline or space:)\nprint(str, end=\'\')\n',
'<h2>Samples</h2>\nmax1 = a if a > b else b\ndef max(a, b):\n return a if a > b else b\n',
'<h2>def factorial(n):</h2>\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)\n',
'<h2>import math</h2>\nmath.factorial(n)\n',
'<h2>Python Code Examples</h2>\nYou can find more Python code examples at the bottom of this page.\n<a href="https://www.pythonforbeginners.com/python-on-the-web/using-pywhois/" title="pywhois">Using pywhois</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/magic-8-ball-written-in-python/" title="magic_8_ball">Magic 8-ball</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/commandlinefu-with-python/" title="command_line_fu">CommandLineFu with Python</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/port-scanner-in-python/" title="port_scanner">Port scanner in Python </a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/google-command-line-script/" title="google-command-line-script">Google Command Line Script </a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/date-and-time-script/" title="date_and_time">Date and Time Script</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/bitly-shortener-with-python/" title="bitly_api_python">Bitly Shortener with Python</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/using-python-to-send-email/" title="sending_mails_using_google">Sending Mails using Gmail</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/command-line-speedtest-net-via-tespeed/" title="commandlinespeedtest">Command Line speedtest.net via tespeed</a>\n<a href="https://www.pythonforbeginners.com/systems-programming/os-walk-and-fnmatch-in-python/" title="oswalk">Search computer for specific files</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/script-get-the-geo-location-of-an-ip-address/" title="Get the Geo Location of an IP Address">Get the Geo Location of an IP Address</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/script-get-the-username-from-a-prompt/" title="Get the username from a prompts">Get the username from a prompts</a>\n<a href="https://www.pythonforbeginners.com/python-on-the-web/twitter-search-using-python/" title="Tweet Search using Python">Tweet Search using Python</a>\n<a href="https://www.pythonforbeginners.com/basics/python-datetime-timedelta/" title="Date and Time in Python">Date and Time in Python</a>\n<a href="https://www.youtube.com/watch?v=gQP0geNsO4A" class="goldbut red limebs borRad20">Python Turtle Racing!</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/game-rolling-the-dice/" title="Rolling the dice">Python Game : Rolling the dice</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/python-script-monitor-apachenginx-log-file/" title="Monitor Apache / Nginx Log File">Monitor Apache / Nginx Log File</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/python-script-log-checker/" title="Log Checker in Python">Log Checker in Python</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/python-guessing-game-part-2/" title="Python : Guessing Game part 2">Python : Guessing Game part 2</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/python-guessing-game/" title="Guessing Game written in Python">Guessing Game written in Python</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/script-password-generator/" title="Python Password Generator">Python Password Generator</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/python-code-convert-kmh-to-mph/" title="Convert KM/H to MPH">Convert KM/H to MPH</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/regular-expression-re-findall/" title="Get all the links from a website">Get all the links from a website</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/python-code-celsius-and-fahrenheit-converter/" title="Celsius and Fahrenheit Converter">Celsius and Fahrenheit Converter</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/script-average-score/" title="Calculate the average score">Calculate the average score</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/check-your-external-ip-address/" title="check-your-external-ip-address">Check your external IP address</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/game-hangman/" title="Python Hangman Game">Python Hangman Game</a>\n<a href="https://www.pythonforbeginners.com/code-snippets-source-code/imdb-crawler/" title="imdb-crawler">Python Command Line IMDB Scraper</a>\n',
'<h2>Python code examples</h2>\nHere we link to other sites that provides Python code examples.\n<a href="http://code.activestate.com/recipes/langs/python/" title="activestate_python_code">ActiveState Code - Popular Python recipes</a>\n<a href="http://snipplr.com/all/language/python" title="snipplr">Snipplr.com</a>\n<a href="http://nullege.com/" title="nullege">Nullege - Search engine for Python source code</a>\n<a href="https://snipt.net/public/tag/python/" title="snipt.net">Snipt.net</a>\n',
'<h2>Python Programming Examples</h2>\n<k><a href="https://www.geeksforgeeks.org/category/python/">Recent Articles on Python !</a></k>\n<k><a href="https://www.geeksforgeeks.org/python-multiple-choice-questions/">Python Output &amp; Multiple Choice Questions</a></k>\n&nbsp;\n<k>Topics :</k>\n<k>Basic Programs: </k>\n<a href="https://www.geeksforgeeks.org/python-program-to-add-two-numbers/">add two numbers</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number/">factorial of a number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-simple-interest/">simple interest</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-compound-interest/">compound interest</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-check-armstrong-number/">check Armstrong Number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-program-to-find-area-of-a-circle/">Program to find area of a circle</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-all-prime-numbers-in-an-interval/">print(all Prime )numbers in an Interval</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/">check whether a number is Prime or not</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-n-th-fibonacci-number/">n-th Fibonacci number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-program-for-fibonacci-numbers-2/">Fibonacci numbers</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-how-to-check-if-a-given-number-is-fibonacci-number/">How to check if a given number is Fibonacci number?</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-nth-multiple-of-a-number-in-fibonacci-series/">n\’th multiple of a number in Fibonacci Series</a>\n<a href="https://www.geeksforgeeks.org/program-print-ascii-value-character/">Program to print(ASCII Value of a character</a>)\n<a href="https://www.geeksforgeeks.org/python-program-for-sum-of-squares-of-first-n-natural-numbers/">Sum of squares of first n natural numbers</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-program-for-cube-sum-of-first-n-natural-numbers/">cube sum of first n natural numbers</a>\n<k>Array Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-sum-of-array/">find sum of array</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-largest-element-in-an-array/">find largest element in an array</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-program-for-array-rotation-2/">array rotation</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-reversal-algorithm-for-array-rotation/">Reversal algorithm for array rotation</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-split-the-array-and-add-the-first-part-to-the-end/">Split the array and add the first part to the end</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-find-reminder-of-array-multiplication-divided-by-n/">Find reminder of array multiplication divided by n</a>\n<a href="https://www.geeksforgeeks.org/reconstruct-the-array-by-replacing-arri-with-arri-11-m/">Reconstruct the array by replacing arr[i] with (arr[i-1]+1) % M</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-check-if-given-array-is-monotonic/">check if given array is Monotonic</a>\n<k>List Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-program-to-interchange-first-and-last-elements-in-a-list/">interchange first and last elements in a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-swap-two-elements-in-a-list/">swap two elements in a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-remove-nth-occurrence-of-the-given-word/">remove Nth occurrence of the given word</a>\n<a href="https://www.geeksforgeeks.org/python-ways-to-find-length-of-list/">Python | Ways to find length of list</a>\n<a href="https://www.geeksforgeeks.org/python-ways-to-check-if-element-exists-in-list/">Python | Ways to check if element exists in list</a>\n<a href="https://www.geeksforgeeks.org/different-ways-to-clear-a-list-in-python/">Different ways to clear a list in Python</a>\n<a href="https://www.geeksforgeeks.org/python-reversing-list/">Python | Reversing a List</a>\n<a href="https://www.geeksforgeeks.org/python-cloning-copying-list/">Python | Cloning or Copying a list</a>\n<a href="https://www.geeksforgeeks.org/python-count-occurrences-element-list/">Python | Count occurrences of an element in a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-sum-of-elements-in-list/">find sum of elements in list</a>\n<a href="https://www.geeksforgeeks.org/python-multiply-numbers-list-3-different-ways/">Python | Multiply all numbers in the list </a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-smallest-number-in-a-list/">find smallest number in a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-largest-number-in-a-list/">find largest number in a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-second-largest-number-in-a-list/">find second largest number in a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-n-largest-elements-from-a-list/">find N largest elements from a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-even-numbers-in-a-list/">print(even numbers in a list)</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-odd-numbers-in-a-list/">print(odd numbers in a List</a>)\n<a href="https://www.geeksforgeeks.org/python-program-to-print-all-even-numbers-in-a-range/">print(all even numbers )in a range</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-all-odd-numbers-in-a-range/">print(all odd numbers in )a range</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-count-even-and-odd-numbers-in-a-list/">count Even and Odd numbers in a List</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-positive-numbers-in-a-list/">print(positive numbers in )a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-negative-numbers-in-a-list/">print(negative numbers in )a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-all-positive-numbers-in-a-range/">print(all positive )numbers in a range</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-all-negative-numbers-in-a-range/">print(all negative )numbers in a range</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-count-positive-and-negative-numbers-in-a-list/">count positive and negative numbers in a list</a>\n<a href="https://www.geeksforgeeks.org/remove-multiple-elements-from-a-list-in-python/">Remove multiple elements from a list in Python</a>\n<a href="https://www.geeksforgeeks.org/python-remove-empty-tuples-list/">Python | Remove empty tuples from a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-print-duplicates-list-integers/">Python | Program to print(duplicates from a list of integers</a>)\n<a href="https://www.geeksforgeeks.org/python-program-to-find-cumulative-sum-of-a-list/">find Cumulative sum of a list</a>\n<a href="https://www.geeksforgeeks.org/break-list-chunks-size-n-python/">Break a list into chunks of size N in Python</a>\n<a href="https://www.geeksforgeeks.org/python-sort-values-first-list-using-second-list/">Python | Sort the values of first list using second list</a>\n<a href="https://www.geeksforgeeks.org/tag/python-list-programs/" rel="noopener"><k>More >></k></a>\n<k>String Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-program-check-string-palindrome-not/">check if a string is palindrome or not</a>\n<a href="https://www.geeksforgeeks.org/reverse-words-given-string-python/">Reverse words in a given String in Python</a>\n<a href="https://www.geeksforgeeks.org/ways-to-remove-ith-character-from-string-in-python/">Ways to remove i’th character from string in Python</a>\n<a href="https://www.geeksforgeeks.org/python-check-substring-present-given-string/">Python | Check if a Substring is Present in a Given String</a>\n<a href="https://www.geeksforgeeks.org/find-length-of-a-string-in-python-4-ways/">Find length of a string in python (4 ways)</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-print-even-length-words-in-a-string/">print(even length )words in a string</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-accept-the-strings-which-contains-all-vowels/">Python | Program to accept the strings which contains all vowels</a>\n<a href="https://www.geeksforgeeks.org/python-count-the-number-of-matching-characters-in-a-pair-of-string/">Python | Count the Number of matching characters in a pair of string</a>\n<a href="https://www.geeksforgeeks.org/python-program-count-number-vowels-using-sets-given-string/">count number of vowels using sets in given string</a>\n<a href="https://www.geeksforgeeks.org/remove-duplicates-given-string-python/">Remove all duplicates from a given string in Python</a>\n<a href="https://www.geeksforgeeks.org/python-program-check-string-contains-special-character/">Python | Program to check if a string contains any special character</a>\n<a href="https://www.geeksforgeeks.org/python-program-match-string-random-strings-length/">Generating random strings until a given string is generated</a>\n<a href="https://www.geeksforgeeks.org/find-words-greater-given-length-k/">Find words which are greater than given length k</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-removing-i-th-character-from-a-string/">removing i-th character from a string</a>\n<a href="https://www.geeksforgeeks.org/python-program-split-join-string/">split and join a string</a>\n<a href="https://www.geeksforgeeks.org/python-check-if-a-given-string-is-binary-string-or-not/">Python | Check if a given string is binary string or not</a>\n<a href="https://www.geeksforgeeks.org/python-find-close-matches-input-string-list/">Python | Find all close matches of input string from a list</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-uncommon-words-from-two-strings/">find uncommon words from two Strings</a>\n<a href="https://www.geeksforgeeks.org/python-swap-commas-dots-string/">Python | Swap commas and dots in a String</a>\n<a href="https://www.geeksforgeeks.org/python-permutation-given-string-using-inbuilt-function/">Python | Permutation of a given string using inbuilt function</a>\n<a href="https://www.geeksforgeeks.org/python-check-url-string/">Python | Check for URL in a String</a>\n<a href="https://www.geeksforgeeks.org/execute-string-code-python/">Execute a String of Code in Python</a>\n<a href="https://www.geeksforgeeks.org/string-slicing-python-rotate-string/">String slicing in Python to rotate a string</a>\n<a href="https://www.geeksforgeeks.org/string-slicing-python-check-string-can-become-empty-recursive-deletion/">String slicing in Python to check if a string can become empty by recursive deletion</a>\n<a href="https://www.geeksforgeeks.org/python-counter-find-duplicate-characters-string/">Python Counter| Find all duplicate characters in string</a>\n<a href="https://www.geeksforgeeks.org/tag/python-string-programs/" rel="noopener"><k>More >></k></a>\n<k>Dictionary Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-sort-python-dictionaries-by-key-or-value/"> Python | Sort Python Dictionaries by Key or Value</a>\n<a href="https://www.geeksforgeeks.org/handling-missing-keys-python-dictionaries/"> Handling missing keys in Python dictionaries</a>\n<a href="https://www.geeksforgeeks.org/python-dictionary-with-keys-having-multiple-inputs/">Python dictionary with keys having multiple inputs</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-all-items-in-a-dictionary/">find the sum of all items in a dictionary</a>\n<a href="https://www.geeksforgeeks.org/python-ways-to-remove-a-key-from-dictionary/">Python | Ways to remove a key from dictionary</a>\n<a href="https://www.geeksforgeeks.org/ways-sort-list-dictionaries-values-python-using-itemgetter/"> Ways to sort list of dictionaries by values in Python – Using itemgetter</a>\n<a href="https://www.geeksforgeeks.org/ways-sort-list-dictionaries-values-python-using-lambda-function/">Ways to sort list of dictionaries by values in Python – Using lambda function</a>\n<a href="https://www.geeksforgeeks.org/python-merging-two-dictionaries/">Python | Merging two Dictionaries</a>\n<a href="https://www.geeksforgeeks.org/program-create-grade-calculator-in-python/">Program to create grade calculator in Python</a>\n<a href="https://www.geeksforgeeks.org/using-ordereddict-python-check-order-characters-string/">Python | Check order of character in string using OrderedDict( )</a>\n<a href="https://www.geeksforgeeks.org/python-dictionary-intersection-find-common-elements-three-sorted-arrays/">Python | Find common elements in three sorted arrays by dictionary intersection</a>\n<a href="https://www.geeksforgeeks.org/dictionary-counter-python-find-winner-election/">Dictionary and counter in Python to find winner of election</a>\n<a href="https://www.geeksforgeeks.org/python-counter-find-duplicate-characters-string/">Find all duplicate characters in string</a>\n<a href="https://www.geeksforgeeks.org/print-anagrams-together-python-using-list-dictionary/">Print(anagrams together )in Python using List and Dictionary</a>\n<a href="https://www.geeksforgeeks.org/python-dictionary-check-binary-representations-two-numbers-anagram/">Check if binary representations of two numbers are anagram</a>\n<a href="https://www.geeksforgeeks.org/python-counter-find-size-largest-subset-anagram-words/">Python Counter to find the size of largest subset of anagram words</a>\n<a href="https://www.geeksforgeeks.org/python-remove-duplicates-words-given-sentence/">Python | Remove all duplicates words from a given sentence</a>\n<a href="https://www.geeksforgeeks.org/python-dictionary-find-mirror-characters-string/">Python Dictionary to find mirror characters in a string</a>\n<a href="https://www.geeksforgeeks.org/counting-the-frequencies-in-a-list-using-dictionary-in-python/"> Counting the frequencies in a list using dictionary in Python</a>\n<a href="https://www.geeksforgeeks.org/python-convert-list-tuples-dictionary/">Python | Convert a list of Tuples into Dictionary</a>\n<a href="https://www.geeksforgeeks.org/python-counter-dictionary-intersection-example-make-string-using-deletion-rearrangement/">Python counter and dictionary intersection example (Make a string using deletion and rearrangement)</a>\n<a href="https://www.geeksforgeeks.org/python-dictionary-set-counter-check-frequencies-can-become/">Python dictionary, set and counter to check if frequencies can become same</a>\n<a href="https://www.geeksforgeeks.org/scraping-and-finding-ordered-words-in-a-dictionary-using-python/">Scraping And Finding Ordered Words In A Dictionary using Python</a>\n<a href="https://www.geeksforgeeks.org/possible-words-using-given-characters-python/">Possible Words using given characters in Python</a>\n<a href="https://www.geeksforgeeks.org/tag/python-dictionary-programs/" rel="noopener"><k>More >></k></a>\n<k>Tuple Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-program-to-create-a-list-of-tuples-from-given-list-having-number-and-its-cube-in-each-tuple/">Create a list of tuples from given list having number and its cube in each tuple</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-sort-a-list-of-tuples-by-second-item/">Sort a list of tuples by second Item</a>\n<a href="https://www.geeksforgeeks.org/tag/python-tuple-programs/" rel="noopener"><k>More >></k></a>\n<k>Searching and Sorting Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-program-for-binary-search/">Binary Search (Recursive and Iterative)</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-linear-search/">Linear Search</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-insertion-sort/">Insertion Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-recursive-insertion-sort/">Recursive Insertion Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-quicksort/">QuickSort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-iterative-quick-sort/">Iterative Quick Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-selection-sort/">Selection Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-bubble-sort/">Bubble Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-merge-sort/">Merge Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-iterative-merge-sort/">Iterative Merge Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-heap-sort/">Heap Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-counting-sort/">Counting Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-shellsort/">ShellSort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-topological-sorting/">Topological Sorting</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-radix-sort/">Radix Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-binary-insertion-sort/">Binary Insertion Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-bitonic-sort/">Bitonic Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-comb-sort/">Comb Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-pigeonhole-sort/">Pigeonhole Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-cocktail-sort/">Cocktail Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-gnome-sort/">Gnome Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-odd-even-sort-brick-sort/">Odd-Even Sort / Brick Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-bogosort-or-permutation-sort/">BogoSort or Permutation Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-cycle-sort/">Cycle Sort</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-stooge-sort/">Stooge Sort</a>\n<k>Pattern Printing Programs:</k>\n<a href="https://www.geeksforgeeks.org/program-print-pattern-g/">Program to print(the pattern ‘G’</a>)\n<a href="https://www.geeksforgeeks.org/python-print-inverted-star-pattern/">Python | Print(an Inverted Star Pattern</a>)\n<a href="https://www.geeksforgeeks.org/python-3-program-print-double-sided-stair-case-pattern/">Python 3 | Program to print(double sided stair-case pattern</a>)\n<a href="https://www.geeksforgeeks.org/print-font-using-python/">Print(with )your own font using Python !!</a>\n<k>Date-Time Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-program-convert-time-12-hour-24-hour-format/">convert time from 12 hour to 24 hour format</a>\n<k>More Python Programs:</k>\n<a href="https://www.geeksforgeeks.org/python-program-for-reverse-a-linked-list/">Reverse a linked list</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-find-largest-prime-factor-of-a-number/">Find largest prime factor of a number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-efficient-program-to-print-all-prime-factors-of-a-given-number/">Efficient program to print(all )prime factors of a given number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-product-of-unique-prime-factors-of-a-number/">Product of unique prime factors of a number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-find-sum-of-odd-factors-of-a-number/">Find sum of odd factors of a number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-coin-change/">Coin Change</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-tower-of-hanoi/">Tower of Hanoi</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-sieve-of-eratosthenes/">Sieve of Eratosthenes</a>\n<a href="https://www.geeksforgeeks.org/python-check-binary-representation-palindrome/">Check if binary representation is palindrome</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-basic-and-extended-euclidean-algorithms/">Basic Euclidean algorithms</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-basic-and-extended-euclidean-algorithms-2/">Extended Euclidean algorithms</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-number-of-elements-with-odd-factors-in-given-range/">Number of elements with odd factors in given range</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-common-divisors-of-two-numbers/">Common Divisors of Two Numbers</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-maximum-height-when-coins-are-arranged-in-a-triangle/">Maximum height when coins are arranged in a triangle</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-gcd-of-more-than-two-or-array-numbers/">GCD of more than two (or array) numbers</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-check-if-count-of-divisors-is-even-or-odd/">Check if count of divisors is even or odd</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-find-minimum-sum-of-factors-of-number/">Find minimum sum of factors of number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-difference-between-sums-of-odd-and-even-digits/">Difference between sums of odd and even digits</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-program-to-print-matrix-in-z-form/">Program to Print(Matrix )in Z form</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-largest-k-digit-number-divisible-by-x/">Largest K digit number divisible by X</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-smallest-k-digit-number-divisible-by-x/">Smallest K digit number divisible by X</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-print-number-series-without-using-any-loop/">Print(Number )series without using any loop</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-number-of-stopping-station-problem/">Number of stopping station problem</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-program-to-calculate-area-of-a-tetrahedron/">Program to calculate area of a Tetrahedron</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-focal-length-of-a-spherical-mirror/">focal length of a spherical mirror</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-find-the-perimeter-of-a-cylinder/">Find the perimeter of a cylinder</a>\n<a href="https://www.geeksforgeeks.org/check-if-a-triangle-of-positive-area-is-possible-with-the-given-angles/">Check if a triangle of positive area is possible with the given angles</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-number-of-jump-required-of-given-length-to-reach-a-point-of-form-d-0-from-origin-in-2d-plane/">Number of jump required of given length to reach a point of form (d, 0) from origin in 2D plane</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-finding-the-vertex-focus-and-directrix-of-a-parabola/">Finding the vertex, focus and directrix of a parabola</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-find-the-most-occurring-character-and-its-count/">find the most occurring character and its count</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-find-sum-of-even-factors-of-a-number/">Find sum of even factors of a number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-check-if-all-digits-of-a-number-divide-it/">Check if all digits of a number divide it</a>\n<a href="https://www.geeksforgeeks.org/python-program-convert-float-decimal-octal-number/">convert float decimal to Octal number</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/">convert floating to binary</a>\n<a href="https://www.geeksforgeeks.org/check-whether-a-number-has-consecutive-0s-in-the-given-base-or-not/">Check whether a number has consecutive 0’s in the given base or not</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-number-of-solutions-to-modular-equations/">Number of solutions to Modular Equations</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-triangular-matchstick-number/">Triangular Matchstick Number</a>\n<a href="https://www.geeksforgeeks.org/python-program-for-legendres-conjecture/">Legendre\’s Conjecture</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-check-if-a-string-contains-all-unique-characters/">check if a string contains all unique characters</a>\n<a href="https://www.geeksforgeeks.org/python-program-to-copy-odd-lines-of-one-file-to-other/">copy odd lines of one file to other</a>\n',
'<h2>some samples</h2>\nPlease note that these examples are written in Python 2, and may need some adjustment to run under Python 3. \n1 line: Output \nprint(\'Hello, world!\')\n<hr />\n \n2 lines: Input, assignment \nname = raw_input(\'What is your name?\n\')\nprint(\'Hi, %s.\' % name)\n<hr />\n \n3 lines: For loop, built-in enumerate function, new style formatting \nfriends = [\'john\', \'pat\', \'gary\', \'michael\']\nfor i, name in enumerate(friends):\n print(&quot;iteration {iteration} is {name}&quot;.format(iteration=i, )name=name)\n<hr />\n \n4 lines: Fibonacci, tuple assignment \nparents, babies = (1, 1)\nwhile babies &lt; 100:\n print(\'This generation has {0} babies\'.format(babies))\n parents, babies = (babies, parents + babies)\n<hr />\n \n5 lines: Functions \ndef greet(name):\n print(\'Hello\', name)\ngreet(\'Jack\')\ngreet(\'Jill\')\ngreet(\'Bob\')\n<hr />\n \n6 lines: Import, regular expressions \nimport re\nfor test_string in [\'555-1212\', \'ILL-EGAL\']:\n if re.match(r\'^\d{3}-\d{4}$\', test_string):\n  print(test_string, \'is a valid US local phone number\')\n else:\n  print(test_string, \'rejected\')\n<hr />\n \n7 lines: Dictionaries, generator expressions \nprices = {\'apple\': 0.40, \'banana\': 0.50}\nmy_purchase = {\n \'apple\': 1,\n \'banana\': 6}\ngrocery_bill = sum(prices[fruit] * my_purchase[fruit]\n       for fruit in my_purchase)\nprint(\'I owe the grocer $%.2f\' % grocery_bill)\n<hr />\n \n8 lines: Command line arguments, exception handling \n# This program adds up integers in the command line\nimport sys\ntry:\n total = sum(int(arg) for arg in sys.argv[1:])\n print(\'sum =\', total)\nexcept ValueError:\n print(\'Please supply integer arguments\')\n<hr />\n \n9 lines: Opening files \n# indent your Python code to put into an email\nimport glob\n# glob supports Unix style pathname extensions\npython_files = glob.glob(\'*.py\')\nfor file_name in sorted(python_files):\n print(\' ------\' + file_name)\n with open(file_name) as f:\n  for line in f:\n   print(\' \' + line.rstrip())\n print\n<hr />\n \n10 lines: Time, conditionals, from..import, for..else \nfrom time import localtime\nactivities = {8: \'Sleeping\',\n     9: \'Commuting\',\n     17: \'Working\',\n     18: \'Commuting\',\n     20: \'Eating\',\n     22: \'Resting\' }\ntime_now = localtime()\nhour = time_now.tm_hour\nfor activity_time in sorted(activities.keys()):\n if hour &lt; activity_time:\n  print(activities[activity_time])\n  break\nelse:\n print(\'Unknown, AFK or sleeping!\')\n<hr />\n \n11 lines: Triple-quoted strings, while loop \nREFRAIN = \'\'\'\n%d bottles of beer on the wall,\n%d bottles of beer,\ntake one down, pass it around,\n%d bottles of beer on the wall!\n\'\'\'\nbottles_of_beer = 99\nwhile bottles_of_beer &gt; 1:\n print(REFRAIN % (bottles_of_beer, bottles_of_beer,)\n  bottles_of_beer - 1)\n bottles_of_beer -= 1\n<hr />\n \n12 lines: Classes \nclass BankAccount(object):\n def __init__(self, initial_balance=0):\n  self.balance = initial_balance\n def deposit(self, amount):\n  self.balance += amount\n def withdraw(self, amount):\n  self.balance -= amount\n def overdrawn(self):\n  return self.balance &lt; 0\nmy_account = BankAccount(15)\nmy_account.withdraw(5)\nprint(my_account.balance)\n<hr />\n \n13 lines: Unit testing with unittest \nimport unittest\ndef median(pool):\n copy = sorted(pool)\n size = len(copy)\n if size % 2 == 1:\n  return copy[(size - 1) / 2]\n else:\n  return (copy[size/2 - 1] + copy[size/2]) / 2\nclass TestMedian(unittest.TestCase):\n def testMedian(self):\n  self.failUnlessEqual(median([2, 9, 9, 7, 9, 2, 4, 5, 8]), 7)\nif __name__ == \'__main__\':\n unittest.main()\n<hr />\n \n14 lines: Doctest-based testing \ndef median(pool):\n \'\'\'Statistical median to demonstrate doctest.\n &gt;&gt;&gt; median([2, 9, 9, 7, 9, 2, 4, 5, 8])\n 7\n \'\'\'\n copy = sorted(pool)\n size = len(copy)\n if size % 2 == 1:\n  return copy[(size - 1) / 2]\n else:\n  return (copy[size/2 - 1] + copy[size/2]) / 2\nif __name__ == \'__main__\':\n import doctest\n doctest.testmod()\n<hr />\n \n15 lines: itertools \nfrom itertools import groupby\nlines = \'\'\'\nThis is the\nfirst paragraph.\nThis is the second.\n\'\'\'.splitlines()\n# Use itertools.groupby and bool to return groups of\n# consecutive lines that either have content or don\'t.\nfor has_chars, frags in groupby(lines, bool):\n if has_chars:\n  print(\' \'.join(frags))\n# PRINTS:\n# This is the first paragraph.\n# This is the second.\n<hr />\n \n16 lines: csv module, tuple unpacking, cmp() built-in \nimport csv\n# write stocks data as comma-separated values\nwriter = csv.writer(open(\'stocks.csv\', \'wb\', buffering=0))\nwriter.writerows([\n (\'GOOG\', \'Google, Inc.\', 505.24, 0.47, 0.09),\n (\'YHOO\', \'Yahoo! Inc.\', 27.38, 0.33, 1.22),\n (\'CNET\', \'CNET Networks, Inc.\', 8.62, -0.13, -1.49)\n])\n# read stocks data, print(status messages)\nstocks = csv.reader(open(\'stocks.csv\', \'rb\'))\nstatus_labels = {-1: \'down\', 0: \'unchanged\', 1: \'up\'}\nfor ticker, name, price, change, pct in stocks:\n status = status_labels[cmp(float(change), 0.0)]\n print(\'%s is %s (%s%%)\' % (name, status, pct))\n<hr />\n \n18 lines: 8-Queens Problem (recursion) \nBOARD_SIZE = 8\ndef under_attack(col, queens):\n left = right = col\n for r, c in reversed(queens):\n  left, right = left - 1, right + 1\n  if c in (left, col, right):\n   return True\n return False\ndef solve(n):\n if n == 0:\n  return [[]]\n smaller_solutions = solve(n - 1)\n return [solution+[(n,i+1)]\n  for i in xrange(BOARD_SIZE)\n   for solution in smaller_solutions\n    if not under_attack(i+1, solution)]\nfor answer in solve(BOARD_SIZE):\n print(answer)\n<hr />\n \n20 lines: Prime numbers sieve w/fancy generators \nimport itertools\ndef iter_primes():\n  # an iterator of all numbers between 2 and +infinity\n  numbers = itertools.count(2)\n  # generate primes forever\n  while True:\n   # get the first number from the iterator (always a prime)\n   prime = numbers.next()\n   yield prime\n   # this code iteratively builds up a chain of\n   # filters...slightly tricky, but ponder it a bit\n   numbers = itertools.ifilter(prime.__rmod__, numbers)\nfor p in iter_primes():\n if p &gt; 1000:\n  break\n print(p)\n<hr />\n \n21 lines: XML/HTML parsing (using Python 2.5 or third-party library) \ndinner_recipe = \'\'\'&lt;html&gt;&lt;body&gt;&lt;table&gt;\n&lt;tr&gt;&lt;th&gt;amt&lt;/th&gt;&lt;th&gt;unit&lt;/th&gt;&lt;th&gt;item&lt;/th&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;slices&lt;/td&gt;&lt;td&gt;baguette&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;2+&lt;/td&gt;&lt;td&gt;tbsp&lt;/td&gt;&lt;td&gt;olive oil&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;cup&lt;/td&gt;&lt;td&gt;tomatoes&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;jar&lt;/td&gt;&lt;td&gt;pesto&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\'\'\'\n# In Python 2.5 or from http://effbot.org/zone/element-index.htm\nimport xml.etree.ElementTree as etree\ntree = etree.fromstring(dinner_recipe)\n# For invalid HTML use http://effbot.org/zone/element-soup.htm\n# import ElementSoup, StringIO\n# tree = ElementSoup.parse(StringIO.StringIO(dinner_recipe))\npantry = set([\'olive oil\', \'pesto\'])\nfor ingredient in tree.getiterator(\'tr\'):\n amt, unit, item = ingredient\n if item.tag == &quot;td&quot; and item.text not in pantry:\n  print(&quot;%s: %s %s&quot; % (item.text, amt.text, unit.text))\n<hr />\n \n28 lines: 8-Queens Problem (define your own exceptions) \nBOARD_SIZE = 8\nclass BailOut(Exception):\n pass\ndef validate(queens):\n left = right = col = queens[-1]\n for r in reversed(queens[:-1]):\n  left, right = left-1, right+1\n  if r in (left, col, right):\n   raise BailOut\ndef add_queen(queens):\n for i in range(BOARD_SIZE):\n  test_queens = queens + [i]\n  try:\n   validate(test_queens)\n   if len(test_queens) == BOARD_SIZE:\n    return test_queens\n   else:\n    return add_queen(test_queens)\n  except BailOut:\n   pass\n raise BailOut\nqueens = add_queen([])\nprint(queens)\nprint(&quot;\n&quot;.join(&quot;. &quot;*q + &quot;Q &quot; + &quot;. &quot;*()BOARD_SIZE-q-1) for q in queens)\n<hr />\n \n33 lines: &quot;Guess the Number&quot; Game (edited) from <a class="http" href="http://inventwithpython.com">http://inventwithpython.com</a> \nimport random\nguesses_made = 0\nname = raw_input(\'Hello! What is your name?\n\')\nnumber = random.randint(1, 20)\nprint(\'Well, {0}, I am thinking of a number between 1 and 20.\'.format(name))\nwhile guesses_made &lt; 6:\n guess = int(raw_input(\'Take a guess: \'))\n guesses_made += 1\n if guess &lt; number:\n  print(\'Your guess is too low.\')\n if guess &gt; number:\n  print(\'Your guess is too high.\')\n if guess == number:\n  break\nif guess == number:\n print(\'Good job, {0}! You guessed my number in {1} guesses!\'.format(name, )guesses_made)\nelse:\n print(\'Nope. The number I was thinking of was {0}\'.format(number))\n',
'<h2>Functions in Python Math Module</h2>\n<table border="1">\n	<caption>List of Functions in Python Math Module</caption>\n	<tbody>\n		<tr>\n			<th scope="col">Function</th>\n			<th scope="col">Description</th>\n		</tr>\n		<tr>\n			<td>ceil(x)</td>\n			<td>Returns the smallest integer greater than or equal to x.</td>\n		</tr>\n		<tr>\n			<td>copysign(x, y)</td>\n			<td>Returns x with the sign of y</td>\n		</tr>\n		<tr>\n			<td>fabs(x)</td>\n			<td>Returns the absolute value of x</td>\n		</tr>\n		<tr>\n			<td>factorial(x)</td>\n			<td>Returns the factorial of x</td>\n		</tr>\n		<tr>\n			<td>floor(x)</td>\n			<td>Returns the largest integer less than or equal to x</td>\n		</tr>\n		<tr>\n			<td>fmod(x, y)</td>\n			<td>Returns the remainder when x is divided by y</td>\n		</tr>\n		<tr>\n			<td>frexp(x)</td>\n			<td>Returns the mantissa and exponent of x as the pair (m, e)</td>\n		</tr>\n		<tr>\n			<td>fsum(iterable)</td>\n			<td>Returns an accurate floating point sum of values in the iterable</td>\n		</tr>\n		<tr>\n			<td>isfinite(x)</td>\n			<td>Returns True if x is neither an infinity nor a NaN (Not a Number)</td>\n		</tr>\n		<tr>\n			<td>isinf(x)</td>\n			<td>Returns True if x is a positive or negative infinity</td>\n		</tr>\n		<tr>\n			<td>isnan(x)</td>\n			<td>Returns True if x is a NaN</td>\n		</tr>\n		<tr>\n			<td>ldexp(x, i)</td>\n			<td>Returns x * (2**i)</td>\n		</tr>\n		<tr>\n			<td>modf(x)</td>\n			<td>Returns the fractional and integer parts of x</td>\n		</tr>\n		<tr>\n			<td>trunc(x)</td>\n			<td>Returns the truncated integer value of x</td>\n		</tr>\n		<tr>\n			<td>exp(x)</td>\n			<td>Returns e**x</td>\n		</tr>\n		<tr>\n			<td>expm1(x)</td>\n			<td>Returns e**x - 1</td>\n		</tr>\n		<tr>\n			<td>log(x[, base])</td>\n			<td>Returns the logarithm of x to the base (defaults to e)</td>\n		</tr>\n		<tr>\n			<td>log1p(x)</td>\n			<td>Returns the natural logarithm of 1+x</td>\n		</tr>\n		<tr>\n			<td>log2(x)</td>\n			<td>Returns the base-2 logarithm of x</td>\n		</tr>\n		<tr>\n			<td>log10(x)</td>\n			<td>Returns the base-10 logarithm of x</td>\n		</tr>\n		<tr>\n			<td>pow(x, y)</td>\n			<td>Returns x raised to the power y</td>\n		</tr>\n		<tr>\n			<td>sqrt(x)</td>\n			<td>Returns the square root of x</td>\n		</tr>\n		<tr>\n			<td>acos(x)</td>\n			<td>Returns the arc cosine of x</td>\n		</tr>\n		<tr>\n			<td>asin(x)</td>\n			<td>Returns the arc sine of x</td>\n		</tr>\n		<tr>\n			<td>atan(x)</td>\n			<td>Returns the arc tangent of x</td>\n		</tr>\n		<tr>\n			<td>atan2(y, x)</td>\n			<td>Returns atan(y / x)</td>\n		</tr>\n		<tr>\n			<td>cos(x)</td>\n			<td>Returns the cosine of x</td>\n		</tr>\n		<tr>\n			<td>hypot(x, y)</td>\n			<td>Returns the Euclidean norm, sqrt(x*x + y*y)</td>\n		</tr>\n		<tr>\n			<td>sin(x)</td>\n			<td>Returns the sine of x</td>\n		</tr>\n		<tr>\n			<td>tan(x)</td>\n			<td>Returns the tangent of x</td>\n		</tr>\n		<tr>\n			<td>degrees(x)</td>\n			<td>Converts angle x from radians to degrees</td>\n		</tr>\n		<tr>\n			<td>radians(x)</td>\n			<td>Converts angle x from degrees to radians</td>\n		</tr>\n		<tr>\n			<td>acosh(x)</td>\n			<td>Returns the inverse hyperbolic cosine of x</td>\n		</tr>\n		<tr>\n			<td>asinh(x)</td>\n			<td>Returns the inverse hyperbolic sine of x</td>\n		</tr>\n		<tr>\n			<td>atanh(x)</td>\n			<td>Returns the inverse hyperbolic tangent of x</td>\n		</tr>\n		<tr>\n			<td>cosh(x)</td>\n			<td>Returns the hyperbolic cosine of x</td>\n		</tr>\n		<tr>\n			<td>sinh(x)</td>\n			<td>Returns the hyperbolic cosine of x</td>\n		</tr>\n		<tr>\n			<td>tanh(x)</td>\n			<td>Returns the hyperbolic tangent of x</td>\n		</tr>\n		<tr>\n			<td>erf(x)</td>\n			<td>Returns the error function at x</td>\n		</tr>\n		<tr>\n			<td>erfc(x)</td>\n			<td>Returns the complementary error function at x</td>\n		</tr>\n		<tr>\n			<td>gamma(x)</td>\n			<td>Returns the Gamma function at x</td>\n		</tr>\n		<tr>\n			<td>lgamma(x)</td>\n			<td>Returns the natural logarithm of the absolute value of the Gamma function at x</td>\n		</tr>\n		<tr>\n			<td>pi</td>\n			<td>Mathematical constant, the ratio of circumference of a circle to it&#39;s diameter (3.14159...)</td>\n		</tr>\n		<tr>\n			<td>e</td>\n			<td>mathematical constant e (2.71828...)</td>\n		</tr>\n	</tbody>\n</table>\n',
'<h2>def factorial(n):</h2>\n num = 1\n while n >= 1:\n  num = num * n\n  n = n - 1\n return num\n',
'<h2>from math import factorial</h2>\nprint(factorial(1000))\n',
'<h2>def factorial(x):</h2>\n result = 1\n for i in xrange(2, x + 1):\n  result *= i\n return result\nprint(factorial(1000))\n',
'<h2>def factorial(n):</h2>\n if n < 2:\n  return 1\n return n * factorial(n - 1)\n',
'<h2>def factorial(n):</h2>\n base = 1\n for i in range(n,0,-1):\n  base = base * i\n print(base)\n',
'<h2>divmod(x, y) </h2>\nreturns a tuple (x / y, x % y)\n',
'<h2>The method list()</h2>\ntakes sequence types and converts them to lists. \nThis is used to convert a given tuple into list.\nNote − Tuple are very similar to lists with only difference that element values of a tuple can not be changed and \ntuple elements are put between parentheses instead of square bracket.\n',
'<h2>itertools.product()</h2>\nThis tool computes the cartesian product of input iterables. \nIt is equivalent to nested for-loops. \nFor example, product(A, B) returns the same as ((x,y) for x in A for y in B).\nSample Code\nfrom itertools import product\nprint(list(product([1,2,3],repeat = 2)))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\nprint(list(product([1,2,3],[3,4])))\n[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]\nA = [[1,2,3],[3,4,5]]\nprint(list(product(*A)))\n[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]\nB = [[1,2,3],[3,4,5],[7,8]]\nprint(list(product(*B)))\n[(1, 3, 7), (1, 3, 8), (1, 4, 7), (1, 4, 8), (1, 5, 7), (1, 5, 8), (2, 3, 7), (2, 3, 8), (2, 4, 7), (2, 4, 8), (2, 5, 7), (2, 5, 8), (3, 3, 7), (3, 3, 8), (3, 4, 7), (3, 4, 8), (3, 5, 7), (3, 5, 8)]\n',
'<h2>How to use Loops in Python</h2>\n<h4>For Loop</h4>computer_brands = ["Apple", "Asus", "Dell", "Samsung"]\nfor brands in computer_brands:\n  print(brands)\nnumbers = [1,10,20,30,40,50]\nsum = 0\nfor number in numbers:\n  sum = sum + number\n  print(sum)\nfor i in range(1,10):\n  print(i)\n<h4>Break</h4>\nTo break out from a loop, you can use the keyword "break". \nfor i in range(1,10):\n  if i == 3:\n break\n  print(i)\n# will print 1 nd 2 only\n<h4>Continue</h4>\nThe continue statement is used to tell Python to skip the rest of the statements \nin the current loop block and to continue to the next iteration of the loop.\nfor i in range(1,10):\n  if i == 3:\n continue\n  print(i)\n# will not print 3 only\n<h4>While Loop</h4>\ncomputer_brands = ["Apple", "Asus", "Dell", "Samsung"]\ni = 0\nwhile i < len(computer_brands):\n  print(computer_brands(i))\n  i = i + 1\nwhile True:\n  answer = raw_input("Start typing...")\n  if answer == "quit":\n break\n  print("Your answer was", answer)\ncounter = 0\nwhile counter <= 100:\n  print(counter)\n  counter + 2\n<h4>Nested Loops</h4>for x in range(1, 11):\n  for y in range(1, 11):\n print(\'%d * %d = %d\' % (x, y, x*y))\n',
'<h2>random</h2>\nimport random\na = [1,2,3,4,5,6]\nprint(a)\nrandom.shuffle(a)\nprint(a)\nitems = [1, 2, 3, 4, 5, 6, 7]\nrandom.shuffle(items)\nprint(items)\n',
'<h2>Tkinter</h2>\n<a href="https://libraries.io/search?keywords=tkinter&languages=Python">Popular Python tkinter Projects</a> <a href="Tkinter references.html" class="red bordyellow2 borRad10 whitebs">Tkinter references</a>\nfrom Tkinter import *\nroot = Tk()\nw = Label(root, text="Hello Tkinter!")\nw.pack()\nroot.mainloop()\ninput("\n\nhit any key\n\n")\n',
'<h2>Hotel Management Systems</h2>\n<a href="://www.youtube.com/watch?v=8ftcZO7iuRU" class="whitebut ">How to Create Hotel Management Systems in Python - Full Tutorial</a>\n<a href="://www.youtube.com/watch?v=0rzNAGe-gUs&t=31s" class="whitebut ">Python With Tkinter & Sqlite 3</a>\n',
'<h2>Tensorflow 安装</h2>\nhttps://morvanzhou.github.io/tutorials/machine-learning/tensorflow/1-2-install/\nTensorflow 安装\nhttps://medium.com/@lmoroney_40129/installing-tensorflow-with-gpu-on-windows-10-3309fec55a00\nInstalling TensorFlow with GPU on Windows 10\npip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0-py3-none-any.whl\nThe script wheel.exe is installed in \'d:\python36-32\Scripts\' which is not on PATH.\nConsider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\nimport platform\nprint(platform.python_version())\nhelp(\'modules\')\nimport tensorflow as tf\nhello = tf.constant(\'Hello, TensorFlow!\')\nsess = tf.Session()\nprint(sess.run(hello))\n',
'<h2>Python Simple HTTP server</h2>\nimport SimpleHTTPServer\nimport SocketServer\nPORT = 8000\nHandler = SimpleHTTPServer.SimpleHTTPRequestHandler\nhttpd = SocketServer.TCPServer(("", PORT), Handler)\nprint("serving at port", PORT)\nhttpd.serve_forever()\n',
'<h2>about pip</h2>\nC:\Users\User\Desktop>python -m pip install -U pylint --user\nC:\Users\User\AppData\Roaming\Python\Python36\Scripts\' which is not on PATH.\n',
'<h2>run Python from Sublime Text</h2>\n<a href="sublime Notes.html#chapter-32"><span class="redb">use SublimeREPL</span></a>\nTools -> Build System -> (choose) Python then:\n<k>To Run:</k>\n   Tools -&gt; Build\n   -or-\n   Ctrl + B\n<em>This would start your file in the console which should be at the bottom of the editor.</em>\n<k>To Stop:</k>\n    Ctrl + Break or Tools -&gt; Cancel Build\nYou can find out where your Break key is here:  <a href="http://en.wikipedia.org/wiki/Break_key" rel="noreferrer">http://en.wikipedia.org/wiki/Break_key</a>. \nNote: CTRL + C will <k>NOT</k> work.\n<k>What to do when Ctrl + Break does not work:</k>\nGo to: \n<blockquote>  Preferences -> Key Bindings - User</blockquote>\nand paste the line below:  \n{"keys": ["ctrl+shift+c"], "command": "exec", "args": {"kill": true} } \nNow, you can use ctrl+shift+c instead of CTRL+BREAK\nBut when <kbd>Ctrl</kbd><kbd>B</kbd> <k>does not work</k>, Sublime Text probably can\'t find the Python Interpreter. \nWhen trying to run your program, see the log and find the reference to Python in path.\n[cmd:  [u\'python\', u\'-u\', u\'C:\\scripts\\test.py\']]\n[path: ...;C:\Python27 32bit;...]\nThe point is that it tries to run python via command line, the cmd looks like:\npython -u C:\scripts\test.py\nIf you can\'t run python from cmd, Sublime Text can\'t too.\n(Try it yourself in cmd, type python in it and run it, python commandline should appear)\n<h4>SOLUTION</h4>You can either change the Sublime Text build formula or the System %PATH%.  \nTo set your %PATH%:\n*<em>You will need to restart your editor to load new %PATH%</em>\nRun Command Line* and enter this command: <em>*needs to be run as administrator</em>\nSETX /M PATH "%PATH%;&lt;python_folder&gt;"\nfor example: SETX /M PATH "%PATH%;C:\Python27;C:\Python27\Scripts"<k>OR</k> manually: (preferable)\nAdd ;C:\Python27;C:\Python27\Scripts at the end of the string.\n',
'<h2>\'calendar\' has no attribute \'month\'</h2>\nAttributeError: module \'calendar\' has no attribute \'month\'\nimport calendar\nyy = 2018\nmm = 11\nprint(calendar.month(yy, mm))\n<a href="https://stackoverflow.com/questions/35769871/python-date-and-time-attributeerror-module-object-has-no-attribute-month">AttributeError: module \'calendar\' has no attribute \'month\'</a>\nThe problem is that you used the name calendar.py for your file. \nUse any other name, and you will be able to import the python module calendar.\n',
'<h2>Reading and Writing Files</h2>\nfile_object  = open(“filename”, “mode”)\nthisFile = open("thedatafile.txt","r")\nPrint(thisFile)\nfile = open(“testfile.txt”,”w”) \nfile.write(“Hello World”)  \nfile.close() \na number of ways to read a text file in Python, not just one. \nfile = open(“testfile.text”, “r”) \nprint(file.read() )\nprint(file.read(5) #read the first five characters)\nreadline() read a file line by line\nprint(file.readline(): )\nprint(file.readline(3): # the third line in the file)\nfile.readlines() return every line\nprint(file.readlines() )\nfor line in file:  # Looping over a file object\nprint(line,)\nadd an EOL character to start a new line\nfile.write(“This is a test”) \nfile.write(“To add more lines.”)\nfile.close()\nfh.close() to end things, close the file completely\nOpening a text file:\nfh = open(“hello.txt”, “r”) \nReading a text file:  \nFh = open(“hello.txt”, “r”) \nprint(fh.read() )\nTo read a text file one line at a time: \nfh = open(“hello.text”, “r”) \nprint(fh.readline() )\nTo read a list of lines in a text file: \nfh = open(“hello.txt”, “r”) \nprint(fh.readlines() )\nTo write new content or text to a file: \nfh = open(“hello.txt”, “w”) \n \nfh.write(“Put the text you want to add here”) \nfh.write(“and more lines if need be.”) \n \nfh.close() \nwrite multiple lines to a file at once: \nlines_of_text = [“One line of text here”, “and another line here”, “and yet another here”, “and so on and so forth”] \nfh.writelines(lines_of_text) \nfh.close() \n \nTo append a file: \nfh = open(“hello.txt”, “a”) \nfh.write(“We Meet Again World”) \nfh.close \n \nWith Statement\nwith open(“testfile.txt”) as file:  \ndata = file.read() \ndo something with data \n \nwith open(“testfile.txt”) as f: \nfor line in f: \nprint(line, )\nthe above example didn’t use the “file.close()” method because automatically execution\nwith open(“hello.txt”, “w”) as f: \nf.write(“Hello World”) \n \nTo read a file line by line, output into a list:\nwith open(“hello.txt”) as f: \ndata = f.readlines() \nSplitting Lines in a Text File\nwith open(“hello.text”, “r”) as f:\ndata = f.readlines()\n \nfor line in data:\nwords = line.split()\nprint(words)\n# use a colon instead of a space to split\nline.split(“:”)\n======================\nPython\'s list slice syntax can be used without indices for a few fun and useful things:\n# You can clear all elements from a list:\n>>> lst = [1, 2, 3, 4, 5]\n>>> del lst[:]\n>>> lst\n[]\n# You can replace all elements of a list\n# without creating a new list object:\n>>> a = lst\n>>> lst[:] = [7, 8, 9]\n>>> lst\n[7, 8, 9]\n>>> a\n[7, 8, 9]\n>>> a is lst\nTrue\n# You can also create a (shallow) copy of a list:\n>>> b = lst[:]\n>>> b\n[7, 8, 9]\n>>> b is lst\nFalse\n======================\nCPython easter egg\n# Here\'s a fun little CPython easter egg.\n# Just run the following in a Python 2.7+ \n# interpreter session:\n>>> import antigravity\n',
'<h2>unicodeescape codec can\'t decode bytes…</h2>\nUnicode Error ”unicodeescape" codec can\'t decode bytes…\nThe problem is with the string\n"C:\Users\Eric\Desktop\beeline.txt"\n\U starts an eight-character Unicode escape, such as \'\U00014321`.\n',
'<h2>findfiles</h2>\nimport fnmatch  # fnmatch — Unix filename pattern matching\nimport os\nimages = [\'*.\', \'*.py\']\nmatches = []\nfor root, dirnames, filenames in os.walk("D:/Users/Lawht/Desktop"):\n for extensions in images:\n  for filename in fnmatch.filter(filenames, extensions):\n   matches.append(os.path.join(root, filename))\n   print(filename)\nfor root, dirnames, filenames in os.walk("C:/Users/User/Desktop"):\n   print(root)\n#   print(dirnames)\n#   print(filenames)\nfor root in os.walk("C:/Users/User/Desktop"):\n  print(root)\n',
'<h2>walk()</h2>\nwalk() generates the file names in a directory tree\nimport os\nfor root, dirs, files in os.walk("."):\n   for name in files:\n   print(os.path.join(root, name))\n   for name in dirs:\n   print(os.path.join(root, name))\n',
'<h2>add two matrices</h2>\n# Program to add two matrices using nested loop\nX = [[12,7,3],[4,5,6],[7,8,9]]\nY = [[5,8,1],[6,7,3],[4,5,9]]\nresult = [[0,0,0],[0,0,0],[0,0,0]]\n# iterate through rows\nfor i in range(len(X)):\n # iterate through columns\n for j in range(len(X[0])):\n  result[i][j] = X[i][j] + Y[i][j]\nfor r in result:\n print(r)\nUse Matrix library\nuse the numpy module, which has support for this.\nimport numpy as np\na = np.matrix([[1,2,3], [4,5,6], [7,8,9]])\nb = np.matrix([[9,8,7], [6,5,4], [3,2,1]])\nprint(a+b)\n',
'<h2>find the most common elements in an iterable:</h2>\n>>> import collections\n>>> c = collections.Counter(\'helloworld\')\n>>> c\nCounter({\'l\': 3, \'o\': 2, \'e\': 1, \'d\': 1, \'h\': 1, \'r\': 1, \'w\': 1})\n>>> c.most_common(3)\n[(\'l\', 3), (\'o\', 2), (\'e\', 1)]\n',
'<h2>itertools.permutations() generates permutations</h2>\n# for an iterable. Time to brute-force those passwords ;-)\n>>> import itertools\n>>> for p in itertools.permutations(\'ABCD\'):\n...  print(p)\n(\'A\', \'B\', \'C\', \'D\')\n(\'A\', \'B\', \'D\', \'C\')\n(\'A\', \'C\', \'B\', \'D\')\n(\'A\', \'C\', \'D\', \'B\')\n(\'A\', \'D\', \'B\', \'C\')\n(\'A\', \'D\', \'C\', \'B\')\n(\'B\', \'A\', \'C\', \'D\')\n(\'B\', \'A\', \'D\', \'C\')\n(\'B\', \'C\', \'A\', \'D\')\n(\'B\', \'C\', \'D\', \'A\')\n(\'B\', \'D\', \'A\', \'C\')\n(\'B\', \'D\', \'C\', \'A\')\n(\'C\', \'A\', \'B\', \'D\')\n(\'C\', \'A\', \'D\', \'B\')\n(\'C\', \'B\', \'A\', \'D\')\n(\'C\', \'B\', \'D\', \'A\')\n(\'C\', \'D\', \'A\', \'B\')\n(\'C\', \'D\', \'B\', \'A\')\n(\'D\', \'A\', \'B\', \'C\')\n(\'D\', \'A\', \'C\', \'B\')\n(\'D\', \'B\', \'A\', \'C\')\n(\'D\', \'B\', \'C\', \'A\')\n(\'D\', \'C\', \'A\', \'B\')\n(\'D\', \'C\', \'B\', \'A\')\n',
'<h2>When To Use __repr__ vs __str__?</h2>\n# Emulate what the std lib does:\n>>> import datetime\n>>> today = datetime.date.today()\n# Result of __str__ should be readable:\n>>> str(today)\n\'2017-02-02\'\n# Result of __repr__ should be unambiguous:\n>>> repr(today)\n\'datetime.date(2017, 2, 2)\'\n# Python interpreter sessions use \n# __repr__ to inspect objects:\n>>> today\ndatetime.date(2017, 2, 2)\n',
'<h2>use Python\'s built-in "dis"</h2>\n# module to disassemble functions and\n# inspect their CPython VM bytecode:\n>>> def greet(name):\n...  return \'Hello, \' + name + \'!\'\n>>> greet(\'Dan\')\n\'Hello, Dan!\'\n>>> import dis\n>>> dis.dis(greet)\n2   0 LOAD_CONST  1 (\'Hello, \')\n 2 LOAD_FAST   0 (name)\n 4 BINARY_ADD\n 6 LOAD_CONST  2 (\'!\')\n 8 BINARY_ADD\n   10 RETURN_VALUE\n# @classmethod vs @staticmethod vs "plain" methods\n# What\'s the difference?\nclass MyClass:\n def method(self):\n  """\n  Instance methods need a class instance and\n  can access the instance through `self`.\n  """\n  return \'instance method called\', self\n @classmethod\n def classmethod(cls):\n  """\n  Class methods don\'t need a class instance.\n  They can\'t access the instance (self) but\n  they have access to the class itself via `cls`.\n  """\n  return \'class method called\', cls\n @staticmethod\n def staticmethod():\n  """\n  Static methods don\'t have access to `cls` or `self`.\n  They work like regular functions but belong to\n  the class\'s namespace.\n  """\n  return \'static method called\'\n# All methods types can be\n# called on a class instance:\n>>> obj = MyClass()\n>>> obj.method()\n(\'instance method called\')\n>>> obj.classmethod()\n(\'class method called\')\n>>> obj.staticmethod()\n\'static method called\'\n# Calling instance methods fails\n# if we only have the class object:\n>>> MyClass.classmethod()\n(\'class method called\')\n>>> MyClass.staticmethod()\n\'static method called\'\n>>> MyClass.method()\nTypeError: \n "unbound method method() must be called with MyClass "\n "instance as first argument (got nothing instead)"\n# In Python 3.4+ you can use contextlib.suppress() to selectively ignore specific exceptions:\nimport contextlib\nwith contextlib.suppress(FileNotFoundError):\n os.remove(\'somefile.tmp\')\n# This is equivalent to:\ntry:\n os.remove(\'somefile.tmp\')\nexcept FileNotFoundError:\n pass\n# Pythonic ways of checking if all items in a list are equal:\n>>> lst = [\'a\', \'a\', \'a\']\n>>> len(set(lst)) == 1\nTrue\n>>> all(x == lst[0] for x in lst)\nTrue\n>>> lst.count(lst[0]) == len(lst)\nTrue\n# Python\'s `for` and `while` loops\n# support an `else` clause that executes\n# only if the loops terminates without\n# hitting a `break` statement.\ndef contains(haystack, needle):\n """\n Throw a ValueError if `needle` not\n in `haystack`.\n """\n for item in haystack:\n  if item == needle:\n   break\n else:\n  # The `else` here is a\n  # "completion clause" that runs\n  # only if the loop ran to completion\n  # without hitting a `break` statement.\n  raise ValueError(\'Needle not found\')\n>>> contains([23, \'needle\', 0xbadc0ffee], \'needle\')\nNone\n>>> contains([23, 42, 0xbadc0ffee], \'needle\')\nValueError: "Needle not found"\n# better way for  `for` and `while` loops support an `else` clause that executes only if the loops terminates without hitting a `break` statement., something like this:\ndef better_contains(haystack, needle):\n for item in haystack:\n  if item == needle:\n   return\n raise ValueError(\'Needle not found\')\n# Note: Typically you\'d write something like this to do a membership test, which is much more Pythonic:\nif needle not in haystack:\n raise ValueError(\'Needle not found\')\n# Virtual Environments ("virtualenvs") keep your project dependencies separated.\n# Before creating & activating a virtualenv: `python` and `pip` map to the system version of the Python interpreter (e.g. Python 2.7)\n$ which python\n/usr/local/bin/python\n# Let\'s create a fresh virtualenv using another version of Python (Python 3): $ python3 -m venv ./venv\n# A virtualenv is just a "Python environment in a folder":\n$ ls ./venv\nbin   include lib   pyvenv.cfg\n# Activating a virtualenv configures the current shell session to use the python (and pip) commands from the virtualenv folder instead of the global environment:\n$ source ./venv/bin/activate\n# Note how activating a virtualenv modifies your shell prompt with a little note showing the name of the virtualenv folder:\n(venv) $ echo "wee!"\n# With an active virtualenv, the `python` command maps to the interpreter binary *inside the active virtualenv*:\n(venv) $ which python\n/Users/dan/my-project/venv/bin/python3\n# Installing new libraries and frameworks with `pip` now installs them *into the virtualenv sandbox*, leaving your global environment (and any other virtualenvs) completely unmodified:\n(venv) $ pip install requests\n# To get back to the global Python environment, run the following command:\n(venv) $ deactivate\n# (See how the prompt changed back to "normal" again?)\n$ echo "yay!"\n# Deactivating the virtualenv flipped the `python` and `pip` commands back to the global environment:\n$ which python\n/usr/local/bin/python\n# Python 3.3+ has a std lib module for displaying tracebacks even when Python "dies", e.g with a segfault:\nimport faulthandler\nfaulthandler.enable()\n# Can also be enabled with "python -X faulthandler" from the command line.\n# Learn more here: https://docs.python.org/3/library/faulthandler.html\n',
'<h2>interacting with databases</h2>\n<a href="https://towardsdatascience.com/sqlalchemy-python-tutorial-79a577141a91">SQLAlchemy Python Tutorial interacting with databases</a>\n# pip install PyMysql\nPython 資料庫圖解流程\n<img src="https://www.itread01.com/uploads/images/20180928/1538071530-9400.jpg">\nConnection、Cursor比喻\n<img src="https://www.itread01.com/uploads/images/20180928/1538071533-8697.jpg">\n<img src="https://www.itread01.com/uploads/images/20180928/1538071548-6858.jpg">\n<img src="https://www.itread01.com/uploads/images/20180928/1538071550-6362.jpg">\nimport sqlite3\nconn = sqlite3.connect("EX.db")\ncur = conn.cursor()\ndef table():\n cur.execute("CREATE TABLE exampl(rollno, REAL, Name TEXT, age, REAL)")\ndef value():\n cur.execute("INSERT INTO exampl VALUES(1, "Albert", 23)")\n conn.commit()\n# conn.close()\n# cur.close()\ndef show():\n cur.execute("SELECT * FROM exampl")\n data = cur.fetchall()\n print(data) # print(cur.fetchall())\ntable()\nvalue()\nshow()\n',
'<h2>Pygame Tutorial</h2>\n<a href="https://www.youtube.com/watch?v=zfvxp7PgQ6c">Python and Pygame Tutorial - Build Tetris! Full GameDev Course</a>\n<a href="pygame.html" class="red bordwhite2 borRad10 gold2bs">pygame Tutorial</a>\n<a href="thepythongamebook.html" class="white bordblue2 borRad10 red2bs">thepythongamebook</a>\n<a href="Complete Pygame Project.html" class="white">Complete Pygame Project</a>\n',
'<h2>PyFormat</h2>\n<a href="PyFormat.html">PyFormat</a>\n',
'<h2>PyInstaller</h2>\nMaking a Stand Alone Executable from a Python Script using PyInstaller\nThere are plenty of tools available for converting python script into executable. For example, checkout:\n<a href="http://www.pyinstaller.org/">PyInstaller</a>\n<a href="https://pypi.python.org/pypi/py2exe/0.9.2.0">py2exe</a>\n<span class="lime">first install pyinstaller:\npip install pyinstaller\nthen run:\npyinstaller -F testnumpy.py\n</span>\n<a href="https://www.c-sharpcorner.com/blogs/how-to-convert-python-script-to-exe-file">Convert Python Script Into Executable .exe File</a>\n<a href="https://pyinstaller.readthedocs.io/en/stable/usage.html#options">Using PyInstaller General Options</a>\n<a href="https://www.youtube.com/watch?v=lOIJIk_maO4" class="orange">youtube Convert PY to EXE</a>\n<a href="https://www.youtube.com/watch?v=UZX5kH72Yx4">Convert any Python File to .EXE</a>\n<a href="http://www.py2exe.org/index.cgi/Tutorial">py2exe official tutorial</a>\n',
'<h2>kivy Create a package for Android</h2>\n<a href="https://kivy.org/doc/stable/guide/packaging-android.html">kivy Create a package for Android</a>\n',
'<h2>Beginning Game Programming with Python</h2>\n<a href="Beginning Game Programming with Python.html">Beginning Game Programming with Python</a>\n<a href="https://inventwithpython.com/makinggames.pdf">Making Games with Python & Pygame</a>\n',
'<h2>Pygame</h2>\n<a href="http://programarcadegames.com/index.php?lang=en">Games With Python And Pygame</a>\n<a href="https://pygame.hackersir.org/Lessons/01/Pygame_install.html">Pygame 安裝</a>\n',
'<h2>python call batch file</h2>\nimport os\nos.system("killtask.bat")\nimport os\nos.chdir("X:\Enter location of .bat file")\nos.startfile("ask.bat")\n',
'<h2>python multiple choice</h2>\n<a href="https://www.sanfoundry.com/1000-python-questions-answers/">1000 python questions answers</a>\n<a href="https://www.geeksforgeeks.org/python-multiple-choice-questions/">python multiple choice questions</a>\n<a href="https://codereview.stackexchange.com/questions/153495/simple-multiple-choice-quiz">python simple multiple choice quiz</a>\n<a href="https://qiita.com/visualskyrim/items/1922429a07ca5f974467">Python read lines of file into list</a>\n',
'<h2>Python Development Environment</h2>\n<a href="https://www.youtube.com/watch?v=xFciV6Ew5r4">Setting up a Python Development Environment in Sublime Text</a>\n<a href="https://www.youtube.com/watch?v=-nh9rCzPJ20&t=2301s">Setting up a Python Development Environment Visual Studio Code</a>\nto install vs code, search for visual studio code but not visual studio, vs code is free\nactivity bar on the left:\nactivity bar can be called out from command pallete Ctrl+shift+P\nCtrl+shift+E: Explorer\nCtrl+shift+F: search and replace\nCtrl+shift+G: github Source Control\nCtrl+shift+D: Debug\nCtrl+shift+X: Extensions, \n	the recommendations will have reason, \n	search for sublime text keymap,\n	popular extensions can be sorted according to rating, name, installs\nZen Mode Ctrl+K Z. Double Esc exits Zen Mode\npython scripts:\n	import sys\n	print(sys.version)\n	print(sys.executable)\nright click on screen to select run python file in terminal\non bottom status bar click on interpreter may change to use different versions interpreter\ntype cls in terminal may clear screen\nchanging interpreter will create a .vscode folder storing runtime environment\nCtrl+shift+P: vscode command pallete\n	type color theme will select color themes\n	type file icon to change file icons\non bottom status bar far left a config icon called manage can select command pallete\nselect default terminal by pressing F1or ctrl+Shift +P\ntype Shell and select Default Shell\npressing F1or ctrl+Shift +P and type default setting to show defaults\nctrl + ` will open terminal, type where python will show the path\nor type python to enter python, type import sys, sys.executable will show path\nto exit python type exit()\nimport sys\nimport requests\nprint(sys.version)\nprint(sys.executable)\nprint("hello")\nr = requests.get("https://google.com")\nprint(r.status_code)\n',
'<h2>Python beep</h2>\nimport winsound\nfrequency = 1100  # Set Frequency To 2500 Hertz\nduration = 1000  # Set Duration To 1000 ms == 1 second\nwinsound.Beep(frequency, duration)\n',
'<h2>Python 編碼 Regex</h2>\n<a href="http://xahlee.info/python/python_regex_flags.html">Python Regex Flags</a>\n<a href="https://stackoverflow.com/questions/10546442/python-regular-expression-with-utf8-issue">python RE with utf8</a>\n<a href="https://www.w3schools.com/python/python_regex.asp">Python RegEx</a>\n<a href="https://www.programcreek.com/python/example/342/re.UNICODE">Python re.UNICODE() Examples</a>\n<a href="https://docs.python.org/3/howto/unicode.html">Unicode HOWTO</a>\n<a href="https://openhome.cc/Gossip/Encoding/Python.html">Python 的編碼</a>\n<a href="https://zhuanlan.zhihu.com/p/33459001">谈谈R中的乱码（二）</a>\ntext = \'測試\'\nprint(len(text))\n# 為了支援 Unicode，Python 2.x 提供了 u 前置字來產生 unicode 物件。\ntext = u\'測試\'\nprint(type(text))\nprint(len(text))\ntext = u\'測試\'\nb_str = text.encode(\'utf-8\')\ntype(b_str)\nb_str.decode(\'utf-8\')\n<a href="https://openhome.cc/Gossip/CodeData/PythonTutorial/UnicodeBasicIOPy3.html">Python 3 Unicode 支援、基本 I/O</a>\n',
'<h2>Python Projects</h2>\n<a href="Python Projects.html">Python Projects</a>\n',
'<h2>image processing library</h2>\n<a href="https://www.quora.com/Which-is-the-best-image-processing-library-or-package-for-Python-and-what-is-the-right-way-to-use-it">best image processing library for Python</a>\n',
'<h2>The pass statement</h2>\nThe pass statement is a null operation; \nnothing happens when it executes. \nThe pass is also useful in places where your code will eventually go, \nbut has not been written yet (e.g., in stubs for example) −\nExample\nfor letter in \'Python\': \n   if letter == \'h\':\n   pass\n   print(\'This is pass block\')\n   print(\'Current Letter :\', letter)\nprint("Good bye!")\nresult −\nCurrent Letter : P\nCurrent Letter : y\nCurrent Letter : t\nThis is pass block\nCurrent Letter : h\nCurrent Letter : o\nCurrent Letter : n\nGood bye!\n',
'<h2>use main() function to call functions</h2>\ndef main():\n data = read_input_file(\'data.csv\')\n report = generate_report(data)\n write_report(report)\n# Application entry point -> call main()\nmain()\n',
'<h2>contextlib.suppress() function</h2>\ncontextlib.suppress() function available in Python 3.4\nuse contextlib.suppress() to selectively ignore specific exceptions using a context manager and the "with" statement:\n \nimport contextlib\nwith contextlib.suppress(FileNotFoundError):\n os.remove(\'somefile.tmp\')\nThis is equivalent to the following try/except clause:\ntry:\n os.remove(\'somefile.tmp\')\nexcept FileNotFoundError:\n pass\n',
'<h2>Parallel computing in Python</h2> (in 60 seconds or less)\n<a href="https://stackoverflow.com/questions/20548628/how-to-do-parallel-programming-in-python">parallel programming in Python</a>\n<a href="https://www.machinelearningplus.com/python/parallel-processing-python/">Parallel Processing in Python – A Practical Guide with Examples</a>\n<a href="https://sebastianraschka.com/Articles/2014_multiprocessing.html">parallel programming using Python\'s multiprocessing module</a>\nIf your Python programs are slower than you\'d like you can often speed them up by *parallelizing* them.\nBasically, parallel computing allows you to carry out many calculations at the same time, thus reducing the amount of time it takes to run your program to completion.\nI know, this sounds fairly vague and complicated somehow...but bear with me for the next 50 seconds or so.\nHere\'s an end-to-end example of parallel computing in Python 2/3, using only tools built into the Python standard library—\nReady? Go!\nFirst, we need to do some setup work. We\'ll import the "collections" and the "multiprocessing" module so we can use Python\'s parallel computing facilities and define the data structure we\'ll work with:\nimport collections\nimport multiprocessing\nSecond, we\'ll use "collections.namedtuple" to define a new (immutable) data type we can use to represent our data set, a collection of scientists:\nScientist = collections.namedtuple(\'Scientist\', [\n \'name\',\n \'born\',\n])\nscientists = (\n Scientist(name=\'Ada Lovelace\', born=1815),\n Scientist(name=\'Emmy Noether\', born=1882),\n Scientist(name=\'Marie Curie\', born=1867),\n Scientist(name=\'Tu Youyou\', born=1930),\n Scientist(name=\'Ada Yonath\', born=1939),\n Scientist(name=\'Vera Rubin\', born=1928),\n Scientist(name=\'Sally Ride\', born=1951),\n)\nThird, we\'ll write a "data processing function" that accepts a scientist object and returns a dictionary containing the scientist\'s name and their calculated age: \ndef process_item(item):\n return {\n  \'name\': item.name,\n  \'age\': 2017 - item.born\n }\nThe process_item() function just represents a simple data transformation to keep this example short and sweet—but you could swap it out with a much more complex computation no problem. \n(20 seconds remaining)\nFourth, and this is where the real parallelization magic happens, we\'ll set up a "multiprocessing pool" that allows us to spread our calculations across all available CPU cores. \nThen we call the pool\'s map() method to apply our process_item() function to all scientist objects, in parallel batches:\npool = multiprocessing.Pool()\nresult = pool.map(process_item, scientists)\nNote how batching and distributing the work across multiple CPU cores, performing the work, and collecting the results are all handled by the multiprocessing pool. How great is that?\nFifth, we\'re all done here with 5 seconds remaining—\nLet\'s print(the results of our data transformation to the console so we can )make sure the program did what it was supposed to:\nprint(tuple(result))\nThat\'s the end of our little program. And here\'s what you should expect to see printed out on your console:\n({\'name\': \'Ada Lovelace\', \'age\': 202},\n {\'name\': \'Emmy Noether\', \'age\': 135},\n {\'name\': \'Marie Curie\', \'age\': 150},\n {\'name\': \'Tu Youyou\', \'age\': 87},\n {\'name\': \'Ada Yonath\', \'age\': 78},\n {\'name\': \'Vera Rubin\', \'age\': 89},\n {\'name\': \'Sally Ride\', \'age\': 66})\nIsn\'t Python just lovely?\nNow, obviously I took some shortcuts here and picked an example that made parallelization seem effortless—\n',
'<h2>Python GuiProgramming</h2>\n<a href="https://www.zhihu.com/question/32703639">Python GUI Tkinter，PyQt, wxPython</a>\n<a href="wxPython by Example.html" class="bordwhite2 red goldbs borRad10 bigfont">wxPython by Example</a>\n<a href="wxPython GUI Application.html" class="bordgold2 borRad10 white whiteblackgrad red2bs bigfont">wxPython GUI Application</a>\n<a href="https://www.youtube.com/watch?v=AHceESCEHww" class="bordred3 borRad10 white whitebs bigfont">wxFormBuilder and wxPython Tutorial</a>\n<a href="https://wiki.python.org/moin/GuiProgramming">Python GuiProgramming</a>\n<a href="https://www.tutorialspoint.com/python/python_gui_programming">python gui programming</a>\n<a href="https://likegeeks.com/python-gui-examples-tkinter-tutorial/">Python GUI Examples (Tkinter Tutorial) important</a>\n<a href="https://build-system.fman.io/pyqt5-tutorial">PyQt5 tutorial create a Python GUI</a>\n<a href="http://zetcode.com/gui/pyqt5/">PyQt5 tutorial</a> <a href="https://tkdocs.com/tutorial/" class="bordyellow2 red whitebs borRad10">Tk tutorial</a> <a href="https://tkdocs.com/tutorial/onepage.html">Tk tutorial onepage</a>\n<a href="https://www.python-course.eu/python_tkinter.php" class="bordred2 green borRad10 limebs">Python Tkinter Intro</a> <a href="https://www.python-course.eu/tkinter_layout_management.php" class="bordred2 yellow borRad10 goldbs">tkinter Layout Managers</a>\n尝试GUI，首先选择的就是Python自带的Tkinter，然后在网上找了Tkinter的相关文档：\n第二份是2014年度辛星Tkinter教程第二版，内容浅显易懂；\n第三份是Python GUI Programming Cookbook，内容详细，帮助很大。\n先上结论：Tkinter真的不像大家说的那么差，基本的功能都能实现，而且简单易学容易上手。对于界面颜值没有太高要求的，用Tkinter写GUI是不错的选择。\n<a href="Python GUI examples.html" class="bordred3 borRad10 whitebs gold Uline whiteline">*** Python GUI examples ***</a> <a href="http://zetcode.com/tkinter/layout/" class="bordwhite2 borRad10 bluebs gold">*** tkinter layout ***</a>\nThere are two kinds of widgets: containers and their children.\nThe containers group their children into suitable layouts.\nTkinter has three built-in layout managers: the pack, grid, and place managers.\nThe place geometry manager positions widgets using absolute positioning.\nThe pack geometry manager organises widgets in horizontal and vertical boxes.\nThe grid geometry manager places widgets in a two dimensional grid.\n',
'<h2>comprehensive data exploration with python</h2>\n<a href="https://www.kaggle.com/pmarcelino/comprehensive-data-exploration-with-python">comprehensive data exploration with python</a>\n\'The most difficult thing in life is to know yourself\'\nThis quote belongs to Thales of Miletus. \nThales was a Greek/Phonecian philosopher, mathematician and astronomer, which is recognised as the first individual in Western civilisation known to have entertained and engaged in scientific thought.\nI wouldn\'t say that knowing your data is the most difficult thing in data science, but it is time-consuming. \nTherefore, it\'s easy to overlook this initial step and jump too soon into the water.\nSo I tried to learn how to swim before jumping into the water. \nBased on Hair et al. (2013), chapter \'Examining your data\', I did my best to follow a comprehensive, but not exhaustive, analysis of the data. \nI\'m far from reporting a rigorous study in this kernel, but I hope that it can be useful for the community, so I\'m sharing how I applied some of those data analysis principles to this problem.\nDespite the strange names I gave to the chapters, what we are doing in this kernel is something like:\n<b>Understand the problem</b>\nWe\'ll look at each variable and do a philosophical analysis about their meaning and importance for this problem.\n<b>Univariable study</b>\nWe\'ll just focus on the dependent variable (\'SalePrice\') and try to know a little bit more about it.\n<b>Multivariate study</b>\nWe\'ll try to understand how the dependent variable and independent variables relate.\n<b>Basic cleaning</b>\nWe\'ll clean the dataset and handle the missing data, outliers and categorical variables.\n<b>Test assumptions</b>\nWe\'ll check if our data meets the assumptions required by most multivariate techniques.\nNow, it\'s time to have fun!\n#invite people for the Kaggle party\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings ( \'ignore\' )\n% matplotlib inline\n#bring in the six packs\ndf_train = pd.read_csv ( \'../input/train.csv\' )\n#check the decoration\ndf_train.columns\nIndex([\'Id\', \'MSSubClass\', \'MSZoning\', \'LotFrontage\', \'LotArea\', \'Street\',\n    \'Alley\', \'LotShape\', \'LandContour\', \'Utilities\', \'LotConfig\',\n    \'LandSlope\', \'Neighborhood\', \'Condition1\', \'Condition2\', \'BldgType\',\n    \'HouseStyle\', \'OverallQual\', \'OverallCond\', \'YearBuilt\', \'YearRemodAdd\',\n    \'RoofStyle\', \'RoofMatl\', \'Exterior1st\', \'Exterior2nd\', \'MasVnrType\',\n    \'MasVnrArea\', \'ExterQual\', \'ExterCond\', \'Foundation\', \'BsmtQual\',\n    \'BsmtCond\', \'BsmtExposure\', \'BsmtFinType1\', \'BsmtFinSF1\',\n    \'BsmtFinType2\', \'BsmtFinSF2\', \'BsmtUnfSF\', \'TotalBsmtSF\', \'Heating\',\n    \'HeatingQC\', \'CentralAir\', \'Electrical\', \'1stFlrSF\', \'2ndFlrSF\',\n    \'LowQualFinSF\', \'GrLivArea\', \'BsmtFullBath\', \'BsmtHalfBath\', \'FullBath\',\n    \'HalfBath\', \'BedroomAbvGr\', \'KitchenAbvGr\', \'KitchenQual\',\n    \'TotRmsAbvGrd\', \'Functional\', \'Fireplaces\', \'FireplaceQu\', \'GarageType\',\n    \'GarageYrBlt\', \'GarageFinish\', \'GarageCars\', \'GarageArea\', \'GarageQual\',\n    \'GarageCond\', \'PavedDrive\', \'WoodDeckSF\', \'OpenPorchSF\',\n    \'EnclosedPorch\', \'3SsnPorch\', \'ScreenPorch\', \'PoolArea\', \'PoolQC\',\n    \'Fence\', \'MiscFeature\', \'MiscVal\', \'MoSold\', \'YrSold\', \'SaleType\',\n    \'SaleCondition\', \'SalePrice\'],\n   dtype=\'object\')\n<h4>1. So... What can we expect?</h4>\nIn order to understand our data, we can look at each variable and try to understand their meaning and relevance to this problem. \nI know this is time-consuming, but it will give us the flavour of our dataset.\nIn order to have some discipline in our analysis, we can create an Excel spreadsheet with the following columns:\n<b>Variable</b> - Variable name.\n<b>Type</b> - Identification of the variables\' type. \nThere are two possible values for this field: \'numerical\' or \'categorical\'. \nBy \'numerical\' we mean variables for which the values are numbers, and by \'categorical\' we mean variables for which the values are categories.\n<b>Segment</b> - Identification of the variables\' segment. \nWe can define three possible segments: building, space or location. \nWhen we say \'building\', we mean a variable that relates to the physical characteristics of the building (e.g. \'OverallQual\'). \nWhen we say \'space\', we mean a variable that reports space properties of the house (e.g. \'TotalBsmtSF\'). \nFinally, when we say a \'location\', we mean a variable that gives information about the place where the house is located (e.g. \'Neighborhood\').\n<b>Expectation</b> - Our expectation about the variable influence in \'SalePrice\'. \nWe can use a categorical scale with \'High\', \'Medium\' and \'Low\' as possible values.\n<b>Conclusion</b> - Our conclusions about the importance of the variable, after we give a quick look at the data. \nWe can keep with the same categorical scale as in \'Expectation\'.\n<b>Comments</b> - Any general comments that occured to us.\nWhile \'Type\' and \'Segment\' is just for possible future reference, the column \'Expectation\' is important because it will help us develop a \'sixth sense\'. \nTo fill this column, we should read the description of all the variables and, one by one, ask ourselves:\nDo we think about this variable when we are buying a house? (e.g. When we think about the house of our dreams, do we care about its \'Masonry veneer type\'?).\nIf so, how important would this variable be? (e.g. What is the impact of having \'Excellent\' material on the exterior instead of \'Poor\'? And of having \'Excellent\' instead of \'Good\'?).\nIs this information already described in any other variable? (e.g. If \'LandContour\' gives the flatness of the property, do we really need to know the \'LandSlope\'?).\nAfter this daunting exercise, we can filter the spreadsheet and look carefully to the variables with \'High\' \'Expectation\'. \nThen, we can rush into some scatter plots between those variables and \'SalePrice\', filling in the \'Conclusion\' column which is just the correction of our expectations.\nI went through this process and concluded that the following variables can play an important role in this problem:\nOverallQual (which is a variable that I don\'t like because I don\'t know how it was computed; a funny exercise would be to predict \'OverallQual\' using all the other variables available).\nYearBuilt.\nTotalBsmtSF.\nGrLivArea.\nI ended up with two \'building\' variables (\'OverallQual\' and \'YearBuilt\') and two \'space\' variables (\'TotalBsmtSF\' and \'GrLivArea\'). \nThis might be a little bit unexpected as it goes against the real estate mantra that all that matters is \'location, location and location\'. \nIt is possible that this quick data examination process was a bit harsh for categorical variables. \nFor example, I expected the \'Neigborhood\' variable to be more relevant, but after the data examination I ended up excluding it. \nMaybe this is related to the use of scatter plots instead of boxplots, which are more suitable for categorical variables visualization. \nThe way we visualize data often influences our conclusions.\nHowever, the main point of this exercise was to think a little about our data and expectactions, so I think we achieved our goal. \nNow it\'s time for \'a little less conversation, a little more action please\'. \nLet\'s \n<b>shake it!</b> \n<h4>2. First things first: analysing \'SalePrice\'</h4>\n\'SalePrice\' is the reason of our quest. \nIt\'s like when we\'re going to a party. \nWe always have a reason to be there. \nUsually, women are that reason. (disclaimer: adapt it to men, dancing or alcohol, according to your preferences)\nUsing the women analogy, let\'s build a little story, the story of \'How we met \'SalePrice\'\'.\n<em>Everything started in our Kaggle party, when we were looking for a dance partner. \nAfter a while searching in the dance floor, we saw a girl, near the bar, using dance shoes. \nThat\'s a sign that she\'s there to dance. \nWe spend much time doing predictive modelling and participating in analytics competitions, so talking with girls is not one of our super powers. \nEven so, we gave it a try:\n\'Hi, I\'m Kaggly! And you? \'SalePrice\'? What a beautiful name! You know \'SalePrice\', could you give me some data about you? I just developed a model to calculate the probability of a successful relationship between two people. \nI\'d like to apply it to us!\'\n</em> \n#descriptive statistics summary\ndf_train [ \'SalePrice\' ].describe ()\ncount   1460.000000\nmean  180921.195890\nstd    79442.502883\nmin    34900.000000\n25%   129975.000000\n50%   163000.000000\n75%   214000.000000\nmax   755000.000000\nName: SalePrice, dtype: float64\n<em>\'Very well... \nIt seems that your minimum price is larger than zero. \nExcellent! You don\'t have one of those personal traits that would destroy my model! Do you have any picture that you can send me? I don\'t know... \nlike, you in the beach... \nor maybe a selfie in the gym?\'\n</em> \n#histogram\nsns.distplot ( df_train [ \'SalePrice\' ]);\n<em>\'Ah! I see you that you use seaborn makeup when you\'re going out... \nThat\'s so elegant! I also see that you:\n<b>Deviate from the normal distribution.</b>\n<b>Have appreciable positive skewness.</b>\n<b>Show peakedness.</b>\nThis is getting interesting! \'SalePrice\', could you give me your body measures?\'\n</em> \n#skewness and kurtosis\nprint(( "Skewness:  %f " % df_train [ \'SalePrice\' ].skew ()))\nprint(( "Kurtosis:  %f " % df_train [ \'SalePrice\' ].kurt ()))\nSkewness: 1.882876\nKurtosis: 6.536282\n<em>\'Amazing! If my love calculator is correct, our success probability is 97.834657%. \nI think we should meet again! Please, keep my number and give me a call if you\'re free next Friday. \nSee you in a while, crocodile!\'\n</em> \n<h4>\'SalePrice\', her buddies and her interests</h4>\n<em>It is military wisdom to choose the terrain where you will fight. \nAs soon as \'SalePrice\' walked away, we went to Facebook. \nYes, now this is getting serious. \nNotice that this is not stalking. \nIt\'s just an intense research of an individual, if you know what I mean.\nAccording to her profile, we have some common friends. \nBesides Chuck Norris, we both know \'GrLivArea\' and \'TotalBsmtSF\'. \nMoreover, we also have common interests such as \'OverallQual\' and \'YearBuilt\'. \nThis looks promising!\nTo take the most out of our research, we will start by looking carefully at the profiles of our common friends and later we will focus on our common interests.\n</em> \n<h4>Relationship with numerical variables</h4>\n#scatter plot grlivarea/saleprice\nvar = \'GrLivArea\'\ndata = pd.concat ([ df_train [ \'SalePrice\' ], df_train [ var ]], axis = 1 )\ndata.plot.scatter ( x = var , y = \'SalePrice\' , ylim = ( 0 , 800000 ));\n<em>Hmmm... \nIt seems that \'SalePrice\' and \'GrLivArea\' are really old friends, with a \n<b>linear relationship.</b>\nAnd what about \'TotalBsmtSF\'?\n</em> \n#scatter plot totalbsmtsf/saleprice\nvar = \'TotalBsmtSF\'\ndata = pd.concat ([ df_train [ \'SalePrice\' ], df_train [ var ]], axis = 1 )\ndata.plot.scatter ( x = var , y = \'SalePrice\' , ylim = ( 0 , 800000 ));\n<em>\'TotalBsmtSF\' is also a great friend of \'SalePrice\' but this seems a much more emotional relationship! Everything is ok and suddenly, in a \n<b>strong linear (exponential?)</b> reaction, everything changes. \nMoreover, it\'s clear that sometimes \'TotalBsmtSF\' closes in itself and gives zero credit to \'SalePrice\'.\n</em> \n<h4>Relationship with categorical features</h4>\n#box plot overallqual/saleprice\nvar = \'OverallQual\'\ndata = pd.concat ([ df_train [ \'SalePrice\' ], df_train [ var ]], axis = 1 )\nf , ax = plt.subplots ( figsize = ( 8 , 6 ))\nfig = sns.boxplot ( x = var , y = "SalePrice" , data = data )\nfig.axis ( ymin = 0 , ymax = 800000 );\n<em>Like all the pretty girls, \'SalePrice\' enjoys \'OverallQual\'. \nNote to self: consider whether McDonald\'s is suitable for the first date.\n</em> \nvar = \'YearBuilt\'\ndata = pd.concat ([ df_train [ \'SalePrice\' ], df_train [ var ]], axis = 1 )\nf , ax = plt.subplots ( figsize = ( 16 , 8 ))\nfig = sns.boxplot ( x = var , y = "SalePrice" , data = data )\nfig.axis ( ymin = 0 , ymax = 800000 );\nplt.xticks ( rotation = 90 );\n<em>Although it\'s not a strong tendency, I\'d say that \'SalePrice\' is more prone to spend more money in new stuff than in old relics.\n</em> <b>Note</b>\n: we don\'t know if \'SalePrice\' is in constant prices. \nConstant prices try to remove the effect of inflation. \nIf \'SalePrice\' is not in constant prices, it should be, so than prices are comparable over the years.\n<h4>In summary</h4>\nStories aside, we can conclude that:\n\'GrLivArea\' and \'TotalBsmtSF\' seem to be linearly related with \'SalePrice\'. \nBoth relationships are positive, which means that as one variable increases, the other also increases. \nIn the case of \'TotalBsmtSF\', we can see that the slope of the linear relationship is particularly high.\n\'OverallQual\' and \'YearBuilt\' also seem to be related with \'SalePrice\'. \nThe relationship seems to be stronger in the case of \'OverallQual\', where the box plot shows how sales prices increase with the overall quality.\nWe just analysed four variables, but there are many other that we should analyse. \nThe trick here seems to be the choice of the right features (feature selection) and not the definition of complex relationships between them (feature engineering).\nThat said, let\'s separate the wheat from the chaff.\n<h4>3. Keep calm and work smart</h4>\nUntil now we just followed our intuition and analysed the variables we thought were important. \nIn spite of our efforts to give an objective character to our analysis, we must say that our starting point was subjective.\nAs an engineer, I don\'t feel comfortable with this approach. \nAll my education was about developing a disciplined mind, able to withstand the winds of subjectivity. \nThere\'s a reason for that. \nTry to be subjective in structural engineering and you will see physics making things fall down. \nIt can hurt.\nSo, let\'s overcome inertia and do a more objective analysis.\n<h4>The \'plasma soup\'</h4>\n\'In the very beginning there was nothing except for a plasma soup. \nWhat is known of these brief moments in time, at the start of our study of cosmology, is largely conjectural. \nHowever, science has devised some sketch of what probably happened, based on what is known about the universe today.\' (source: \n<a href="http://umich.edu/~gs265/bigbang.htm">http://umich.edu/~gs265/bigbang.htm</a>\n)\nTo explore the universe, we will start with some practical recipes to make sense of our \'plasma soup\':\nCorrelation matrix (heatmap style).\n\'SalePrice\' correlation matrix (zoomed heatmap style).\nScatter plots between the most correlated variables (move like Jagger style).\n<h4 id="Correlation-matrix-(heatmap-style)">\nCorrelation matrix (heatmap style)\n</h4>\n#correlation matrix\ncorrmat = df_train.corr()\nf , ax = plt.subplots ( figsize = ( 12 , 9 ))\nsns.heatmap ( corrmat , vmax =.8 , square = True );\nIn my opinion, this heatmap is the best way to get a quick overview of our \'plasma soup\' and its relationships. (Thank you @seaborn!)\nAt first sight, there are two red colored squares that get my attention. \nThe first one refers to the \'TotalBsmtSF\' and \'1stFlrSF\' variables, and the second one refers to the \'Garage\n<em>X\n</em>\n\' variables. \nBoth cases show how significant the correlation is between these variables. \nActually, this correlation is so strong that it can indicate a situation of multicollinearity. \nIf we think about these variables, we can conclude that they give almost the same information so multicollinearity really occurs. \nHeatmaps are great to detect this kind of situations and in problems dominated by feature selection, like ours, they are an essential tool.\nAnother thing that got my attention was the \'SalePrice\' correlations. \nWe can see our well-known \'GrLivArea\', \'TotalBsmtSF\', and \'OverallQual\' saying a big \'Hi!\', but we can also see many other variables that should be taken into account. \nThat\'s what we will do next.\n<h4 id="\'SalePrice\'-correlation-matrix-(zoomed-heatmap-style)">\n\'SalePrice\' correlation matrix (zoomed heatmap style)\n</h4>\n#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest ( k , \'SalePrice\' )[ \'SalePrice\' ].index\ncm = np.corrcoef ( df_train [ cols ].values.T )\nsns.set ( font_scale = 1.25 )\nhm = sns.heatmap ( cm , cbar = True , annot = True , square = True , fmt = \'.2f\' , annot_kws = { \'size\' : 10 }, yticklabels = cols.values , xticklabels = cols.values )\nplt.show ()\nAccording to our crystal ball, these are the variables most correlated with \'SalePrice\'. \nMy thoughts on this:\n\'OverallQual\', \'GrLivArea\' and \'TotalBsmtSF\' are strongly correlated with \'SalePrice\'. \nCheck!\n\'GarageCars\' and \'GarageArea\' are also some of the most strongly correlated variables. \nHowever, as we discussed in the last sub-point, the number of cars that fit into the garage is a consequence of the garage area. \n\'GarageCars\' and \'GarageArea\' are like twin brothers. \nYou\'ll never be able to distinguish them. \nTherefore, we just need one of these variables in our analysis (we can keep \'GarageCars\' since its correlation with \'SalePrice\' is higher).\n\'TotalBsmtSF\' and \'1stFloor\' also seem to be twin brothers. \nWe can keep \'TotalBsmtSF\' just to say that our first guess was right (re-read \'So... What can we expect?\').\n\'FullBath\'?? Really? \n\'TotRmsAbvGrd\' and \'GrLivArea\', twin brothers again. \nIs this dataset from Chernobyl?\nAh... \n\'YearBuilt\'... \nIt seems that \'YearBuilt\' is slightly correlated with \'SalePrice\'. \nHonestly, it scares me to think about \'YearBuilt\' because I start feeling that we should do a little bit of time-series analysis to get this right. \nI\'ll leave this as a homework for you.\nLet\'s proceed to the scatter plots.\n<h4 id="Scatter-plots-between-\'SalePrice\'-and-correlated-variables-(move-like-Jagger-style)">\nScatter plots between \'SalePrice\' and correlated variables (move like Jagger style)\n</h4>\nGet ready for what you\'re about to see. \nI must confess that the first time I saw these scatter plots I was totally blown away! So much information in so short space... \nIt\'s just amazing. \nOnce more, thank you @seaborn! You make me \'move like Jagger\'!\n#scatterplot\nsns.set ()\ncols = [ \'SalePrice\' , \'OverallQual\' , \'GrLivArea\' , \'GarageCars\' , \'TotalBsmtSF\' , \'FullBath\' , \'YearBuilt\' ]\nsns.pairplot ( df_train [ cols ], size = 2.5 )\nplt.show ();\nAlthough we already know some of the main figures, this mega scatter plot gives us a reasonable idea about variables relationships.\nOne of the figures we may find interesting is the one between \'TotalBsmtSF\' and \'GrLiveArea\'. \nIn this figure we can see the dots drawing a linear line, which almost acts like a border. \nIt totally makes sense that the majority of the dots stay below that line. \nBasement areas can be equal to the above ground living area, but it is not expected a basement area bigger than the above ground living area (unless you\'re trying to buy a bunker).\nThe plot concerning \'SalePrice\' and \'YearBuilt\' can also make us think. \nIn the bottom of the \'dots cloud\', we see what almost appears to be a shy exponential function (be creative). \nWe can also see this same tendency in the upper limit of the \'dots cloud\' (be even more creative). \nAlso, notice how the set of dots regarding the last years tend to stay above this limit (I just wanted to say that prices are increasing faster now).\nOk, enough of Rorschach test for now. \nLet\'s move forward to what\'s missing: missing data!\n<h4>4. Missing data</h4>\nImportant questions when thinking about missing data:\nHow prevalent is the missing data?\nIs missing data random or does it have a pattern?\nThe answer to these questions is important for practical reasons because missing data can imply a reduction of the sample size. \nThis can prevent us from proceeding with the analysis. \nMoreover, from a substantive perspective, we need to ensure that the missing data process is not biased and hidding an inconvenient truth.\n#missing data\ntotal = df_train.isnull ().sum ().sort_values ( ascending = False )\npercent = ( df_train.isnull ().sum () / df_train.isnull ().count ()).sort_values ( ascending = False )\nmissing_data = pd.concat ([ total , percent ], axis = 1 , keys = [ \'Total\' , \'Percent\' ])\nmissing_data.head ( 20 )\n<table border="1" class="dataframe">\n  \n<thead>\n<tr style="text-align: right;">\n<th>\n</th>\n<th>\nTotal\n</th>\n<th>\nPercent\n</th>\n</tr>\n  \n</thead>\n  \n<tbody>\n<tr>\n<th>\nPoolQC\n</th>\n<td>\n1453\n</td>\n<td>\n0.995205\n</td>\n</tr>\n<tr>\n<th>\nMiscFeature\n</th>\n<td>\n1406\n</td>\n<td>\n0.963014\n</td>\n</tr>\n<tr>\n<th>\nAlley\n</th>\n<td>\n1369\n</td>\n<td>\n0.937671\n</td>\n</tr>\n<tr>\n<th>\nFence\n</th>\n<td>\n1179\n</td>\n<td>\n0.807534\n</td>\n</tr>\n<tr>\n<th>\nFireplaceQu\n</th>\n<td>\n690\n</td>\n<td>\n0.472603\n</td>\n</tr>\n<tr>\n<th>\nLotFrontage\n</th>\n<td>\n259\n</td>\n<td>\n0.177397\n</td>\n</tr>\n<tr>\n<th>\nGarageCond\n</th>\n<td>\n81\n</td>\n<td>\n0.055479\n</td>\n</tr>\n<tr>\n<th>\nGarageType\n</th>\n<td>\n81\n</td>\n<td>\n0.055479\n</td>\n</tr>\n<tr>\n<th>\nGarageYrBlt\n</th>\n<td>\n81\n</td>\n<td>\n0.055479\n</td>\n</tr>\n<tr>\n<th>\nGarageFinish\n</th>\n<td>\n81\n</td>\n<td>\n0.055479\n</td>\n</tr>\n<tr>\n<th>\nGarageQual\n</th>\n<td>\n81\n</td>\n<td>\n0.055479\n</td>\n</tr>\n<tr>\n<th>\nBsmtExposure\n</th>\n<td>\n38\n</td>\n<td>\n0.026027\n</td>\n</tr>\n<tr>\n<th>\nBsmtFinType2\n</th>\n<td>\n38\n</td>\n<td>\n0.026027\n</td>\n</tr>\n<tr>\n<th>\nBsmtFinType1\n</th>\n<td>\n37\n</td>\n<td>\n0.025342\n</td>\n</tr>\n<tr>\n<th>\nBsmtCond\n</th>\n<td>\n37\n</td>\n<td>\n0.025342\n</td>\n</tr>\n<tr>\n<th>\nBsmtQual\n</th>\n<td>\n37\n</td>\n<td>\n0.025342\n</td>\n</tr>\n<tr>\n<th>\nMasVnrArea\n</th>\n<td>\n8\n</td>\n<td>\n0.005479\n</td>\n</tr>\n<tr>\n<th>\nMasVnrType\n</th>\n<td>\n8\n</td>\n<td>\n0.005479\n</td>\n</tr>\n<tr>\n<th>\nElectrical\n</th>\n<td>\n1\n</td>\n<td>\n0.000685\n</td>\n</tr>\n<tr>\n<th>\nUtilities\n</th>\n<td>\n0\n</td>\n<td>\n0.000000\n</td>\n</tr>\n  \n</tbody>\n</table>\nLet\'s analyse this to understand how to handle the missing data.\nWe\'ll consider that when more than 15% of the data is missing, we should delete the corresponding variable and pretend it never existed. \nThis means that we will not try any trick to fill the missing data in these cases. \nAccording to this, there is a set of variables (e.g. \'PoolQC\', \'MiscFeature\', \'Alley\', etc.) that we should delete. \nThe point is: will we miss this data? I don\'t think so. \nNone of these variables seem to be very important, since most of them are not aspects in which we think about when buying a house (maybe that\'s the reason why data is missing?). \nMoreover, looking closer at the variables, we could say that variables like \'PoolQC\', \'MiscFeature\' and \'FireplaceQu\' are strong candidates for outliers, so we\'ll be happy to delete them.\nIn what concerns the remaining cases, we can see that \'Garage\n<em>X\n</em>\n\' variables have the same number of missing data. \nI bet missing data refers to the same set of observations (although I will not check it; it\'s just 5% and we should not spend 20 in 5 problems). \nSince the most important information regarding garages is expressed by \'GarageCars\' and considering that we are just talking about 5% of missing data, I\'ll delete the mentioned \'Garage\n<em>X\n</em>\n\' variables. \nThe same logic applies to \'Bsmt\n<em>X\n</em>\n\' variables.\nRegarding \'MasVnrArea\' and \'MasVnrType\', we can consider that these variables are not essential. \nFurthermore, they have a strong correlation with \'YearBuilt\' and \'OverallQual\' which are already considered. \nThus, we will not lose information if we delete \'MasVnrArea\' and \'MasVnrType\'.\nFinally, we have one missing observation in \'Electrical\'. \nSince it is just one observation, we\'ll delete this observation and keep the variable.\nIn summary, to handle missing data, we\'ll delete all the variables with missing data, except the variable \'Electrical\'. \nIn \'Electrical\' we\'ll just delete the observation with missing data.\n#dealing with missing data\ndf_train = df_train.drop (( missing_data [ missing_data [ \'Total\' ] &gt; 1 ]).\nindex , 1 )\ndf_train = df_train.drop ( df_train.loc [ df_train [ \'Electrical\' ].\nisnull ()].\nindex )\ndf_train.isnull ().sum ().max () #just checking that there\'s no missing data missing...\n0\n<h4>Out liars!</h4>\nOutliers is also something that we should be aware of. \nWhy? Because outliers can markedly affect our models and can be a valuable source of information, providing us insights about specific behaviours.\nOutliers is a complex subject and it deserves more attention. \nHere, we\'ll just do a quick analysis through the standard deviation of \'SalePrice\' and a set of scatter plots.\n<h4>Univariate analysis</h4>\nThe primary concern here is to establish a threshold that defines an observation as an outlier. \nTo do so, we\'ll standardize the data. \nIn this context, data standardization means converting data values to have mean of 0 and a standard deviation of 1.\n#standardizing data\nsaleprice_scaled = StandardScaler ().fit_transform ( df_train [ \'SalePrice\' ][:, np.\nnewaxis ]);\nlow_range = saleprice_scaled [ saleprice_scaled [:, 0 ].\nargsort ()][: 10 ]\nhigh_range = saleprice_scaled [ saleprice_scaled [:, 0 ].\nargsort ()][ - 10 :]\nprint(( \'outer range (low) of the distribution:\' ))\nprint(( low_range ))\nprint(( \' \n outer range (high) of the distribution:\' ))\nprint(( high_range ))\nouter range (low) of the distribution:\n[[-1.83820775]\n [-1.83303414]\n [-1.80044422]\n [-1.78282123]\n [-1.77400974]\n [-1.62295562]\n [-1.6166617 ]\n [-1.58519209]\n [-1.58519209]\n [-1.57269236]]\nouter range (high) of the distribution:\n[[3.82758058]\n [4.0395221 ]\n [4.49473628]\n [4.70872962]\n [4.728631  ]\n [5.06034585]\n [5.42191907]\n [5.58987866]\n [7.10041987]\n [7.22629831]]\nHow \'SalePrice\' looks with her new clothes:\nLow range values are similar and not too far from 0.\nHigh range values are far from 0 and the 7.something values are really out of range.\nFor now, we\'ll not consider any of these values as an outlier but we should be careful with those two 7.something values.\n<h4>Bivariate analysis</h4>\nWe already know the following scatter plots by heart. \nHowever, when we look to things from a new perspective, there\'s always something to discover. \nAs Alan Kay said, \'a change in perspective is worth 80 IQ points\'.\n#bivariate analysis saleprice/grlivarea\nvar = \'GrLivArea\'\ndata = pd.concat ([ df_train [ \'SalePrice\' ], df_train [ var ]], axis = 1 )\ndata.\nplot.\nscatter ( x = var , y = \'SalePrice\' , ylim = ( 0 , 800000 ));\n\'c\' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with \'x\' &amp; \'y\'. \n Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\nWhat has been revealed:\nThe two values with bigger \'GrLivArea\' seem strange and they are not following the crowd. \nWe can speculate why this is happening. \nMaybe they refer to agricultural area and that could explain the low price. \nI\'m not sure about this but I\'m quite confident that these two points are not representative of the typical case. \nTherefore, we\'ll define them as outliers and delete them.\nThe two observations in the top of the plot are those 7.something observations that we said we should be careful about. \nThey look like two special cases, however they seem to be following the trend. \nFor that reason, we will keep them.\n#deleting points\ndf_train.sort_values ( by = \'GrLivArea\' , ascending = False )[: 2 ]\ndf_train = df_train.drop ( df_train [ df_train [ \'Id\' ] == 1299 ].\nindex )\ndf_train = df_train.drop ( df_train [ df_train [ \'Id\' ] == 524 ].\nindex )\n#bivariate analysis saleprice/grlivarea\nvar = \'TotalBsmtSF\'\ndata = pd.concat ([ df_train [ \'SalePrice\' ], df_train [ var ]], axis = 1 )\ndata.\nplot.\nscatter ( x = var , y = \'SalePrice\' , ylim = ( 0 , 800000 ));\n\'c\' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with \'x\' &amp; \'y\'. \n Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\nWe can feel tempted to eliminate some observations (e.g. TotalBsmtSF &gt; 3000) but I suppose it\'s not worth it. \nWe can live with that, so we\'ll not do anything.\n<h4>5. \nGetting hard core</h4>\nIn Ayn Rand\'s novel, \'Atlas Shrugged\', there is an often-repeated question: who is John Galt? A big part of the book is about the quest to discover the answer to this question.\nI feel Randian now. \nWho is \'SalePrice\'?\nThe answer to this question lies in testing for the assumptions underlying the statistical bases for multivariate analysis. \nWe already did some data cleaning and discovered a lot about \'SalePrice\'. \nNow it\'s time to go deep and understand how \'SalePrice\' complies with the statistical assumptions that enables us to apply multivariate techniques.\nAccording to \n<a href="https://amzn.to/2uC3j9p">Hair et al. (2013)</a>\n, four assumptions should be tested:\n<b>Normality</b> - When we talk about normality what we mean is that the data should look like a normal distribution. \nThis is important because several statistic tests rely  on this (e.g. t-statistics). \nIn this exercise we\'ll just check univariate normality for \'SalePrice\' (which is a limited approach). \nRemember that univariate normality doesn\'t ensure multivariate normality (which is what we would like to have), but it helps. \nAnother detail to take into account is that in big samples (&gt;200 observations) normality is not such an issue. \nHowever, if we solve normality, we avoid a lot of other problems (e.g. heteroscedacity) so that\'s the main reason why we are doing this analysis.\n<b>Homoscedasticity</b> - I just hope I wrote it right. \nHomoscedasticity refers to the \'assumption that dependent variable(s) exhibit equal levels of variance across the range of predictor variable(s)\' \n<a href="https://amzn.to/2uC3j9p">(Hair et al., 2013)</a>\nHomoscedasticity is desirable because we want the error term to be the same across all values of the independent variables.\n<b>Linearity</b>\n- The most common way to assess linearity is to examine scatter plots and search for linear patterns. \nIf patterns are not linear, it would be worthwhile to explore data transformations. \nHowever, we\'ll not get into this because most of the scatter plots we\'ve seen appear to have linear relationships.\n<b>Absence of correlated errors</b> - Correlated errors, like the definition suggests, happen when one error is correlated to another. \nFor instance, if one positive error makes a negative error systematically, it means that there\'s a relationship between these variables. \nThis occurs often in time series, where some patterns are time related. \nWe\'ll also not get into this. \nHowever, if you detect something, try to add a variable that can explain the effect you\'re getting. \nThat\'s the most common solution for correlated errors.\nWhat do you think Elvis would say about this long explanation? \'A little less conversation, a little more action please\'? Probably... \nBy the way, do you know what was Elvis\'s last great hit?\n(...)\nThe bathroom floor.\n<h4>In the search for normality</h4>\nThe point here is to test \'SalePrice\' in a very lean way. \nWe\'ll do this paying attention to:\n<b>Histogram</b> - Kurtosis and skewness.\n<b>Normal probability plot</b> - Data distribution should closely follow the diagonal that represents the normal distribution.\n#histogram and normal probability plot\nsns.distplot ( df_train [ \'SalePrice\' ], fit = norm );\nfig = plt.figure ()\nres = stats.\nprobplot ( df_train [ \'SalePrice\' ], plot = plt )\nOk, \'SalePrice\' is not normal. \nIt shows \'peakedness\', positive skewness and does not follow the diagonal line.\nBut everything\'s not lost. \nA simple data transformation can solve the problem. \nThis is one of the awesome things you can learn in statistical books: in case of positive skewness, log transformations usually works well. \nWhen I discovered this, I felt like an Hogwarts\' student discovering a new cool spell.\n<em>Avada kedavra!\n</em> \n#applying log transformation\ndf_train [ \'SalePrice\' ] = np.\nlog ( df_train [ \'SalePrice\' ])\n#transformed histogram and normal probability plot\nsns.distplot ( df_train [ \'SalePrice\' ], fit = norm );\nfig = plt.figure ()\nres = stats.\nprobplot ( df_train [ \'SalePrice\' ], plot = plt )\nDone! Let\'s check what\'s going on with \'GrLivArea\'.\n#histogram and normal probability plot\nsns.distplot ( df_train [ \'GrLivArea\' ], fit = norm );\nfig = plt.figure ()\nres = stats.\nprobplot ( df_train [ \'GrLivArea\' ], plot = plt )\nTastes like skewness... \n<em>Avada kedavra!\n</em> \n#data transformation\ndf_train [ \'GrLivArea\' ] = np.\nlog ( df_train [ \'GrLivArea\' ])\n#transformed histogram and normal probability plot\nsns.distplot ( df_train [ \'GrLivArea\' ], fit = norm );\nfig = plt.figure ()\nres = stats.\nprobplot ( df_train [ \'GrLivArea\' ], plot = plt )\nNext, please...\n#histogram and normal probability plot\nsns.distplot ( df_train [ \'TotalBsmtSF\' ], fit = norm );\nfig = plt.figure ()\nres = stats.\nprobplot ( df_train [ \'TotalBsmtSF\' ], plot = plt )\nOk, now we are dealing with the big boss. \nWhat do we have here?\nSomething that, in general, presents skewness.\nA significant number of observations with value zero (houses without basement).\nA big problem because the value zero doesn\'t allow us to do log transformations.\nTo apply a log transformation here, we\'ll create a variable that can get the effect of having or not having basement (binary variable). \nThen, we\'ll do a log transformation to all the non-zero observations, ignoring those with value zero. \nThis way we can transform data, without losing the effect of having or not basement.\nI\'m not sure if this approach is correct. \nIt just seemed right to me. \nThat\'s what I call \'high risk engineering\'.\n#create column for new variable (one is enough because it\'s a binary categorical feature)\n#if area&gt;0 it gets 1, for area==0 it gets 0\ndf_train [ \'HasBsmt\' ] = pd.Series ( len ( df_train [ \'TotalBsmtSF\' ]), index = df_train.index )\ndf_train [ \'HasBsmt\' ] = 0 \ndf_train.loc [ df_train [ \'TotalBsmtSF\' ] &gt; 0 , \'HasBsmt\' ] = 1\n#transform data\ndf_train.loc [ df_train [ \'HasBsmt\' ] == 1 , \'TotalBsmtSF\' ] = np.\nlog ( df_train [ \'TotalBsmtSF\' ])\n#histogram and normal probability plot\nsns.distplot ( df_train [ df_train [ \'TotalBsmtSF\' ] &gt; 0 ][ \'TotalBsmtSF\' ], fit = norm );\nfig = plt.figure ()\nres = stats.\nprobplot ( df_train [ df_train [ \'TotalBsmtSF\' ] &gt; 0 ][ \'TotalBsmtSF\' ], plot = plt )\n<h4>In the search for writing \'homoscedasticity\' right at the first attempt</h4>\nThe best approach to test homoscedasticity for two metric variables is graphically. \nDepartures from an equal dispersion are shown by such shapes as cones (small dispersion at one side of the graph, large dispersion at the opposite side) or diamonds (a large number of points at the center of the distribution).\nStarting by \'SalePrice\' and \'GrLivArea\'...\n#scatter plot\nplt.scatter ( df_train [ \'GrLivArea\' ], df_train [ \'SalePrice\' ]);\nOlder versions of this scatter plot (previous to log transformations), had a conic shape (go back and check \'Scatter plots between \'SalePrice\' and correlated variables (move like Jagger style)\'). \nAs you can see, the current scatter plot doesn\'t have a conic shape anymore. \nThat\'s the power of normality! Just by ensuring normality in some variables, we solved the homoscedasticity problem.\nNow let\'s check \'SalePrice\' with \'TotalBsmtSF\'.\n#scatter plot\nplt.scatter ( df_train [ df_train [ \'TotalBsmtSF\' ] &gt; 0 ][ \'TotalBsmtSF\' ], df_train [ df_train [ \'TotalBsmtSF\' ] &gt; 0 ][ \'SalePrice\' ]);\nWe can say that, in general, \'SalePrice\' exhibit equal levels of variance across the range of \'TotalBsmtSF\'. \nCool!\n<h4>Last but not the least, dummy variables</h4>\nEasy mode.\n#convert categorical variable into dummy\ndf_train = pd.get_dummies ( df_train )\n<h4>Conclusion</h4>\nThat\'s it! We reached the end of our exercise.\nThroughout this kernel we put in practice many of the strategies proposed by \nHair et al. (2013). \nWe philosophied about the variables, we analysed \'SalePrice\' alone and with the most correlated variables, we dealt with missing data and outliers, we tested some of the fundamental statistical assumptions and we even transformed categorial variables into dummy variables. \nThat\'s a lot of work that Python helped us make easier.\nBut the quest is not over. \nRemember that our story stopped in the Facebook research. \nNow it\'s time to give a call to \'SalePrice\' and invite her to dinner. \nTry to predict her behaviour. \nDo you think she\'s a girl that enjoys regularized linear regression approaches? Or do you think she prefers ensemble methods? Or maybe something else?\nIt\'s up to you to find out.\n<h4>8个Python设计小技巧</h4>这篇文章主要和大家分享一些 Python 不一样的技巧，感受 Python 带给你的乐趣吧。\n1.print(打印带有颜色的信息)\n大家知道 Python 中的信息打印函数 Print，一般我们会使用它打印一些东西，作为一个简单调试。\n但是你知道么，这个 Print(打印出来的字体颜色是可以设置的。)\n一个小例子\n1. def esc (code= 0 ):\n2. return f\'[ {code} m\'\n3. print(esc( \'31;1;0\' ) +  \'Error:\' +esc()+ \'important\' ) \n在控制台或者 Pycharm 运行这段代码之后你会得到结果。\nError :important\n其中 Error 是红色加下划线的，important 为默认色\n其设置格式为:[显示方式;前景色;背景色 m\n下面可以设置的参数:\n1.  说明：\n2.  前景色   背景色     颜色\n3. ---------------------------------------\n4.  30    40     黑色\n5.  31    41     红色\n6.  32    42     绿色\n7.  33    43     黃色\n8.  34    44     蓝色\n9.  35    45     紫红色\n10.  36    46     青蓝色\n11.  37    47     白色\n12.   \n13.  显示方式     意义\n14. -------------------------\n15.  0    终端默认设置\n16.  1    高亮显示\n17.  4    使用下划线\n18.  5    闪烁\n19.  7    反白显示\n20.  8    不可见\n21.   \n22.  例子：\n23.  [1;31;40m &amp;lt;!--1-高亮显示 31-前景色红色  40-背景色黑色--&amp;gt;\n2.在 Python 中使用定时器\n今天看到一个比较人性化的定时模块 schedule，目前 star 数为 6432，还是非常的受欢迎，这个模块也是秉承这 For Humans 的原则，这里推荐给大家。\n地址 https://github.com/dbader/schedule\n1).通过 pip 即可安装。\npip install schedule\n2.）使用案例\n1.  import schedule\n2.  import time\n3.   \n4.  def job():\n5.   print( "I\'m working..." )\n6.   \n7.  schedule.every(10 ).minutes. do (job) \n8.  schedule.every().hour . do (job)\n9.  schedule.every().day .at( "10:30" ). do (job)\n10.  schedule.every().monday. do (job)\n11.  schedule.every().wednesday.at( "13:15" ). do (job)\n12.  schedule.every().minute .at( ":17" ). do (job)\n13.   \n14.  while  True :\n15.   schedule.run_pending()\n16.   time .sleep(1 )\n从单词的字面意思，你就知道这是做什么的。举个例子:\nschedule.every().monday.do(job)\n这句代码作用就是就是单词意思，定时器会每个周一运行函数 job，怎么样是不是很简单。\n3.实现一个进度条\n1. from time import sleep\n2.  \n3. def progress(percent=30):\n4.  left = width * percent // 100\n5.  right = width - left\n6.  print(\'\n[\', \']\',\n7.     %\',\n8.     sep=\'\', flush=True)\n9.  \n10. for i in range(101):\n11.  progress(i)\n12.  sleep(0.1)\n展示效果\n<img src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Hlibq5A7Z6tOBNsl7emt2YkRvBiaISDWoYfK6nM3OA2ibr8nbXT9FWt6gIhhYZcKgHicaWVcByxECib4Nqu64eape9g/640">\n别卧槽了，赶紧快试试吧。\n上面的代码中的 print(有几个有用的参数，sep )的作用是已什么为分隔符，默认是空格，这里设置为空串是为了让每个字符之间更紧凑,end 参数作用是已什么结尾，默认是回车换行符，这里为了实现进度条的效果，同样设置为空串。\n还有最后一个参数 flush，该参数的作用主要是刷新， 默认 flush = False，不刷新，print(到 f 中的内容先存到内存中；)\n而当 flush = True 时它会立即把内容刷新并输出。\n4.优雅的打印嵌套类型的数据\n大家应该都有印象，在打印 json 字符串或者字典的时候，打印出的一坨东西根本就没有一个层次关系，这里主要说的就是输出格式的问题。\nimport json\n2. my_mapping = {0xc0ffee}\n3. print(json.dumps(my_mapping, indent=4, sort_keys=True))\n大家可以自己试试只用 print(打印 my_mapping,和例子的这种打印方法。)\n如果我们打印字典组成的列表呢，这个时候使用 json 的 dumps 方法肯定不行的，不过没关系,用标准库的 pprint(方法同样可以实现上面的方法)\n1. import pprint\n2. my_mapping = [{0xc0ffee}]\n3. pprint.pprint(my_mapping,width=4)\n5.功能简单的类使用 namedtuple 和 dataclass 的方式定义\n有时候我们想实现一个类似类的功能，但是没有那么复杂的方法需要操作的时候，这个时候就可以考虑下下面两种方法了。\n第一个，namedtuple 又称具名元组，带有名字的元组。\n它作为 Python 标准库 collections 里的一个模块，可以实现一个类似类的一个功能。\n1. from collections import namedtuple\n2.  \n3. # 以前简单的类可以使用 namedtuple 实现。\n4. Car = namedtuple(\'color mileage\')\n5.  \n6. my_car = Car(3812.4)\n7. print(my_car.color)\n8. print(my_car)\n但是呢，所有属性需要提前定义好才能使用，比如想使用my_car.name，你就得把代码改成下面的样子。\n1. from collections import namedtuple\n2.  \n3. # 以前简单的类可以使用 namedtuple 实现。\n4. Car = namedtuple(\'color mileage name\')\n5.  \n6. my_car = Car(Car:\n4.  color: str\n5.  mileage: float\n6.  \n7. my_car = Car(3812.4)\n8. print(my_car.color)\n9. print(my_car)\n6.f-string 的 !r,!a,!s\nf-string出现在Python3.6，作为当前最佳的拼接字符串的形式，看下 f-string 的结构\nf \' &amp;lt;text&amp;gt; { &amp;lt;expression&amp;gt; &amp;lt;optional : format specifier&amp;gt; } &amp;lt;text&amp;gt; ... \'\n其中\'!s\' 在表达式上调用str（），\'!r\' 调用表达式上的repr（），\'!a\' 调用表达式上的ascii（）\n(1.默认情况下，f-string将使用str()，但如果包含转换标志，则可以确保它们使用repr () !\n1. class Comedian:\n2.  def __init__(self, first_name, last_name, age):\n3.   self.first_name = first_name\n4.   self.last_name = last_name\n5.   self.age = age\n6.  \n7.  def __str__(self):\n8.   return f"调用\n1. &amp;gt;&amp;gt;&amp;gt; new_comedian = Comedian("{new_comedian}"\n3. \'Eric Idle is 74.\'\n4.  \n5. &amp;gt;&amp;gt;&amp;gt; f\'Eric Idle is 74.\'\n7. &amp;gt;&amp;gt;&amp;gt; f\'Eric Idle is 74. Surprise!\'(2.!a的例子\n1. &amp;gt;&amp;gt;&amp;gt; a = \'some string\'\n2. &amp;gt;&amp;gt;&amp;gt; f\'{a!r}\'\n3. 等价于\n1. &amp;gt;&amp;gt;&amp;gt; f\'{repr(a)}\'\n2. \n<img src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_jpg/Hlibq5A7Z6tOBNsl7emt2YkRvBiaISDWoYhsuyCxCicTrHYeEWsR1jh60a2dKdUacrIAB0ibSflNxUh9D6BzPMO9vA/640">\n在python3.8中已经实现上述功能，不过不再使用!d了改为了f"{a=}"的形式，看过这个视频的发现没有!d应该很懵逼.\n7.f-string 里"="的应用\n在 Python3.8 里有这样一个功能\n1. a = 5\n2. print(a=5\n是不是很方便，不用你再使用f"a={a}"了。\n8.海象运算符:=的是使用\n1. a =6\n2. if (b:=a+6:\n3. print(b)\n赋值的时候同时可以进行运算，和 Go 语言的赋值类似了。\n代码的运行顺序，首先计算 a+1 得到值为 7，然后把 7 赋值给 b，到这里代码相当于下面这样了。\n1. b =7\n2. if b&amp;gt;6:\n3. print(b)\n怎么样是不是简单了不少，不过这个功能 3.8 开始才能用哦。\n总结\n今天的内容就到这了，这些内容大多都是一些碎片化的知识，这里整理出来和大家分享一下。同时，这次小编也给大家准备了一批人工智能的学习资料，总共约300G，内容包括视频教程、课件、代码等，涵盖了python、机器学习、数据挖掘等11个部分，是很难得的学习资源。\n',
'<h2>Socket Programming in Python: Client, Server</h2>\n<a href="https://www.pubnub.com/blog/socket-programming-in-python-client-server-p2p/">Socket Programming in Python: Client, Server, and Peer Examples</a>\n',
'<h2>list all functions in a Python module</h2>\nTo get the docs on all the functions at once, interactively.\nprint(dir(os)) # show all functions\nfor i in dir(module): print(i # list out one by one)\nThe inspect module. \nAlso see the pydoc module, the help() function in the interactive interpreter and the pydoc command-line tool which generates the documentation you are after. \nhelp(os) \n',
'<h2>Python Functions</h2>\n<a href="https://www.youtube.com/watch?v=NE97ylAnrz4">Python Functions</a>\n',
'<h2>Python Control Flow</h2>\n<a href="Python Control Flow.html">Python Control Flow</a>\n',
'<h2>Python elegant way to read lines of file into list</h2>\nFor most cases, to read lines of file to a list\nwith open(fileName) as f:\n  lineList = f.readlines()\nIn this case, every element in the list contain a \n in the end the string, which would be extremely annoying in some cases.\nAnd there will be same problem if you use:\nlineList = list()\nwith open(fileName) as f:\n  for line in f:\n lineList.append(line)\nTo overcome this, use:\nlineList = [line.rstrip(\'\n\') for line in open(fileName)]\n',
'<h2>Call a function from another file in Python</h2>\nIf you have a file a.py and inside you have some functions:\ndef b():\n  # Something\n  return 1\ndef c():\n  # Something\n  return 2\nAnd you want to import them in z.py you have to write\nfrom a import b, c\n',
'<h2>Run JavaScript from Python</h2>\n<a href="https://pypi.org/project/Js2Py/" class="whitebut ">Js2Py Run JavaScript from Python</a>\n<a href="https://www.youtube.com/watch?v=ByjpBvpPp8Q" class="whitebut ">Run JavaScript from Python</a>\n',
'<h2>Python and Selenium Extract Local Storage</h2>\nNone of the high level programming languages invoke a browser instance, they request and extract pure HTML only. \nSo if we want to access the browser\'s local storage when scraping a page, we need to invoke both a browser instance and leverage a JavaScript interpreter to read the local storage. \nSelenium is the best solution.\nA possible replacement for Selenium is <em>PhantomJS</em>, running a headless browser.\n',
'<h2>JaveScript to iterate over localStorage browser object</h2>\nfor (var i = 0; i < localStorage.length; i++){\n key=localStorage.key(i); \n console.log(key+\': \'+localStorage.getItem(key));\n}\n',
'<h2>Advanced script</h2>\nAs mentioned <a href="http://stackoverflow.com/a/28118108/1230477">here</a> a HTML5 featured browser should also implement Array.prototype.map. \nSo script would be:\nArray.apply(0, new Array(localStorage.length)).map(function (o, i){\n return localStorage.key(i)+\':\'+localStorage.getItem(localStorage.key(i)); \n})\n',
'<h2>Python with Selenium script for setting up and scraping local storage</h2>\nfrom selenium import webdriver\ndriver = webdriver.Firefox() \nurl=\'http://www.w3schools.com/\'\ndriver.get(url)\nscriptArray="""localStorage.setItem("key1", \'new item\');\n      localStorage.setItem("key2", \'second item\'); \n			return Array.apply(0, new Array(localStorage.length)).map(function (o, i) {\n				return localStorage.getItem(localStorage.key(i)); })""" 	\nresult = driver.execute_script(scriptArray)\nprint(result)\n',
'<h2>Selenium</h2>\n<a href="https://www.youtube.com/watch?v=RuNolAh_4bU" class="whitebut ">Python Web-scraping with Selenium</a>\n<br>\n<div id="Seleniumtuttoc"><a href="#Seleniumtuttopic-0" target="_self" onclick="jumpto(0)">安装selenium库</a> <a href="#Seleniumtuttopic-1" target="_self" onclick="jumpto(1)">安装浏览器驱动</a> <a href="#Seleniumtuttopic-2" target="_self" onclick="jumpto(2)"><br><span class="orange">初始化浏览器对象</span></a> <a href="#Seleniumtuttopic-3" target="_self" onclick="jumpto(3)">访问页面</a> <a href="#Seleniumtuttopic-4" target="_self" onclick="jumpto(4)">设置浏览器大小</a> <a href="#Seleniumtuttopic-5" target="_self" onclick="jumpto(5)">刷新页面</a> <a href="#Seleniumtuttopic-6" target="_self" onclick="jumpto(6)">前进后退</a> <a href="#Seleniumtuttopic-7" target="_self" onclick="jumpto(7)"><br><span class="orange">id定位</span></a> <a href="#Seleniumtuttopic-8" target="_self" onclick="jumpto(8)">name定位</a> <a href="#Seleniumtuttopic-9" target="_self" onclick="jumpto(9)">class定位</a> <a href="#Seleniumtuttopic-10" target="_self" onclick="jumpto(10)">tag定位</a> <a href="#Seleniumtuttopic-11" target="_self" onclick="jumpto(11)">link定位</a> <a href="#Seleniumtuttopic-12" target="_self" onclick="jumpto(12)">partial定位</a> <a href="#Seleniumtuttopic-13" target="_self" onclick="jumpto(13)">xpath定位</a> <a href="#Seleniumtuttopic-14" target="_self" onclick="jumpto(14)">css定位</a> <a href="#Seleniumtuttopic-15" target="_self" onclick="jumpto(15)">find_element的By定位</a> <a href="#Seleniumtuttopic-16" target="_self" onclick="jumpto(16)">3.10. 多个元素</a> <a href="#Seleniumtuttopic-17" target="_self" onclick="jumpto(17)"><br><span class="orange">get_attribute获取属性</span></a> <a href="#Seleniumtuttopic-18" target="_self" onclick="jumpto(18)">获取文本</a> <a href="#Seleniumtuttopic-19" target="_self" onclick="jumpto(19)">获取其他属性</a> <a href="#Seleniumtuttopic-20" target="_self" onclick="jumpto(20)"><br><span class="orange">输入文本</span></a> <a href="#Seleniumtuttopic-21" target="_self" onclick="jumpto(21)">点击</a> <a href="#Seleniumtuttopic-22" target="_self" onclick="jumpto(22)">清除文本</a> <a href="#Seleniumtuttopic-23" target="_self" onclick="jumpto(23)">回车确认</a> <a href="#Seleniumtuttopic-24" target="_self" onclick="jumpto(24)">单选</a> <a href="#Seleniumtuttopic-25" target="_self" onclick="jumpto(25)">多选</a> <a href="#Seleniumtuttopic-26" target="_self" onclick="jumpto(26)">下拉框</a> <a href="#Seleniumtuttopic-27" target="_self" onclick="jumpto(27)"><br><span class="orange">Frame切换</span></a> <a href="#Seleniumtuttopic-28" target="_self" onclick="jumpto(28)">选项卡切换</a> <a href="#Seleniumtuttopic-29" target="_self" onclick="jumpto(29)"><br><span class="orange">左键</span></a> <a href="#Seleniumtuttopic-30" target="_self" onclick="jumpto(30)">右键</a> <a href="#Seleniumtuttopic-31" target="_self" onclick="jumpto(31)">双击</a> <a href="#Seleniumtuttopic-32" target="_self" onclick="jumpto(32)">拖拽</a> <a href="#Seleniumtuttopic-33" target="_self" onclick="jumpto(33)">悬停</a> <a href="#Seleniumtuttopic-34" target="_self" onclick="jumpto(34)"><br><span class="orange">强制等待</span></a> <a href="#Seleniumtuttopic-35" target="_self" onclick="jumpto(35)">隐式等待</a> <a href="#Seleniumtuttopic-36" target="_self" onclick="jumpto(36)">显式等待</a> <a href="#Seleniumtuttopic-37" target="_self" onclick="jumpto(37)"><br><span class="orange">运行JavaScript</span></a> <a href="#Seleniumtuttopic-38" target="_self" onclick="jumpto(38)">Cookie</a> <a href="#Seleniumtuttopic-39" target="_self" onclick="jumpto(39)">反屏蔽</a> </div></center>\nSelenium 是一个用于 Web应用程序测试的工具。\nSelenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera和Edge等。\n<k>0. 准备工作</k>\n在开始后续功能演示之前，我们需要先安装Chrome浏览器并配置好ChromeDriver，当然也需要安装selenium库！\n<h3 id="Seleniumtuttopic-0">安装selenium库</h3>pip install selenium\n<h3 id="Seleniumtuttopic-1">安装浏览器驱动</h3>\n其实，有两种方式安装浏览器驱动：一种是常见的手动安装，另一种则是利用第三方库自动安装。\n以下前提：大家都已经安装好了Chrome浏览器哈\n<k>手动安装</k>\n先查看本地Chrome浏览器版本：（两种方式均可）\n在浏览器的地址栏键入Chrome://version，即可查看浏览器版本号\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltr6SPznf6Q4buxJwOxw6NlZhO4NuMicz6GfUyXN1ibSjCWJUH3fv662hQ/640">\n或者点击Chrome菜单 <k>帮助</k>→<k>关于Google Chrome</k>，查看浏览器版本号\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltzc6TAPmaMGtkLzU8T3kfbFictCTd4qyAn0QycibFOC1SaGxT56Vs4Now/640">\n再选择对应版本号的驱动版本\n<blockquote>下载地址：https://chromedriver.storage.googleapis.com/index.html</blockquote>\n最后进行<k>环境变量配置</k>，也就是将对应的ChromeDriver的可执行文件chromedriver.exe文件拖到Python的Scripts目录下。\n注：当然也可以不这样做，但是在调用的时候指定chromedriver.exe<k>绝对路径</k>亦可。\n<k>自动安装</k>\n自动安装需要用到第三方库webdriver_manager，先安装这个库，然后调用对应的方法即可。\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom webdriver_manager.chrome import ChromeDriverManager\nbrowser = webdriver.Chrome(ChromeDriverManager().install())\nbrowser.get(\'http://www.baidu.com\')\nsearch = browser.find_element_by_id(\'kw\')\nsearch.send_keys(\'python\')\nsearch.send_keys(Keys.ENTER)\n# 关闭浏览器\nbrowser.close()\n在上述代码中，ChromeDriverManager().install()方法就是自动安装驱动的操作，它会自动获取当前浏览器的版本并去下载对应的驱动到本地。\n====== WebDriver manager ======\nCurrent google-chrome version is 96.0.4664\nGet LATEST chromedriver version for 96.0.4664 google-chrome\nThere is no [win32] chromedriver for browser  in cache\nTrying to download new driver from https://chromedriver.storage.googleapis.com/96.0.4664.45/chromedriver_win32.zip\nDriver has been saved in cache [C:\Users\Gdc\.wdm\drivers\chromedriver\win32\96.0.4664.45]\n如果本地已经有该浏览器渠道，则会提示其已存在。\n====== WebDriver manager ======\nCurrent google-chrome version is 96.0.4664\nGet LATEST driver version for 96.0.4664\nDriver [C:\Users\Gdc\.wdm\drivers\chromedriver\win32\96.0.4664.45\chromedriver.exe] found in cache\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltHoFicn1BaTYahgvUibfZdPaFPDngd7D5tgjHrYTB5EI3AMPawLQRzNNw/640">\n搞定以上准备工作，我们就可以开始本文正式内容的学习啦~\n<k>1. 基本用法</k>\n这节我们就从初始化浏览器对象、访问页面、设置浏览器大小、刷新页面和前进后退等基础操作。\n<h3 id="Seleniumtuttopic-2"><br><span class="orange">初始化浏览器对象</span></h3>\n在准备工作部分我们提到需要将浏览器渠道添加到环境变量或者指定绝对路径，前者可以直接初始化后者则需要进行指定。\nfrom selenium import webdriver\n# 初始化浏览器为chrome浏览器\nbrowser = webdriver.Chrome()\n# 指定绝对路径的方式\npath = r\'C:\Users\Gdc\.wdm\drivers\chromedriver\win32\96.0.4664.45\chromedriver.exe\'\nbrowser = webdriver.Chrome(path)\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltOM7Rol2LNSDXfKSIc2IuThk21ib3XX8q5J1HS0jAOxHmEMWuWIrWj0w/640">\n初始化浏览器对象\n可以看到以上是有界面的浏览器，我们还可以初始化浏览器为<k>无界面的浏览器</k>。\nfrom selenium import webdriver\n# 无界面的浏览器\noption = webdriver.ChromeOptions()\noption.add_argument("headless")\nbrowser = webdriver.Chrome(options=option)\n# 访问百度首页\nbrowser.get(r\'https://www.baidu.com/\')\n# 截图预览\nbrowser.get_screenshot_as_file(\'截图.png\')\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltqAc2jFS7wl38uXHkhKrygUlz1H52ECdTR8Hx1OCTz1PL9CibtoLFHIg/640">\n截图\n完成浏览器对象的初始化后并将其赋值给了browser对象，接下来我们就可以调用browser来执行各种方法模拟浏览器的操作了。\n<h3 id="Seleniumtuttopic-3">访问页面</h3>\n进行页面访问使用的是get方法，传入参数为待访问页面的URL地址即可。\nfrom selenium import webdriver\n# 初始化浏览器为chrome浏览器\nbrowser = webdriver.Chrome()\n# 访问百度首页\nbrowser.get(r\'https://www.baidu.com/\')\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltFPibuMAeXaCRq1OSsuts9g59ibVqic3icNnLBjUJz3RgHKN3v7hW7Fe1dg/640">\n<h3 id="Seleniumtuttopic-4">设置浏览器大小</h3>set_window_size()方法可以用来设置浏览器大小（就是分辨率），而maximize_window则是设置浏览器为全屏！\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\n# 设置浏览器大小：全屏\nbrowser.maximize_window()   \nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 设置分辨率 500*500\nbrowser.set_window_size(500,500)  \ntime.sleep(2)\n# 设置分辨率 1000*800\nbrowser.set_window_size(1000,800) \ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n这里就不截图了，大家自行演示看效果哈~\n<h3 id="Seleniumtuttopic-5">刷新页面</h3>\n刷新页面是我们在浏览器操作时很常用的操作，这里refresh()方法可以用来进行浏览器页面刷新。\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\n# 设置浏览器全屏\nbrowser.maximize_window()   \nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\ntry:\n # 刷新页面\n browser.refresh()  \n print(\'刷新页面\')\nexcept Exception as e:\n print(\'刷新失败\')\n   \n# 关闭浏览器\nbrowser.close()\n大家也是自行演示看效果哈，同F5快捷键。\n<h3 id="Seleniumtuttopic-6">前进后退</h3>\n前进后退也是我们在使用浏览器时非常常见的操作，这里forward()方法可以用来实现前进，back()可以用来实现后退。\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\n# 设置浏览器全屏\nbrowser.maximize_window()   \nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 打开淘宝页面\nbrowser.get(r\'https://www.taobao.com\')  \ntime.sleep(2)\n# 后退到百度页面\nbrowser.back()  \ntime.sleep(2)\n# 前进的淘宝页面\nbrowser.forward() \ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<k>2. 获取页面基础属性</k>\n当我们用selenium打开某个页面，有一些基础属性如网页标题、网址、浏览器名称、页面源码等信息。\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\') \n# 网页标题\nprint(browser.title)\n# 当前网址\nprint(browser.current_url)\n# 浏览器名称\nprint(browser.name)\n# 网页源码\nprint(browser.page_source)\n输出如下：\n百度一下，你就知道\nhttps://www.baidu.com/\nchrome\n&lt;html&gt;&lt;head&gt;&lt;script async="" src="https://passport.baidu.com/passApi/js/wrapper.js?cdnversion=1640515789507&amp;_=1640515789298"&gt;&lt;/script&gt;&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"&gt;&lt;meta content="always" name="referrer"&gt;&lt;meta name="theme-color"..."\n需要注意的是，这里的页面源码我们就可以用正则表达式、Bs4、xpath以及pyquery等工具进行解析提取想要的信息了。\n<k>3. 定位页面元素</k>\n我们在实际使用浏览器的时候，很重要的操作有输入文本、点击确定等等。对此，Selenium提供了一系列的方法来方便我们实现以上操作。常说的8种定位页面元素的操作方式，我们一一演示一下！\n我们以百度首页的搜索框节点为例，<k>搜索python</k>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltP9Oa7QrsJsXc6SOZTqnMJ1GYNzB2b2VHE8s3gsLWmHjVBHgzZWRTnQ/640">\n搜索框\n搜索框的html结构：\n&lt;input id="kw" name="wd" class="s_ipt" value="" maxlength="255" autocomplete="off"&gt;\n<h3 id="Seleniumtuttopic-7"><br><span class="orange">id定位</span></h3>find_element_by_id()根据id属性获取，这里id属性是 kw\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 在搜索框输入 python\nbrowser.find_element_by_id(\'kw\').send_keys(\'python\')\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltvXbRK2ncrlXE3tkuTezSI3XszFkXHOQrLFKBG0ftCXQyfJYs5LNTXA/640">\n<h3 id="Seleniumtuttopic-8">name定位</h3>find_element_by_name()根据name属性获取，这里name属性是 wd\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 在搜索框输入 python\nbrowser.find_element_by_name(\'wd\').send_keys(\'python\')\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-9">class定位</h3>find_element_by_class_name()根据class属性获取，这里class属性是s_ipt\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 在搜索框输入 python\nbrowser.find_element_by_class_name(\'s_ipt\').send_keys(\'python\')\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-10">tag定位</h3>\n我们知道HTML是通过tag来定义功能的，比如input是输入，table是表格等等。每个元素其实就是一个tag，一个tag往往用来定义一类功能，我们查看百度首页的html代码，可以看到有<k>很多同类</k>tag，所以其实很难通过tag去区分不同的元素。\nfind_element_by_tag_name()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 在搜索框输入 python\nbrowser.find_element_by_tag_name(\'input\').send_keys(\'python\')\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n由于存在多个input，以上代码会报错。\n<h3 id="Seleniumtuttopic-11">link定位</h3>\n这种方法顾名思义就是用来定位文本链接的，比如百度首页上方的分类模块链接。\nfind_element_by_link_text()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltKQwpCbw19yJU7ubF1jXTjCnex1vHrxsnbicxqYe3K3j3g2LNmEUHdDQ/640">\n以新闻为例\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 点击新闻 链接\nbrowser.find_element_by_link_text(\'新闻\').click()\ntime.sleep(2)\n# 关闭浏览器全部页面\nbrowser.quit()\n<h3 id="Seleniumtuttopic-12">partial定位</h3>\n有时候一个超链接的文本很长，我们如果全部输入，既麻烦，又显得代码很不美观，这时候我们就可以只截取一部分字符串，用这种方法模糊匹配了。\nfind_element_by_partial_link_text()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 点击新闻 链接\nbrowser.find_element_by_partial_link_text(\'闻\').click()\ntime.sleep(2)\n# 关闭浏览器全部页面\nbrowser.quit()\n<h3 id="Seleniumtuttopic-13">xpath定位</h3>\n前面介绍的几种定位方法都是在理想状态下，有一定使用范围的，那就是：在当前页面中，每个元素都有一个<k>唯一</k>的id或name或class或超链接文本的属性，那么我们就可以通过这个唯一的属性值来定位他们。\n但是在实际工作中并非有这么美好，那么这个时候我们就只能通过xpath或者css来定位了。\nfind_element_by_xpath()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 在搜索框输入 python\nbrowser.find_element_by_xpath("//*[@id=\'kw\']").send_keys(\'python\')\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-14">css定位</h3>\n这种方法相对xpath要简洁些，定位速度也要快些。\nfind_element_by_css_selector()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 在搜索框输入 python\nbrowser.find_element_by_css_selector(\'#kw\').send_keys(\'python\')\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-15">find_element的By定位</h3>\n除了上述的8种定位方法，Selenium还提供了一个通用的方法find_element()，这个方法有两个参数：定位方式和定位值。\n# 使用前先导入By类\nfrom selenium.webdriver.common.by import By\n以上的操作可以等同于以下：\nbrowser.find_element(By.ID,\'kw\')\nbrowser.find_element(By.NAME,\'wd\')\nbrowser.find_element(By.CLASS_NAME,\'s_ipt\')\nbrowser.find_element(By.TAG_NAME,\'input\')\nbrowser.find_element(By.LINK_TEXT,\'新闻\')\nbrowser.find_element(By.PARTIAL_LINK_TEXT,\'闻\')\nbrowser.find_element(By.XPATH,\'//*[@id="kw"]\')\nbrowser.find_element(By.CSS_SELECTOR,\'#kw\')\n<h3 id="Seleniumtuttopic-16">3.10. 多个元素</h3>\n如果定位的目标元素在网页中不止一个，那么则需要用到find_elements，得到的结果会是列表形式。简单来说，就是element后面多了复数标识s，其他操作一致。\n<k>4. 获取页面元素属性</k>\n既然我们有很多方式来定位页面的元素，那么接下来就可以考虑获取以下元素的属性了，尤其是用Selenium进行<k>网络爬虫</k>的时候。\n<h3 id="Seleniumtuttopic-17"><br><span class="orange">get_attribute获取属性</span></h3>\n以百度首页的logo为例，获取logo相关属性\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltjpEkLP0Y82fsI3s9tr8U0q61xwqIcicM6DMfXiaWQeIfbnNsrswnmKtg/640">\n&lt;img hidefocus="true" id="s_lg_img" class="index-logo-src" src="//www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" width="270" height="129" onerror="this.src=\'//www.baidu.com/img/flexible/logo/pc/index.png\';this.onerror=null;" usemap="#mp"&gt;\n<k>获取logo的图片地址</k>\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \nlogo = browser.find_element_by_class_name(\'index-logo-src\')\nprint(logo)\nprint(logo.get_attribute(\'src\'))\n# 关闭浏览器\nbrowser.close()\n输出：\n&lt;selenium.webdriver.remote.webelement.WebElement (session="e95b18c43a330745af019e0041f0a8a4", element="7dad5fc0-610b-45b6-b543-9e725ee6cc5d")&gt;\nhttps://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png\n<h3 id="Seleniumtuttopic-18">获取文本</h3>\n以热榜为例，获取热榜文本和链接\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tlt2GDicwrjv2XUaaaibHW3jknVpqRDicyKpCabyKhdWLM2egQHdsz7yzKtQ/640">\n&lt;a class="title-content tag-width c-link c-font-medium c-line-clamp1" href="https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=各地贯彻十九届六中全会精神纪实&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;sa=fyb_n_homepage&amp;hisfilter=1" target="_blank"&gt;&lt;span class="title-content-index c-index-single c-index-single-hot1"&gt;1&lt;/span&gt;&lt;span class="title-content-title"&gt;各地贯彻十九届六中全会精神纪实&lt;/span&gt;&lt;/a&gt;\n获取热榜的<k>文本</k>，用的是text属性，直接调用即可\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \nlogo = browser.find_element_by_css_selector(\'#hotsearch-content-wrapper &gt; li:nth-child(1) &gt; a\')\nprint(logo.text)\nprint(logo.get_attribute(\'href\'))\n# 关闭浏览器\nbrowser.close()\n输出：\n1各地贯彻十九届六中全会精神纪实\nhttps://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=各地贯彻十九届六中全会精神纪实&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;sa=fyb_n_homepage&amp;hisfilter=1\n<h3 id="Seleniumtuttopic-19">获取其他属性</h3>\n除了属性和文本值外，还有id、位置、标签名和大小等属性。\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \nlogo = browser.find_element_by_class_name(\'index-logo-src\')\nprint(logo.id)\nprint(logo.location)\nprint(logo.tag_name)\nprint(logo.size)\n# 关闭浏览器\nbrowser.close()\n输出：\n6af39c9b-70e8-4033-8a74-7201ae09d540\n{\'x\': 490, \'y\': 46}\nimg\n{\'height\': 129, \'width\': 270}\n<k>5. 页面交互操作</k>\n页面交互就是在浏览器的各种操作，比如上面演示过的输入文本、点击链接等等，还有像清除文本、回车确认、单选框与多选框选中等。\n<h3 id="Seleniumtuttopic-20"><br><span class="orange">输入文本</span></h3>\n其实，在之前的小节中我们有用过此操作。\nsend_keys()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 定位搜索框\ninput = browser.find_element_by_class_name(\'s_ipt\')\n# 输入python\ninput.send_keys(\'python\')\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-21">点击</h3>\n同样，我们也用过这个点击操作。\nclick()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 选中新闻按钮\nclick = browser.find_element_by_link_text(\'新闻\')\n# 点击之\nclick.click()\ntime.sleep(2)\n# 关闭浏览器全部页面\nbrowser.quit()\n<h3 id="Seleniumtuttopic-22">清除文本</h3>\n既然有输入，这里也就有清除文本啦。\nclear()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 定位搜索框\ninput = browser.find_element_by_class_name(\'s_ipt\')\n# 输入python\ninput.send_keys(\'python\')\ntime.sleep(2)\n# 清除python\ninput.clear()\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-23">回车确认</h3>\n比如，在搜索框输入文本python，然后回车就出查询操作结果的情况。\nsubmit()\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 定位搜索框\ninput = browser.find_element_by_class_name(\'s_ipt\')\n# 输入python\ninput.send_keys(\'python\')\ntime.sleep(2)\n# 回车查询\ninput.submit()\ntime.sleep(5)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-24">单选</h3>\n单选比较好操作，<k>先定位</k>需要单选的某个元素，然后<k>点击</k>一下即可。\n<h3 id="Seleniumtuttopic-25">多选</h3>\n多选好像也比较容易，<k>依次定位</k>需要选择的元素，<k>点击</k>即可。\n<h3 id="Seleniumtuttopic-26">下拉框</h3>\n下拉框的操作相对复杂一些，需要用到Select模块。\n先导入该类\nfrom selenium.webdriver.support.select import Select\n在select模块中有以下定位方法\n<blockquote>\n\'\'\'1、三种选择某一选项项的方法\'\'\'\nselect_by_index()     # 通过索引定位；注意：index索引是从“0”开始。\nselect_by_value()     # 通过value值定位，value标签的属性值。\nselect_by_visible_text() # 通过文本值定位，即显示在下拉框的值。\n\'\'\'2、三种返回options信息的方法\'\'\'\noptions      # 返回select元素所有的options\nall_selected_options  # 返回select元素中所有已选中的选项\nfirst_selected_options   # 返回select元素中选中的第一个选项      \n\'\'\'3、四种取消选中项的方法\'\'\'\ndeselect_all    # 取消全部的已选择项\ndeselect_by_index     # 取消已选中的索引项\ndeselect_by_value     # 取消已选中的value值\ndeselect_by_visible_text # 取消已选中的文本值\n</blockquote>\n我们来进行演示一波，由于暂时没找到合适的网页，我这边写了一个简单的网页本地测试（文件存为 帅哥.html)\n&lt;html&gt;\n&lt;body&gt;\n&lt;form&gt;\n&lt;select name="帅哥"&gt;\n&lt;option value="才哥"&gt;才哥&lt;/option&gt;\n&lt;option value="小明" selected=""&gt;小明&lt;/option&gt;\n&lt;option value="小华"&gt;小华&lt;/option&gt;\n&lt;option value="草儿"&gt;小草&lt;/option&gt;\n&lt;/select&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n然后，再演示<k>下拉框的不同选择的方式</k>\nfrom selenium import webdriver\nfrom selenium.webdriver.support.select import Select\nimport time\nurl = \'file:///C:/Users/Gdc/Desktop/帅哥.html\'\nbrowser = webdriver.Chrome()\nbrowser.get(url)\ntime.sleep(2)\n# 根据索引选择\nSelect(browser.find_element_by_name("帅哥")).select_by_index("2")\ntime.sleep(2)\n# 根据value值选择\nSelect(browser.find_element_by_name("帅哥")).select_by_value("草儿")\ntime.sleep(2)\n# 根据文本值选择\nSelect(browser.find_element_by_name("帅哥")).select_by_visible_text("才哥")\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_gif/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltCs25zN9tH45ecHyT8w4rHQN0bZtlvQ13BwFxBR56Y9NCEzRfbdpibLQ/640">\n下拉框\n<k>6. 多窗口切换</k>\n比如同一个页面的不同子页面的节点元素获取操作，不同选项卡之间的切换以及不同浏览器窗口之间的切换操作等等。\n<h3 id="Seleniumtuttopic-27"><br><span class="orange">Frame切换</span></h3>Selenium打开一个页面之后，默认是在父页面进行操作，此时如果这个页面还有子页面，想要获取子页面的节点元素信息则需要切换到子页面进行擦走，这时候switch_to.frame()就来了。如果想回到父页面，用switch_to.parent_frame()即可。\n<h3 id="Seleniumtuttopic-28">选项卡切换</h3>\n我们在访问网页的时候会打开很多个页面，在Selenium中提供了一些方法方便我们对这些页面进行操作。\n<blockquote>\ncurrent_window_handle：获取当前窗口的句柄。\nwindow_handles：返回当前浏览器的所有窗口的句柄。\nswitch_to_window()：用于切换到对应的窗口。\n</blockquote>\nfrom selenium import webdriver\nimport time\nbrowser = webdriver.Chrome()\n# 打开百度\nbrowser.get(\'http://www.baidu.com\')\n# 新建一个选项卡\nbrowser.execute_script(\'window.open()\')\nprint(browser.window_handles)\n# 跳转到第二个选项卡并打开知乎\nbrowser.switch_to.window(browser.window_handles[1])\nbrowser.get(\'http://www.zhihu.com\')\n# 回到第一个选项卡并打开淘宝（原来的百度页面改为了淘宝）\ntime.sleep(2)\nbrowser.switch_to.window(browser.window_handles[0])\nbrowser.get(\'http://www.taobao.com\')\n<k>7. 模拟鼠标操作</k>\n既然是模拟浏览器操作，自然也就需要能模拟鼠标的一些操作了，这里需要导入ActionChains 类。\nfrom selenium.webdriver.common.action_chains import ActionChains\n<h3 id="Seleniumtuttopic-29"><br><span class="orange">左键</span></h3>\n这个其实就是页面交互操作中的点击click()操作。\n<h3 id="Seleniumtuttopic-30">右键</h3>context_click()\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 定位到要右击的元素，这里选的新闻链接\nright_click = browser.find_element_by_link_text(\'新闻\')\n# 执行鼠标右键操作\nActionChains(browser).context_click(right_click).perform()\ntime.sleep(2)\n# 关闭浏览器\nbrowser.close()\n在上述操作中\n<blockquote>\nActionChains(browser)：调用ActionChains()类，并将浏览器驱动browser作为参数传入\ncontext_click(right_click)：模拟鼠标双击，需要传入指定元素定位作为参数\nperform()：执行ActionChains()中储存的所有操作，可以看做是执行之前一系列的操作\n</blockquote><h3 id="Seleniumtuttopic-31">双击</h3>double_click()\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nbrowser.get(r\'https://www.baidu.com\')  \ntime.sleep(2)\n# 定位到要双击的元素\ndouble_click = browser.find_element_by_css_selector(\'#bottom_layer &gt; div &gt; p:nth-child(8) &gt; span\')\n# 双击\nActionChains(browser).double_click(double_click).perform()\ntime.sleep(15)\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltVfUiaPns1h2KbibrMpmsmTkSvyoqkIiaMjaRteG85sqUkJu8GJsJTDCicg/640">\n<h3 id="Seleniumtuttopic-32">拖拽</h3>drag_and_drop(source,target)拖拽操作嘛，开始位置和结束位置需要被指定，这个常用于滑块类验证码的操作之类。\n我们以菜鸟教程的一个案例来进行演示\n<blockquote>\nhttps://www.runoob.com/try/try.php?filename=jqueryui-api-droppable\n</blockquote>\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nurl = \'https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable\'\nbrowser.get(url)  \ntime.sleep(2)\nbrowser.switch_to.frame(\'iframeResult\')\n# 开始位置\nsource = browser.find_element_by_css_selector("#draggable")\n# 结束位置\ntarget = browser.find_element_by_css_selector("#droppable")\n# 执行元素的拖放操作\nactions = ActionChains(browser)\nactions.drag_and_drop(source, target)\nactions.perform()\n# 拖拽\ntime.sleep(15)\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_gif/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltEjocOXndLKfutb5DOzjOAfdIG0nlCJnFz7BAr8ZNRAcS4hKr8tHkaw/640">\n拖拽\n<h3 id="Seleniumtuttopic-33">悬停</h3>move_to_element()\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium import webdriver\nimport time  \nbrowser = webdriver.Chrome()\nurl = \'https://www.baidu.com\'\nbrowser.get(url)  \ntime.sleep(2)\n# 定位悬停的位置\nmove = browser.find_element_by_css_selector("#form &gt; span.bg.s_ipt_wr.new-pmd.quickdelete-wrap &gt; span.soutu-btn")\n# 悬停操作\nActionChains(browser).move_to_element(move).perform()\ntime.sleep(5)\n# 关闭浏览器\nbrowser.close()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tltqD70xAWuVPsYbiat3SwXY8K7liczQA0N0D8IzKfrjnkS8qnqTpvHXa4A/640">\n悬停效果\n<k>8. 模拟键盘操作</k>\nselenium中的Keys()类提供了大部分的键盘操作方法，通过send_keys()方法来模拟键盘上的按键。\n引入Keys类\nfrom selenium.webdriver.common.keys import Keys\n常见的键盘操作\n<blockquote>\nsend_keys(Keys.BACK_SPACE)：删除键(BackSpace)\nsend_keys(Keys.SPACE)：空格键(Space)\nsend_keys(Keys.TAB)：制表键(TAB)\nsend_keys(Keys.ESCAPE)：回退键(ESCAPE)\nsend_keys(Keys.ENTER)：回车键(ENTER)\nsend_keys(Keys.CONTRL,\'a\')：全选(Ctrl+A)\nsend_keys(Keys.CONTRL,\'c\')：复制(Ctrl+C)\nsend_keys(Keys.CONTRL,\'x\')：剪切(Ctrl+X)\nsend_keys(Keys.CONTRL,\'v\')：粘贴(Ctrl+V)\nsend_keys(Keys.F1)：键盘F1\n.....\nsend_keys(Keys.F12)：键盘F12\n</blockquote>\n实例操作演示：\n<k>定位需要操作的元素，然后操作即可！</k>\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium import webdriver\nimport time\nbrowser = webdriver.Chrome()\nurl = \'https://www.baidu.com\'\nbrowser.get(url)  \ntime.sleep(2)\n# 定位搜索框\ninput = browser.find_element_by_class_name(\'s_ipt\')\n# 输入python\ninput.send_keys(\'python\')\ntime.sleep(2)\n# 回车\ninput.send_keys(Keys.ENTER)\ntime.sleep(5)\n# 关闭浏览器\nbrowser.close()\n<k>9. 延时等待</k>\n如果遇到使用ajax加载的网页，页面元素可能不是同时加载出来的，这个时候尝试在get方法执行完成时获取网页源代码可能并非浏览器完全加载完成的页面。所以，这种情况下需要设置延时等待一定时间，确保全部节点都加载出来。\n三种方式可以来玩玩：强制等待、隐式等待和显式等待\n<h3 id="Seleniumtuttopic-34"><br><span class="orange">强制等待</span></h3>\n就很简单了，直接time.sleep(n)强制等待n秒，在执行get方法之后执行。\n<h3 id="Seleniumtuttopic-35">隐式等待</h3>implicitly_wait()设置等待时间，如果到时间有元素节点没有加载出来，就会抛出异常。\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\n# 隐式等待，等待时间10秒\nbrowser.implicitly_wait(10)  \nbrowser.get(\'https://www.baidu.com\')\nprint(browser.current_url)\nprint(browser.title)\n# 关闭浏览器\nbrowser.close()\n<h3 id="Seleniumtuttopic-36">显式等待</h3>\n设置一个等待时间和一个条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。\nfrom selenium import webdriver\nfrom selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\nimport time\nbrowser = webdriver.Chrome()\nbrowser.get(\'https://www.baidu.com\')\n# 设置等待时间10s\nwait = WebDriverWait(browser, 10)\n# 设置判断条件：等待id=\'kw\'的元素加载完成\ninput = wait.until(EC.presence_of_element_located((By.ID, \'kw\')))\n# 在关键词输入：关键词\ninput.send_keys(\'Python\')\n# 关闭浏览器\ntime.sleep(2)\nbrowser.close()\n<k>WebDriverWait的参数说明</k>：\n<blockquote>\nWebDriverWait(driver,timeout,poll_frequency=0.5,ignored_exceptions=None)\ndriver: 浏览器驱动\ntimeout: 超时时间，等待的最长时间（同时要考虑隐性等待时间）\npoll_frequency: 每次检测的间隔时间，默认是0.5秒\nignored_exceptions:超时后的异常信息，默认情况下抛出NoSuchElementException异常\nuntil(method,message=\'\')\nmethod: 在等待期间，每隔一段时间调用这个传入的方法，直到返回值不是False\nmessage: 如果超时，抛出TimeoutException，将message传入异常\nuntil_not(method,message=\'\')\nuntil_not 与until相反，until是当某元素出现或什么条件成立则继续执行，until_not是当某元素消失或什么条件不成立则继续执行，参数也相同。\n</blockquote>\n<k>其他等待条件</k>\nfrom selenium.webdriver.support import expected_conditions as EC\n# 判断标题是否和预期的一致\ntitle_is\n# 判断标题中是否包含预期的字符串\ntitle_contains\n# 判断指定元素是否加载出来\npresence_of_element_located\n# 判断所有元素是否加载完成\npresence_of_all_elements_located\n# 判断某个元素是否可见. 可见代表元素非隐藏，并且元素的宽和高都不等于0，传入参数是元组类型的locator\nvisibility_of_element_located\n# 判断元素是否可见，传入参数是定位后的元素WebElement\nvisibility_of\n# 判断某个元素是否不可见，或是否不存在于DOM树\ninvisibility_of_element_located\n# 判断元素的 text 是否包含预期字符串\ntext_to_be_present_in_element\n# 判断元素的 value 是否包含预期字符串\ntext_to_be_present_in_element_value\n#判断frame是否可切入，可传入locator元组或者直接传入定位方式：id、name、index或WebElement\nframe_to_be_available_and_switch_to_it\n#判断是否有alert出现\nalert_is_present\n#判断元素是否可点击\nelement_to_be_clickable\n# 判断元素是否被选中,一般用在下拉列表，传入WebElement对象\nelement_to_be_selected\n# 判断元素是否被选中\nelement_located_to_be_selected\n# 判断元素的选中状态是否和预期一致，传入参数：定位后的元素，相等返回True，否则返回False\nelement_selection_state_to_be\n# 判断元素的选中状态是否和预期一致，传入参数：元素的定位，相等返回True，否则返回False\nelement_located_selection_state_to_be\n#判断一个元素是否仍在DOM中，传入WebElement对象，可以判断页面是否刷新了\nstaleness_of\n<k>10. 其他</k>\n补充一些\n<h3 id="Seleniumtuttopic-37"><br><span class="orange">运行JavaScript</span></h3>\n还有一些操作，比如下拉进度条，模拟javaScript，使用execute_script方法来实现。\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\n# 知乎发现页\nbrowser.get(\'https://www.zhihu.com/explore\')\nbrowser.execute_script(\'window.scrollTo(0, document.body.scrollHeight)\')\nbrowser.execute_script(\'alert("To Bottom")\')\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/vQr6oPKZqgtYTcTKjJELjQz8ibE6O3tlticUkkCNfXJoapYibOCzoKrWgqxW20SbIGB4dZJVkDuM1nAY7w5gNbPNQ/640">\n<h3 id="Seleniumtuttopic-38">Cookie</h3>\n在selenium使用过程中，还可以很方便对Cookie进行获取、添加与删除等操作。\nfrom selenium import webdriver\nbrowser = webdriver.Chrome()\n# 知乎发现页\nbrowser.get(\'https://www.zhihu.com/explore\')\n# 获取cookie\nprint(f\'Cookies的值：{browser.get_cookies()}\')\n# 添加cookie\nbrowser.add_cookie({\'name\':\'才哥\', \'value\':\'帅哥\'})\nprint(f\'添加后Cookies的值：{browser.get_cookies()}\')\n# 删除cookie\nbrowser.delete_all_cookies()\nprint(f\'删除后Cookies的值：{browser.get_cookies()}\')\n输出：\nCookies的值：[{\'domain\': \'.zhihu.com\', \'httpOnly\': False, \'name\': \'Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49\', \'path\': \'/\', \'secure\': False, \'value\': \'1640537860\'}, {\'domain\': \'.zhihu.com\', ...]\n添加后Cookies的值：[{\'domain\': \'www.zhihu.com\', \'httpOnly\': False, \'name\': \'才哥\', \'path\': \'/\', \'secure\': True, \'value\': \'帅哥\'}, {\'domain\': \'.zhihu.com\', \'httpOnly\': False, \'name\': \'Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49\', \'path\': \'/\', \'secure\': False, \'value\': \'1640537860\'}, {\'domain\': \'.zhihu.com\',...]\n删除后Cookies的值：[]\n<h3 id="Seleniumtuttopic-39">反屏蔽</h3>\n发现美团直接给Selenium给屏蔽了，不知道怎么搞！！\n',
'<h2>Python bindings alternative to Python+Selenium</h2>\nSome might argue Selenium is inefficient for only local storage extracting. \nIf you think Selenium is too bulky, you might want to try a Python binding with a development framework for desktop, ex. <a href="https://riverbankcomputing.com/software/pyqt/intro" rel="nofollow">PyQt</a>. \n',
'<h2>execute_script</h2>\nPython doesn\'t provide a way to directly read/write the local storage, but it can be done with <b>execute_script</b>.\ndriver.execute_script("window.localStorage;")\nor:\nfrom selenium import webdriver\nwd = webdriver.Firefox()\nwd.get("http://localhost/foo/bar")\nwd.execute_script("return localStorage.getItem(\'foo\')")\nor:\ndriver.execute_script("window.localStorage.setItem(\'key\',\'value\');");\ndriver.execute_script("window.localStorage.getItem(\'key\');");\nor define class:\nclass LocalStorage:\n def __init__(self, driver) :\n  self.driver = driver\n def __len__(self):\n  return self.driver.execute_script("return window.localStorage.length;")\n def items(self) :\n  return self.driver.execute_script( \\n   "var ls = window.localStorage, items = {}; " \\n   "for (var i = 0, k; i < ls.length; ++i) " \\n   "  items[k = ls.key(i)] = ls.getItem(k); " \\n   "return items; ")\n def keys(self) :\n  return self.driver.execute_script( \\n   "var ls = window.localStorage, keys = []; " \\n   "for (var i = 0; i < ls.length; ++i) " \\n   "  keys[i] = ls.key(i); " \\n   "return keys; ")\n def get(self, key):\n  return self.driver.execute_script("return window.localStorage.getItem(arguments[0]);", key)\n def set(self, key, value):\n  self.driver.execute_script("window.localStorage.setItem(arguments[0], arguments[1]);", key, value)\n def has(self, key):\n  return key in self.keys()\n def remove(self, key):\n  self.driver.execute_script("window.localStorage.removeItem(arguments[0]);", key)\n def clear(self):\n  self.driver.execute_script("window.localStorage.clear();")\n def __getitem__(self, key) :\n  value = self.get(key)\n  if value is None :\n    raise KeyError(key)\n  return value\n def __setitem__(self, key, value):\n  self.set(key, value)\n def __contains__(self, key):\n  return key in self.keys()\n def __iter__(self):\n  return self.items().__iter__()\n def __repr__(self):\n  return self.items().__str__()\nUsage example:\n# get the local storage\nstorage = LocalStorage(driver)\n# set an item\nstorage["mykey"] = 1234\nstorage.set("mykey2", 5678)\n# get an item\nprint(storage["mykey"])   # raises a KeyError if the key is missing\nprint(storage.get("mykey"))  # returns None if the key is missing\n# delete an item\nstorage.remove("mykey")\n# iterate items\nfor key, value in storage.items():\n  print("%s: %s" % (key, value))\n# delete items\nstorage.clear()\n',
'<h2>to list all python packages installed</h2>\nAs of version 1.3 of pip you can now use \n<i>pip list</i>\nUsing help function\nhelp("modules")\nusing python-pip\npip freeze \npip freeze will output a list of installed packages and their versions.\nIt also allows you to write those packages to a file that can later be used to set up a new environment.\n',
'<h2>20 Python libraries you can\'t live without</h2>\nRequests	Scrapy	wxPython	Pillow	SQLAlchemy	BeautifulSoup	Twisted\nNumPy	SciPy	matplotlib	Pygame	Pyglet	pyQT	pyGtk	Scapy\npywin32	nltk	nose	SymPy	IPython\n1. Requests. \n2. Scrapy. must have library in webscraping\n3. wxPython. A gui toolkit for python. I have primarily used it in place of tkinter.\n4. Pillow. A friendly fork of PIL (Python Imaging Library). It is more user friendly than PIL and is a must have for anyone who works with images.\n5. SQLAlchemy. A database library. Many love it and many hate it.\n6. BeautifulSoup. I know it’s slow but this xml and html parsing library is very useful for beginners.\n7. Twisted. The most important tool for any network application developer. It has a very beautiful api.\n8. NumPy. provides advance math functionalities to python.\n9. SciPy. When we talk about NumPy then we have to talk about scipy. It is a library of algorithms and mathematical tools for python and has caused many scientists to switch from ruby to python.\n10. matplotlib. A numerical plotting library. It is very useful for any data scientist or any data analyzer.\n11. Pygame. game development.\n12. Pyglet. A 3d animation and game creation engine. This is the engine in which the famous python port of minecraft was made\n13. pyQT. A GUI toolkit for python\n14. pyGtk. Another python GUI library\n15. Scapy. A packet sniffer and analyzer for python made in python.\n16. pywin32. A python library which provides some useful methods and classes for interacting with windows.\n17. nltk. Natural Language Toolkit – I realize most people won’t be using this one, but it’s generic enough. It is a very useful library if you want to manipulate strings. But it’s capacity is beyond that. Do check it out.\n18. nose. A testing framework for python. It is used by millions of python developers. It is a must have if you do test driven development.\n19. SymPy. SymPy can do algebraic evaluation, differentiation, expansion, complex numbers, etc. It is contained in a pure Python distribution.\n20. IPython. It is a python prompt on steroids. It has completion, history, shell capabilities, and a lot more. Make sure that you take a look at it.\nInstalled Python packages:\nIPython    brain_curses  lazy_object_proxy   sqlite3\nPdbSublimeTextSupport brain_dateutil   lesscpy    sre_compile\nPyInstaller   brain_fstrings   lib2to3    sre_constants\nPyQt5      brain_functools  libfuturize   sre_parse\nRadiobutton   brain_gi   libpasteurize    ssl\n__future__    brain_hashlib    linecache     sspi\n_ast    brain_http    lineedit   sspicon\n_asyncio   brain_io   locale     stat\n_asyncio_d    brain_mechanize  logging    statistics\n_bisect    brain_multiprocessing lzma    storemagic\n_blake2    brain_namedtuple_enum macpath    string\n_bootlocale   brain_nose    macurl2path   stringprep\n_bz2    brain_numpy   mailbox    struct\n_bz2_d     brain_pkg_resources mailcap    subprocess\n_codecs    brain_pytest  markupsafe    sunau\n_codecs_cn    brain_qt   marshal    symbol\n_codecs_hk    brain_random  math    sympy\n_codecs_iso2022  brain_re   matplotlib    sympyprinting\n_codecs_jp    brain_six     mccabe     symtable\n_codecs_kr    brain_ssl     mimetypes     sys\n_codecs_tw    brain_subprocess mistune    sysconfig\n_collections  brain_threading  mmap    tabnanny\n_collections_abc brain_typing  mmapfile   tarfile\n_compat_pickle   brain_uuid    mmsystem   telnetlib\n_compression  builtins   modulefinder  tempfile\n_csv    bz2     more_itertools   tensorflow\n_ctypes    cProfile   mpmath     terminado\n_ctypes_d     cachetools    msilib     test\n_ctypes_test  calendar   msvcrt     testpath\n_ctypes_test_d   certifi    multiprocessing  tests\n_datetime     cgi     nbconvert     textwrap\n_decimal   cgitb      nbformat   this\n_decimal_d    chardet    netbios    threading\n_dummy_thread    chunk      netrc      time\n_elementtree  click      nntplib    timeit\n_elementtree_d   cmath      nose    timer\n_findvs    cmd     notebook   tkinter\n_functools    code    nt      token\n_hashlib   codecs     ntpath     tokenize\n_hashlib_d    codeop     ntsecuritycon    toml\n_heapq     collections   nturl2path    tornado\n_imp    colorama   numbers    trace\n_io     colorsys   numpy      traceback\n_json      commctrl   odbc    tracemalloc\n_locale    compileall    opcode     traitlets\n_lsprof    concurrent    operator   tty\n_lzma      configparser  optparse   turtle\n_lzma_d    contextlib    ordlookup     turtledemo\n_markupbase   copy    os      typed_ast\n_md5    copyreg    pandas     types\n_msi    crypt      pandocfilters    typing\n_msi_d     csv     parser     unicodedata\n_multibytecodec  ctypes     parso      unicodedata_d\n_multiprocessing curses     past    unittest\n_multiprocessing_d  cycler     pathlib    uritemplate\n_opcode    cythonmagic   pdb     urllib\n_operator     datetime   pefile     urllib3\n_osx_support  dateutil   perfmon    uu\n_overlapped   dbi     peutils    uuid\n_overlapped_d    dbm     pickle     venv\n_pickle    dde     pickleshare   warnings\n_pydecimal    decimal    pickletools   wave\n_pyio      decorator     pip     wcwidth\n_pyrsistent_version difflib    pipes      weakref\n_random    dis     pkg_resources    webbrowser\n_sha1      distutils     pkgutil    webencodings\n_sha256    doctest    platform   wheel\n_sha3      docutils   plistlib   widgetsnbextension\n_sha512    dotenv     ply     win2kras\n_signal    dummy_threading  poplib     win32api\n_sitebuiltins    easy_install  posixpath     win32clipboard\n_socket    email      pprint(    win32com)\n_socket_d     encodings     profile    win32con\n_sqlite3   ensurepip     progressbar   win32console\n_sqlite3_d    entrypoints   prometheus_client   win32cred\n_sre    enum    prompt_toolkit   win32crypt\n_ssl    errno      pstats     win32cryptcon\n_ssl_d     external   pty     win32ctypes\n_stat      faulthandler  py_compile    win32event\n_string    filecmp    pyasn1     win32evtlog\n_strptime     fileinput     pyasn1_modules   win32evtlogutil\n_struct    fnmatch    pyclbr     win32file\n_symtable     formatter     pydoc      win32gui\n_testbuffer   fractions     pydoc_data    win32gui_struct\n_testbuffer_d    ftplib     pyexpat    win32help\n_testcapi     functools     pyexpat_d     win32inet\n_testcapi_d   future     pygments   win32inetcon\n_testconsole  garden     pylab      win32job\n_testconsole_d   gc      pylint     win32lz\n_testimportmultiple genericpath   pymysql    win32net\n_testimportmultiple_d getopt     pyparsing     win32netcon\n_testmultiphase  getpass    pyqt5_tools   win32pdh\n_testmultiphase_d   gettext    pyrsistent    win32pdhquery\n_thread    glob    pysrt      win32pdhutil\n_threading_local google_auth_httplib2 pythoncom     win32pipe\n_tkinter   googleapiclient  pytz    win32print\n_tkinter_d    gzip    pywin      win32process\n_tracemalloc  hashlib    pywin32_testutil win32profile\n_warnings     heapq      pywintypes    win32ras\n_weakref   hmac    qtconsole     win32rcparser\n_weakrefset   html    queue      win32security\n_win32sysloader  html5lib   quopri     win32service\n_winapi    http    radian     win32serviceutil\n_winxptheme   httplib2   random     win32timezone\nabc     idlelib    rasutil    win32trace\nadodbapi   idna    rchitect   win32traceutil\nafxres     imaplib    re      win32transaction\naifc    imghdr     regcheck   win32ts\naltgraph   imp     regutil    win32ui\nantigravity   importlib     reprlib    win32uiole\napiclient     importlib_metadata  requests   win32verstamp\nappdirs    inspect    rlcompleter   win32wnet\nargparse   inventryList  rmagic     winerror\narray      io      rsa     winioctlcon\nast     ipaddress     runpy      winnt\nastroid    ipykernel     sched      winperf\nasynchat   ipykernel_launcher  scipy      winpty\nasyncio    ipython_genutils secrets    winreg\nasyncore   ipywidgets    select     winsound\natexit     isapi      select_d   winsound_d\nattr    isort      selectors     winxpgui\naudioop    itertools     selenium   winxptheme\nautoreload    jedi    send2trash    wrapt\nautosub    jinja2     servicemanager   wsgiref\nbase64     json    setuptools    xdrlib\nbdb     json5      shelve     xml\nbinascii   jsonschema    shlex      xmlrpc\nbinhex     jupyter    shutil     xxsubtype\nbisect     jupyter_client   signal     zipapp\nblack      jupyter_console  simplegeneric    zipfile\nblackd     jupyter_core  site    zipimport\nbleach     jupyterlab    six     zipp\nblib2to3   jupyterlab_server   smtpd      zlib\nbrain_argparse   jupyterthemes    smtplib    zmq\nbrain_attrs   keyword    sndhdr     \nbrain_builtin_inference kivy    socket     \nbrain_collections   kivy_deps     socketserver  wxpython\n',
'<h2>check version: python --version</h2>\n',
'<h2>first Django app</h2>\n<a href="https://docs.djangoproject.com/en/3.0/contents/">first Django app</a>\nhttps://docs.djangoproject.com/en/3.0/intro/tutorial01/\nWriting your first Django app, part 1\nCheck Django is installed\n$ python -m django --version\nInstall Django\n$ pip install Django\nCreat project\ncd into a directory where you’d like to store your code\n$ django-admin startproject mysite\nstartproject created:\nmysite/\n manage.py\n mysite/\n  __init__.py\n  settings.py\n  urls.py\n  wsgi.py\nmanage.py: A command-line utility that lets you interact with this Django project in various ways. \nYou can read all the details about manage.py in django-admin and manage.py.\nThe inner mysite/ directory is the actual Python package for your project. \nIts name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).\nmysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. \nIf you’re a Python beginner, read more about packages in the official Python docs.\nmysite/settings.py: Settings/configuration for this Django project. \nDjango settings will tell you all about how settings work.\nmysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. \nYou can read more about URLs in URL dispatcher.\nmysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. \nChange into the outer mysite directory and run the following commands:\n$ python manage.py runserver\nThe Django development server started.\nVisit http://127.0.0.1:8000/ with your Web browser to see a “Congratulations!” page!\nChanging the port\n$ python manage.py runserver 8080\nTo listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:\n$ python manage.py runserver 0:8000\n0 is a shortcut for 0.0.0.0.\nTo create an app, type this:\n$ python manage.py startapp polls\nDirectory polls created:\npolls/\n __init__.py\n admin.py\n apps.py\n migrations/\n  __init__.py\n models.py\n tests.py\n views.py\nWrite the first view:\npolls/views.py\nfrom django.http import HttpResponse\ndef index(request):\n return HttpResponse("Hello, world. You\'re at the polls index.")\nTo call the view, we need to map it to a URL - and for this we need a URLconf.\nTo create a URLconf in the polls directory, create a file called urls.py.\npolls/urls.py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n path(\'\', views.index, name=\'index\'),\n]\nThe next step is to point the root URLconf at the polls.urls module. \nIn mysite/urls.py, add an import for django.urls.include and insert an include() in the urlpatterns list, so you have:\nmysite/urls.py\nfrom django.contrib import admin\nfrom django.urls import include, path\nurlpatterns = [\n path(\'polls/\', include(\'polls.urls\')),\n path(\'admin/\', admin.site.urls),\n]\nIt turns out I was confused because of the multiple directories named "mysite".\nI wrongly created a urls.py file in the root "mysite" directory (which contains "manage.py"), then pasted in the code from the website.\nTo correct it I deleted this file, went into the mysite/mysite directory (which contains "settings.py"), modified the existing "urls.py" file, and replaced the code with the tutorial code.\nGuessing on the basis of whatever little information provided in the question, i think you might have forget to add the following import in your urls.py file.\nfrom django.conf.urls import include\n',
'<h2>Logging in Python</h2>\n<a href="https://www.youtube.com/watch?v=g8nQ90Hk328">Logging in Python</a>\n# purpose of logging: record progress and problems\n# 5 levels of logging: notset, debug, info, warning, error, critical\n#      0   ,  10, 20, 30,  40, 50\nimport logging\ndir(logging) # check what is inside\nimport math\n# create log format to show more details\n# LOG_FORMAT = "%(Levelname)s %(asctime)s - %(message)s"\nLOG_FORMAT = "%(levelname)s %(asctime)s - %(message)s"\n# create and configure logger\nlogging.basicConfig(filename = "C:\\Users\\User\\Desktop\\logfile.txt", \n     level=logging.DEBUG,  # this set the level to record\n     format = LOG_FORMAT,  # this set the output msg format\n     filemode= "w")  # this starts a blank file\nlogger = logging.getLogger() # create logger object\n# test the logger\n# logger.debug("harmless message.")\n# logger.info("just some message.")\n# logger.warning("warning message.")\n# logger.error("error message.")\n# logger.critical("thecritical message.")\n# print(logger.level)\ndef quadratic(a, b, c):\n  """ return the quadratic solution ax^2 + bx + c =0. """\n  logger.info("quadratic({0},{1},{2})".format(a, b, c))\n  # compute the discriminant\n  logger.debug("# compute the discriminant")\n  disc = b**2 - 4*a*c\n  # compute the two roots\n  logger.debug("# compute the two roots")\n  root1 = (-b + math.sqrt(disc)) / (2*a)\n  root2 = (-b - math.sqrt(disc)) / (2*a)\n  # return the roots\n  logger.debug("# return the roots")\n  return (root1, root2)\nroots = quadratic(1,0,1)\nprint(roots)\n',
'<h2>Python Pandas Tutorial</h2>\n<a href="Python Pandas Tutorial.html">Python Pandas SciPy Tutorial</a>\n',
'<h2>Edge Detection</h2>\n<a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html" class="whitebut red limebs">Canny Edge Detection in OpenCV</a>\n',
'<h2>11 个最佳的 Python 编译器和解释器</h2>\n大多数极客认为 Python 是解释性语言，但它也存在编译过程。\n编译部分在代码执行时完成，并被删除。\n然后编译内容被转换为字节码。\n通过机器和操作系统进一步扩展到 Python 虚拟机。\n本文介绍了适用于 Python 程序员的 11 种最佳的 Python 编译器和解释器。\n最好的 Python 编译器和解释器\n1.Brython\nBrython 是一种流行的 Python 编译器，可将 Python 转换为 Javascript 代码。\n它提供对所有 Web 浏览器（包括一种手机 Web 浏览器）的支持。\n它还支持最新的 Html5/CSS3 规范，可以使用流行的 CSS 框架，如 BootStrap3 和 LESS。\nhttps://brython.info\n2. Pyjs\nPyjs 是一个丰富的 Internet 应用程序框架，也是一种轻量级的 Python 编译器，可以从  Web 浏览器直接执行 Python 脚本，可以从浏览器的 JS 控制台执行程序。\n它是从 Python 到 Javascript 的编译器，可以使代码在 Web 浏览器上运行。\n它带有 Ajax 框架和 Widget Set API。\nhttp://pyjs.org\n3. WinPython\n它是为 Windows 操作系统设计的。\n它有一些 CPython 的特性。\n它预装了一些针对数据科学和机器学习的流行库，例如 Numpy、Pandas 和 Scipy。\n它带有 C/C++ 编译器，大多数时候不会用到。\n除此之外，它只有 Python 编译器，没有其它包。\nhttps://winpython.github.io\n4.Skulpt\nSkulpt 是 Python 的浏览器版实现，可以被添加到 HTML 代码中。\n此 Python 编译器使用 Javascript 编写，在客户端运行代码，无需其它插件、加工或服务器支持。\nSkulpt 解释器通过导入方式，来执行保存在网站上的 .py 文件中的代码。\nhttps://skulpt.org\n5.Shed Skin\n该编译器将 Python 标准库模块编译为 C++，它将静态类型的 Python 程序转换为很受限的优化的 C++ 代码。\n通过将其内置的 Python 数据类型再次实现为自己的类集（可以用 C++ 高效实现），可以提高性能。\nhttps://en.wikipedia.org/wiki/Shed_Skin\n6.Active Python\n这是用于 Windows、Linux 和 Mac Os 的 Python 发行版，有免费的社区版。\n它支持在许多平台安装，某些不被 Python-like 的 AIX 支持的平台，它也支持。\n它提供了比 Python 更多的兼容性。\nhttps://www.activestate.com/products/activepython\n7.Transcrypt\n它是一种流行的将 Python 代码编译为简单易读的 Java 代码的编译器。\n它是一个轻量级的 Python 编译器，支持对矩阵和向量运算进行切片。\nTranscrypt 也可以在 Node.js 上运行。\n分层模块、多重继承和本地类给其添加了很多功能。\n8. Nutika\n这是一种源码到源码的 Python 编译器，可以将 Python 源代码转换为 C/C++ 可执行代码。\n它会使用到许多 Python 库和扩展模块。\n它自带 Anaconda，可用于创建数据科学和机器学习项目。\n9. Jython\n它用 Java 编写，可以嚀¨运行 JVM 的任何平台上执行。\nJython 将 Python代码编译为 Java 字节码，从而做到跨平台。\n它可用于创建 Servelets、Swing、SWT 和 AWT 软件包的解决方案。\nJython 使用 CPython 之类的全局解释器锁（GIL） 。\n另外，你可以将 Java 类扩展到 Python 代码。\nhttps://www.jython.org\n10. CPython\nCPython 是默认的且使用最广泛的 Python 编译器。\n它是用 C 语言编写的，并使用 GIL（全局解释器锁），这使得并发 CPython 进程之间的通信很困难。\nCPython 中的编译步骤包括：\n解码、令牌化、解析、抽象语法树和编译。\nhttps://compilers.pydata.org\n11. IronPython\n此版本的 Python 编译器是在微软的 .Net 框架和 Mono 上实现的。\n它还提供了动态编译和交互式控制台。\n它使得安装非常容易，并且具有跨平台兼容性。\n它还具有标准库和不同的模块，主要用于实现 .Net 框架的用户界面库。\nhttps://ironpython.net\n结论\nPython 是一种为许多实现提供了可能的开发语言，例如 Python 到 Java，Python 到 Javascript 或其它。\nTop 7 Free Python Compilers and Interpreters\ninterpreter\nCPython, IronPython, ActivePython, Stackless Python\ncompiler\nNuitka, Brython, PyJS, Shed Skin, Skulpt, Transcrypt, WinPython\nPyJS translates your Python code into JavaScript to let it run in a browser\nclient-side web and desktop applications\n<a href="https://www.guru99.com/execute-python-online.html" class="whitebut ">Execute PYTHON Online</a>\n<a href="https://repl.it/languages/python3" class="whitebut ">PYTHON Online</a>\n<a href="https://www.onlinegdb.com/online_python_compiler" class="whitebut ">PYTHON Online compiler</a>\n',
'<h2>Python 小贴士和技巧</h2>\n元旦过完了，我们都纷纷回到了各自的工作岗位。\n新的一年新气象，我想借本文为大家献上 Python 语言的30个最佳实践、小贴士和技巧，希望能对各位勤劳的程序员有所帮助，并希望大家工作顺利！ \n1. Python 版本\n在此想提醒各位：自2020年1月1日起，Python 官方不再支持 Python 2。\n本文中的很多示例只能在 Python 3 中运行。\n如果你仍在使用 Python 2.7，请立即升级。\n2. 检查 Python 的最低版本\n你可以在代码中检查 Python 的版本，以确保你的用户没有在不兼容的版本中运行脚本。\n检查方式如下：\nif not sys.version_info &gt; (2, 7):\n   # berate your user for running a 10 year\n   # python version\nelif not sys.version_info &gt;= (3, 5):\n   # Kindly tell your user (s)he needs to upgrade\n   # because you\'re using 3.5 features\n3. IPython\n<img src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhEKhkJ9OGu3s1k1g6xoBWLicdTnd059diax51HTgibTxgtU8eJMN37bnib8IrpZiaFH0kpWntMo4yYPAg/640">\nIPython 本质上就是一个增强版的shell。\n就冲着自动补齐就值得一试，而且它的功能还不止于此，它还有很多令我爱不释手的命令，例如：\n%cd：改变当前的工作目录\n%edit：打开编辑器，并关闭编辑器后执行键入的代码\n%env：显示当前环境变量\n%pip install [pkgs]：无需离开交互式shell，就可以安装软件包\n%time 和 %timeit：测量执行Python代码的时间\n完整的命令列表，请点击此处查看（https://ipython.readthedocs.io/en/stable/interactive/magics.html）。\n还有一个非常实用的功能：引用上一个命令的输出。\nIn 和 Out 是实际的对象。\n你可以通过 Out[3] 的形式使用第三个命令的输出。\nIPython 的安装命令如下：\npip3 install ipython\n4. 列表推导式\n你可以利用列表推导式，避免使用循环填充列表时的繁琐。\n列表推导式的基本语法如下：\n[ expression for item in list if conditional ]\n举一个基本的例子：用一组有序数字填充一个列表：\nmylist = [i for i in range(10)]\nprint(mylist)\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n由于可以使用表达式，所以你也可以做一些算术运算：\nsquares = [x**2 for x in range(10)]\nprint(squares)\n# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n甚至可以调用外部函数：\ndef some_function(a):\n return (a + 5) / 2\nmy_formula = [some_function(i) for i in range(10)]\nprint(my_formula)\n# [2, 3, 3, 4, 4, 5, 5, 6, 6, 7]\n最后，你还可以使用 ‘if’ 来过滤列表。\n在如下示例中，我们只保留能被2整除的数字：\nfiltered = [i for i in range(20) if i%2==0]\nprint(filtered)\n# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n5. 检查对象使用内存的状况\n你可以利用 sys.getsizeof() 来检查对象使用内存的状况：\nimport sys\nmylist = range(0, 10000)\nprint(sys.getsizeof(mylist))\n# 48\n等等，为什么这个巨大的列表仅包含48个字节？\n因为这里的 range 函数返回了一个类，只不过它的行为就像一个列表。\n在使用内存方面，range 远比实际的数字列表更加高效。\n你可以试试看使用列表推导式创建一个范围相同的数字列表： \nimport sys\nmyreallist = [x for x in range(0, 10000)]\nprint(sys.getsizeof(myreallist))\n# 87632\n6. 返回多个值\nPython 中的函数可以返回一个以上的变量，而且还无需使用字典、列表或类。\n如下所示：\ndef get_user(id):\n # fetch user from database\n # ....\n return name, birthdate\nname, birthdate = get_user(4)\n如果返回值的数量有限当然没问题。\n但是，如果返回值的数量超过3个，那么你就应该将返回值放入一个（数据）类中。\n7. 使用数据类\nPython从版本3.7开始提供数据类。\n与常规类或其他方法（比如返回多个值或字典）相比，数据类有几个明显的优势：\n数据类的代码量较少\n你可以比较数据类，因为数据类提供了 __eq__ 方法\n调试的时候，你可以轻松地输出数据类，因为数据类还提供了 __repr__ 方法\n数据类需要类型提示，因此可以减少Bug的发生几率 \n数据类的示例如下：\nfrom dataclasses import dataclass\n@dataclass\nclass Card:\n rank: str\n suit: str\ncard = Card("Q", "hearts")\nprint(card == card)\n# True\nprint(card.rank)\n# \'Q\'\nprint(card)\nCard(rank=\'Q\', suit=\'hearts\')\n详细的使用指南请点击这里（https://realpython.com/python-data-classes/）。\n8. 交换变量\n如下的小技巧很巧妙，可以为你节省多行代码：\na = 1\nb = 2\na, b = b, a\nprint((a))\n# 2\nprint((b))\n# 1\n9. 合并字典（Python 3.5以上的版本）\n从Python 3.5开始，合并字典的操作更加简单了：\ndict1 = { \'a\': 1, \'b\': 2 }\ndict2 = { \'b\': 3, \'c\': 4 }\nmerged = { **dict1, **dict2 }\nprint((merged))\n# {\'a\': 1, \'b\': 3, \'c\': 4}\n如果 key 重复，那么第一个字典中的 key 会被覆盖。\n10. 字符串的首字母大写\n如下技巧真是一个小可爱：\nmystring = "10 awesome python tricks"\nprint(mystring.title())\n\'10 Awesome Python Tricks\'\n11. 将字符串分割成列表\n你可以将字符串分割成一个字符串列表。\n在如下示例中，我们利用空格分割各个单词：\nmystring = "The quick brown fox"\nmylist = mystring.split(\' \')\nprint(mylist)\n# [\'The\', \'quick\', \'brown\', \'fox\']\n12. 根据字符串列表创建字符串\n与上述技巧相反，我们可以根据字符串列表创建字符串，然后在各个单词之间加入空格：\nmylist = [\'The\', \'quick\', \'brown\', \'fox\']\nmystring = " ".join(mylist)\nprint(mystring)\n# \'The quick brown fox\'\n你可能会问为什么不是 mylist.join(" ")，这是个好问题！\n根本原因在于，函数 String.join() 不仅可以联接列表，而且还可以联接任何可迭代对象。\n将其放在String中是为了避免在多个地方重复实现同一个功能。\n13. 表情符\n<img src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhEKhkJ9OGu3s1k1g6xoBWL7NbT1xics1Or7IQlWhicQLnbUM4p13xGAWImYJrDeygaD2vJmJRRExqw/640">\n有些人非常喜欢表情符，而有些人则深恶痛绝。\n我在此郑重声明：在分析社交媒体数据时，表情符可以派上大用场。\n首先，我们来安装表情符模块：\npip3 install emoji\n安装完成后，你可以按照如下方式使用：\nimport emoji\nresult = emoji.emojize(\'Python is :thumbs_up:\')\nprint(result)\n# \'Python is 👍\'\n# You can also reverse this:\nresult = emoji.demojize(\'Python is 👍\')\nprint(result)\n# \'Python is :thumbs_up:\'\n更多有关表情符的示例和文档，请点击此处（https://pypi.org/project/emoji/）。\n14. 列表切片\n列表切片的基本语法如下：\na[start:stop:step]\nstart、stop 和 step 都是可选项。\n如果不指定，则会使用如下默认值：\nstart：0\nend：字符串的结尾\nstep：1\n示例如下：\n# We can easily create a new list from \n# the first two elements of a list:\nfirst_two = [1, 2, 3, 4, 5][0:2]\nprint(first_two)\n# [1, 2]\n# And if we use a step value of 2, \n# we can skip over every second number\n# like this:\nsteps = [1, 2, 3, 4, 5][0:5:2]\nprint(steps)\n# [1, 3, 5]\n# This works on strings too. In Python,\n# you can treat a string like a list of\n# letters:\nmystring = "abcdefdn nimt"[::2]\nprint(mystring)\n# \'aced it\'\n15. 反转字符串和列表\n你可以利用如上切片的方法来反转字符串或列表。\n只需指定 step 为 -1，就可以反转其中的元素：\nrevstring = "abcdefg"[::-1]\nprint(revstring)\n# \'gfedcba\'\nrevarray = [1, 2, 3, 4, 5][::-1]\nprint(revarray)\n# [5, 4, 3, 2, 1]\n16. 显示猫猫\n我终于找到了一个充分的借口可以在我的文章中显示猫猫了，哈哈！当然，你也可以利用它来显示图片。\n首先你需要安装 Pillow，这是一个 Python 图片库的分支：\npip3 install Pillow\n接下来，你可以将如下图片下载到一个名叫 kittens.jpg 的文件中：\n<img src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhEKhkJ9OGu3s1k1g6xoBWLZqI43QvLspwcjrLAMprjH6mTYOfGtgzzfOo05jjOwKwt6wSrIeHnRQ/640">\n然后，你就可以通过如下 Python 代码显示上面的图片：\nfrom PIL import Image\nim = Image.open("kittens.jpg")\nim.show()\nprint(im.format, im.size, im.mode)\n# JPEG (1920, 1357) RGB\nPillow 还有很多显示该图片之外的功能。\n它可以分析、调整大小、过滤、增强、变形等等。\n完整的文档，请点击这里（https://pillow.readthedocs.io/en/stable/）。\n17. map()\nPython 有一个自带的函数叫做 map()，语法如下：\nmap(function, something_iterable)\n所以，你需要指定一个函数来执行，或者一些东西来执行。\n任何可迭代对象都可以。\n在如下示例中，我指定了一个列表：\ndef upper(s):\n return s.upper()\nmylist = list(map(upper, [\'sentence\', \'fragment\']))\nprint(mylist)\n# [\'SENTENCE\', \'FRAGMENT\']\n# Convert a string representation of\n# a number into a list of ints.\nlist_of_ints = list(map(int, "1234567")))\nprint(list_of_ints)\n# [1, 2, 3, 4, 5, 6, 7]\n你可以仔细看看自己的代码，看看能不能用 map() 替代某处的循环。\n18. 获取列表或字符串中的唯一元素\n如果你利用函数 set() 创建一个集合，就可以获取某个列表或类似于列表的对象的唯一元素：\nmylist = [1, 1, 2, 3, 4, 5, 5, 5, 6, 6]\nprint((set(mylist)))\n# {1, 2, 3, 4, 5, 6}\n# And since a string can be treated like a \n# list of letters, you can also get the \n# unique letters from a string this way:\nprint((set("aaabbbcccdddeeefff")))\n# {\'a\', \'b\', \'c\', \'d\', \'e\', \'f\'}\n19. 查找出现频率最高的值\n<br  />\n你可以通过如下方法查找出现频率最高的值：\ntest = [1, 2, 3, 4, 2, 2, 3, 1, 4, 4, 4]\nprint(max(set(test), key = test.count))\n# 4\n你能看懂上述代码吗？想法搞明白上述代码再往下读。\n没看懂？我来告诉你吧：\nmax() 会返回列表的最大值。\n参数 key 会接受一个参数函数来自定义排序，在本例中为 test.count。\n该函数会应用于迭代对象的每一项。\ntest.count 是 list 的内置函数。\n它接受一个参数，而且还会计算该参数的出现次数。\n因此，test.count(1) 将返回2，而 test.count(4) 将返回4。\nset(test) 将返回 test 中所有的唯一值，也就是 {1, 2, 3, 4}。\n因此，这一行代码完成的操作是：首先获取 test 所有的唯一值，即{1, 2, 3, 4}；然后，max 会针对每一个值执行 list.count，并返回最大值。\n这一行代码可不是我个人的发明。\n20. 创建一个进度条\n你可以创建自己的进度条，听起来很有意思。\n但是，更简单的方法是使用 progress 包：\npip3 install progress\n接下来，你就可以轻松地创建进度条了：\nfrom progress.bar import Bar\nbar = Bar(\'Processing\', max=20)\nfor i in range(20):\n # Do some work\n bar.next()\nbar.finish()\n21. 在交互式shell中使用_（下划线运算符）\n你可以通过下划线运算符获取上一个表达式的结果，例如在 IPython 中，你可以这样操作：\nIn [1]: 3 * 3\nOut[1]: 9In [2]: _ + 3\nOut[2]: 12\nPython Shell 中也可以这样使用。\n另外，在 IPython shell 中，你还可以通过 Out[n] 获取表达式 In[n] 的值。\n例如，在如上示例中，Out[1] 将返回数字9。\n22. 快速创建Web服务器\n你可以快速启动一个Web服务，并提供当前目录的内容：\npython3 -m http.server\n当你想与同事共享某个文件，或测试某个简单的HTML网站时，就可以考虑这个方法。\n23. 多行字符串\n虽然你可以用三重引号将代码中的多行字符串括起来，但是这种做法并不理想。\n所有放在三重引号之间的内容都会成为字符串，包括代码的格式，如下所示。\n我更喜欢另一种方法，这种方法不仅可以将多行字符串连接在一起，而且还可以保证代码的整洁。\n唯一的缺点是你需要明确指定换行符。\ns1 = """Multi line strings can be put\n  between triple quotes. It\'s not ideal\n  when formatting your code though"""\nprint((s1))\n# Multi line strings can be put\n#   between triple quotes. It\'s not ideal\n#   when formatting your code though\ns2 = ("You can also concatenate multiple\n" +\n  "strings this way, but you\'ll have to\n"\n  "explicitly put in the newlines")\nprint(s2)\n# You can also concatenate multiple\n# strings this way, but you\'ll have to\n# explicitly put in the newlines\n24. 条件赋值中的三元运算符\n这种方法可以让代码更简洁，同时又可以保证代码的可读性：\n[on_true] if [expression] else [on_false]\n示例如下：\nx = "Success!" if (y == 2) else "Failed!"\n25. 统计元素的出现次数\n你可以使用集合库中的 Counter 来获取列表中所有唯一元素的出现次数，Counter 会返回一个字典：\nfrom collections import Counter\nmylist = [1, 1, 2, 3, 4, 5, 5, 5, 6, 6]\nc = Counter(mylist)\nprint(c)\n# Counter({1: 2, 2: 1, 3: 1, 4: 1, 5: 3, 6: 2})\n# And it works on strings too:\nprint(Counter("aaaaabbbbbccccc"))\n# Counter({\'a\': 5, \'b\': 5, \'c\': 5})\n26. 比较运算符的链接\n你可以在 Python 中将多个比较运算符链接到一起，如此就可以创建更易读、更简洁的代码：\nx = 10\n# Instead of:\nif x &gt; 5 and x &lt; 15:\n print("Yes")\n# yes\n# You can also write:\nif 5 &lt; x &lt; 15:\n print("Yes")\n# Yes\n27. 添加颜色\n<img src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhEKhkJ9OGu3s1k1g6xoBWLqRMLzz40uop3ic2s5lJC9JDCQ6pVdesGLr1UJLg2sibabRy82mjpiaRFg/640">\n你可以通过 Colorama，设置终端的显示颜色：\nfrom colorama import Fore, Back, Style\nprint(Fore.RED + \'some red text\')\nprint(Back.GREEN + \'and with a green background\')\nprint(Style.DIM + \'and in dim text\')\nprint(Style.RESET_ALL)\nprint(\'back to normal now\')\n28. 日期的处理\npython-dateutil 模块作为标准日期模块的补充，提供了非常强大的扩展，你可以通过如下命令安装： \npip3 install python-dateutil \n你可以利用该库完成很多神奇的操作。\n在此我只举一个例子：模糊分析日志文件中的日期：\nfrom dateutil.parser import parse\nlogline = \'INFO 2020-01-01T00:00:01 Happy new year, human.\'\ntimestamp = parse(log_line, fuzzy=True)\nprint(timestamp)\n# 2020-01-01 00:00:01\n你只需记住：当遇到常规 Python 日期时间功能无法解决的问题时，就可以考虑 python-dateutil ！\n29.整数除法\n<img src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhEKhkJ9OGu3s1k1g6xoBWLlgNjzE7mIC7VzFH2ib6zAGOhbTWvcLafZCW7ickKGiaYFPLXm0ibicccL1Q/640">\n在 Python 2 中，除法运算符（/）默认为整数除法，除非其中一个操作数是浮点数。\n因此，你可以这么写：\n# Python 2\n5 / 2 = 2\n5 / 2.0 = 2.5\n在 Python 3 中，除法运算符（/）默认为浮点除法，而整数除法的运算符为 //。\n因此，你需要这么写：\nPython 3\n5 / 2 = 2.5\n5 // 2 = 2\n这项变更背后的动机，请参阅 PEP-0238（https://www.python.org/dev/peps/pep-0238/）。\n30. 通过chardet 来检测字符集\n你可以使用 chardet 模块来检测文件的字符集。\n在分析大量随机文本时，这个模块十分实用。\n安装方法如下：\npip install chardet\n安装完成后，你就可以使用命令行工具 chardetect 了，使用方法如下：\nchardetect somefile.txt\nsomefile.txt: ascii with confidence 1.0\n你也可以在编程中使用该库，完整的文档请点击这里（https://chardet.readthedocs.io/en/latest/usage.html）。\n',
'<h2>Python Creating a Menu</h2>\ndef menu :\n print("welcome, \n Option 1\n Option 2\n Option 3\n")\n choice = input()\n if choice == "1";\n   print("Option 1")\n   menu()\n if choice == "2";\n   print("Option 2")\n   menu()\n if choice == "3";\n   print("Option 3")\n   menu()\nmenu()\n',
'<h2>Python Lambda Functions</h2>\n<a href="https://www.guru99.com/python-lambda-function.html" class="whitebut ">Python Lambda Functions</a>\nLambdas, also known as anonymous functions, are small, restricted functions which do not need a name (i.e., an identifier). \nToday, many modern programming languages like Java, Python, C#, and C++ support lambda functions to add functionality to the languages.\nSyntax and Examples\nlambda arguments : expression\nlambda p1, p2: expression \nx = lambda a : a + 10\nprint(x(5))\n15\nadder = lambda x, y: x + y\nprint((adder (1, 2)))\n3\n#A REGULAR FUNCTION\ndef guru( funct, *args ):\nfunct( *args )\ndef printer_one( arg ):\nreturn print((arg))\ndef printer_two( arg ):\nprint(arg)\n#CALL A REGULAR FUNCTION \nguru( printer_one, \'printer 1 REGULAR CALL\' )\nguru( printer_two, \'printer 2 REGULAR CALL \n\' )\n#CALL A REGULAR FUNCTION THRU A LAMBDA\nguru(lambda: printer_one(\'printer 1 LAMBDA CALL\'))\nguru(lambda: printer_two(\'printer 2 LAMBDA CALL\'))\n',
'<h2>mysql</h2>\nimport mysql.connector\ndb = mysql.connector.connect(\n  host="localhost",\n  user="root",\n  passwd="asdf1234",\n  database="demo"\n)\nmycursor = db.cursor()\n#mycursor.execute("CREATE TABLE urlTable (titleName varchar(50), urlAddr varchar(100), id int PRIMARY KEY )")\nmycursor.execute("INSERT INTO urlTable (titleName, urlAddr) VALUES (%s,%s), (\'google\', \'google.com\')")\ndb.commit()\n',
'<h2>subprocess module</h2>\nThe subprocess module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. This module intends to replace several older modules and functions:\nos.system\nos.spawn*\nThe recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle. For more advanced use cases, the underlying Popen interface can be used directly.\nsubprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None)\nExamples:\n>>> subprocess.run(["ls", "-l"])  # doesn\'t capture output\n>>> subprocess.run("exit 1", shell=True, check=True)\n>>> subprocess.run(["ls", "-l", "/dev/null"], capture_output=True)\nCompletedProcess(args=[\'ls\', \'-l\', \'/dev/null\'], returncode=0,\nstdout=b\'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n\', stderr=b\'\')\nPopen Constructor\nExecute a child program in a new process.\nexample of passing some arguments to an external program as a sequence:\nPopen(["/usr/bin/git", "commit", "-m", "Fixes a bug."])\nexample to break a shell command into a sequence of arguments. shlex.split() can illustrate how to determine the correct tokenization for args:\n>>> import shlex, subprocess\n>>> command_line = input()\n/bin/vikings -input eggs.txt -output "spam spam.txt" -cmd "echo \'$MONEY\'"\n>>> args = shlex.split(command_line)\n>>> print(args)\n[\'/bin/vikings\', \'-input\', \'eggs.txt\', \'-output\', \'spam spam.txt\', \'-cmd\', "echo \'$MONEY\'"]\n>>> p = subprocess.Popen(args) # Success!\n',
'<h2>SVG drawings</h2>\n<a href="https://pypi.org/project/svgwrite/" class="whitebut ">python svgwrite</a>\nA Python library to create SVG drawings.\n<a href="https://wiki.inkscape.org/wiki/index.php/Python_modules_for_extensions" class="whitebut ">Python modules for Inkscape extensions</a>\nsvgwrite\nA Python library to create SVG drawings.\na simple example:\nimport svgwrite\ndwg = svgwrite.Drawing(\'test.svg\', profile=\'tiny\')\ndwg.add(dwg.line((0, 0), (10, 0), stroke=svgwrite.rgb(10, 10, 16, \'%\')))\ndwg.add(dwg.text(\'Test\', insert=(0, 0.2), fill=\'red\'))\ndwg.save()\nAs the name svgwrite implies, svgwrite creates new SVG drawings, it does not read existing drawings and also does not import existing drawings, but you can always include other SVG drawings by the &lt;image> entity.\nInstallation\nwith pip:\npip install svgwrite\nor from source:\npython setup.py install\nDocumentation\nhttp://readthedocs.org/docs/svgwrite/\nsvgwrite can be found on GitHub.com at:\nhttp://github.com/mozman/svgwrite.git\n<a href="https://medium.com/@xaviju/inkscape-extensions-by-non-developers-for-non-developers-a-primer-b272dda360fe" class="whitebut ">Inkscape extensions by non developers</a>\n<a href="Inkscape extensions.html" class="whitebut red whitets goldbs">Inkscape extensions</a>\n',
'<h2>Python Extract Local Storage</h2>\nhttp://scraping.pro/extract-browsers-local-storage-with-python/\n<h3>Python and Selenium</h3>\nTo access the browser\'s local storage when scraping a page, we need to invoke both a browser instance and leverage a JavaScript interpreter to read the local storage. \nFor my money, Selenium is the best solution.\nA possible replacement for Selenium is <em>PhantomJS</em>, running a headless browser.\n<h3>JaveScript to iterate over <em>localStorage</em> browser object</h3>for (var i = 0; i &amp;lt; localStorage.length; i++){\n key=localStorage.key(i); \n console.log(key+\': \'+localStorage.getItem(key));\n}\n<h3>Advanced script</h3>As mentioned <a href="http://stackoverflow.com/a/28118108/1230477">here</a> a HTML5 featured browser should also implement Array.prototype.map. \nSo script would be:\nArray.apply(0, new Array(localStorage.length)).map(function (o, i) \n   { return localStorage.key(i)+\':\'+localStorage.getItem(localStorage.key(i)); }\n)\n<h3>Python with Selenium script for setting up and scraping local storage</h3>from selenium import webdriver\ndriver = webdriver.Firefox() \nurl=\'http://www.w3schools.com/\'\ndriver.get(url)\nscriptArray="""localStorage.setItem("key1", \'new item\');\n      localStorage.setItem("key2", \'second item\'); \n				return Array.apply(0, new Array(localStorage.length)).map(function (o, i) { return localStorage.getItem(localStorage.key(i)); }\n				)""" 	\nresult = driver.execute_script(scriptArray)\nprint(result)\n<h3>Python bindings alternative to Python+Selenium</h3>Some might argue Selenium is inefficient for only local storage extracting. \nIf you think Selenium is too bulky, you might want to try a Python binding with a development framework for desktop, ex. \n<a href="https://riverbankcomputing.com/software/pyqt/intro" rel="nofollow">PyQt</a>. \nSomething I might touch on in a later post.\n',
'<h2>List of Python Modules</h2>\nWeb:\nRequests: https://pypi.org/project/requests/\nDjango: https://pypi.org/project/Django/\nFlask: https://pypi.org/project/Flask/\nTwisted: https://twistedmatrix.com/trac/\nBeautifulSoup: https://pypi.org/project/beautifulsoup4/\nSelenium: https://selenium-python.readthedocs.io/\nData science:\nNumpy: https://numpy.org/\nPandas: https://pandas.pydata.org/\nMatplotlib: https://matplotlib.org/\nNltk: https://www.nltk.org/\nOpencv: https://opencv-python-tutroals.readth...\nMachine Learning:\nTensorflow: https://www.tensorflow.org/\nKeras: https://keras.io/\nPyTorch: https://pytorch.org/\nSci-kit Learn: https://scikit-learn.org/stable/\nGUI:\nKivy: https://kivy.org/#home\nPyQt5: https://pypi.org/project/PyQt5/\nTkinter: https://wiki.python.org/moin/TkInter\nBonus:\nPygame: https://www.pygame.org/docs/\n',
'<h2><span class="red">Running Python in the Browser</span></h2>\nRunning Python in the web browser has been getting a lot of attention lately. \nShaun Taylor-Morgan knows what he\'s talking about here &#8211; he works for&nbsp;<a href="https://anvil.works/">Anvil</a>, a full-featured application platform for writing full-stack web apps with nothing but Python. \nSo I invited him to give us an overview and comparison of the open-source solutions for running Python code in your web browser.</em>\nIn the past, if you wanted to build a web UI, your only choice was JavaScript. \nThat\'s no longer true. \nThere are quite a few ways to run Python in your web browser. \nThis is a survey of what\'s available.\nI\'m looking at six systems that all take a different approach to the problem. \nHere\'s a diagram that sums up their differences.\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/python-in-browser.png">\nThe x-axis answers the question: when does Python get compiled? At one extreme, you run a command-line script to compile Python yourself. \nAt the other extreme, the compilation gets done in the user\'s browser as they write Python code.\nThe y-axis answers the question: what does Python get compiled to? Three systems make a direct conversion between the Python you write and some equivalent JavaScript. \nThe other three actually run a live Python interpreter in your browser, each in a slightly different way.\n',
'<h2>1. TRANSCRYPT</h2>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/transcrypt.png">\nTranscrypt gives you a command-line tool you can run to compile a Python script into a JavaScript file.\nYou interact with the page structure (the DOM) using a toolbox of specialized Python objects and functions. \nFor example, if you&nbsp;import document, you can find any object on the page by using&nbsp;document&nbsp;like a dictionary. \nTo get the element whose ID is&nbsp;name-box, you would use&nbsp;document["name-box"]. \nAny readers familiar with JQuery will be feeling very at home.\nHere\'s a basic example. \nI wrote a Hello, World page with just an input box and a button:\n&lt;input id=&quot;name-box&quot; placeholder=&quot;Enter your name&quot;>\n&lt;button id=&quot;greet-button&quot;>Say Hello&lt;/button>\nTo make it do something, I wrote some Python. \nWhen you click the button, an event handler fires that displays an alert with a greeting:\ndef greet():\n alert("Hello " + document.getElementById("name-box").value + "!")\ndocument.getElementById("greet-button").addEventListener(\'click\', greet)\nI wrote this in a file called&nbsp;hello.py&nbsp;and compiled it using&nbsp;transcrypt hello.py. \nThe compiler spat out a JavaScript version of my file, called&nbsp;hello.js.\nTranscrypt makes the conversion to JavaScript at the earliest possible time &#8211; before the browser is even running. \nNext we\'ll look at Brython, which makes the conversion on page load.\n',
'<h2>2. BRYTHON</h2>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/brython.png">\nBrython lets you write Python in script tags in exactly the same way you write JavaScript. \nJust as with Transcrypt, it has a&nbsp;document&nbsp;object for interacting with the DOM.\nThe same widget I wrote above can be written in a script tag like this:\n&lt;script type=&quot;text/python&quot;>\nfrom browser import document, alert\ndef greet(event):\n alert(&quot;Hello &quot; + document[&quot;name-box&quot;].value + &quot;!&quot;)\ndocument[&quot;greet-button&quot;].bind(&quot;click&quot;, greet)\n&lt;/script>\nPretty cool, huh? A script tag whose type is&nbsp;text/python!\nThere\'s a good explanation of how it works on the&nbsp;<a href="https://github.com/brython-dev/brython/wiki/How%20Brython%20works">Brython GitHub page</a>. \nIn short, you run a function when your page loads:\n  &lt;body onload=&quot;brython()&quot;>\nthat transpiles anything it finds in a Python script tag:\n  &lt;script type=&quot;text/python&quot;>&lt;/script>\nwhich results in some machine-generated JavaScript that it runs using JS\'s&nbsp;eval()&nbsp;function.\n',
'<h2>3. SKULPT</h2>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/skulpt.png">\nSkulpt sits at the far end of our diagram &#8211; it compiles Python to JavaScript at runtime. \nThis means the Python doesn\'t have to be written until&nbsp;<em>after the page has loaded</em>.\nThe&nbsp;<a href="http://www.skulpt.org/">Skulpt website</a>&nbsp;has a Python REPL that runs in your browser. \nIt\'s not making requests back to a Python interpreter on a server somewhere, it\'s actually running on your machine.\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/skulpt-repl.gif">\nSkulpt does not have a built-in way to interact with the DOM. \nThis can be an advantage, because you can build your own DOM manipulation system depending on what you\'re trying to achieve. \nMore on this later.\nSkulpt was originally created to produce educational tools that need a live Python session on a web page (example:&nbsp;<a href="https://trinket.io/">Trinket.io</a>). \nWhile Transcrypt and Brython are designed as direct replacements for JavaScript, Skulpt is more suited to building Python programming environments on the web (such as the full-stack app platform,&nbsp;<a href="https://anvil.works/">Anvil</a>).\nWe\'ve reached the end of the x-axis in our diagram. \nNext we head in the vertical direction: our final three technologies don\'t compile Python to JavaScript, they actually implement a Python runtime in the web browser.\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/x-axis-done.png">\n',
'<h2>4. PYPY.JS</h2>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/pypyjs.png">\n<a href="https://pypyjs.org/">PyPy.js</a>&nbsp;is a JavaScript implementation of a Python interpreter. \nThe developers took a C-to-JavaScript compiler called&nbsp;<a href="https://emscripten.org/">emscripten</a>&nbsp;and ran it on the source code of&nbsp;<a href="https://pypy.org/">PyPy</a>. \nThe result is PyPy, but running in your browser.\n<k>Advantages:</k> It\'s a very faithful implementation of Python, and code gets executed quickly. \n<k>Disadvantages:</k> A web page that embeds PyPy.js contains an entire Python interpreter, so it\'s pretty big as web pages go (think megabytes).\nYou import the interpreter using&nbsp;&lt;script>&nbsp;tags, and you get an object called&nbsp;pypyjs&nbsp;in the global JS scope.\nThere are three main functions for interacting with the interpreter. \nTo execute some Python, run&nbsp;pypyjs.exec(&lt;python code>). \nTo pass values between JavaScript and Python, use&nbsp;pypyjs.set(variable, value)&nbsp;and&nbsp;pypyjs.get(variable).\nHere\'s a script that uses PyPy.js to calculate the first ten square numbers:\n&lt;script type=&quot;text/javascript&quot;>\n  pypyjs.exec(\n // Run some Python\n \'y = [x**2. \nfor x in range(10)]\'\n  ).then(function() {\n // Transfer the value of y from Python to JavaScript\n pypyjs.get(\'y\')\n  }).then(function(result) {\n // Display an alert box with the value of y in it\n alert(result)\n  });\n&lt;/script>\nPyPy.js has a few features that make it feel like a native Python environment &#8211; there\'s even an in-memory filesystem so you can read and write files. \nThere\'s also a&nbsp;document&nbsp;object that gives you access to the DOM from Python.\n<a href="https://github.com/pypyjs/pypyjs/blob/master/README.dist.rst">The project has a great readme</a>&nbsp;if you\'re interested in learning more.\n',
'<h2>5. BATAVIA</h2>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/batavia.png">\nBatavia is a bit like PyPy.js, but it runs bytecode rather than Python. \nHere\'s a Hello, World script written in Batavia:\n&lt;script id=&quot;batavia-helloworld&quot; type=&quot;application/python-bytecode&quot;>\n 7gwNCkIUE1cWAAAA4wAAAAAAAAAAAAAAAAIAAABAAAAAcw4AAABlAABkAACDAQABZAEAUykCegtI\n ZWxsbyBXb3JsZE4pAdoFcHJpbnSpAHICAAAAcgIAAAD6PC92YXIvZm9sZGVycy85cC9uenY0MGxf\n OTc0ZGRocDFoZnJjY2JwdzgwMDAwZ24vVC90bXB4amMzZXJyddoIPG1vZHVsZT4BAAAAcwAAAAA=\n&lt;/script>\nBytecode is the ‘assembly language\' of the Python virtual machine &#8211; if you\'ve ever looked at the .pyc files Python generates, that\'s what they contain (<a href="https://pythontips.com/2019/02/26/python-dis-module-and-constant-folding/">Yasoob dug into some bytecode</a> in a recent post on this blog). \nThis example doesn\'t look like assembly language because it\'s base64-encoded.\nBatavia is potentially faster than PyPy.js, since it doesn\'t have to compile your Python to bytecode. \nIt also makes the download smaller &#8211;&nbsp;<a href="https://batavia.readthedocs.io/en/latest/background/faq.html">around 400kB</a>. \nThe disadvantage is that your code needs to be written and compiled in a native (non-browser) environment, as was the case with Transcrypt.\nAgain, Batavia lets you manipulate the DOM using a Python module it provides (in this case it\'s called&nbsp;dom).\nThe Batavia project is quite promising because it fills an otherwise unfilled niche &#8211; ahead-of-time compiled Python in the browser that runs in a full Python VM. \nUnfortunately, the GitHub repo\'s commit rate seems to have slowed in the past year or so. \nIf you\'re interested in helping out,&nbsp;<a href="https://beeware.org/contributing/how/first-time/">here\'s their developer guide</a>.\n',
'<h2>6. PYODIDE</h2>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/pyodide.png">\n<a href="https://github.com/iodide-project/pyodide/">Mozilla\'s Pyodide</a>&nbsp;was announced in April 2019. \nIt solves a difficult problem: interactive data visualisation in Python, in the browser.\nPython has become a favourite language for data science thanks to libraries such as&nbsp;<a href="https://www.numpy.org/">NumPy</a>,&nbsp;<a href="https://www.scipy.org/">SciPy</a>,&nbsp;<a href="https://matplotlib.org/">Matplotlib</a>&nbsp;and&nbsp;<a href="https://pandas.pydata.org/">Pandas</a>. \nWe already have&nbsp;<a href="https://jupyter.org/">Jupyter Notebooks</a>, which are a great way to present a data pipeline online, but they must be hosted on a server somewhere.\nIf you can put the data processing on the user\'s machine, they avoid the round-trip to your server so real-time visualisation is more powerful. \nAnd you can scale to so many more users if their own machines are providing the compute.\nIt\'s easier said than done. \nFortunately, the Mozilla team came across a version of the reference Python implementation (<a href="https://en.wikipedia.org/wiki/CPython">CPython</a>) that was compiled into&nbsp;<a href="https://webassembly.org/">WebAssembly</a>. \nWebAssembly is a low-level compliment to JavaScript that performs closer to native speeds, which opens the browser up for performance-critical applications like this.\nMozilla took charge of the WebAssembly CPython project and recompiled NumPy, SciPy, Matplotlib and Pandas into WebAssembly too. \nThe result is a lot like Jupyter Notebooks in the browser &#8211;&nbsp;<a href="https://alpha.iodide.io/notebooks/300/">here\'s an introductory notebook</a>.\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/pyodide-screen.png">\nIt\'s an even bigger download than PyPy.js (that example is around 50MB), but as Mozilla point out, a good browser will cache that for you. \nAnd for a data processing notebook, waiting a few seconds for the page to load is not a problem.\nYou can write HTML, MarkDown and JavaScript in Pyodide Notebooks too. \nAnd yes, there\'s a&nbsp;document&nbsp;object to access the DOM. \nIt\'s a really promising project!\n',
'<h2>MAKING A CHOICE</h2>\nI\'ve given you six different ways to write Python in the browser, and you might be able to find more. \nWhich one to choose? This summary table may help you decide.<br>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/screen-shot-2019-05-22-at-1.34.17-pm.png">\nThere\'s a more general point here too: the fact that there <em>is</em> a choice.\nAs a web developer, it often feels like you&nbsp;<em>have</em>&nbsp;to write JavaScript, you&nbsp;<em>have</em>&nbsp;to build an HTTP API, you&nbsp;<em>have</em>&nbsp;to write SQL and HTML and CSS. \nThe six systems we\'ve looked at make JavaScript seem more like a language that gets&nbsp;<em>compiled to</em>, and you choose what to compile to it (And WebAssembly is actually&nbsp;<em>designed</em>&nbsp;to be used this way).\nWhy not treat the whole web stack this way? The future of web development is to move beyond the technologies that we\'ve always ‘had\' to use. \nThe future is to build abstractions on top of those technologies, to reduce the unnecessary complexity and optimise developer efficiency. \nThat\'s why Python itself is so popular &#8211; it\'s a language that puts developer efficiency first.\n',
'<h2>ONE UNIFIED SYSTEM</h2>\nThere should be one way to represent data, from the database all the way to the UI. \nSince we\'re Pythonistas, we\'d like everything to be a Python object, not an SQL SELECT statement followed by a Python object followed by JSON followed by a JavaScript object followed by a DOM element.\nThat\'s what&nbsp;<a href="https://anvil.works/blog/hello-world">Anvil</a>&nbsp;does &#8211; it\'s a full-stack Python environment that abstracts away the complexity of the web.&nbsp;<a href="https://anvil.works/blog/hello-world">Here\'s a 7-minute video</a>&nbsp;that covers how it works.\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://freepythontips.files.wordpress.com/2019/05/web-stacks.png">\nRemember I said that it can be an advantage that Skulpt doesn\'t have a built-in way to interact with the DOM? This is why. \nIf you want to go beyond ‘Python in the browser\' and build a fully-integrated Python environment, your abstraction of the User Interface needs to fit in with your overall abstraction of the web system.\nSo Python in the browser is just the start of something bigger. \nI like to live dangerously, so I\'m going to make a prediction. \nIn 5 years\' time, more than 50% of web apps will be built with tools that sit one abstraction level higher than JavaScript frameworks such as React and Angular. \nIt has already happened for static sites: most people who want a static site will use WordPress or Wix rather than firing up a text editor and writing HTML. \nAs systems mature, they become unified and the amount of incidental complexity gradually minimises.\n',
'<h2><span class="lime">Brython tutorial</span></h2>\nThis tutorial explains how to develop an application that runs in the browser using the Python programming language. \nWe will take the example of writing a calculator.\nYou will need a text editor, and of course a browser with an Internet access.\nThe contents of this tutorial assumes that you have at least a basic knowledge of HTML (general page structure, most usual tags), of stylesheets (CSS) and of the Python language.\nIn the text editor, create an HTML page with the following content:\n&lt;!doctype html>\n&lt;html>\n&lt;head>\n &lt;meta charset="utf-8">\n &lt;script type="text/javascript"\n  src="https://cdn.jsdelivr.net/npm/brython@3.8.9/brython.min.js">\n &lt;/script>\n&lt;/head>\n&lt;body onload="brython()">\n&lt;script type="text/python">\nfrom browser import document\ndocument &lt;= "Hello !"\n&lt;/script>\n&lt;/body>\n&lt;/html>\nIn an empty directory, save this page as <B>index.html</B>. \nTo read it in the browser, you have two options:\nuse the File/Open menu: it is the most simple solution. \nIt brings <a href="/static_doc/en/file_or_http.html">some limitations</a> for an advanced use, but it works perfectly for this tutorial\nlaunch a web server : for instance, if the Python interpreter available from python.org is available on your machine, run python -m http.server in the file directory, then enter <I>localhost:8000/index.html</I> in the browser address bar\nWhen you open the page, you should see the message "Hello !" printed on the browser window.\n<H3>Page structure</h3>Let\'s take a look at the page contents. \nIn the &lt;head> zone we load the script <B>brython.js</B> : it is the Brython engine, the program that will find and execute the Python scripts included in the page. \nIn this example we get it from a CDN, so that there is nothing to install on the PC. \nNote the version number (brython@3.8.9) : it can be updated for each new Brython version.\nThe &lt;body> tag has an attribute onload="brython()". \nIt means that when the page has finished loading, the browser has to call the function brython(), which is defined in the Brython engine loaded in the page. \nThe function searches all the &lt;script>tags that have the attribute type="text/python" and executes them.\nOur <B>index.html</B> page embeds this script:\nfrom browser import document\ndocument &lt;= "Hello !"\nThis is a standard Python program, starting by the import of a module, <B>browser</B> (in this case, a module shipped with the Brython engine <B>brython.js</B>). \nThe module has an attribute document which references the content displayed in the browser window.\nTo add a text to the document - concretely, to display a text in the browser - the syntax used by Brython is\ndocument &lt;= "Hello !"\nYou can think of the &lt;= sign as a left arrow : the document "receives" a new element, here the string "Hello !". \nYou will see later that it is always possible to use the standardized DOM syntax to interact with the page, by Brython provides a few shortcuts to make the code less verbose.\n<H3>Text formatting with HTML tags</h3>HTML tags allow text formatting, for instance to write it in bold letters (&lt;B> tag), in italic (&lt;I>), etc.\nWith Brython, these tags are available as functions defined in module <B>html</B> of the <B>browser</B> package. \nHere is how to use it:\nfrom browser import document, html\ndocument &lt;= html.B("Hello !")\nTags can be nested:\ndocument &lt;= html.B(html.I("Hello !"))\nTags can also be added to each other, as well as strings:\ndocument &lt;= html.B("Hello, ") + "world !"\nThe first argument of a tag function can be a string, a number, another tag. \nIt can also be a Python "iterable" (list, comprehension, generator): in this case, all the elements produced in the iteration are added to the tag:\ndocument &lt;= html.UL(html.LI(i) for i in range(5))\nTag attributes are passed as keyword arguments to the function:\nhtml.A("Brython", href="http://brython.info")\n<H3>Drawing the calculator</h3>We can draw our calculator as an HTML table.\nThe first line is made of the result zone, followed by a reset button. \nThe next 3 lines are the calculator touches, digits and operations.\nfrom browser import document, html\ncalc = html.TABLE()\ncalc &lt;= html.TR(html.TH(html.DIV("0", id="result"), colspan=3) +\n    html.TH("C", id="clear"))\nlines = ["789/",\n   "456&#42;",\n   "123-",\n   "0.=+"]\ncalc &lt;= (html.TR(html.TD(x) for x in line) for line in lines)\ndocument &lt;= calc\nNote the use of Python generators to reduce the program size, while keeping it readable.\nLet\'s add style to the &lt;TD> tags in a stylesheet so that the calculator looks better:\n&lt;style>\n&#42;{\n font-family: sans-serif;\n font-weight: normal;\n font-size: 1.1em;\n}\ntd{\n background-color: #ccc;\n padding: 10px 30px 10px 30px;\n border-radius: 0.2em;\n text-align: center;\n cursor: default;\n}\n#result{\n border-color: #000;\n border-width: 1px;\n border-style: solid;\n padding: 10px 30px 10px 30px;\n text-align: right;\n}\n&lt;/style>\n<H3>Event handling</h3>The next step is to trigger an action when the user presses the calculator touches:\nfor digits and operations : print(the digit or operation in the result )zone\nfor the = sign : execute the operation and print(the result, or an error )message if the input is invalid\nfor the C letter : reset the result zone\nTo handle the elements printed in the page, the program need first to get a reference to them. \nThe buttons have been created as &lt;TD> tags; to get a reference to all these tags, the syntax is\ndocument.select("td")\nThe result of select() is always a list of elements.\nThe events that can occur on the elements of a page have a normalized name: when the user clicks on a button, the event called "click" is triggered. \nIn the program, this event will provoque the execution of a function. \nThe association betweeen element, event and function is defined by the syntax\nelement.bind("click", action)\nFor the calculator, we can associate the same function to the "click" event on all buttons by:\nfor button in document.select("td"):\n button.bind("click", action)\nTo be compliant to Python syntax, the function action() must have been defined somewhere before in the program. \nSuch "callback" functions take a single parameter, an object that represents the event.\n<H3>Complete program</h3>Here is the code that manages a minimal version of the calculator. \nThe most important part is in the function action(event).\nfrom browser import document, html\n# Construction de la calculatrice\ncalc = html.TABLE()\ncalc &lt;= html.TR(html.TH(html.DIV("0", id="result"), colspan=3) +\n    html.TD("C"))\nlines = ["789/", "456&#42;", "123-", "0.=+"]\ncalc &lt;= (html.TR(html.TD(x) for x in line) for line in lines)\ndocument &lt;= calc\nresult = document["result"] # direct acces to an element by its id\ndef action(event):\n """Handles the "click" event on a button of the calculator."""\n # The element the user clicked on is the attribute "target" of the\n # event object\n element = event.target\n # The text printed on the button is the element\'s "text" attribute\n value = element.text\n if value not in "=C":\n  # update the result zone\n  if result.text in ["0", "error"]:\n   result.text = value\n  else:\n   result.text = result.text + value\n elif value == "C":\n  # reset\n  result.text = "0"\n elif value == "=":\n  # execute the formula in result zone\n  try:\n   result.text = eval(result.text)\n  except:\n   result.text = "error"\n# Associate function action() to the event "click" on all buttons\nfor button in document.select("td"):\n button.bind("click", action)\n',
'<h2>Python in the browser with Brython</h2>\n<a href="https://www.youtube.com/watch?v=VJj-H4we71g" class="whitebut ">Python In The Browser</a>\n &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.8.8/brython.js" integrity="sha256-rA89wPrTJJQFWJaZveKW8jpdmC3t5F9rRkPyBjz8G04=" crossorigin="anonymous">&lt;/script>\n &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.8.8/brython_stdlib.js" integrity="sha256-Gnrw9tIjrsXcZSCh/wos5Jrpn0bNVNFJuNJI9d71TDs=" crossorigin="anonymous">&lt;/script>\n&lt;body onload="brython()">\n &lt;h1>Brython Crash Course&lt;/h1>\n &lt;h2 id="hello">&lt;/h2>\n &lt;button id="alert-btn">Alert & Insert&lt;/button>\n &lt;input type="text" id="text" placeholder="Enter something">\n &lt;span id="output">&lt;/span>\n &lt;h2 id="greet">Hello {name}&lt;/h2>\n &lt;button id="joke-btn">Get Joke&lt;/button>\n &lt;div id="joke" class="card">Click the "get joke" button&lt;/div>\n &lt;input type="file" id="file-upload">\n &lt;br>\n &lt;textarea id="file-text" cols="60" rows="10">&lt;/textarea>\n &lt;div class="card">\n  &lt;button id="rotate-btn">Rotate&lt;/button>\n  &lt;div id="rotate-box" class="box">&lt;/div>\n &lt;/div>\n &lt;h2>Saved Item: &lt;span id="item">&lt;/span>&lt;/h2>\n &lt;input type="text" id="item-input" placeholder="Add to local storage">\n &lt;button id="add-btn" style="display: inline;">Add&lt;/button>\n &lt;button id="remove-btn" style="display: inline;">Remove&lt;/button>\n &lt;!-- Alert & DOM insert -->\n &lt;script type="text/python" id="script0">\n  from browser import document, console, alert\n  def show(e):\n   console.log(e)\n   alert(\'Hello World\')\n   document[\'hello\'] &lt;= \'Hello World\'\n  document[\'alert-btn\'].bind(\'click\', show)\n &lt;/script>\n &lt;!-- Text bind -->\n &lt;script type="text/python" id="script1">\n  from browser import document\n  def show_text(e):\n   document[\'output\'].textContent = e.target.value;\n  document[\'text\'].bind(\'input\', show_text)\n &lt;/script>\n &lt;!-- Template and variable -->\n &lt;script type="text/python" id="script2">\n  from browser import document\n  from browser.template import Template\n  Template(document[\'greet\']).render(name=\'Brad\')\n &lt;/script>\n &lt;!-- Ajax call -->\n &lt;script type="text/python" id="script3">\n  from browser import document, ajax\n  url = \'https://api.chucknorris.io/jokes/random\'\n  def on_complete(req):\n   import json\n   data = json.loads(req.responseText)\n   joke = data[\'value\']\n   document[\'joke\'].text = joke\n  def get_joke(e):\n   req = ajax.ajax()\n   req.open(\'GET\', url, True)\n   req.bind(\'complete\', on_complete)\n   document[\'joke\'].text = \'Loading...\'\n   req.send()\n  document[\'joke-btn\'].bind(\'click\', get_joke)\n &lt;/script>\n &lt;!-- Load file data -->\n &lt;script type="text/python" id="script4">\n  from browser import document, window\n  def file_read(e):\n   def onload(e):\n    document[\'file-text\'].value = e.target.result \n   \n   file = document[\'file-upload\'].files[0]\n   reader = window.FileReader.new()\n   reader.readAsText(file)\n   reader.bind(\'load\', onload)\n  \n  document[\'file-upload\'].bind(\'input\', file_read)\n &lt;/script>\n &lt;!-- Rotate - manipulate style -->\n &lt;script type="text/python" id="script5">\n  from browser import document, html\n  box = document[\'rotate-box\']\n  angle = 10\n  def change(e):\n   global angle\n   box.style.transform = f"rotate({angle}deg)"\n   angle += 10\n  document[\'rotate-btn\'].bind(\'click\', change)\n &lt;/script>\n &lt;!-- Local storage -->\n &lt;script type="text/python" id="script6">\n  from browser import document, html, window, console\n  storage = window.localStorage\n  if storage.getItem(\'item\'):\n   document[\'item\'] &lt;= storage.getItem(\'item\')\n  def add_item(e):\n   item = document[\'item-input\'].value\n   storage.setItem(\'item\', item)\n   document[\'item\'].textContent = item\n  def remove_item(e):\n   storage.removeItem(\'item\')\n   document[\'item\'].textContent = \'\'\n  document[\'add-btn\'].bind(\'click\', add_item)\n  document[\'remove-btn\'].bind(\'click\', remove_item)\n &lt;/script>\n&lt;/body>\n&lt;/html>\n',
'<h2>Python Selenium</h2>\n<a href="https://www.youtube.com/watch?v=U6gbGk5WPws&list=PLzMcBGfZo4-n40rB1XaJ0ak1bemvlqumQ" class="whitebut ">selenium with Tim</a>\n<a href="https://www.youtube.com/watch?v=Xjv1sY630Uc" class="whitebut ">Python Selenium Tutorial #1 - Web Scraping, Bots & Testing</a>\n<a href="https://www.youtube.com/watch?v=b5jt2bhSeXs" class="whitebut ">Locating Elements From HTML</a>\n<a href="https://selenium-python.readthedocs.io/" class="whitebut gold redts">Selenium with Python</a>\nfrom selenium import webdriver # note! this file name cannot be selenium.py because this is not the library\nPATH = "D:\Python36-32\chromedriver.exe"\ndriver = webdriver.Chrome(PATH)\ndriver.get("https://williamkpchan.github.io/LibDocs/python%20notes.html")\n#driver.close() # this close the tab only if more than on tab on browser\nprint(driver.title)\ndriver.quit()\nTech with Tim sample:\nFrom selenium import webdriver\nfrom selenium.webdriver.common.Keys import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected conditions as EC\nimport time\nPATH = "Program Files\Chromedriver.exe"\ndriver = webdriver.Chrome(PATH) \ndriver.get("https://techwithtim.net")\nprint(driver.title) \nsearch = driver.find_element_by_name("s") search.send_keys("test")\nsearch.send_keys(Keys.RETURN) \ntry:\n main = WebDriverWait(driver, 10).until(\n   EC.presence_of_element_located((By.ID, "main"))\n )\n articles = mal.n.find_e/ements by tag name("article")\n for article in articles:\n   header = article.find_element_by_class_name("entry-summary")\n   print(header.text) \nfinally:\n   driver.quit() \n',
'<h2>Python call an external command</h2>\nimport subprocess\nsubprocess.run(["ls", "-l"])\nimport os\nos.system("your command")\nstream = os.popen("some_command with args")\nsubprocess.call([\'ping\', \'localhost\'])\nprint subprocess.Popen("echo Hello World", shell=True, stdout=subprocess.PIPE).stdout.read()\nprint os.popen("echo Hello World").read()\nreturn_code = subprocess.call("echo Hello World", shell=True)  \nprint subprocess.Popen("echo %s " % user_input, stdout=PIPE).stdout.read()\nimport subprocess\np = subprocess.Popen(\'ls\', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n print line,\nretval = p.wait()\n',
'<h2>常用 Matplotlib 图的 Python 代码</h2>\n# !pip install brewer2mpl\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings; warnings.filterwarnings(action=\'once\')\nlarge = 22; med = 16; small = 12\nparams = {\'axes.titlesize\': large,\n    \'legend.fontsize\': med,\n    \'figure.figsize\': (16, 10),\n    \'axes.labelsize\': med,\n    \'axes.titlesize\': med,\n    \'xtick.labelsize\': med,\n    \'ytick.labelsize\': med,\n    \'figure.titlesize\': large}\nplt.rcParams.update(params)\nplt.style.use(\'seaborn-whitegrid\')\nsns.set_style("white")\n%matplotlib inline\n# Version\nprint(mpl.__version__)  #> 3.0.0\nprint(sns.__version__)  #> 0.9.0\n1. 散点图\nScatteplot是用于研究两个变量之间关系的经典和基本图。\n如果数据中有多个组，则可能需要以不同颜色可视化每个组。\n在Matplotlib，你可以方便地使用。\n# Import dataset \nmidwest = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv")\n# Prepare Data \n# Create as many colors as there are unique midwest[\'category\']\ncategories = np.unique(midwest[\'category\'])\ncolors = [plt.cm.tab10(i/float(len(categories)-1)) for i in range(len(categories))]\n# Draw Plot for Each Category\nplt.figure(figsize=(16, 10), dpi= 80, facecolor=\'w\', edgecolor=\'k\')\nfor i, category in enumerate(categories):\n plt.scatter(\'area\', \'poptotal\', \n    data=midwest.loc[midwest.category==category, :], \n    s=20, c=colors[i], label=str(category))\n# Decorations\nplt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),\n     xlabel=\'Area\', ylabel=\'Population\')\nplt.xticks(fontsize=12); plt.yticks(fontsize=12)\nplt.title("Scatterplot of Midwest Area vs Population", fontsize=22)\nplt.legend(fontsize=12) \nplt.show() \n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XonZhr7JHCvIRfpKoicB0ic5Ql9x58FibdkhYM5vhS8Yne9NzGXUf3nUIdg/640">\n2. 带边界的气泡图\n有时，您希望在边界内显示一组点以强调其重要性。\n在此示例中，您将从应该被环绕的数据帧中获取记录，并将其传递给下面的代码中描述的记录。\nencircle()\nfrom matplotlib import patches\nfrom scipy.spatial import ConvexHull\nimport warnings; warnings.simplefilter(\'ignore\')\nsns.set_style("white")\n# Step 1: Prepare Data\nmidwest = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv")\n# As many colors as there are unique midwest[\'category\']\ncategories = np.unique(midwest[\'category\'])\ncolors = [plt.cm.tab10(i/float(len(categories)-1)) for i in range(len(categories))]\n# Step 2: Draw Scatterplot with unique color for each category\nfig = plt.figure(figsize=(16, 10), dpi= 80, facecolor=\'w\', edgecolor=\'k\') \nfor i, category in enumerate(categories):\n plt.scatter(\'area\', \'poptotal\', data=midwest.loc[midwest.category==category, :], s=\'dot_size\', c=colors[i], label=str(category), edgecolors=\'black\', linewidths=.5)\n# Step 3: Encircling\n# https://stackoverflow.com/questions/44575681/how-do-i-encircle-different-data-sets-in-scatter-plot\ndef encircle(x,y, ax=None, **kw):\n if not ax: ax=plt.gca()\n p = np.c_[x,y]\n hull = ConvexHull(p)\n poly = plt.Polygon(p[hull.vertices,:], **kw)\n ax.add_patch(poly)\n# Select data to be encircled\nmidwest_encircle_data = midwest.loc[midwest.state==\'IN\', :]       \n# Draw polygon surrounding vertices \nencircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec="k", fc="gold", alpha=0.1)\nencircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec="firebrick", fc="none", linewidth=1.5)\n# Step 4: Decorations\nplt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),\n     xlabel=\'Area\', ylabel=\'Population\')\nplt.xticks(fontsize=12); plt.yticks(fontsize=12)\nplt.title("Bubble Plot with Encircling", fontsize=22)\nplt.legend(fontsize=12) \nplt.show() \n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XowGiatRTtgalU6aKbsGRBe3UnSuUE2ib61oZ0AFxdrNYQyvPBDLh33Kicg/640">\n3. 带线性回归最佳拟合线的散点图\n如果你想了解两个变量如何相互改变，那么最合适的线就是要走的路。\n下图显示了数据中各组之间最佳拟合线的差异。\n要禁用分组并仅为整个数据集绘制一条最佳拟合线，请从下面的调用中删除该参数。\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv")\ndf_select = df.loc[df.cyl.isin([4,8]), :]\n# Plot\nsns.set_style("white")\ngridobj = sns.lmplot(x="displ", y="hwy", hue="cyl", data=df_select, \n      height=7, aspect=1.6, robust=True, palette=\'tab10\', \n      scatter_kws=dict(s=60, linewidths=.7, edgecolors=\'black\'))\n# Decorations\ngridobj.set(xlim=(0.5, 7.5), ylim=(0, 50))\nplt.title("Scatterplot with line of best fit grouped by number of cylinders", fontsize=20)\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoxNSmR6jATNibHlbk2Pib901oKc5m4722MV3Vo3ia2W99JiamC4eobEfchg/640">\n每个回归线都在自己的列中\n或者，您可以在其自己的列中显示每个组的最佳拟合线。\n你可以通过在里面设置参数来实现这一点。\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv")\ndf_select = df.loc[df.cyl.isin([4,8]), :]\n# Each line in its own column\nsns.set_style("white")\ngridobj = sns.lmplot(x="displ", y="hwy", \n      data=df_select, \n      height=7, \n      robust=True, \n      palette=\'Set1\', \n      col="cyl",\n      scatter_kws=dict(s=60, linewidths=.7, edgecolors=\'black\'))\n# Decorations\ngridobj.set(xlim=(0.5, 7.5), ylim=(0, 50))\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoW0fQ9OicssPqSBntvWTnic86KjPkdZcEhotT1opWf60wn2dwFDQavPBA/640">\n4. 抖动图\n通常，多个数据点具有完全相同的X和Y值。\n结果，多个点相互绘制并隐藏。\n为避免这种情况，请稍微抖动点，以便您可以直观地看到它们。\n这很方便使用\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv")\n# Draw Stripplot\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80) \nsns.stripplot(df.cty, df.hwy, jitter=0.25, size=8, ax=ax, linewidth=.5)\n# Decorations\nplt.title(\'Use jittered plots to avoid overlapping of points\', fontsize=22)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoVntP6xJMo7MeFsPCpCiawMllDicxVntkSOR0AqibLcTwyd9rOocIwicoxw/640">\n5. 计数图\n避免点重叠问题的另一个选择是增加点的大小，这取决于该点中有多少点。\n因此，点的大小越大，周围的点的集中度就越大。\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv")\ndf_counts = df.groupby([\'hwy\', \'cty\']).size().reset_index(name=\'counts\')\n# Draw Stripplot\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80) \nsns.stripplot(df_counts.cty, df_counts.hwy, size=df_counts.counts*2, ax=ax)\n# Decorations\nplt.title(\'Counts Plot - Size of circle is bigger as more points overlap\', fontsize=22)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoVxjdSJia5Ma018SXc7qC2Vf19s7oL8GNJa1Tn25zs9FcH0qdXKPjF2A/640">\n6. 边缘直方图\n边缘直方图具有沿X和Y轴变量的直方图。\n这用于可视化X和Y之间的关系以及单独的X和Y的单变量分布。\n该图如果经常用于探索性数据分析（EDA）。\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv")\n# Create Fig and gridspec\nfig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n# Scatterplot on main ax\nax_main.scatter(\'displ\', \'hwy\', s=df.cty*4, c=df.manufacturer.astype(\'category\').cat.codes, alpha=.9, data=df, cmap="tab10", edgecolors=\'gray\', linewidths=.5)\n# histogram on the right\nax_bottom.hist(df.displ, 40, histtype=\'stepfilled\', orientation=\'vertical\', color=\'deeppink\')\nax_bottom.invert_yaxis()\n# histogram in the bottom\nax_right.hist(df.hwy, 40, histtype=\'stepfilled\', orientation=\'horizontal\', color=\'deeppink\')\n# Decorations\nax_main.set(title=\'Scatterplot with Histograms \n displ vs hwy\', xlabel=\'displ\', ylabel=\'hwy\')\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n item.set_fontsize(14)\nxlabels = ax_main.get_xticks().tolist()\nax_main.set_xticklabels(xlabels)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59Xo9yS8yPiaTLnvPzr6AL56koZ8cR1DvVo5Wib4lkibhttWTUjKsic3xYEj6Q/640">\n7.边缘箱形图\n边缘箱图与边缘直方图具有相似的用途。\n然而，箱线图有助于精确定位X和Y的中位数，第25和第75百分位数。\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv")\n# Create Fig and gridspec\nfig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n# Scatterplot on main ax\nax_main.scatter(\'displ\', \'hwy\', s=df.cty*5, c=df.manufacturer.astype(\'category\').cat.codes, alpha=.9, data=df, cmap="Set1", edgecolors=\'black\', linewidths=.5)\n# Add a graph in each part\nsns.boxplot(df.hwy, ax=ax_right, orient="v")\nsns.boxplot(df.displ, ax=ax_bottom, orient="h")\n# Decorations ------------------\n# Remove x axis name for the boxplot\nax_bottom.set(xlabel=\'\')\nax_right.set(ylabel=\'\')\n# Main Title, Xlabel and YLabel\nax_main.set(title=\'Scatterplot with Histograms \n displ vs hwy\', xlabel=\'displ\', ylabel=\'hwy\')\n# Set font size of different components\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n item.set_fontsize(14)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoCRBib2Ir4icG5p0jJt6OiaXa4QD197IdvX0y7Le7YYCib6aYaV4ZNQQSWg/640">\n8. 相关图\nCorrelogram用于直观地查看给定数据帧（或2D数组）中所有可能的数值变量对之间的相关度量。\n# Import Dataset\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mtcars.csv")\n# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap=\'RdYlGn\', center=0, annot=True)\n# Decorations\nplt.title(\'Correlogram of mtcars\', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoXBibLHgnfS2MJhEIsLibsicicIACsW2unaH18N9PnIKEbVcnOIic4B9nglw/640">\n9. 矩阵图\n成对图是探索性分析中的最爱，以理解所有可能的数字变量对之间的关系。\n它是双变量分析的必备工具。\n# Load Dataset\ndf = sns.load_dataset(\'iris\')\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(df, kind="scatter", hue="species", plot_kws=dict(s=80, edgecolor="white", linewidth=2.5))\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XopclwpDws4b1kkSETWAWguOq3qvRgobzRdIFxHbn3MV61w32flgNNSg/640">\n# Load Dataset\ndf = sns.load_dataset(\'iris\')\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(df, kind="reg", hue="species")\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoydNM0FiaYELibzsRJB0cuXhIDBGknrZKEiaW3sPhkIVHzSPQ5bl8EzpBw/640">\n偏差\n10. 发散型条形图\n如果您想根据单个指标查看项目的变化情况，并可视化此差异的顺序和数量，那么发散条是一个很好的工具。\n它有助于快速区分数据中组的性能，并且非常直观，并且可以立即传达这一点。\n# Prepare Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mtcars.csv")\nx = df.loc[:, [\'mpg\']]\ndf[\'mpg_z\'] = (x - x.mean())/x.std()\ndf[\'colors\'] = [\'red\' if x < 0 else \'green\' for x in df[\'mpg_z\']]\ndf.sort_values(\'mpg_z\', inplace=True)\ndf.reset_index(inplace=True)\n# Draw plot\nplt.figure(figsize=(14,10), dpi= 80)\nplt.hlines(y=df.index, xmin=0, xmax=df.mpg_z, color=df.colors, alpha=0.4, linewidth=5)\n# Decorations\nplt.gca().set(ylabel=\'$Model$\', xlabel=\'$Mileage$\')\nplt.yticks(df.index, df.cars, fontsize=12)\nplt.title(\'Diverging Bars of Car Mileage\', fontdict={\'size\':20})\nplt.grid(linestyle=\'--\', alpha=0.5)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoxZrDLSW3jK4POnCVPq75EdECKiaVx0AogRmerltmykfcYKH3icGepxvQ/640">\n11. 发散型文本\n分散的文本类似于发散条，如果你想以一种漂亮和可呈现的方式显示图表中每个项目的价值，它更喜欢。\n# Prepare Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mtcars.csv")\nx = df.loc[:, [\'mpg\']]\ndf[\'mpg_z\'] = (x - x.mean())/x.std()\ndf[\'colors\'] = [\'red\' \nif x &lt; 0 \nelse \'green\' \nfor x \nin df[\'mpg_z\']]\ndf.sort_values(\'mpg_z\', inplace=True)\ndf.reset_index(inplace=True)\n# Draw plot\nplt.figure(figsize=(14,14), dpi= 80)\nplt.hlines(y=df.index, xmin=0, xmax=df.mpg_z)\nfor x, y, tex \nin zip(df.mpg_z, df.index, df.mpg_z):\n t = plt.text(x, y, round(tex, 2), horizontalalignment=\'right\' \nif x &lt; 0 \nelse \'left\', \n     verticalalignment=\'center\', fontdict={\'color\':\'red\' \nif x &lt; 0 \nelse \'green\', \'size\':14})\n# Decorations \nplt.yticks(df.index, df.cars, fontsize=12)\nplt.title(\'Diverging Text Bars of Car Mileage\', fontdict={\'size\':20})\nplt.grid(linestyle=\'--\', alpha=0.5)\nplt.xlim(-2.5, 2.5)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XobKDYs3VHf8ESImoC6goQWPutibLIHCkvdoYLTTn5I9HxOicFAxrbVKWw/640">\n12. 发散型包点图\n发散点图也类似于发散条。\n然而，与发散条相比，条的不存在减少了组之间的对比度和差异。\n# Prepare Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mtcars.csv")\nx = df.loc[:, [\'mpg\']]\ndf[\'mpg_z\'] = (x - x.mean())/x.std()\ndf[\'colors\'] = [\'red\' if x < 0 else \'darkgreen\' for x in df[\'mpg_z\']]\ndf.sort_values(\'mpg_z\', inplace=True)\ndf.reset_index(inplace=True)\n# Draw plot\nplt.figure(figsize=(14,16), dpi= 80)\nplt.scatter(df.mpg_z, df.index, s=450, alpha=.6, color=df.colors)\nfor x, y, tex in zip(df.mpg_z, df.index, df.mpg_z):\n t = plt.text(x, y, round(tex, 1), horizontalalignment=\'center\', \n     verticalalignment=\'center\', fontdict={\'color\':\'white\'})\n# Decorations\n# Lighten borders\nplt.gca().spines["top"].set_alpha(.3)\nplt.gca().spines["bottom"].set_alpha(.3)\nplt.gca().spines["right"].set_alpha(.3)\nplt.gca().spines["left"].set_alpha(.3)\nplt.yticks(df.index, df.cars)\nplt.title(\'Diverging Dotplot of Car Mileage\', fontdict={\'size\':20})\nplt.xlabel(\'$Mileage$\')\nplt.grid(linestyle=\'--\', alpha=0.5)\nplt.xlim(-2.5, 2.5)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoPuSlT2eU5ibOfdIfcDxBmN8XADE4RLqD1osiart5wT4rv5VsqE3U6wnw/640">\n13. 带标记的发散型棒棒糖图\n带标记的棒棒糖通过强调您想要引起注意的任何重要数据点并在图表中适当地给出推理，提供了一种可视化分歧的灵活方式。\n# Prepare Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mtcars.csv")\nx = df.loc[:, [\'mpg\']]\ndf[\'mpg_z\'] = (x - x.mean())/x.std()\ndf[\'colors\'] = \'black\'\n# color fiat differently\ndf.loc[df.cars == \'Fiat X1-9\', \'colors\'] = \'darkorange\'\ndf.sort_values(\'mpg_z\', inplace=True)\ndf.reset_index(inplace=True)\n# Draw plot\nimport matplotlib.patches as patches\nplt.figure(figsize=(14,16), dpi= 80)\nplt.hlines(y=df.index, xmin=0, xmax=df.mpg_z, color=df.colors, alpha=0.4, linewidth=1)\nplt.scatter(df.mpg_z, df.index, color=df.colors, s=[600 if x == \'Fiat X1-9\' else 300 for x in df.cars], alpha=0.6)\nplt.yticks(df.index, df.cars)\nplt.xticks(fontsize=12)\n# Annotate\nplt.annotate(\'Mercedes Models\', xy=(0.0, 11.0), xytext=(1.0, 11), xycoords=\'data\', \n   fontsize=15, ha=\'center\', va=\'center\',\n   bbox=dict(boxstyle=\'square\', fc=\'firebrick\'),\n   arrowprops=dict(arrowstyle=\'-[, widthB=2.0, lengthB=1.5\', lw=2.0, color=\'steelblue\'), color=\'white\')\n# Add Patches\np1 = patches.Rectangle((-2.0, -1), width=.3, height=3, alpha=.2, facecolor=\'red\')\np2 = patches.Rectangle((1.5, 27), width=.8, height=5, alpha=.2, facecolor=\'green\')\nplt.gca().add_patch(p1)\nplt.gca().add_patch(p2)\n# Decorate\nplt.title(\'Diverging Bars of Car Mileage\', fontdict={\'size\':20})\nplt.grid(linestyle=\'--\', alpha=0.5)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoWRHdqOhiaSBOiaAOqAm2kMJRBZKHA3PiacKNRrVPdBVaVdUFDRibLft0ibA/640">\n14.面积图\n通过对轴和线之间的区域进行着色，区域图不仅强调峰值和低谷，而且还强调高点和低点的持续时间。\n高点持续时间越长，线下面积越大。\nimport numpy as np\nimport pandas as pd\n# Prepare Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/economics.csv", parse_dates=[\'date\']).head(100)\nx = np.arange(df.shape[0])\ny_returns = (df.psavert.diff().fillna(0)/df.psavert.shift(1)).fillna(0) * 100\n# Plot\nplt.figure(figsize=(16,10), dpi= 80)\nplt.fill_between(x[1:], y_returns[1:], 0, where=y_returns[1:] >= 0, facecolor=\'green\', interpolate=True, alpha=0.7)\nplt.fill_between(x[1:], y_returns[1:], 0, where=y_returns[1:] <= 0, facecolor=\'red\', interpolate=True, alpha=0.7)\n# Annotate\nplt.annotate(\'Peak \n1975\', xy=(94.0, 21.0), xytext=(88.0, 28),\n    bbox=dict(boxstyle=\'square\', fc=\'firebrick\'),\n    arrowprops=dict(facecolor=\'steelblue\', shrink=0.05), fontsize=15, color=\'white\')\n# Decorations\nxtickvals = [str(m)[:3].upper()+"-"+str(y) for y,m in zip(df.date.dt.year, df.date.dt.month_name())]\nplt.gca().set_xticks(x[::6])\nplt.gca().set_xticklabels(xtickvals[::6], rotation=90, fontdict={\'horizontalalignment\': \'center\', \'verticalalignment\': \'center_baseline\'})\nplt.ylim(-35,35)\nplt.xlim(1,100)\nplt.title("Month Economics Return %", fontsize=22)\nplt.ylabel(\'Monthly returns %\')\nplt.grid(alpha=0.5)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoiaKZB9EIrbKYlwoKbeVsPlM8nYsdXsRAnMS8n68ufvhYg7fMC2aWrLg/640">\n15. 有序条形图\n有序条形图有效地传达了项目的排名顺序。\n但是，在图表上方添加度量标准的值，用户可以从图表本身获取精确信息。\n# Prepare Data\ndf_raw = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\ndf = df_raw[[\'cty\', \'manufacturer\']].groupby(\'manufacturer\').apply(lambda x: x.mean())\ndf.sort_values(\'cty\', inplace=True)\ndf.reset_index(inplace=True)\n# Draw plot\nimport matplotlib.patches as patches\nfig, ax = plt.subplots(figsize=(16,10), facecolor=\'white\', dpi= 80)\nax.vlines(x=df.index, ymin=0, ymax=df.cty, color=\'firebrick\', alpha=0.7, linewidth=20)\n# Annotate Text\nfor i, cty in enumerate(df.cty):\n ax.text(i, cty+0.5, round(cty, 1), horizontalalignment=\'center\')\n# Title, Label, Ticks and Ylim\nax.set_title(\'Bar Chart for Highway Mileage\', fontdict={\'size\':22})\nax.set(ylabel=\'Miles Per Gallon\', ylim=(0, 30))\nplt.xticks(df.index, df.manufacturer.str.upper(), rotation=60, horizontalalignment=\'right\', fontsize=12)\n# Add patches to color the X axis labels\np1 = patches.Rectangle((.57, -0.005), width=.33, height=.13, alpha=.1, facecolor=\'green\', transform=fig.transFigure)\np2 = patches.Rectangle((.124, -0.005), width=.446, height=.13, alpha=.1, facecolor=\'red\', transform=fig.transFigure)\nfig.add_artist(p1)\nfig.add_artist(p2)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XonZGbaCNzhbUmRX3NMIfe17Pf82EYTo6PM7vgw9MCODPYNdUaoEwibQg/640">\n16. 棒棒糖图\n棒棒糖图表以一种视觉上令人愉悦的方式提供与有序条形图类似的目的。\n# Prepare Data\ndf_raw = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\ndf = df_raw[[\'cty\', \'manufacturer\']].groupby(\'manufacturer\').apply(lambda x: x.mean())\ndf.sort_values(\'cty\', inplace=True)\ndf.reset_index(inplace=True)\n# Draw plot\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)\nax.vlines(x=df.index, ymin=0, ymax=df.cty, color=\'firebrick\', alpha=0.7, linewidth=2)\nax.scatter(x=df.index, y=df.cty, s=75, color=\'firebrick\', alpha=0.7)\n# Title, Label, Ticks and Ylim\nax.set_title(\'Lollipop Chart for Highway Mileage\', fontdict={\'size\':22})\nax.set_ylabel(\'Miles Per Gallon\')\nax.set_xticks(df.index)\nax.set_xticklabels(df.manufacturer.str.upper(), rotation=60, fontdict={\'horizontalalignment\': \'right\', \'size\':12})\nax.set_ylim(0, 30)\n# Annotate\nfor row in df.itertuples():\n ax.text(row.Index, row.cty+.5, s=round(row.cty, 2), horizontalalignment= \'center\', verticalalignment=\'bottom\', fontsize=14)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XomQZhULsahcTMS9D8icLEKfxGMggTd09ibHeZEScvxl3SBgBNUMfmbQ8A/640">\n17. 包点图\n点图表传达了项目的排名顺序。\n由于它沿水平轴对齐，因此您可以更容易地看到点彼此之间的距离。\n# Prepare Data\ndf_raw = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\ndf = df_raw[[\'cty\', \'manufacturer\']].groupby(\'manufacturer\').apply(lambda x: x.mean())\ndf.sort_values(\'cty\', inplace=True)\ndf.reset_index(inplace=True)\n# Draw plot\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)\nax.hlines(y=df.index, xmin=11, xmax=26, color=\'gray\', alpha=0.7, linewidth=1, linestyles=\'dashdot\')\nax.scatter(y=df.index, x=df.cty, s=75, color=\'firebrick\', alpha=0.7)\n# Title, Label, Ticks and Ylim\nax.set_title(\'Dot Plot for Highway Mileage\', fontdict={\'size\':22})\nax.set_xlabel(\'Miles Per Gallon\')\nax.set_yticks(df.index)\nax.set_yticklabels(df.manufacturer.str.title(), fontdict={\'horizontalalignment\': \'right\'})\nax.set_xlim(10, 27)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59Xo9G1TEjdUYKOFjkYlbn7YdweyYWhN9RE9UibXyR9yXnNHlqQV6pxN9cg/640">\n18. 坡度图\n斜率图最适合比较给定人/项目的“之前”和“之后”位置。\nimport matplotlib.lines as mlines\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/gdppercap.csv")\nleft_label = [str(c) + \', \'+ str(round(y)) for c, y in zip(df.continent, df[\'1952\'])]\nright_label = [str(c) + \', \'+ str(round(y)) for c, y in zip(df.continent, df[\'1957\'])]\nklass = [\'red\' if (y1-y2) < 0 else \'green\' for y1, y2 in zip(df[\'1952\'], df[\'1957\'])]\n# draw line\n# https://stackoverflow.com/questions/36470343/how-to-draw-a-line-with-matplotlib/36479941\ndef newline(p1, p2, color=\'black\'):\n ax = plt.gca()\n l = mlines.Line2D([p1[0],p2[0]], [p1[1],p2[1]], color=\'red\' if p1[1]-p2[1] > 0 else \'green\', marker=\'o\', markersize=6)\n ax.add_line(l)\n return l\nfig, ax = plt.subplots(1,1,figsize=(14,14), dpi= 80)\n# Vertical Lines\nax.vlines(x=1, ymin=500, ymax=13000, color=\'black\', alpha=0.7, linewidth=1, linestyles=\'dotted\')\nax.vlines(x=3, ymin=500, ymax=13000, color=\'black\', alpha=0.7, linewidth=1, linestyles=\'dotted\')\n# Points\nax.scatter(y=df[\'1952\'], x=np.repeat(1, df.shape[0]), s=10, color=\'black\', alpha=0.7)\nax.scatter(y=df[\'1957\'], x=np.repeat(3, df.shape[0]), s=10, color=\'black\', alpha=0.7)\n# Line Segmentsand Annotation\nfor p1, p2, c in zip(df[\'1952\'], df[\'1957\'], df[\'continent\']):\n newline([1,p1], [3,p2])\n ax.text(1-0.05, p1, c + \', \' + str(round(p1)), horizontalalignment=\'right\', verticalalignment=\'center\', fontdict={\'size\':14})\n ax.text(3+0.05, p2, c + \', \' + str(round(p2)), horizontalalignment=\'left\', verticalalignment=\'center\', fontdict={\'size\':14})\n# \'Before\' and \'After\' Annotations\nax.text(1-0.05, 13000, \'BEFORE\', horizontalalignment=\'right\', verticalalignment=\'center\', fontdict={\'size\':18, \'weight\':700})\nax.text(3+0.05, 13000, \'AFTER\', horizontalalignment=\'left\', verticalalignment=\'center\', fontdict={\'size\':18, \'weight\':700})\n# Decoration\nax.set_title("Slopechart: Comparing GDP Per Capita between 1952 vs 1957", fontdict={\'size\':22})\nax.set(xlim=(0,4), ylim=(0,14000), ylabel=\'Mean GDP Per Capita\')\nax.set_xticks([1,3])\nax.set_xticklabels(["1952", "1957"])\nplt.yticks(np.arange(500, 13000, 2000), fontsize=12)\n# Lighten borders\nplt.gca().spines["top"].set_alpha(.0)\nplt.gca().spines["bottom"].set_alpha(.0)\nplt.gca().spines["right"].set_alpha(.0)\nplt.gca().spines["left"].set_alpha(.0)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoZVrrI8nEfLYOzxVaJ7rp1Mhntluh1Z4gVic2Xnj39DxJqTLoib0BO9Sw/640">\n19. 哑铃图\n哑铃图传达各种项目的“前”和“后”位置以及项目的排序。\n如果您想要将特定项目/计划对不同对象的影响可视化，那么它非常有用。\nimport matplotlib.lines as mlines\n# Import Data\ndf = pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/health.csv")\ndf.sort_values(\'pct_2014\', inplace=True)\ndf.reset_index(inplace=True)\n# Func to draw line segment\ndef newline(p1, p2, color=\'black\'):\n ax = plt.gca()\n l = mlines.Line2D([p1[0],p2[0]], [p1[1],p2[1]], color=\'skyblue\')\n ax.add_line(l)\n return l\n# Figure and Axes\nfig, ax = plt.subplots(1,1,figsize=(14,14), facecolor=\'#f7f7f7\', dpi= 80)\n# Vertical Lines\nax.vlines(x=.05, ymin=0, ymax=26, color=\'black\', alpha=1, linewidth=1, linestyles=\'dotted\')\nax.vlines(x=.10, ymin=0, ymax=26, color=\'black\', alpha=1, linewidth=1, linestyles=\'dotted\')\nax.vlines(x=.15, ymin=0, ymax=26, color=\'black\', alpha=1, linewidth=1, linestyles=\'dotted\')\nax.vlines(x=.20, ymin=0, ymax=26, color=\'black\', alpha=1, linewidth=1, linestyles=\'dotted\')\n# Points\nax.scatter(y=df[\'index\'], x=df[\'pct_2013\'], s=50, color=\'#0e668b\', alpha=0.7)\nax.scatter(y=df[\'index\'], x=df[\'pct_2014\'], s=50, color=\'#a3c4dc\', alpha=0.7)\n# Line Segments\nfor i, p1, p2 in zip(df[\'index\'], df[\'pct_2013\'], df[\'pct_2014\']):\n newline([p1, i], [p2, i])\n# Decoration\nax.set_facecolor(\'#f7f7f7\')\nax.set_title("Dumbell Chart: Pct Change - 2013 vs 2014", fontdict={\'size\':22})\nax.set(xlim=(0,.25), ylim=(-1, 27), ylabel=\'Mean GDP Per Capita\')\nax.set_xticks([.05, .1, .15, .20])\nax.set_xticklabels([\'5%\', \'15%\', \'20%\', \'25%\'])\nax.set_xticklabels([\'5%\', \'15%\', \'20%\', \'25%\']) \nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoahXbCAXON3Z9b5aksAficXeufOqZLy95G6rz5RF3EaBmMKxZBC1JSHg/640">\n20. 连续变量的直方图\n直方图显示给定变量的频率分布。\n下面的表示基于分类变量对频率条进行分组，从而更好地了解连续变量和串联变量。\n# Import Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\n# Prepare data\nx_var = \'displ\'\ngroupby_var = \'class\'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, 30, stacked=True, density=False, color=colors[:len(vals)])\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel("Frequency")\nplt.ylim(0, 25)\nplt.xticks(ticks=bins[::3], labels=[round(b,1) for b in bins[::3]])\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59Xo32GHKrfDgAE3O0G3Rb0sicXBOwicR2tj0gn5YjiahhUM2rGtbg9xLlicqw/640">\n21. 类型变量的直方图\n分类变量的直方图显示该变量的频率分布。\n通过对条形图进行着色，您可以将分布与表示颜色的另一个分类变量相关联。\n# Import Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\n# Prepare data\nx_var = \'manufacturer\'\ngroupby_var = \'class\'\ndf_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [df[x_var].values.tolist() for i, df in df_agg]\n# Draw\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.Spectral(i/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, df[x_var].unique().__len__(), stacked=True, density=False, color=colors[:len(vals)])\n# Decoration\nplt.legend({group:col for group, col in zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel("Frequency")\nplt.ylim(0, 40)\nplt.xticks(ticks=bins, labels=np.unique(df[x_var]).tolist(), rotation=90, horizontalalignment=\'left\')\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XoJsibvuR3QoYQrrnVPqRyXPX8icHovWdnuoHPQXpMjFxpF3M2NUoRqLmw/640">\n22. 密度图\n密度图是一种常用工具，可视化连续变量的分布。\n通过“响应”变量对它们进行分组，您可以检查X和Y之间的关系。\n以下情况，如果出于代表性目的来描述城市里程的分布如何随着汽缸数的变化而变化。\n# Import Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\n# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nsns.kdeplot(df.loc[df[\'cyl\'] == 4, "cty"], shade=True, color="g", label="Cyl=4", alpha=.7)\nsns.kdeplot(df.loc[df[\'cyl\'] == 5, "cty"], shade=True, color="deeppink", label="Cyl=5", alpha=.7)\nsns.kdeplot(df.loc[df[\'cyl\'] == 6, "cty"], shade=True, color="dodgerblue", label="Cyl=6", alpha=.7)\nsns.kdeplot(df.loc[df[\'cyl\'] == 8, "cty"], shade=True, color="orange", label="Cyl=8", alpha=.7)\n# Decoration\nplt.title(\'Density Plot of City Mileage by n_Cylinders\', fontsize=22)\nplt.legend()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XodE1LdEjDavOGpaHJMRuV0Z0we5O3aIt9GtTIf4J9Zgy6DJznan6EWg/640">\n23. 直方密度线图\n带有直方图的密度曲线将两个图表传达的集体信息汇集在一起，这样您就可以将它们放在一个图形而不是两个图形中。\n# Import Data\ndf = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\n# Draw Plot\nplt.figure(figsize=(13,10), dpi= 80)\nsns.distplot(df.loc[df[\'class\'] == \'compact\', "cty"], color="dodgerblue", label="Compact", hist_kws={\'alpha\':.7}, kde_kws={\'linewidth\':3})\nsns.distplot(df.loc[df[\'class\'] == \'suv\', "cty"], color="orange", label="SUV", hist_kws={\'alpha\':.7}, kde_kws={\'linewidth\':3})\nsns.distplot(df.loc[df[\'class\'] == \'minivan\', "cty"], color="g", label="minivan", hist_kws={\'alpha\':.7}, kde_kws={\'linewidth\':3})\nplt.ylim(0, 0.35)\n# Decoration\nplt.title(\'Density Plot of City Mileage by Vehicle Type\', fontsize=22)\nplt.legend()\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XogqCf9HBALD5xc0QVa8PqIicn8S6Iy1PETQO2aTgCnWAzoG0tQic5ja0Q/640">\n24. Joy Plot\nJoy Plot允许不同组的密度曲线重叠，这是一种可视化相对于彼此的大量组的分布的好方法。\n它看起来很悦目，并清楚地传达了正确的信息。\n它可以使用joypy基于的包来轻松构建matplotlib。\n# !pip install joypy\n# Import Data\nmpg = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\n# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nfig, axes = joypy.joyplot(mpg, column=[\'hwy\', \'cty\'], by="class", ylim=\'own\', figsize=(14,10))\n# Decoration\nplt.title(\'Joy Plot of City and Highway Mileage by Class\', fontsize=22)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59Xo8TX7eODBUgiacumFNI4ic7fgPiaTnscicAFvvKRQrc0mvsRzqfLdNZibgyg/640">\n25. 分布式点图\n分布点图显示按组分割的点的单变量分布。\n点数越暗，该区域的数据点集中度越高。\n通过对中位数进行不同着色，组的真实定位立即变得明显。\nimport matplotlib.patches as mpatches\n# Prepare Data\ndf_raw = pd.read_csv("https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv")\ncyl_colors = {4:\'tab:red\', 5:\'tab:green\', 6:\'tab:blue\', 8:\'tab:orange\'}\ndf_raw[\'cyl_color\'] = df_raw.cyl.map(cyl_colors)\n# Mean and Median city mileage by make\ndf = df_raw[[\'cty\', \'manufacturer\']].groupby(\'manufacturer\').apply(lambda x: x.mean())\ndf.sort_values(\'cty\', ascending=False, inplace=True)\ndf.reset_index(inplace=True)\ndf_median = df_raw[[\'cty\', \'manufacturer\']].groupby(\'manufacturer\').apply(lambda x: x.median())\n# Draw horizontal lines\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)\nax.hlines(y=df.index, xmin=0, xmax=40, color=\'gray\', alpha=0.5, linewidth=.5, linestyles=\'dashdot\')\n# Draw the Dots\nfor i, make in enumerate(df.manufacturer):\n df_make = df_raw.loc[df_raw.manufacturer==make, :]\n ax.scatter(y=np.repeat(i, df_make.shape[0]), x=\'cty\', data=df_make, s=75, edgecolors=\'gray\', c=\'w\', alpha=0.5)\n ax.scatter(y=i, x=\'cty\', data=df_median.loc[df_median.index==make, :], s=75, c=\'firebrick\')\n# Annotate \nax.text(33, 13, "$red ; dots ; are ; the : median$", fontdict={\'size\':12}, color=\'firebrick\')\n# Decorations\nred_patch = plt.plot([],[], marker="o", ms=10, ls="", mec=None, color=\'firebrick\', label="Median")\nplt.legend(handles=red_patch)\nax.set_title(\'Distribution of City Mileage by Make\', fontdict={\'size\':22})\nax.set_xlabel(\'Miles Per Gallon (City)\', alpha=0.7)\nax.set_yticks(df.index)\nax.set_yticklabels(df.manufacturer.str.title(), fontdict={\'horizontalalignment\': \'right\'}, alpha=0.7)\nax.set_xlim(1, 40)\nplt.xticks(alpha=0.7)\nplt.gca().spines["top"].set_visible(False) \nplt.gca().spines["bottom"].set_visible(False) \nplt.gca().spines["right"].set_visible(False) \nplt.gca().spines["left"].set_visible(False)   \nplt.grid(axis=\'both\', alpha=.4, linewidth=.1)\nplt.show()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/Rm6KfjqOnWypN2HXibLe70Z9G5dXW59XodhaTaviaYQvOnYolSvN1XbksgIibE0fPcHiaAk4e9Qj0VgwTkopWDlvpQ/640">\n',
'<h2>Machine Learning Project Walk-Through in Python: Part One</h2>\nReading through a data science book or taking a course, it can feel like you have the individual pieces, but don’t quite know how to put them together. \nTaking the next step and solving a complete machine learning problem can be daunting, but preserving and completing a first project will give you the confidence to tackle any data science problem. \nThis series of articles will walk through a complete machine learning solution with a real-world dataset to let you see how all the pieces come together.\nWe’ll follow the general machine learning workflow step-by-step:\n<li>Data cleaning and formatting</li><li>Exploratory data analysis</li><li>Feature engineering and selection</li><li>Compare several machine learning models on a performance metric</li><li>Perform hyperparameter tuning on the best model</li><li>Evaluate the best model on the testing set</li><li>Interpret the model results</li><li>Draw conclusions and document work</li>\nAlong the way, we’ll see how each step flows into the next and how to specifically implement each part in Python. \nThe <a href="https://github.com/WillKoehrsen/machine-learning-project-walkthrough" target="_blank" rel="noopener nofollow">complete project</a> is available on GitHub, with the <a href="https://github.com/WillKoehrsen/machine-learning-project-walkthrough/blob/master/Machine%20Learning%20Project%20Part%201.ipynb" target="_blank" rel="noopener nofollow">first notebook here.</a> This first article will cover steps 1–3 with the rest addressed in subsequent posts.\n(As a note, this problem was originally given to me as an “assignment” for a job screen at a start-up. \nAfter completing the work, I was offered the job, but then the CTO of the company quit and they weren’t able to bring on any new employees. \nI guess that’s how things go on the start-up scene!)\n<h3>Problem Definition</h3>The first step before we get coding is to understand the problem we are trying to solve and the available data. \nIn this project, we will work with <a href="http://www.nyc.gov/html/gbee/html/plan/ll84_scores.shtml" target="_blank" rel="noopener nofollow">publicly available building energy data</a> from New York City.\n<k>The objective is to use the energy data to build a model that can predict the Energy Star Score of a building and interpret the results to find the factors influence the score.</k>\nThe data includes the Energy Star Score, makes this a supervised regression machine learning task:\n<ul><li><k>Supervised:</k> we have access to both the features and the target and our goal is to train a model that can learn a mapping between the two</li><li><k>Regression: </k>The Energy Star score is a continuous variable</li></ul>We want to develop a model that is both <k>accurate </k>— it can predict the Energy Star Score close to the true value — and <k>interpretable</k> — we can understand the model predictions. \nOnce we know the goal, we can use it to guide our decisions as we dig into the data and build models.\n<h3>Data Cleaning</h3>Contrary to what most data science courses would have you believe, not every dataset is a perfectly curated group of observations with no missing values or anomalies (looking at you <a href="http://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html" target="_blank" rel="noopener nofollow">mtcars</a> and<a href="https://archive.ics.uci.edu/ml/datasets/iris" target="_blank" rel="noopener nofollow"> iris</a> datasets). \nReal-world data is messy means we need to<a href="https://www.springboard.com/blog/data-wrangling/" target="_blank" rel="noopener nofollow"> clean and wrangle</a> it into an acceptable format before we can even start the analysis. \nData cleaning is an un-glamorous, but necessary part of most actual data science problems.\nFirst, we can load in the data as a Pandas DataFrame and take a look:\nimport pandas as pd\nimport numpy as np\n# Read in data into a dataframe \ndata = pd.read_csv(&#x27;data/Energy_and_Water_Data_Disclosure_for_Local_Law_84_2017__Data_for_Calendar_Year_2016_.csv&#x27;)\n# Display top of dataframe\ndata.head()\n<img src="https://miro.medium.com/max/552/1*lBRxdBwvf5seFNwnJH7s8Q.png">\nWhat Actual Data Looks Like!\nThis is a subset of the full data contains 60 columns. \nAlready, we can see a couple issues: first, we know that we want to predict the ENERGY STAR Score but we don’t know what any of the columns mean. \nWhile this isn’t necessarily an issue — we can often make an accurate model without any knowledge of the variables — we want to focus on interpretability, and it might be important to understand at least some of the columns.\nWhen I originally got the assignment from the start-up, I didn’t want to ask what all the column names meant, so I looked at the name of the file,\n<img src="https://miro.medium.com/max/552/1*VBR172ne94Os6bnOIRGDmw.png">\nand decided to search for “Local Law 84”. \nThat led me to <a href="http://www.nyc.gov/html/gbee/html/plan/ll84.shtml" target="_blank" rel="noopener nofollow">this page </a>explains this is an NYC law requiring all buildings of a certain size to report their energy use. \nMore searching brought me to <a href="http://www.nyc.gov/html/gbee/downloads/misc/nyc_benchmarking_disclosure_data_definitions_2017.pdf" target="_blank" rel="noopener nofollow">all the definitions of the columns.</a> Maybe looking at a file name is an obvious place to start, but for me this was a reminder to go slow so you don’t miss anything important!\nWe don’t need to study all of the columns, but we should at least understand the Energy Star Score, is described as:\nA 1-to-100 percentile ranking based on self-reported energy usage for the reporting year. \nThe <a href="https://www.energystar.gov/buildings/facility-owners-and-managers/existing-buildings/use-portfolio-manager/interpret-your-results/what" target="_blank" rel="noopener nofollow">Energy Star score </a>is a relative measure used for comparing the energy efficiency of buildings.\nThat clears up the first problem, but the second issue is that missing values are encoded as “Not Available”. \nThis is a string in Python means that even the columns with numbers will be stored as object datatypes because Pandas converts a column with any strings into a column of all strings. \nWe can see the datatypes of the columns using the dataframe.info()method:\n# See the column data types and non-missing values\ndata.info()\n<img src="https://miro.medium.com/max/552/1*eNySZpSyjMZ3qaFGm9Fx4w.png">\nSure enough, some of the columns that clearly contain numbers (such as ft²), are stored as objects. \nWe can’t do numerical analysis on strings, so these will have to be converted to number (specifically float) data types!\nHere’s a little Python code that replaces all the “Not Available” entries with not a number ( np.nan), can be interpreted as numbers, and then converts the relevant columns to the float datatype:\nOnce the correct columns are numbers, we can start to investigate the data.\n<h3>Missing Data and Outliers</h3>In addition to incorrect datatypes, another common problem when dealing with real-world data is missing values. \nThese can arise for many reasons and have to be either filled in or removed before we train a machine learning model. \nFirst, let’s get a sense of how many missing values are in each column (see the <a href="https://github.com/WillKoehrsen/machine-learning-project-walkthrough/blob/master/Machine%20Learning%20Project%20Part%201.ipynb" target="_blank" rel="noopener nofollow">notebook for code</a>).\n<img src="https://miro.medium.com/max/552/1*sMBTwTO63m_mM-Y-6VFveA.png">\n(To create this table, I used a function from this <a href="https://stackoverflow.com/questions/26266362/how-to-count-the-nan-values-in-a-column-in-pandas-dataframe/39734251#39734251" target="_blank" rel="noopener nofollow">Stack Overflow Forum</a>).\nWhile we always want to be careful about removing information, if a column has a high percentage of missing values, then it probably will not be useful to our model. \nThe threshold for removing columns should depend on the problem (<a href="https://discuss.analyticsvidhya.com/t/what-should-be-the-allowed-percentage-of-missing-values/2456" target="_blank" rel="noopener nofollow">here is a discussion</a>), and for this project, we will remove any columns with more than 50% missing values.\nAt this point, we may also want to remove outliers. \nThese can be due to typos in data entry, mistakes in units, or they could be legitimate but extreme values. \nFor this project, we will remove anomalies based on the <a href="https://www.itl.nist.gov/div898/handbook/prc/section1/prc16.htm" target="_blank" rel="noopener nofollow">definition of extreme outliers</a>:\n<ul><li>Below the first quartile − 3 ∗ interquartile range</li><li>Above the third quartile + 3 ∗ interquartile range</li></ul>(For the code to remove the columns and the anomalies, see the notebook). \nAt the end of the data cleaning and anomaly removal process, we are left with over 11,000 buildings and 49 features.\n<h3>Exploratory Data Analysis</h3>Now that the tedious — but necessary — step of data cleaning is complete, we can move on to exploring our data! <a href="https://en.wikipedia.org/wiki/Exploratory_data_analysis" target="_blank" rel="noopener nofollow">Exploratory Data Analysis </a>(EDA) is an open-ended process where we calculate statistics and make figures to find trends, anomalies, patterns, or relationships within the data.\nIn short, the goal of EDA is to learn what our data can tell us. \nIt generally starts out with a high level overview, then narrows in to specific areas as we find interesting parts of the data. \nThe findings may be interesting in their own right, or they can be used to inform our modeling choices, such as by helping us decide features to use.\n<h3>Single Variable Plots</h3>The goal is to predict the Energy Star Score (renamed to score in our data) so a reasonable place to start is examining the distribution of this variable. \nA histogram is a simple yet effective way to visualize the distribution of a single variable and is easy to make using matplotlib.\nimport matplotlib.pyplot as plt\n# Histogram of the Energy Star Score\nplt.style.use(&#x27;fivethirtyeight&#x27;)\nplt.hist(data[&#x27;score&#x27;].dropna(), bins = 100, edgecolor = &#x27;k&#x27;);\nplt.xlabel(&#x27;Score&#x27;); plt.ylabel(&#x27;Number of Buildings&#x27;); \nplt.title(&#x27;Energy Star Score Distribution&#x27;);\n<img src="https://miro.medium.com/max/552/1*1OWn-GlBnERW5xs0M83a5Q.png">\nThis looks quite suspicious! The Energy Star score is a percentile rank, means we would expect to see a uniform distribution, with each score assigned to the same number of buildings. \nHowever, a disproportionate number of buildings have either the highest, 100, or the lowest, 1, score (higher is better for the Energy Star score).\nIf we go back to the definition of the score, we see that it is based on “self-reported energy usage” might explain the very high scores. \nAsking building owners to report their own energy usage is like asking students to report their own scores on a test! As a result, this probably is not the most objective measure of a building’s energy efficiency.\nIf we had an unlimited amount of time, we might want to investigate why so many buildings have very high and very low scores we could by selecting these buildings and seeing what they have in common. \nHowever, our objective is only to predict the score and not to devise a better method of scoring buildings! We can make a note in our report that the scores have a suspect distribution, but our main focus in on predicting the score.\n<h3>Looking for Relationships</h3>A major part of EDA is searching for relationships between the features and the target. \nVariables that are correlated with the target are useful to a model because they can be used to predict the target. \nOne way to examine the effect of a categorical variable (takes on only a limited set of values) on the target is through a density plot using the seaborn library.\nA <a href="https://towardsdatascience.com/histograms-and-density-plots-in-python-f6bda88f5ac0">density plot can be thought of as a smoothed histogram</a> because it shows the distribution of a single variable. \nWe can color a density plot by class to see how a categorical variable changes the distribution. \nThe following code makes a density plot of the Energy Star Score colored by the the type of building (limited to building types with more than 100 data points):\n<img src="https://miro.medium.com/max/552/1*WGNYzKjgXSnahDwacrbdLw.png">\nWe can see that the building type has a significant impact on the Energy Star Score. \nOffice buildings tend to have a higher score while Hotels have a lower score. \nThis tells us that we should include the building type in our modeling because it does have an impact on the target. \nAs a categorical variable, we will have to one-hot encode the building type.\nA similar plot can be used to show the Energy Star Score by borough:\n<img src="https://miro.medium.com/max/552/1*ZSY_DEr-Gi2uSLp7tPSFVQ.png">\nThe borough does not seem to have as large of an impact on the score as the building type. \nNonetheless, we might want to include it in our model because there are slight differences between the boroughs.\nTo quantify relationships between variables, we can use the <a href="http://www.statisticshowto.com/probability-and-statistics/correlation-coefficient-formula/" target="_blank" rel="noopener nofollow">Pearson Correlation Coefficient</a>. \nThis is a measure of the strength and direction of a linear relationship between two variables. \nA score of +1 is a perfectly linear positive relationship and a score of -1 is a perfectly negative linear relationship. \nSeveral values of the correlation coefficient are shown below:\n<img src="https://miro.medium.com/max/552/1*5pIn2VmzWxL2mzY8Z433hg.png">\nValues of the Pearson Correlation Coefficient (<a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient" target="_blank" rel="noopener nofollow">Source</a>)\nWhile the correlation coefficient cannot capture non-linear relationships, it is a good way to start figuring out how variables are related. \nIn Pandas, we can easily calculate the correlations between any columns in a dataframe:\n# Find all correlations with the score and sort \ncorrelations_data = data.corr()[&#x27;score&#x27;].sort_values()\nThe most negative (left) and positive (right) correlations with the target:\n<img src="https://miro.medium.com/max/552/1*1Vm0gHqc0cXoDAgH0eiP_w.png">\n<img src="https://miro.medium.com/max/552/1*mNju0CER7cYrvbr-4vx-Fw.png">\nThere are several strong negative correlations between the features and the target with the most negative the different categories of EUI (these measures vary slightly in how they are calculated). \nThe <a href="https://www.energystar.gov/buildings/facility-owners-and-managers/existing-buildings/use-portfolio-manager/understand-metrics/what-energy" target="_blank" rel="noopener nofollow">EUI — Energy Use Intensity</a> — is the amount of energy used by a building divided by the square footage of the buildings. \nIt is meant to be a measure of the efficiency of a building with a lower score being better. \nIntuitively, these correlations make sense: as the EUI increases, the Energy Star Score tends to decrease.\n<h3>Two-Variable Plots</h3>To visualize relationships between two continuous variables, we use scatterplots. \nWe can include additional information, such as a categorical variable, in the color of the points. \nFor example, the following plot shows the Energy Star Score vs. \nSite EUI colored by the building type:\n<img src="https://miro.medium.com/max/552/1*C8K7UQDrD9ASsKU-diTN_Q.png">\nThis plot lets us visualize what a correlation coefficient of -0.7 looks like. \nAs the Site EUI decreases, the Energy Star Score increases, a relationship that holds steady across the building types.\nThe final exploratory plot we will make is known as the <a href="https://towardsdatascience.com/visualizing-data-with-pair-plots-in-python-f228cf529166">Pairs Plot. </a>\nThis is a great exploration tool because it lets us see relationships between multiple pairs of variables as well as distributions of single variables. \nHere we are using the seaborn visualization library and the PairGrid function to create a Pairs Plot with scatterplots on the upper triangle, histograms on the diagonal, and 2D kernel density plots and correlation coefficients on the lower triangle.\n<img src="https://miro.medium.com/max/552/1*eHKEmJk0LrIQc8yxUYWhIg.png">\nTo see interactions between variables, we look for where a row intersects with a column. \nFor example, to see the correlation of Weather Norm EUI with score, we look in the Weather Norm EUI row and the score column and see a correlation coefficient of -0.67. \nIn addition to looking cool, plots such as these can help us decide variables to include in modeling.\n<h3>Feature Engineering and Selection</h3><a href="https://elitedatascience.com/feature-engineering-best-practices" target="_blank" rel="noopener nofollow">Feature engineering and selection</a> often provide the greatest return on time invested in a machine learning problem. \nFirst of all, let’s define what these two tasks are:\n<ul><li><a href="https://machinelearningmastery.com/discover-feature-engineering-how-to-engineer-features-and-how-to-get-good-at-it/" target="_blank" rel="noopener nofollow">Feature engineering:</a> The process of taking raw data and extracting or creating new features. \nThis might mean taking transformations of variables, such as a natural log and square root, or one-hot encoding categorical variables so they can be used in a model. \nGenerally, I think of feature engineering as creating additional features from the raw data.</li><li><a href="https://machinelearningmastery.com/an-introduction-to-feature-selection/" target="_blank" rel="noopener nofollow">Feature selection:</a> The process of choosing the most relevant features in the data. \nIn feature selection, we remove features to help the model generalize better to new data and create a more interpretable model. \nGenerally, I think of feature selection as subtracting features so we are left with only those that are most important.</li></ul>A machine learning model can only learn from the data we provide it, so ensuring that data includes all the relevant information for our task is crucial. \nIf we don’t feed a model the correct data, then we are setting it up to fail and we should not expect it to learn!\nFor this project, we will take the following feature engineering steps:\n<ul><li>One-hot encode categorical variables (borough and property use type)</li><li>Add in the natural log transformation of the numerical variables</li></ul><a href="https://hackernoon.com/what-is-one-hot-encoding-why-and-when-do-you-have-to-use-it-e3c6186d008f" target="_blank" rel="noopener nofollow">One-hot encoding</a> is necessary to include categorical variables in a model. \nA machine learning algorithm cannot understand a building type of “office”, so we have to record it as a 1 if the building is an office and a 0 otherwise.\nAdding transformed features can help our model learn non-linear relationships within the data. \n<a href="https://datascience.stackexchange.com/questions/21650/feature-transformation-on-input-data" target="_blank" rel="noopener nofollow">Taking the square root, natural log, or various powers of features</a> is common practice in data science and can be based on domain knowledge or what works best in practice. \nHere we will include the natural log of all numerical features.\nThe following code selects the numeric features, takes log transformations of these features, selects the two categorical features, one-hot encodes these features, and joins the two sets together. \nThis seems like a lot of work, but it is relatively straightforward in Pandas!\nAfter this process we have over 11,000 observations (buildings) with 110 columns (features). \nNot all of these features are likely to be useful for predicting the Energy Star Score, so now we will turn to feature selection to remove some of the variables.\n<h3>Feature Selection</h3>Many of the 110 features we have in our data are redundant because they are highly correlated with one another. \nFor example, here is a plot of Site EUI vs Weather Normalized Site EUI have a correlation coefficient of 0.997.\n<img src="https://miro.medium.com/max/552/1*apjbGlP15KRg8blBwq_96A.png">\nFeatures that are strongly correlated with each other are known as <a href="https://en.wikipedia.org/wiki/Multicollinearity" target="_blank" rel="noopener nofollow">collinear</a> and removing one of the variables in these pairs of features can often help a <a href="https://www.quora.com/Why-is-multicollinearity-bad-in-laymans-terms-In-feature-selection-for-a-regression-model-intended-for-use-in-prediction-why-is-it-a-bad-thing-to-have-multicollinearity-or-highly-correlated-independent-variables" target="_blank" rel="noopener nofollow">machine learning model generalize and be more interpretable</a>. \n(I should point out we are talking about correlations of features with other features, not correlations with the target, help our model!)\nThere are a number of methods to calculate collinearity between features, with one of the most common the <a href="http://www.statisticshowto.com/variance-inflation-factor/" target="_blank" rel="noopener nofollow">variance inflation factor</a>. \nIn this project, we will use thebcorrelation coefficient to identify and remove collinear features. \nWe will drop one of a pair of features if the correlation coefficient between them is greater than 0.6. \nFor the implementation, take a look at the notebook (and <a href="https://stackoverflow.com/a/43104383" target="_blank" rel="noopener nofollow">this Stack Overflow answer</a>)\nWhile this value may seem arbitrary, I tried several different thresholds, and this choice yielded the best model. \nMachine learning is an<a href="http://www.dictionary.com/browse/empirical" target="_blank" rel="noopener nofollow"> empirical field</a> and is often about experimenting and finding what performs best! After feature selection, we are left with 64 total features and 1 target.\n# Remove any columns with all na values\nfeatures  = features.dropna(axis=1, how = &#x27;all&#x27;)\nprint(features.shape)\n<k>(11319, 65)</k>\n<h3>Establishing a Baseline</h3>We have now completed data cleaning, exploratory data analysis, and feature engineering. \nThe final step to take before getting started with modeling is establishing a naive baseline. \nThis is essentially a guess against we can compare our results. \nIf the machine learning models do not beat this guess, then we might have to conclude that machine learning is not acceptable for the task or we might need to try a different approach.\nFor regression problems, a reasonable naive baseline is to guess the median value of the target on the training set for all the examples in the test set. \nThis sets a relatively low bar for any model to surpass.\nThe metric we will use is <a href="https://en.wikipedia.org/wiki/Mean_absolute_error" target="_blank" rel="noopener nofollow"><k>mean absolute error </k>(mae)</a> measures the average absolute error on the predictions. \nThere are many metrics for regression, but I like <a href="https://www.coursera.org/learn/machine-learning-projects/lecture/wIKkC/single-number-evaluation-metric" target="_blank" rel="noopener nofollow">Andrew Ng’s advice</a> to pick a single metric and then stick to it when evaluating models. \nThe mean absolute error is easy to calculate and is interpretable.\nBefore calculating the baseline, we need to split our data into a training and a testing set:\n<li>The <k>training set</k> of features is what we provide to our model during training along with the answers. \nThe goal is for the model to learn a mapping between the features and the target.</li><li>The <k>testing set</k> of features is used to evaluate the trained model. \nThe model is not allowed to see the answers for the testing set and must make predictions using only the features. \nWe know the answers for the test set so we can compare the test predictions to the answers.</li>\nWe will use 70% of the data for training and 30% for testing:\n# Split into 70% training and 30% testing set\nX, X_test, y, y_test = train_test_split(features, targets, \n          test_size = 0.3, \n          random_state = 42)\nNow we can calculate the naive baseline performance:\n<k>The baseline guess is a score of 66.00\nBaseline Performance on the test set: MAE = 24.5164</k>\nThe naive estimate is off by about 25 points on the test set. \nThe score ranges from 1–100, so this represents an error of 25%, quite a low bar to surpass!\n<h3>Conclusions</h3>In this article we walked through the first three steps of a machine learning problem. \nAfter defining the question, we:\n<li>Cleaned and formatted the raw data</li><li>Performed an exploratory data analysis to learn about the dataset</li><li>Developed a set of features that we will use for our models</li>\nFinally, we also completed the crucial step of establishing a baseline against we can judge our machine learning algorithms.\nThe second post (<a href="https://towardsdatascience.com/a-complete-machine-learning-project-walk-through-in-python-part-two-300f1f8147e2">available here</a>) will show how to evaluate machine learning models using <a href="http://scikit-learn.org/stable/" target="_blank" rel="noopener nofollow">Scikit-Learn</a>, select the best model, and perform hyperparameter tuning to optimize the model. \nThe third post, dealing with model interpretation and reporting results, <a href="https://towardsdatascience.com/a-complete-machine-learning-walk-through-in-python-part-three-388834e8804b">is here</a>.\n',
'<h2>Keras vs PyTorch 深度学习</h2>\n深度学习有很多框架和库。\n这篇文章对两个流行库 Keras 和 Pytorch 进行了对比，因为二者都很容易上手，初学者能够轻松掌握。\n我们同时用 Keras 和 PyTorch 训练一个简单的模型。\n这两个工具最大的区别在于：PyTorch 默认为 eager 模式，而 Keras 基于 TensorFlow 和其他框架运行（现在主要是 TensorFlow），其默认模式为图模式。\n最新版本的 TensorFlow 也提供类似 PyTorch 的 eager 模式，但是速度较慢。\n如果你熟悉 NumPy，你可以将 PyTorch 视为有 GPU 支持的 NumPy。\n此外，现在有多个具备高级 API（如 Keras）且以 PyTorch 为后端框架的库，如 Fastai、Lightning、Ignite 等。\n如果你对它们感兴趣，那你选择 PyTorch 的理由就多了一个。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnkLHhLOiccsEJMicfxticFsMj4IricCvib54H1Wm2yyBV7icibKsByjmw76qjsQ/640">\nKeras 自带一些样本数据集，如 MNIST 手写数字数据集。\n以上代码可以加载这些数据，数据集图像是 NumPy 数组格式。\nKeras 还做了一点图像预处理，使数据适用于模型。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnk7HBc9pCmO4KiavqKdliaiaedD1aIjDZIMLQxqWWtBj6lb1Yic8pHIYvIEA/640">\n以上代码展示了模型。\n在 Keras（TensorFlow）上，我们首先需要定义要使用的东西，然后立刻运行。\n在 Keras 中，我们无法随时随地进行试验，不过 PyTorch 可以。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnkHkibLfGNH3H3dSvFOZV47a9bM3Y96ONk5GE60mvOdg8vSKnB4TkfBEg/640">\n以上的代码用于训练和评估模型。\n我们可以使用 save() 函数来保存模型，以便后续用 load_model() 函数加载模型。\npredict() 函数则用来获取模型在测试数据上的输出。\n现在我们概览了 Keras 基本模型实现过程，现在来看 PyTorch。\nPyTorch 中的模型实现研究人员大多使用 PyTorch，因为它比较灵活，代码样式也是试验性的。\n你可以在 PyTorch 中调整任何事，并控制全部，但控制也伴随着责任。\n在 PyTorch 里进行试验是很容易的。\n因为你不需要先定义好每一件事再运行。\n我们能够轻松测试每一步。\n因此，在 PyTorch 中 debug 要比在 Keras 中容易一些。\n接下来，我们来看简单的数字识别模型实现。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnkGlRVm9hznQEgiapBU9qNOeOkYiams85U0sBM6S5xDKSS1HJakT8v7UUw/640">\n以上代码导入了必需的库，并定义了一些变量。\nn_epochs、momentum 等变量都是必须设置的超参数。\n此处不讨论细节，我们的目的是理解代码的结构。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnkgUwG2Obtldwq6UEPJaIFWhmBwtme3KOIW2oPJCIwHUQUW99HV3iaBAg/640">\n以上代码旨在声明用于加载训练所用批量数据的数据加载器。\n下载数据有很多种方式，不受框架限制。\n如果你刚开始学习深度学习，以上代码可能看起来比较复杂。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnk0xn97kqIe8SO15nSxdcbm0E9jpZn1y0Nz0qsfYpeWFAr71dkVTvlyQ/640">\n在此，我们定义了模型。\n这是一种创建网络的通用方法。\n我们扩展了 nn.Module，在前向传递中调用 forward() 函数。\nPyTorch 的实现比较直接，且能够根据需要进行修改。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnkmTsBaO8jPpP6BdDPTMXtVw4icoVsicianicCdq2Tpeq7YoHqibLct3OrQyQ/640">\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnkOtJvtc4FNr71JxVpWQLibEgicJW4ttHZ3M4ceviauNglNp3c6Y9lhqdVA/640">\n以上代码段定义了训练和测试函数。\n在 Keras 中，我们需要调用 fit() 函数把这些事自动做完。\n但是在 PyTorch 中，我们必须手动执行这些步骤。\n像 Fastai 这样的高级 API 库会简化它，训练所需的代码也更少。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicUJnpRAfebKNAZ98tFecnkWX59j3xXHpNgfue0SSpt9Qj13cAcHB4YN5G5EcHVZr9nePO3GgkpLQ/640">\n最后，保存和加载模型，以进行二次训练或预测。\n这部分没有太多差别。\nPyTorch 模型通常有 pt 或 pth 扩展。\n关于框架选择的建议学会一种模型并理解其概念后，再转向另一种模型，并不是件难事，只是需要一些时间。\nColab 链接：PyTorch：https://colab.research.google.com/drive/1irYr0byhK6XZrImiY4nt9wX0fRp3c9mx?usp=sharing\nKeras：https://colab.research.google.com/drive/1QH6VOY_uOqZ6wjxP0K8anBAXmI0AwQCm?usp=sharing\n<em>原文链接：https://medium.com/@karan_jakhar/keras-vs-pytorch-dilemma-dc434e5b5ae0</em>\n<a href="https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&mid=2650787158&idx=5&sn=9be648a38ac3cec96709479b940cba9b&chksm=871a0928b06d803e20574397686e32d7fd1c376d53c00f6a83d8056d4d15d8952aa807faca9e&scene=0&xtrack=1#rd" class="whitebut ">自动化数据增强：实践、理论和新方向</a>\n',
'<h2>使用 CMake 构建 Python C/C++ 扩展</h2>\n众所周知，Python 语言的性能相比其他语言如 C/C++ 等要弱很多，所以当我们需要高性能的时候往往借助于 Python 的 C/C++ 扩展或者 Cython。\n通常构建 Python C/C++ 扩展会使用 distutils 的 Extension 类，需要在 setup.py 中配置头文件包含路径 include_dirs、C/C++ 源文件路径 sources 等，比如下面这个Python 官方文档上的例子：\nfrom distutils.core import setup, Extension\nmodule1 = Extension(\n \'demo\',\n define_macros=[\n  (\'MAJOR_VERSION\', \'1\'),\n  (\'MINOR_VERSION\', \'0\')\n ],\n include_dirs=[\'/usr/local/include\'],\n libraries =[\'tcl83\'],\n library_dirs=[\'/usr/local/lib\'],\n sources=[\'demo.c\']\n)\nsetup(\n name=\'PackageName\',\n version=\'1.0\',\n description=\'This is a demo package\',\n author=\'Martin v. Loewis\',\n author_email=\'martin@v.loewis.de\',\n url=\'https://docs.python.org/extending/building\',\n long_description=\'\'\'\nThis is really just a demo package.\n\'\'\',\n ext_modules=[module1]\n)\n这种方式对于绝大多数简单的项目应该是足够了，而当你需要用到一些 C/C++ 第三方库的时候可能会遇到因为某些原因需要将三方库的源码和项目源码一起进行编译的情况（比如 abseil-cpp），这个情况下往往会遇到 C/C++ 依赖管理的问题，CMake 则是常用的 C/C++ 依赖管理工具，本文将总结、分享一下使用 CMake 来构建 Python C/C++ 扩展的方案。\n调研可选方案\n首先来看一下 CMake 项目本身一般是如何构建的，一般 CMake 项目都会在项目根目录下有个 CMakeLists.txt 的 CMake 项目定义文件，构建方式通常如下：\nmkdir build\ncd build\ncmake ..\nmake\n那基本的思路就是在 Python 包构建过程中（pip install 或者 python setup.py install 等）调用上述命令完成扩展构建。通过 Google 搜索可以发现，一个方案是通过继承 distutils 的 Extension 来手工实现，另一个方案则是用别人写好的现成的封装库 scikit-build。\n方案一 distutils CMake extension\n这个方案有个现成的例子，pybind11 的 CMake 示例项目，BTW，pybind11 也是一个写 Python C++ 扩展的项目。看一下它的 setup.py 的代码：\nimport os\nimport re\nimport sys\nimport platform\nimport subprocess\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom distutils.version import LooseVersion\nclass CMakeExtension(Extension):\n def __init__(self, name, sourcedir=\'\'):\n  Extension.__init__(self, name, sources=[])\n  self.sourcedir = os.path.abspath(sourcedir)\nclass CMakeBuild(build_ext):\n def run(self):\n  try:\n   out = subprocess.check_output([\'cmake\', \'--version\'])\n  except OSError:\n   raise RuntimeError("CMake must be installed to build the following extensions: " +\n          ", ".join(e.name for e in self.extensions))\n  if platform.system() == "Windows":\n   cmake_version = LooseVersion(re.search(r\'version\s*([\d.]+)\', out.decode()).group(1))\n   if cmake_version < \'3.1.0\':\n    raise RuntimeError("CMake >= 3.1.0 is required on Windows")\n  for ext in self.extensions:\n   self.build_extension(ext)\n def build_extension(self, ext):\n  extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n  # required for auto-detection of auxiliary "native" libs\n  if not extdir.endswith(os.path.sep):\n   extdir += os.path.sep\n  cmake_args = [\'-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=\' + extdir,\n       \'-DPYTHON_EXECUTABLE=\' + sys.executable]\n  cfg = \'Debug\' if self.debug else \'Release\'\n  build_args = [\'--config\', cfg]\n  if platform.system() == "Windows":\n   cmake_args += [\'-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}\'.format(cfg.upper(), extdir)]\n   if sys.maxsize > 2**32:\n    cmake_args += [\'-A\', \'x64\']\n   build_args += [\'--\', \'/m\']\n  else:\n   cmake_args += [\'-DCMAKE_BUILD_TYPE=\' + cfg]\n   build_args += [\'--\', \'-j2\']\n  env = os.environ.copy()\n  env[\'CXXFLAGS\'] = \'{} -DVERSION_INFO=\\"{}\\"\'.format(env.get(\'CXXFLAGS\', \'\'),\n                 self.distribution.get_version())\n  if not os.path.exists(self.build_temp):\n   os.makedirs(self.build_temp)\n  subprocess.check_call([\'cmake\', ext.sourcedir] + cmake_args, cwd=self.build_temp, env=env)\n  subprocess.check_call([\'cmake\', \'--build\', \'.\'] + build_args, cwd=self.build_temp)\nsetup(\n name=\'cmake_example\',\n version=\'0.0.1\',\n author=\'Dean Moldovan\',\n author_email=\'dean0x7d@gmail.com\',\n description=\'A test project using pybind11 and CMake\',\n long_description=\'\',\n ext_modules=[CMakeExtension(\'cmake_example\')],\n cmdclass=dict(build_ext=CMakeBuild),\n zip_safe=False,\n)\n可以看出，它通过重写 setuptools 的 build_ext cmdclass 在构建过程中调用了 cmake 命令完成扩展的构建\n这个方案比较适合 pybind11 的项目，因为它已经提供了很多 CMake 的 module 比如怎么找到 Python.h、libpython 等，打开示例项目的 CMakeLists.txt 可以发现它使用了一个 pybind11 提供的 CMake 函数 pybind11_add_module 来定义 Python 扩展，免去了很多繁琐的配置。\ncmake_minimum_required(VERSION 2.8.12)\nproject(cmake_example)\nadd_subdirectory(pybind11)\npybind11_add_module(cmake_example src/main.cpp)\n如果不使用 pybind11 则比较麻烦，看看 Apache Arrow Python 包的 CMakeLists.txt 感受一下。\n方案二 scikit-build\nscikit-build 是一个增强的 Python C/C++/Fortan/Cython 扩展构建系统生成器，本质上也是 Python setuptools 和 CMake 的胶水。\n我们看一下 sciket-build 的 hello-cpp 示例：\nsetup.py\nimport sys\nfrom skbuild import setup\n# Require pytest-runner only when running tests\npytest_runner = ([\'pytest-runner>=2.0,&lt;3dev\']\n     if any(arg in sys.argv for arg in (\'pytest\', \'test\'))\n     else [])\nsetup_requires = pytest_runner\nsetup(\n name="hello-cpp",\n version="1.2.3",\n description="a minimal example package (cpp version)",\n author=\'The scikit-build team\',\n license="MIT",\n packages=[\'hello\'],\n tests_require=[\'pytest\'],\n setup_requires=setup_requires\n)\n基本上就是一个 setuptools.setup 的完整替代，不再使用 from setuptools import set 转用 from skbuild import setup。\nCMakeLists.txt\ncmake_minimum_required(VERSION 3.4.0)\nproject(hello)\nfind_package(PythonExtensions REQUIRED)\nadd_library(_hello MODULE hello/_hello.cxx)\npython_extension_module(_hello)\ninstall(TARGETS _hello LIBRARY DESTINATION hello)\n这里没有看到类似上面 pybind11 CMake 示例中的 add_subdirectory(pybind11) 语句，而是直接用的 find_package(PythonExtensions REQUIRED) 和 python_extension_module CMake 函数：\nPythonExtensions 的 CMake 定义已经打包在 scikit-build 中\n调用 skbuild.setup 的过程中 scikit-build 自动把它打包的 CMake 定义文件加载了所以上面才不需要像 pybind11 那样做\ninstall(TARGETS _hello LIBRARY DESTINATION hello) 将构建好的扩展的动态链接库复制到 hello/ 目录中，从而可以在 Python 中使用 from hello._hello import hello 导入扩展中的 hello 函数\n通常还会增加 pyproject.toml 来安装 pip 构建时候需要的依赖包：\n[build-system]\nrequires = ["setuptools", "wheel", "scikit-build", "cmake", "ninja"]\n比较有意思的是，scikit-build 并不需要你的系统上全局安装 CMake/Ninja，它打包了 manylinux 的 CMake 和 Ninja 的二进制 wheels 并发布到了 PyPi 上，cool.\nscikit-build 还支持类似的方式构建使用 Cython 和 pybind11 等的扩展，功能强大非常方便。\n后记\n最近工作中完成了使用 CMake 和 scikit-build 改造一个 C++ 和 Cython 写的 Python 扩展项目以便能够使用 abseil-cpp 的 Swiss Tables 优化性能，这篇文章差不多就是 brain dump 一下调研的过程，后面我想写一下如何在 Cython 中使用 abseil-cpp 的 containers 的文章，stay tuned.\n<a href="https://schemingdeveloper.com/2019/03/31/generating-c-code-using-python-and-cmake/" class="whitebut ">GENERATING C++ CODE USING PYTHON AND CMAKE</a>\n<a href="https://www.benjack.io/2017/06/12/python-cpp-tests.html" class="whitebut ">Building and testing a hybrid Python/C++ package</a>\n<a href="https://abseil.io/docs/cpp/" class="whitebut ">C++ Developer Guide</a>\n<a href="https://messense.me/" class="whitebut ">Cython</a>\n<a href="https://messense.me/use-abseil-cpp-with-cython" class="whitebut ">在 Cython 项目中使用 abseil-cpp</a>\n',
'<h2>Python Exception Handling Using try, except and finally statement</h2>\nExceptions in Python\nPython has many built-in exceptions that are raised when your program encounters an error.\nWhen these exceptions occur, the Python interpreter stops the current process and passes it to the calling process until it is handled. \nIf not handled, the program will crash.\nFor example, let us consider a program where we have a function A that calls function B, which in turn calls function C. \nIf an exception occurs in function C but is not handled in C, the exception passes to B and then to A.\nIf never handled, an error message is displayed and our program comes to a sudden unexpected halt.\nCatching Exceptions in Python\nIn Python, exceptions can be handled using a try statement.\nThe critical operation which can raise an exception is placed inside the try clause. \nThe code that handles the exceptions is written in the except clause.\nWe can thus choose what operations to perform once we have caught the exception. \nHere is a simple example.\n# import module sys to get the type of exception\nimport sys\nrandomList = [\'a\', 0, 2]\nfor entry in randomList:\n try:\n  print("The entry is", entry)\n  r = 1/int(entry)\n  break\n except:\n  print("Oops!", sys.exc_info()[0], "occurred.")\n  print("Next entry.")\n  print()\nprint("The reciprocal of", entry, "is", r)\nOutput\nThe entry is a\nOops! &lt;class \'ValueError\'> occurred.\nNext entry.\nThe entry is 0\nOops! &lt;class \'ZeroDivisionError\'> occured.\nNext entry.\nThe entry is 2\nThe reciprocal of 2 is 0.5\nIn this program, we loop through the values of the randomList list. \nAs previously mentioned, the portion that can cause an exception is placed inside the try block.\nIf no exception occurs, the except block is skipped and normal flow continues(for last value). \nBut if any exception occurs, it is caught by the except block (first and second values).\nHere, we print the name of the exception using the exc_info() function inside sys module. \nWe can see that a causes ValueError and 0 causes ZeroDivisionError.\nSince every exception in Python inherits from the base Exception class, we can also perform the above task in the following way:\n# import module sys to get the type of exception\nimport sys\nrandomList = [\'a\', 0, 2]\nfor entry in randomList:\n try:\n  print("The entry is", entry)\n  r = 1/int(entry)\n  break\n except Exception as e:\n  print("Oops!", e.__class__, "occurred.")\n  print("Next entry.")\n  print()\nprint("The reciprocal of", entry, "is", r)\nThis program has the same output as the above program.\nCatching Specific Exceptions in Python\nIn the above example, we did not mention any specific exception in the except clause.\nThis is not a good programming practice as it will catch all exceptions and handle every case in the same way. \nWe can specify which exceptions an except clause should catch.\nA try clause can have any number of except clauses to handle different exceptions, however, only one will be executed in case an exception occurs.\nWe can use a tuple of values to specify multiple exceptions in an except clause. \nHere is an example pseudo code.\ntry:\n   # do something\n   pass\nexcept ValueError:\n   # handle ValueError exception\n   pass\nexcept (TypeError, ZeroDivisionError):\n   # handle multiple exceptions\n   # TypeError and ZeroDivisionError\n   pass\nexcept:\n   # handle all other exceptions\n   pass\nRaising Exceptions in Python\nIn Python programming, exceptions are raised when errors occur at runtime. \nWe can also manually raise exceptions using the raise keyword.\nWe can optionally pass values to the exception to clarify why that exception was raised.\n>>> raise KeyboardInterrupt\nTraceback (most recent call last):\n...\nKeyboardInterrupt\n>>> raise MemoryError("This is an argument")\nTraceback (most recent call last):\n...\nMemoryError: This is an argument\n>>> try:\n... \n a = int(input("Enter a positive integer: "))\n... \n if a &lt;= 0:\n... \n  raise ValueError("That is not a positive number!")\n... \nexcept ValueError as ve:\n... \n print(ve)\n... \n   \nEnter a positive integer: -2\nThat is not a positive number!\nPython try...finally\nThe try statement in Python can have an optional finally clause. \nThis clause is executed no matter what, and is generally used to release external resources.\nFor example, we may be connected to a remote data center through the network or working with a file or a Graphical User Interface (GUI).\nIn all these circumstances, we must clean up the resource before the program comes to a halt whether it successfully ran or not. \nThese actions (closing a file, GUI or disconnecting from network) are performed in the finally clause to guarantee the execution.\nHere is an example of file operations to illustrate this.\ntry:\n   f = open("test.txt",encoding = \'utf-8\')\n   # perform file operations\nfinally:\n   f.close()\nThis type of construct makes sure that the file is closed even if an exception occurs during the program execution.\n',
'<h2><span class="orange">10 行以下 Python 高端操作</span></h2>\n',
'<h2>一、生成二维码</h2>\n二维码作为一种信息传递的工具，在当今社会发挥了重要作用。而生成一个二维码也非常简单，在Python中我们可以通过MyQR模块了生成二维码，而生成一个二维码我们只需要2行代码，我们先安装MyQR模块，这里选用国内的源下载：\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ myqr\n安装完成后我们就可以开始写代码了：\nfrom MyQR import myqr # 注意大小写\nmyqr.run(words=\'http://www.baidu.com\') # 如果为网站则会自动跳转，文本直接显示，不支持中文\n我们执行代码后会在项目下生成一张二维码。当然我们还可以丰富二维码：\nfrom MyQR import myqr\nmyqr.run(\n words=\'http://www.baidu.com\', # 包含信息\n picture=\'lbxx.jpg\',   # 背景图片\n colorized=True,   # 是否有颜色，如果为False则为黑白\n save_name=\'code.png\' # 输出文件名\n)\n效果图如下：\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/ISp5MHPxrhoDYgtgAgYyHKO17prNQtXic8yPOK67ghg8U6yqjTtuvfAXJGH06iaqTBfrXkxxf0o9GGznrrhia7O9g/640">\n另外MyQR还支持动态图片。\n',
'<h2>二、生成词云</h2>\n词云是数据可视化的一种非常优美的方式，我们通过词云可以很直观的看出一些词语出现的频率高低。使用Python我们可以通过wordcloud模块生成词云，我们先安装wordcloud模块：\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ wordcloud\n然后我们就可以写代码了：\nfrom wordcloud import WordCloud\nwc = WordCloud() # 创建词云对象\nwc.generate(\'Do not go gentle into that good night\') # 生成词云\nwc.to_file(\'wc.png\') # 保存词云\n执行代码后生成如下词云：\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/ISp5MHPxrhoDYgtgAgYyHKO17prNQtXicn0YlxmfXd51WKrFee1vBeQwN8uudzs3OwMx78V48MuAw5L1SdSQVHQ/640">\n当然这只是最简单的词云，词云更详细的操作可以参见WordCloud生成卡卡西忍术词云[1]。\n',
'<h2>三、批量抠图</h2>\n抠图的实现需要借助百度飞桨的深度学习工具paddlepaddle，我们需要安装两个模块就可以很快的实现批量抠图了，第一个是PaddlePaddle：\npython -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple\n还有一个是paddlehub模型库：\npip install -i https://mirror.baidu.com/pypi/simple paddlehub\n更详细的安装事项可以参见飞桨官网：https://www.paddlepaddle.org.cn/\n接下来我们只需要5行代码就能实现批量抠图：\nimport os, paddlehub as hub\nhumanseg = hub.Module(name=\'deeplabv3p_xception65_humanseg\')  # 加载模型\npath = \'D:/CodeField/Workplace/PythonWorkplace/GrapImage/\' # 文件目录\nfiles = [path + i for i in os.listdir(path)] # 获取文件列表\nresults = humanseg.segmentation(data={\'image\':files}) # 抠图\n抠图效果如下：\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/ISp5MHPxrhoDYgtgAgYyHKO17prNQtXicoTTfl69PkwqznKxzic6iaOLoZfU0foascnytfbFjV2JvfIYpogRZqnqA/640">\n其中左边为原图，右边为抠图后填充黄色背景图。\n',
'<h2>四、文字情绪识别</h2>\n在paddlepaddle面前，自然语言处理也变得非常简单。实现文字情绪识别我们同样需要安装PaddlePaddle和Paddlehub，具体安装参见三中内容。然后就是我们的代码部分了：\nimport paddlehub as hub  \nsenta = hub.Module(name=\'senta_lstm\')  # 加载模型\nsentence = [ # 准备要识别的语句\n \'你真美\', \'你真丑\', \'我好难过\', \'我不开心\', \'这个游戏好好玩\', \'什么垃圾游戏\',\n]\nresults = senta.sentiment_classify(data={"text":sentence}) # 情绪识别\n# 输出识别结果\nfor result in results:\n print(result)\n识别的结果是一个字典列表：\n{\'text\': \'你真美\', \'sentiment_label\': 1, \'sentiment_key\': \'positive\', \'positive_probs\': 0.9602, \'negative_probs\': 0.0398}\n{\'text\': \'你真丑\', \'sentiment_label\': 0, \'sentiment_key\': \'negative\', \'positive_probs\': 0.0033, \'negative_probs\': 0.9967}\n{\'text\': \'我好难过\', \'sentiment_label\': 1, \'sentiment_key\': \'positive\', \'positive_probs\': 0.5324, \'negative_probs\': 0.4676}\n{\'text\': \'我不开心\', \'sentiment_label\': 0, \'sentiment_key\': \'negative\', \'positive_probs\': 0.1936, \'negative_probs\': 0.8064}\n{\'text\': \'这个游戏好好玩\', \'sentiment_label\': 1, \'sentiment_key\': \'positive\', \'positive_probs\': 0.9933, \'negative_probs\': 0.0067}\n{\'text\': \'什么垃圾游戏\', \'sentiment_label\': 0, \'sentiment_key\': \'negative\', \'positive_probs\': 0.0108, \'negative_probs\': 0.9892}\n其中sentiment_key字段包含了情绪信息，详细分析可以参见Python自然语言处理只需要5行代码[2]。\n',
'<h2>五、识别是否带了口罩</h2>\n这里同样是使用PaddlePaddle的产品，我们按照上面步骤安装好PaddlePaddle和Paddlehub，然后就开始写代码：\nimport paddlehub as hub\n# 加载模型\nmodule = hub.Module(name=\'pyramidbox_lite_mobile_mask\')\n# 图片列表\nimage_list = [\'face.jpg\']\n# 获取图片字典\ninput_dict = {\'image\':image_list}\n# 检测是否带了口罩\nmodule.face_detection(data=input_dict)\n执行上述程序后，项目下会生成detection_result文件夹，识别结果都会在里面，识别效果如下：\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/ISp5MHPxrhoDYgtgAgYyHKO17prNQtXicre5zicL89eibvjUoqW5uibC9KTF6JD7h2icOMvWLF4DDNTEuLXEXAjf8PA/640">\n',
'<h2>六、简易信息轰炸</h2>\nPython控制输入设备的方式有很多种，我们可以通过win32或者pynput模块。我们可以通过简单的循环操作来达到信息轰炸的效果，这里以pynput为例，我们需要先安装模块：\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ pynput\n在写代码之前我们需要手动获取输入框的坐标：\nfrom pynput import mouse\n# 创建一个鼠标\nm_mouse = mouse.Controller()\n# 输出鼠标位置\nprint(m_mouse.position)\n可能有更高效的方法，但是我不会。\n获取后我们就可以记录这个坐标，消息窗口不要移动。然后我们执行下列代码并将窗口切换至消息页面：\nimport time\nfrom pynput import mouse, keyboard\ntime.sleep(5)\nm_mouse = mouse.Controller() # 创建一个鼠标\nm_keyboard = keyboard.Controller()  # 创建一个键盘\nm_mouse.position = (850, 670)    # 将鼠标移动到指定位置\nm_mouse.click(mouse.Button.left) # 点击鼠标左键\nwhile(True):\n m_keyboard.type(\'你好\')  # 打字\n m_keyboard.press(keyboard.Key.enter) # 按下enter\n m_keyboard.release(keyboard.Key.enter) # 松开enter\n time.sleep(0.5) # 等待 0.5秒\n我承认，这个超过了10行代码，而且也不高端。\n使用前QQ给小号发信息效果如下：\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/ISp5MHPxrhoDYgtgAgYyHKO17prNQtXicHCVl1wKjjib5x9icyh5DsicW4tUeZjTRmmCnlk54bGutKuz69j83XfMIw/640">\n',
'<h2>七、识别图片中的文字</h2>\n我们可以通过Tesseract来识别图片中的文字，在Python中实现起来非常简单，但是前期下载文件、配置环境变量等稍微有些繁琐，所以本文只展示代码：\nimport pytesseract\nfrom PIL import Image\nimg = Image.open(\'text.jpg\')\ntext = pytesseract.image_to_string(img)\nprint(text)\n其中text就是识别出来的文本。如果对准确率不满意的话，还可以使用百度的通用文字接口。\n',
'<h2>八、绘制函数图像</h2>\n图标是数据可视化的重要工具，在Python中matplotlib在数据可视化中发挥重要作用，下面我们来看看使用matplotlib如何绘制一个函数图像：\nimport numpy as np \nfrom matplotlib import pyplot as plt\nx = np.arange(1,11)  # x轴数据\ny =  x * x +  5   # 函数关系\nplt.title("y=x*x+5")  # 图像标题\nplt.xlabel("x")  # x轴标签\nplt.ylabel("y")  # y轴标签\nplt.plot(x,y)  # 生成图像\nplt.show() # 显示图像\n生成图像如下：\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/ISp5MHPxrhoDYgtgAgYyHKO17prNQtXic8icIPyb3gw8WnxSrd3s27mAmhcPLkpLBMVFQs8FtA4YiammnMMZR3c2g/640">\n',
'<h2>九、人工智能</h2>\n下面给大家介绍的是独家的AI人工智能，一般不外传的。这个人工智能可以回答许多问题，当然人工智能现在还在发展阶段，想要理解人类的语言还差很多。废话不多说，下面来看看我们的人工智能Fdj：\nwhile(True):\n question = input()\n answer = question.replace(\'吗\', \'呢\')\n answer = answer.replace(\'？\', \'！\')\n print(answer)\n下面我们来看看简单的测试：\n你好吗？\n我好呢！\n你吃饭了吗？\n我吃饭了呢！\n你要睡了吗？\n我要睡了呢！\n看来我们“小复”还是比较智能的。\n<h3>References</h3>[1] WordCloud生成卡卡西忍术词云: https://blog.csdn.net/ZackSock/article/details/103517841\n',
'<h2>Density and Contour Plots</h2>\nSometimes it is useful to display three-dimensional data in two dimensions using contours or color-coded regions.\nThere are three Matplotlib functions that can be helpful for this task: plt.contour for contour plots, plt.contourf for filled contour plots, and plt.imshow for showing images.\nThis section looks at several examples of using these. \nWe\'ll start by setting up the notebook for plotting and importing the functions we will use:\nIn [1]:\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use(\'seaborn-white\')\nimport numpy as np\n',
'<h2>Visualizing a Three-Dimensional Function</h2>\nWe\'ll start by demonstrating a contour plot using a function $z = f(x, y)$, using the following particular choice for $f$ (we\'ve seen this before in <a href="02.05-computation-on-arrays-broadcasting.html">Computation on Arrays: Broadcasting</a>, when we used it as a motivating example for array broadcasting):\nIn [2]:\ndef f(x, y):\n return np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\nA contour plot can be created with the plt.contour function.\nIt takes three arguments: a grid of <em>x</em> values, a grid of <em>y</em> values, and a grid of <em>z</em> values.\nThe <em>x</em> and <em>y</em> values represent positions on the plot, and the <em>z</em> values will be represented by the contour levels.\nPerhaps the most straightforward way to prepare such data is to use the np.meshgrid function, which builds two-dimensional grids from one-dimensional arrays:\nIn [3]:\nx = np.linspace(0, 5, 50)\ny = np.linspace(0, 5, 40)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\nNow let\'s look at this with a standard line-only contour plot:\nIn [4]:\nplt.contour(X, Y, Z, colors=\'black\');\nNotice that by default when a single color is used, negative values are represented by dashed lines, and positive values by solid lines.\nAlternatively, the lines can be color-coded by specifying a colormap with the cmap argument.\nHere, we\'ll also specify that we want more lines to be drawn—20 equally spaced intervals within the data range:\nIn [5]:\nplt.contour(X, Y, Z, 20, cmap=\'RdGy\');\nHere we chose the RdGy (short for <em>Red-Gray</em>) colormap, which is a good choice for centered data.\nMatplotlib has a wide range of colormaps available, which you can easily browse in IPython by doing a tab completion on the plt.cm module:\nplt.cm.&lt;TAB&gt;\nOur plot is looking nicer, but the spaces between the lines may be a bit distracting.\nWe can change this by switching to a filled contour plot using the plt.contourf() function (notice the f at the end), which uses largely the same syntax as plt.contour().\nAdditionally, we\'ll add a plt.colorbar() command, which automatically creates an additional axis with labeled color information for the plot:\nIn [6]:\nplt.contourf(X, Y, Z, 20, cmap=\'RdGy\')\nplt.colorbar();\nThe colorbar makes it clear that the black regions are "peaks," while the red regions are "valleys."\nOne potential issue with this plot is that it is a bit "splotchy." That is, the color steps are discrete rather than continuous, which is not always what is desired.\nThis could be remedied by setting the number of contours to a very high number, but this results in a rather inefficient plot: Matplotlib must render a new polygon for each step in the level.\nA better way to handle this is to use the plt.imshow() function, which interprets a two-dimensional grid of data as an image.\nThe following code shows this:\nIn [7]:\nplt.imshow(Z, extent=[0, 5, 0, 5], origin=\'lower\',\n     cmap=\'RdGy\')\nplt.colorbar()\nplt.axis(aspect=\'image\');\nThere are a few potential gotchas with imshow(), however:\n<ul>\n<li>plt.imshow() doesn\'t accept an <em>x</em> and <em>y</em> grid, so you must manually specify the <em>extent</em> [<em>xmin</em>, <em>xmax</em>, <em>ymin</em>, <em>ymax</em>] of the image on the plot.</li>\n<li>plt.imshow() by default follows the standard image array definition where the origin is in the upper left, not in the lower left as in most contour plots. \nThis must be changed when showing gridded data.</li>\n<li>plt.imshow() will automatically adjust the axis aspect ratio to match the input data; this can be changed by setting, for example, plt.axis(aspect=\'image\') to make <em>x</em> and <em>y</em> units match.</li>\n</ul>\nFinally, it can sometimes be useful to combine contour plots and image plots.\nFor example, here we\'ll use a partially transparent background image (with transparency set via the alpha parameter) and overplot contours with labels on the contours themselves (using the plt.clabel() function):\nIn [8]:\ncontours = plt.contour(X, Y, Z, 3, colors=\'black\')\nplt.clabel(contours, inline=True, fontsize=8)\nplt.imshow(Z, extent=[0, 5, 0, 5], origin=\'lower\',\n     cmap=\'RdGy\', alpha=0.5)\nplt.colorbar();\nThe combination of these three functions—plt.contour, plt.contourf, and plt.imshow—gives nearly limitless possibilities for displaying this sort of three-dimensional data within a two-dimensional plot.\nFor more information on the options available in these functions, refer to their docstrings.\nIf you are interested in three-dimensional visualizations of this type of data, see <a href="04.12-three-dimensional-plotting.html">Three-dimensional Plotting in Matplotlib</a>.\n<a href="https://observablehq.com/@d3/density-contours" class="whitebut ">Density Contours</a>\nExample simple contour plot\nimport numpy as np\nfrom matplotlib.colors import LogNorm\nfrom matplotlib import pyplot as plt\nplt.interactive(True)\nfig=plt.figure(1)\nplt.clf()\n# generate input data; you already have that\nx1 = np.random.normal(0,10,100000)\ny1 = np.random.normal(0,7,100000)/10.\nx2 = np.random.normal(-15,7,100000)\ny2 = np.random.normal(-10,10,100000)/10.\nx=np.concatenate([x1,x2])\ny=np.concatenate([y1,y2])\n# calculate the 2D density of the data given\ncounts,xbins,ybins=np.histogram2d(x,y,bins=100,normed=LogNorm())\n# make the contour plot\nplt.contour(counts.transpose(),extent=[xbins.min(),xbins.max(),\n ybins.min(),ybins.max()],linewidths=3,colors=\'black\',\n linestyles=\'solid\')\nplt.show()\nproduces a nice contour plot. \nThe contour function offers a lot of fancy adjustments, for example let\'s set the levels by hand:\nplt.clf()\nmylevels=[1.e-4, 1.e-3, 1.e-2]\nplt.contour(counts.transpose(),mylevels,extent=[xbins.min(),xbins.max(),\n ybins.min(),ybins.max()],linewidths=3,colors=\'black\',\n linestyles=\'solid\')\nplt.show()\nproducing this plot:\n<img src="https://i.stack.imgur.com/sMch8.png" alt="contour plot with adjusted levels">\nAnd finally, in SM one can do contour plots on linear and log scales, so I spent a little time trying to figure out how to do this in matplotlib. \nHere is an example when the y points need to be plotted on the log scale and the x points still on the linear scale:\nplt.clf()\n# this is our new data which ought to be plotted on the log scale\nynew=10**y\n# but the binning needs to be done in linear space\ncounts,xbins,ybins=np.histogram2d(x,y,bins=100,normed=LogNorm())\nmylevels=[1.e-4,1.e-3,1.e-2]\n# and the plotting needs to be done in the data (i.e., exponential) space\nplt.contour(xbins[:-1],10**ybins[:-1],counts.transpose(),mylevels,\n extent=[xbins.min(),xbins.max(),ybins.min(),ybins.max()],\n linewidths=3,colors=\'black\',linestyles=\'solid\')\nplt.yscale(\'log\')\nplt.show()\nThis produces a plot which looks very similar to the linear one, but with a nice vertical log axis, which is what was intended: \n<img src="https://i.stack.imgur.com/Vu5MB.png" alt="contour plot with log axis">\n',
'<h2>repeatingtimer</h2>\n<a href="https://gist.github.com/alexbw/1187132/5de3149db6e744502c166711114bebc97af928f3" class="whitebut ">repeatingtimer.py</a>\nfrom threading import _Timer\nclass Timer(_Timer):\n """\n See: https://hg.python.org/cpython/file/2.7/Lib/threading.py#l1079\n """\n def run(self):\n  while not self.finished.is_set():\n   self.finished.wait(self.interval)\n   self.function(*self.args, **self.kwargs)\n  self.finished.set()\n',
'<h2>Python Data Analysis</h2>\n<h3>A Note About Python Versions</h3>All examples in this cheat sheet use Python 3. \nWe recommend using the latest stable version of Python, for example, Python 3.8. \nYou can check which version you have installed on your machine by running the following command in the system shell:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.14.03-PM.png">\nSometimes, a development machine will have Python 2 and Python 3 installed side by side. \nHaving two Python versions available is common on macOS. \nIf that is the case for you, you can use the <k>python3</k> command to run Python 3 even if Python 2 is the default in your environment:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.16.45-PM.png">\nIf you don’t have Python 3 installed yet, visit the <a rel="noreferrer noopener" target="_blank" href="https://www.python.org/downloads/">Python Downloads page</a> for instructions on installing it.\nLaunch a Python interpreter by running the python3 command in your shell:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.19.13-PM.png">\n<h3>Libraries and Imports</h3>The easiest way to install Python modules that are needed for <a href="https://www.udacity.com/course/data-analyst-nanodegree--nd002">data analysis</a> is to use pip. \nInstalling NumPy and Pandas takes only a few seconds:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.20.08-PM.png">\nOnce you’ve installed the modules, use the <k>import</k> statement to make the modules available in your program:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.21.15-PM.png">\n<h3>Getting Help With Python Data Analysis Functions</h3>If you get stuck, the built-in Python docs are a great place to check for tips and ways to solve the problem. \nThe Python <k>help()</k> function displays the help article for a method or a class:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.22.20-PM.png">\nThe help function uses the system text pagination program, also known as the pager, to display the documentation. \nMany systems use less as the default text pager, just in case you aren’t familiar with the Vi shortcuts here are the basics:\n<ul><li><k>j</k> and <k>k</k> navigate up and down line by line.</li><li><k>/</k> searches for content in a documentation page.<ul><li>After pressing<k> / </k>type in the search query, press Enter to go to the first occurrence.</li><li>Press <k>n</k> and <k>N</k> to go forward and back through the search results.</li></ul></li><li><k>Ctrl+d </k>and <k>Ctrl+u</k> move the cursor one page down and one page up, respectively.</li></ul>\nAnother useful place to check out for help articles is the online documentation for Python data analysis modules like Pandas and NumPy. \nFor example, the <a target="_blank" href="https://pandas.pydata.org/docs/user_guide/index.html#user-guide" rel="noreferrer noopener">Pandas user guides</a> cover all the Pandas functionality with explanations and examples.\n<h3>Basic language features</h3>A quick tour through the Python basics:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.27.05-PM.png">\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.27.20-PM.png">\nThere are many more useful string methods in Python, find out more about them in the <a rel="noreferrer noopener" target="_blank" href="https://docs.python.org/3.8/library/stdtypes.html#string-methods">Python string docs</a>.\n<h3>Working with data sources</h3>Pandas provides a number of easy-to-use data import methods, including CSV and TSV import, copying from the system clipboard, and reading and writing JSON files. \nThis is sufficient for most Python data analysis tasks:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.30.05-PM.png">\nFind all other Pandas data import functions in the <a rel="noreferrer noopener" target="_blank" href="https://pandas.pydata.org/pandas-docs/stable/reference/io.html">Pandas docs</a>.\n<h3>Working with Pandas Data Frames</h3>Pandas data frames are a great way to explore, clean, tweak, and filter your data sets while doing data analysis in Python. \nThis section covers a few of the things you can do with your Pandas data frames.\n<h4><k>Exploring data</k> </h4>Here are a few functions that allow you to easily know more about the data set you are working on:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.55.42-PM.png">\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-3.57.08-PM.png">\n<h3>Statistical operations</h3>All standard statistical operations like minimums, maximums, and custom quantiles are present in Pandas:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.12.42-PM.png">\n<h4><k>Cleaning the Data</k></h4>It is quite common to have not-a-number <k>(NaN)</k> values in your data set. \nTo be able to operate on a data set with statistical methods, you’ll first need to clean up the data. \nThe <k>fillna</k> and <k>dropna</k> Pandas functions are a convenient way to replace the <k>NaN</k> values with something more representative for your data set, for example, a zero, or to remove the rows with NaN values from the data frame.\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.17.59-PM.png">\n<h4>\n<k>Filtering and sorting</k></h4>Here are some basic commands for filtering and sorting the data in your data frames.\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.19.09-PM.png">\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.19.27-PM.png">\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.19.37-PM.png">\n<h3>Machine Learning</h3>While machine learning algorithms can be incredibly complex, Python’s popular modules make creating a machine learning program straightforward. \nBelow is an example of a simple ML algorithm that uses Python and its data analysis and machine learning modules, namely NumPy, TensorFlow, Keras, and SciKit-Learn. \nIn this program, we generate a sample data set with pizza diameters and their respective prices, train the model on this data set, and then use the model to predict the price of a pizza of a diameter that we choose.\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.22.25-PM.png">\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.22.40-PM.png">\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.22.51-PM-1.png">\nOnce the model is set up we can use it to predict a result:\n<img class="lazy" src="https://blog.udacity.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-29-at-4.22.59-PM.png">\nFor more details on the functionality available in Pandas, visit the <a rel="noreferrer noopener" target="_blank" href="https://pandas.pydata.org/pandas-docs/stable/user_guide/index.html">Pandas user guides</a>. \nFor more powerful math with NumPy (it can be used together with Pandas), check out the <a rel="noreferrer noopener" target="_blank" href="https://numpy.org/doc/1.18/user/quickstart.html">NumPy getting started guide</a>.\n',
'<h2>pytest 自动化测试</h2>\n<a hraf="https://www.youtube.com/watch?v=CDBcNB2RrvE">pytest</a>\n',
'<h2>pandas 教程</h2>\n有一个用于数据科学的包绝对是必需的，它就是 pandas。\npandas 最有趣的地方在于里面隐藏了很多包。\n它是一个核心包，里面有很多其他包的功能。\n这点很棒，因为你只需要使用 pandas 就可以完成工作。\npandas 相当于 python 中 excel：它使用表（也就是 dataframe)，能在数据上做各种变换，但还有其他很多功能。\n如果你早已熟知 python 的使用，可以直接跳到第三段。\n让我们开始吧!\n<h3>pandas 最基本的功能</h3>\n<h3>读取数据</h3>\ndata = pd.read_csv( my_file.csv )data = pd.read_csv( my_file.csv , sep= ; , encoding= latin-1 , nrows=1000, skiprows=[2,5])\nsep 代表的是分隔符。\n如果你在使用法语数据，excel 中 csv 分隔符是「;」，因此你需要显式地指定它。\n编码设置为 latin-1 来读取法语字符。\nnrows=1000 表示读取前 1000 行数据。\nskiprows=[2,5] 表示你在读取文件的时候会移除第 2 行和第 5 行。\n最常用的功能：read_csv, read_excel其他一些很棒的功能：read_clipboard, read_sql\n写数据\ndata.to_csv( my_new_file.csv , index=None)\nindex=None 表示将会以数据本来的样子写入。\n如果没有写 index=None，你会多出一个第一列，内容是 1，2，3，...，一直到最后一行。\n我通常不会去使用其他的函数，像.to_excel, .to_json, .to_pickle 等等，因为.to_csv 就能很好地完成工作，并且 csv 是最常用的表格保存方式。\n<h3>检查数据</h3>\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudiahwdkpu3tRA0hRjANXCQIFT5d30fRyGL3ENJxkdGFxSqKL45iczszanw/640">\nGives (#rows, #columns)\n给出行数和列数。\ndata.describe()\n计算基本的统计数据。\n<h3>查看数据</h3>\ndata.head(3)\n打印出数据的前 3 行。\n与之类似，.tail() 对应的是数据的最后一行。\ndata.loc[8]\n打印出第八行。\ndata.loc[8,  column_1 ]\n打印第八行名为「column_1」的列。\ndata.loc[range(4,6)]\n第四到第六行（左闭右开）的数据子集。\n<h3>pandas 的基本函数</h3>\n<h3>逻辑运算</h3>\ndata[data[ column_1 ]== french ]data[(data[ column_1 ]== french ) &amp; (data[ year_born ]==1990)]data[(data[ column_1 ]== french ) &amp; (data[ year_born ]==1990) &amp; ~(data[ city ]== London )]\n通过逻辑运算来取数据子集。\n要使用 &amp; (AND)、 ~ (NOT) 和 | (OR)，必须在\n逻辑运算前后加上“（”和“）”。\ndata[data[ column_1 ].isin([ french ,  english ])]\n除了可以在同一列使用多个 OR，你还可以使用.isin() 函数。\n基本绘图\nmatplotlib 包使得这项功能成为可能。\n正如我们在介绍中所说，它可以直接在 pandas 中使用。\ndata[ column_numerical ].plot()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudiapr563RzWpffpyCgTRibkyaNow77tVSOic5MjlK6VlP8EsmCUpjqYSYfA/640">\n.plot() 输出的示例data[ column_numerical ].hist()\n画出数据分布（直方图）\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudiaGSiaDWvMCz2CXs9mjkJicN626icAKjic774Rxo3iautG7LCexej3pcTeHtA/640">\n.hist() 输出的示例%matplotlib inline\n如果你在使用 Jupyter，不要忘记在画图之前加上以上代码。\n<h3>更新数据</h3>\ndata.loc[8,  column_1 ] =  english将第八行名为 column_1 的列替换为「english」\ndata.loc[data[ column_1 ]== french ,  column_1 ] =  French\n在一行代码中改变多列的值。\n好了，现在你可以做一些在 excel 中可以轻松访问的事情了。\n下面让我们深入研究 excel 中无法实现的一些令人惊奇的操作吧。\n<h3>中级函数</h3>\n统计出现的次数\ndata[ column_1 ].value_counts()\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudiaHewFdHN06r5qdVib9puATtbRiabrC82nQhqFPNZ0WtbIDDZ5V3nJ7Efg/640">\nimage\n.value_counts() 函数输出示例\n<h3>在所有的行、列或者全数据上进行操作</h3>\ndata[ column_1 ].map(len)\nlen() 函数被应用在了「column_1」列中的每一个元素上.map() 运算给一列中的每一个元素应用一个函数data[ column_1 ].map(len).map(lambda x: x/100).plot()\npandas 的一个很好的功能就是链式方法（https://tomaugspurger.github.io/method-chaining）。\n它可以帮助你在一行中更加简单、高效地执行多个操作（.map() 和.plot()）。\ndata.apply(sum)\n.apply() 会给一个列应用一个函数。\n.applymap() 会给表 (DataFrame) 中的所有单元应用一个函数。\n<h3>tqdm, 唯一的</h3>\n在处理大规模数据集时，pandas 会花费一些时间来进行.map()、.apply()、.applymap() 等操作。\ntqdm 是一个可以用来帮助预测这些操作的执行何时完成的包（是的，我说谎了，我之前说我们只会使用到 pandas）。\nfrom tqdm import tqdm_notebooktqdm_notebook().pandas()\n用 pandas 设置 tqdmdata[ column_1 ].progress_map(lambda x: x.count( e ))\n用 .progress_map() 代替.map()、.apply() 和.applymap() 也是类似的。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudiauCajCDj8UwGq1vGh1iaibvVnQIZ1zXqpxGMUkbjMXfyWic7MCDvqRqmIw/640">\nimage\n在 Jupyter 中使用 tqdm 和 pandas 得到的进度条\n<h3>相关性和散射矩阵</h3>\ndata.corr()data.corr().applymap(lambda x: int(x*100)/100)\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudia11yWMlFvicibznl4tia66w5jPc0YOcfiasSJXfN2H6MYglZ9Q8G5pvchxg/640">\nimage\n.corr() 会给出相关性矩阵\npd.plotting.scatter_matrix(data, figsize=(12,8))\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudiajby275qrxdIYbO6s3YrPib05TtUWBScicQwqu9KgKLRUbfgSWdtqOauQ/640">\nimage\n散点矩阵的例子。\n它在同一幅图中画出了两列的所有组合。\n<h3>pandas 中的高级操作</h3>\n<h3>The SQL 关联</h3>\n在 pandas 中实现关联是非常非常简单的\ndata.merge(other_data, on=[ column_1 ,  column_2 ,  column_3 ])\n关联三列只需要一行代码\n<h3>分组</h3>\n一开始并不是那么简单，你首先需要掌握语法，然后你会发现你一直在使用这个功能。\ndata.groupby( column_1 )[ column_2 ].apply(sum).reset_index()\n按一个列分组，选择另一个列来执行一个函数。\n.reset_index() 会将数据重构成一个表。\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/sz_mmbiz/X94yJ5S0e7CB20brVzVR69gWoicib2kudiaC4JsLQgOC3fsyC3ObbGeeZYpHR6FZbDMRfrxiahLLicgDa2SHNvn97pQ/640">\nimage\n正如前面解释过的，为了优化代码，在一行中将你的函数连接起来。\n<h3>行迭代</h3>\ndictionary = {}for i,row in data.iterrows(): dictionary[row[ column_1 ]] = row[ column_2 ]\n.iterrows() 使用两个变量一起循环：行索引和行的数据 (上面的 i 和 row)。\n总而言之，pandas 是 python 成为出色的编程语言的原因之一。\n我本可以展示更多有趣的 pandas 功能，但是已经写出来的这些足以让人理解为何数据科学家离不开 pandas。\n总结一下，pandas 有以下优点：易用，将所有复杂、抽象的计算都隐藏在背后了；直观；快速，即使不是最快的也是非常快的。\n它有助于数据科学家快速读取和理解数据，提高其工作效率。\n原文链接：\nhttps://towardsdatascience.com/be-a-more-efficient-data-scientist-today-master-pandas-with-this-guide-ea362d27386\n',
'<h2>Python Beautiful Web Scraping</h2>\nhttps://www.youtube.com/c/KGMIT/playlists\nKeith Galli\nhttps://www.youtube.com/watch?v=GjKQ6V_ViQE\nComprehensive Python Beautiful Soup Web Scraping Tutorial! (find/find_all, css select, scrape table)\nhttps://github.com/KeithGalli/web-scraping/blob/master/web_scraping_tutorial.ipynb\nSAMPLE CODE\nhttps://www.youtube.com/watch?v=zucvHSQsKHA&t=241s\nPython Web Scraping - Should I use Selenium, Beautiful Soup or Scrapy? [2020]\nhttps://www.digitalocean.com/community/tutorials/how-to-crawl-a-web-page-with-scrapy-and-python-3\nHow To Crawl A Web Page with Scrapy and Python 3\nimport requests \nfrom bs4 import BeautifulSoup \n  \nURL = "http://www.values.com/inspirational-quotes"\nr = requests.get(URL) \n  \nsoup = BeautifulSoup(r.content, \'html5lib\') # If this line causes an error, run \'pip install html5lib\' or install html5lib \nprint(soup.prettify()) \nsoup = BeautifulSoup(r.content, \'html5lib\')\nURL = "http://www.values.com/inspirational-quotes"\nr = requests.get(URL) \n   \nsoup = BeautifulSoup(r.content, \'html5lib\') \n   \nquotes=[]  # a list to store quotes \n   \ntable = soup.find(\'div\', attrs = {\'id\':\'all_quotes\'})  \n   \nfor row in table.findAll(\'div\', \n       attrs = {\'class\':\'col-6 col-lg-3 text-center margin-30px-bottom sm-margin-30px-top\'}): \n quote = {} \n quote[\'theme\'] = row.h5.text \n quote[\'url\'] = row.a[\'href\'] \n quote[\'img\'] = row.img[\'src\'] \n quote[\'lines\'] = row.img[\'alt\'].split(" #")[0] \n quote[\'author\'] = row.img[\'alt\'].split(" #")[1] \n quotes.append(quote) \n   \nfilename = \'inspirational_quotes.csv\'\nwith open(filename, \'w\', newline=\'\') as f: \n w = csv.DictWriter(f,[\'theme\',\'url\',\'img\',\'lines\',\'author\']) \n w.writeheader() \n for quote in quotes: \n  w.writerow(quote) \n',
'<h2>Python能批量抠图的开源神器</h2>\n简介\nrembg 是使用 Python 实现的用于移除背景图片的工具，要求 Python 3.8 或更高版本，支持批量操作，使用方式比较灵活，可以直接使用命令行、作为服务运行、在 docker 中使用，还可以作为库调用。\n下载安装\n项目的源码地址是：\nhttps://github.com/danielgatis/rembg\n要求 Python 3.8 或更高版本，使用以下命令进行安装：\npip install rembg\n简单使用\n1、在命令行中使用\n在命令行中可以对服务端图片、本地图片以及整个文件夹图片进行操作，如下：\n（1）对远程图片进行操作：\ncurl -s http://input.png | rembg &gt; output.png\n（2）对本地图片进行操作：\nrembg -o path/to/output.png path/to/input.png\n（3）对整个文件夹里的图片进行操作：\nrembg -p path/to/inputs\n2、作为服务使用\n（1）启动服务\nrembg-server\n（2）如果图片可以直接链接访问，则可以通过浏览器直接打开以下地址操作：\nhttp://localhost:5000?url=http://image.png\n也可以使用HTML表单通过上传文件的形式进行操作：\n&lt;form action="http://localhost:5000" method="post" enctype="multipart/form-data"&gt; &lt;input type="file" name="file"/&gt; &lt;input type="submit" value="upload"/&gt; &lt;/form&gt;\n3、在docker中使用\n在docker中使用也很方便，直接运行以下命令：\ncurl -s http://input.png | docker run -i -v ~/.u2net:/root/.u2net danielgatis/rembg:latest &gt; output.png\n4、作为库调用\n直接在脚本里调用也很简便，先创建app.py，内容如下：\nimport&nbsp;sysfrom&nbsp;rembg.bg&nbsp;import&nbsp;removesys.stdout.buffer.write(remove(sys.stdin.buffer.read()))\n再执行命令运行：\ncat input.png | python app.py &gt; out.png\n项目样例使用效果：\n<img class="lazy" data-srcclass="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/DSU8cv1j3ibSndibichkTYRw3afyL4TN5uLWOl6kKjkJyMlRcMyk1ZNzyYbZXbzXBk3P8tcJLNNE2YtxYvCROll4g/640">\n高级使用\n有些图片可能使用alpha matting模式（即使用-a -ae 15选项）处理效果会更加完美，命令如下：\ncurl&nbsp;-s&nbsp;http://input.png&nbsp;|&nbsp;rembg&nbsp;-a&nbsp;-ae&nbsp;15&nbsp;&gt;&nbsp;output.png\n效果对比图如下：\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic.cn/mmbiz_png/DSU8cv1j3ibSndibichkTYRw3afyL4TN5uLmCia1hPpWhPBly2U60ORbAGVEn6eWN3wU3FTHMOp69K3ZncyTlKIm8Q/640">\n结语\nremgb简单介绍就到这里了\n',
'<h2>Create Proxy In Python</h2>\n<div id="ProxyInPythontoc" class="toc"><a href="#ProxyInPythontopic-0" target="_self" onclick="jumpto(0)">Import Libraries:</a><br><a href="#ProxyInPythontopic-1" target="_self" onclick="jumpto(1)">Get Requests:</a><br><a href="#ProxyInPythontopic-2" target="_self" onclick="jumpto(2)">Removing the URL slash</a><br><a href="#ProxyInPythontopic-3" target="_self" onclick="jumpto(3)">Sending The Headers</a><br><a href="#ProxyInPythontopic-4" target="_self" onclick="jumpto(4)">Using The TCP Server:</a><br><a href="#ProxyInPythontopic-5" target="_self" onclick="jumpto(5)">Types Of Proxy Servers:</a><br><a href="#ProxyInPythontopic-6" target="_self" onclick="jumpto(6)">Rotating Proxies:</a><br><a href="#ProxyInPythontopic-7" target="_self" onclick="jumpto(7)">Uses Of Proxies:</a><br><a href="#ProxyInPythontopic-8" target="_self" onclick="jumpto(8)">The Best Proxy for Your Online Tasks:<br></a><br></div></center>\nSteps:\n<h3 id="ProxyInPythontopic-0">Import Libraries:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nSimpleWebSocketServer\nsimple_http_server\nurllib\n<mk>from simple_websocket_server import WebSocketServer, WebSocket\nimport simple_http_server\nimport urllib\nPORT = 9097</mk>\nThe <a href="https://pypi.org/project/simple-websocket-server/">SimpleWebSocketServer</a> and the simple_http_server listen to the incoming requests, and the urllib module fetches the target web pages.\nWe can also initialize the port, as shown below.\n<h3 id="ProxyInPythontopic-1">Get Requests:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nWe define a function do_GET that will be called for all GET requests. \n<mk>class MyProxy(simple_http_server.SimpleHTTPRequestHandler):\n   def do_GET(self):\n   	url=self.path[1:]\n   	self.send_response(200)\n   	self.end_headers()\n  self.copyfile(urllib.urlopen(url), self.wfile)</mk>\n<h3 id="ProxyInPythontopic-2">Removing the URL slash</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nThe URL that we pass in the above code will have a slash (/) at the beginning from the browsers.\nWe can remove the slash using the below code.\n<mk>url=self.path[1:]</mk>\n<h3 id="ProxyInPythontopic-3">Sending The Headers</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nWe have to send the headers as browsers need them for reporting a successful fetch with the HTTP status code of 200.\n<mk>self.send_response(200)\nself.end_headers()\nself.copyfile(urllib.urlopen(url), self.wfile)</mk>\nWe used the urllib library in the last line to fetch the URL.\nWe wrote the URL back to the browser using the <k>copyfile</k> function. \n<h3 id="ProxyInPythontopic-4">Using The TCP Server:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nWe will use the ForkingTCPServer mode and pass it to the above class for interrupt handling.\n<mk>httpd = WebSocketServer.ForkingTCPServer((\'\', PORT), MyProxy)\nhttpd.serve_forever()</mk>\nYou can save your file as ProxyServer.py and run it.\nThen you can call it from the browser.\nYour whole code will look like this.\n<mk>from simple_websocket_server import WebSocketServer, WebSocket\nimport simple_http_server\nimport urllib\nPORT = 9097\nMyProxy(simple_http_server.SimpleHTTPRequestHandler):\n	def do_GET(self):\n	   url=self.path[1:]\n	   self.send_response(200)\n	   self.end_headers()\n 	self.copyfile(urllib.urlopen(url), self.wfile)\nhttpd = WebSocketServer.ForkingTCPServer((\'\', PORT), MyProxy)\nprint ("Now serving at"	str(PORT))\nhttpd.serve_forever()</mk>\n<h3 id="ProxyInPythontopic-5">Types Of Proxy Servers:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<h4>Anonymous Proxy:</h4>\nWhenever we type an address on our browser, our device sends a request to the web host of our destination website.\nWhen the web host receives the request, it sends the web page of our target website back to our device.\nThe web host only sends the page back to us if it knows our internet protocol, i.e., IP address.\nThus, the target website knows the general location from where we are browsing because we sent out our IP address when we requested to browse the website.\nMost likely, the web host may be able to access our ISP (Internet Service Provider) account name with the help of our IP address.\n<h4>Advantages Of Using An Anonymous Proxy</h4>\nThere are lots of advantages to using an anonymous proxy server.\nWe must be aware of its benefits to understand how it can help us in our organization or any business.\nFollowing are some of the pros of using anonymous proxy servers:\nThe most obvious benefit of anonymous proxy servers is that they give us some semblance of privacy.\nIt essentially substitutes its IP address in place of ours and allows us to bypass geo-blocking.\nFor instance, a video streaming website provides access to viewers of specific countries and blocks requests from other countries.\nWe can bypass this restriction by connecting to a proxy server in any country to access the video streaming website. \nPublic WiFi may prevent us from browsing certain websites at some universities or offices.\nWe can get around this browsing restriction by using a proxy server.\nAn anonymous proxy server helps clients protect their vital information from hacking.\nA proxy server is often used to access data, speeding up browsing because of its good cache system.\n<h3 id="ProxyInPythontopic-6">Rotating Proxies:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nWe can define proxy rotation as a feature that changes our IP address with every new request we send.\nWhen we visit a website, we send a request that shows a destination server a lot of data, including our IP address.\nFor instance, we send many such requests when we gather data using a scraper( for generating leads).\nSo, the destination server gets suspicious and bans it when most requests come from the same IP. \nTherefore, there must be a solution to change our IP address with each request we send.\nThat solution is a rotating proxy.\nSo, to avoid the needless hassle of getting a scraper for rotating IPs in web scraping, we can get rotating proxies and let our provider take care of the rotation.\n<h3 id="ProxyInPythontopic-7">Uses Of Proxies:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<k>Web Scraping</k>\nE-commerce websites employ anti-scraping tools for monitoring IP addresses to detect those making multiple web requests.\nIt is where the use of proxies comes in.\nThey enable users to make several requests that have ordinarily been detected from different IP addresses.\nEach web request is assigned a different IP address.\nIn this way, the webserver is tricked and thinks that all the web requests come from other devices.\n<k>Ad Verification</k>\nAd verification allows advertisers to check if their ads are displayed on the right websites and seen by the right audiences.\nThe constant change of IP addresses accesses many different websites and thus verifies ads without IP blocks.\n<k>Accessing geo-restricted websites and data</k>\nThe same content can look different or unavailable when accessed from specific locations.\nThe proxies allow us to access the necessary data regardless of geo-location. \n<h3 id="ProxyInPythontopic-8">The Best Proxy for Your Online Tasks:<br></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<a href="https://proxyscrape.com/home">ProxyScrape</a> is one of the most popular and reliable proxy providers online.\nThree proxy services include dedicated datacentre proxy servers, residential proxy servers, and premium proxy servers.\nSo, what is the best possible solution for a <k>best alternate solution for how to create a proxy in python</k>? Before answering that questions, it is best to see the features of each proxy server.\n<k><em>A <a href="https://proxyscrape.com/dedicated-proxies?ref=head">dedicated datacenter proxy</a> </em></k>is best suited for high-speed online tasks, such as streaming large amounts of data (in terms of size) from various servers for analysis purposes.\nIt is one of the main reasons organizations choose dedicated proxies for transmitting large amounts of data in a short amount of time.\nA dedicated datacenter proxy has several features, such as unlimited bandwidth and concurrent connections, dedicated HTTP proxies for easy communication, and IP authentication for more security.\nWith 99.9% uptime, you can rest assured that the dedicated datacenter will always work during any session.\nLast but not least, ProxyScrape provides excellent customer service and will help you to resolve your issue within 24-48 business hours. \nNext is a <k><em><a href="https://proxyscrape.com/residential-proxies">residential proxy</a>.\n</em></k>Residential is a go-to proxy for every general consumer.\nThe main reason is that the IP address of a residential proxy resembles the IP address provided by ISP.\nThis means getting permission from the target server to access its data will be easier than usual. \nThe other feature of ProxyScrape’s residential proxy is a rotating feature.\nA rotating proxy helps you avoid a permanent ban on your account because your residential proxy dynamically changes your IP address, making it difficult for the target server to check whether you are using a proxy or not. \nApart from that, the other features of a residential proxy are: unlimited bandwidth, along with concurrent connection, dedicated HTTP/s proxies, proxies at any time session because of 7 million plus proxies in the proxy pool, username and password authentication for more security, and last but not least, the ability to change the country server.\nYou can select your desired server by appending the country code to the username authentication. \nThe last one is the <k><em><a href="https://proxyscrape.com/dedicated-proxies?ref=head">premium proxy</a>.</em></k> Premium proxies are the same as dedicated datacenter proxies.\nThe functionality remains the same.\nThe main difference is accessibility.\nIn premium proxies, the proxy list (the list that contains proxies) is made available to every user on ProxyScrape’s network.\nThat is why premium proxies cost less than dedicated datacenter proxies.\nSo, what is the best possible solution for<k> </k>the best alternate solution for <k>how to create a proxy in python</k>? The answer would be “<k>residential proxy”</k> and <k>"dedicated datacenter proxy"</k> The reason is simple.\nAs said above, the residential proxy is a rotating proxy, meaning that your IP address would be dynamically changed over a period of time which can be helpful to trick the server by sending a lot of requests within a small time frame without getting an IP block. \nNext, the best thing would be to change the proxy server based on the country.\nYou just have to append the country ISO_CODE at the end of the IP authentication or username and password authentication.\nDatacenter proxy is blazing fast, and if you are an avid movie buff, then a datacenter proxy is the best companion to stream high-quality videos.\n',
'<h2>Python Creating Proxy Webserver</h2>\n<div id="ProxyWebservertoc" class="toc"><a href="#ProxyWebservertopic-0" target="_self">1.Creating an incoming socket</a><br><a href="#ProxyWebservertopic-1" target="_self">2.Accept client and process</a><br><a href="#ProxyWebservertopic-2" target="_self">3. Redirecting the traffic</a><br><a href="#ProxyWebservertopic-3" target="_self">How to test the server?</a><br><a href="#ProxyWebservertopic-4" target="_self">features are added</a><br><a href="#ProxyWebservertopic-5" target="_self">Add blacklisting of domains.</a><br><a href="#ProxyWebservertopic-6" target="_self">To add host blocking:</a><br><a href="#ProxyWebservertopic-7" target="_self">Using regex to match correct IP addresses:</a><br><a href="#ProxyWebservertopic-8" target="_self">Import module and setup its initial configuration.</a><br><a href="#ProxyWebservertopic-9" target="_self">Create a new module, ColorizePython.py</a><br></div></center>\nhttps://www.geeksforgeeks.org/creating-a-proxy-webserver-in-python-set-1/\nSocket programming in python is very user friendly as compared to c.\nThe programmer need not worry about minute details regarding sockets.\nIn python, the user has more chance of focusing on the application layer rather than the network layer.\nWe would be developing a simple multi-threaded proxy server capable of handling HTTP traffic.\nThis is a naive implementation of a proxy server.\nTo begin with, we would achieve the process in 3 easy steps\n<h3 id="ProxyWebservertopic-0">1.Creating an incoming socket</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nWe create a socket serverSocket in the __init__ method of the Server Class.\nThis creates a socket for the incoming connections.\nWe then bind the socket and then wait for the clients to connect.\ndef __init__(self, config):\n # Shutdown on Ctrl+C\n signal.signal(signal.SIGINT, self.shutdown) \n # Create a TCP socket\n self.serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n # Re-use the socket\n self.serverSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n # bind the socket to a public host, and a port   \n self.serverSocket.bind((config[\'HOST_NAME\'], config[\'BIND_PORT\']))\n \n self.serverSocket.listen(10) # become a server socket\n self.__clients = {}\n<h3 id="ProxyWebservertopic-1">2.Accept client and process</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nThis is the easiest yet the most important of all the steps.\nWe wait for the client’s connection request and once a successful connection is made, we dispatch the request in a separate thread, making ourselves available for the next request.\nThis allows us to handle multiple requests simultaneously which boosts the performance of the server multifold times.\nwhile True:\n # Establish the connection\n (clientSocket, client_address) = self.serverSocket.accept() \n d = threading.Thread(name=self._getClientName(client_address), \n target = self.proxy_thread, args=(clientSocket, client_address))\n d.setDaemon(True)\n d.start()\n<h3 id="ProxyWebservertopic-2">3. Redirecting the traffic</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nThe main feature of a proxy server is to act as an intermediate between source and destination.\nHere, we would be fetching data from source and then pass it to the client.\nFirst, we extract the URL from the received request data.\n# get the request from browser\nrequest = conn.recv(config[\'MAX_REQUEST_LEN\']) \n# parse the first line\nfirst_line = request.split(\'\n\')[0]\n# get url\nurl = first_line.split(\' \')[1]\nThen, we find the destination address of the request.\nAddress is a tuple of (destination_ip_address, destination_port_no).\nWe will be receiving data from this address.\nhttp_pos = url.find("://") # find pos of ://\nif (http_pos==-1):\n temp = url\nelse:\n temp = url[(http_pos+3):] # get the rest of url\nport_pos = temp.find(":") # find the port pos (if any)\n# find end of web server\nwebserver_pos = temp.find("/")\nif webserver_pos == -1:\n webserver_pos = len(temp)\nwebserver = ""\nport = -1\nif (port_pos==-1 or webserver_pos &lt; port_pos): \n # default port \n port = 80 \n webserver = temp[:webserver_pos] \nelse: # specific port \n port = int((temp[(port_pos+1):])[:webserver_pos-port_pos-1])\n webserver = temp[:port_pos] \nNow, we setup a new connection to the destination server (or remote server), and then send a copy of the original request to the server.\nThe server will then respond with a response.\nAll the response messages use the generic message format of RFC 822.\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \ns.settimeout(config[\'CONNECTION_TIMEOUT\'])\ns.connect((webserver, port))\ns.sendall(request)\nWe then redirect the server’s response to the client.\nconn is the original connection to the client.\nThe response may be bigger than MAX_REQUEST_LEN that we are receiving in one call, so, a null response marks the end of the response.\nwhile 1:\n # receive data from web server\n data = s.recv(config[\'MAX_REQUEST_LEN\'])\n if (len(data) &gt; 0):\n  conn.send(data) # send to browser/client\n else:\n  break\nWe then close the server connections appropriately and do the error handling to make sure the server works as expected.\n<h3 id="ProxyWebservertopic-3">How to test the server?</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n1. Run the server on a terminal.\nKeep it running and switch to your favorite browser.\n2. Go to your browser’s proxy settings and change the proxy server to ‘localhost’ and port to ‘12345’.\n3. Now open any HTTP website (not HTTPS), for eg. geeksforgeeks.org and volla !! you should be able to access the content on the browser.\nOnce the server is running, we can monitor the requests coming to the client.\nWe can use that data to monitor the content that is going or we can develop statistics based on the content.\nWe can even restrict access to a website or blacklist an IP address.\nWe would be dealing with more such features in the upcoming tutorials.\nWhat next? We would be adding the following features in our proxy server in the upcoming tutorials.\n– Blacklisting Domains – Content monitoring – Logging – HTTP WebServer + ProxyServer\nThe whole working source code of this tutorial is available here Creating a Proxy Webserver in Python | Set 2 If you have any questions/comments then feel free to post them in the comments section.\n<h3 id="ProxyWebservertopic-4">features are added</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nA few interesting features are added to make it more useful. \n<h3 id="ProxyWebservertopic-5">Add blacklisting of domains.</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFor Ex. google.com, facebook.com. Create a list of BLACKLIST_DOMAINS in our configuration dict. For now, just ignore/drop the requests received for blacklisted domains. (Ideally, we must respond with a forbidden response.) \n# Check if the host:port is blacklisted\nfor i in range(0, len(config[\'BLACKLIST_DOMAINS\'])):\n if config[\'BLACKLIST_DOMAINS\'][i] in url:\n  conn.close()\nreturn\n<h3 id="ProxyWebservertopic-6">To add host blocking:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nSay, you may need to allow connections from a particular subnet or connection for a particular person. To add this, create a list of all the allowed hosts. Since the hosts can be a subnet as well,  add regex for matching the IP addresses, specifically IPV4 addresses. “ IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots, e.g., 172.16.254.1. Each part represents a group of 8 bits (octet) of the address.”\n<h3 id="ProxyWebservertopic-7">Using regex to match correct IP addresses:</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<h4>Create a new method,</h4>\n_ishostAllowed in  Server class, and use the fnmatch module to match regexes. Iterate through all the regexes and allow request if it matches any of them. If a client address is not found to be a part of any regex, then send a FORBIDDEN response. Again, for now, skip this response creation part.\nNote: We would be creating a full-fledged custom webserver in upcoming tutorials, their creation of a createResponse function will be done to handle the generic response creation.\ndef _ishostAllowed(self, host):\n """ Check if host is allowed to access\n  the content """\n for wildcard in config[\'HOST_ALLOWED\']:\n  if fnmatch.fnmatch(host, wildcard):\n   return True\n return False\nDefault host match regex would be ‘*’ to match all the hosts. Though, regex of the form ‘192.168.*’ can also be used. The server currently processes requests but does not show any messages, so we are not aware of the state of the server. Its messages should be logged onto the console. For this purpose, use the logging module as it is thread-safe. (server is multi-threaded if you remember.)\n<h3 id="ProxyWebservertopic-8">Import module and setup its initial configuration.</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nlogging.basicConfig(level = logging.DEBUG,\nformat = \'[%(CurrentTime)-10s] (%(ThreadName)-10s) %(message)s\',)\n<h4>Create a separate method that logs every message:</h4>\nPass it as an argument, with additional data such as thread-name and current-time to keep track of the logs. Also, create a function that colorizes the logs so that they look pretty on STDOUT. \nTo achieve this, add a boolean in configuration, COLORED_LOGGING, and create a new function that colorizes every msg passed to it based on the LOG_LEVEL.\ndef log(self, log_level, client, msg):\n """ Log the messages to appropriate place """\n LoggerDict = {\n    \'CurrentTime\' : strftime("%a, %d %b %Y %X", localtime()),\n    \'ThreadName\' : threading.currentThread().getName()\n }\n if client == -1: # Main Thread\n  formatedMSG = msg\n else: # Child threads or Request Threads\n  formatedMSG = \'{0}:{1} {2}\'.format(client[0], client[1], msg)\n logging.debug(\'%s\', utils.colorizeLog(config[\'COLORED_LOGGING\'],\n log_level, formatedMSG), extra=LoggerDict)\n<h3 id="ProxyWebservertopic-9">Create a new module, ColorizePython.py</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nIt contains a  pycolors class that maintains a list of color codes. Separate this into another module in order to make code modular and to follow PEP8 standards.\n# ColorizePython.py\nclass pycolors:\nHEADER = \'\033[95m\'\nOKBLUE = \'\033[94m\'\nOKGREEN = \'\033[92m\'\nWARNING = \'\033[93m\'\nFAIL = \'\033[91m\'\nENDC = \'\033[0m\' # End color\nBOLD = \'\033[1m\'\nUNDERLINE = \'\033[4m\'\n<h4>Module:</h4> \nimport ColorizePython\n<h4>Method:</h4>\ndef colorizeLog(shouldColorize, log_level, msg):\n ## Higher is the log_level in the log()\n ## argument, the lower is its priority.\n colorize_log = {\n "NORMAL": ColorizePython.pycolors.ENDC,\n "WARNING": ColorizePython.pycolors.WARNING,\n "SUCCESS": ColorizePython.pycolors.OKGREEN,\n "FAIL": ColorizePython.pycolors.FAIL,\n "RESET": ColorizePython.pycolors.ENDC\n }\n if shouldColorize.lower() == "true":\n  if log_level in colorize_log:\n   return colorize_log[str(log_level)] + msg + colorize_log[\'RESET\']\n  return colorize_log["NORMAL"] + msg + colorize_log["RESET"]\n return msg \nSince the colorizeLog is not a function of a server-class, it is created as a separate module named utils.py which stores all the utility that makes code easier to understand and put this method there. Add appropriate log messages wherever required, especially whenever the state of the server changes.\nModify the shutdown method in the server to exit all the running threads before exiting the application. threading.enumerate() iterates over all the running threads, so we do not need to maintain a list of them. The behavior of the threading module is unexpected when we try to end the main_thread. The official documentation also states this:\n“join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception.” \nSo, skip it appropriately. Here’s the code for the same. \ndef shutdown(self, signum, frame):\n """ Handle the exiting server. Clean all traces """\n self.log("WARNING", -1, \'Shutting down gracefully...\')\n main_thread = threading.currentThread() # Wait for all clients to exit\n for t in threading.enumerate():\n  if t is main_thread:\n   continue\n   self.log("FAIL", -1, \'joining \' + t.getName())\n  t.join()\n  self.serverSocket.close()\n sys.exit(0)\n<a href="https://ledinhcuong99.medium.com/build-simple-proxy-server-in-python-365bda288a52" class="whitebut ">Build simple proxy server in Python</a>\n<a href="https://proxiesapi.com/blog/how-to-build-a-super-simple-http-proxy-in-python-i.php" class="whitebut ">Build Simple proxy in Python in just 17 lines of code</a>\n',
'<h2>OpenCV Python Tutorial</h2>\n<a href="https://www.youtube.com/watch?v=qCR2Weh64h4" class="whitebut ">OpenCV Python Tutorial</a>\nimport cv2\nimg = cv2.imread(\'assets/logo.jpg\', 1)\nimg = cv2.resize(img, (0, 0), fx=0.5, fy=0.5)\nimg = cv2.rotate(img, cv2.cv2.ROTATE_90_CLOCKWISE)\ncv2.imwrite(\'new_img.jpg\', img)\ncv2.imshow(\'Image\', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows() \nimport cv2\nimport random\nimg = cv2.imread(\'assets/logo.jpg\', -1)\n# Change first 100 rows to random pixels\nfor i in range(100):\n	for j in range(img.shape[1]):\n		img[i][j] = [random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)]\n# Copy part of image\ntag = img[500:700, 600:900]\nimg[100:300, 650:950] = tag\ncv2.imshow(\'Image\', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows() \nimport numpy as np\nimport cv2\ncap = cv2.VideoCapture(0)\nwhile True:\n ret, frame = cap.read()\n width = int(cap.get(3))\n height = int(cap.get(4))\n image = np.zeros(frame.shape, np.uint8)\n smaller_frame = cv2.resize(frame, (0, 0), fx=0.5, fy=0.5)\n image[:height//2, :width//2] = cv2.rotate(smaller_frame, cv2.cv2.ROTATE_180)\n image[height//2:, :width//2] = smaller_frame\n image[:height//2, width//2:] = cv2.rotate(smaller_frame, cv2.cv2.ROTATE_180)\n image[height//2:, width//2:] = smaller_frame\n cv2.imshow(\'frame\', image)\n if cv2.waitKey(1) == ord(\'q\'):\n  break\ncap.release()\ncv2.destroyAllWindows() \nimport numpy as np\nimport cv2\ncap = cv2.VideoCapture(0)\nwhile True:\n ret, frame = cap.read()\n width = int(cap.get(3))\n height = int(cap.get(4))\n img = cv2.line(frame, (0, 0), (width, height), (255, 0, 0), 10)\n img = cv2.line(img, (0, height), (width, 0), (0, 255, 0), 5)\n img = cv2.rectangle(img, (100, 100), (200, 200), (128, 128, 128), 5)\n img = cv2.circle(img, (300, 300), 60, (0, 0, 255), -1)\n font = cv2.FONT_HERSHEY_SIMPLEX\n img = cv2.putText(img, \'Tim is Great!\', (10, height - 10), font, 2, (0, 0, 0), 5, cv2.LINE_AA)\n cv2.imshow(\'frame\', img)\n if cv2.waitKey(1) == ord(\'q\'):\n  break\ncap.release()\ncv2.destroyAllWindows() \nimport numpy as np\nimport cv2\ncap = cv2.VideoCapture(0)\nwhile True:\n ret, frame = cap.read()\n width = int(cap.get(3))\n height = int(cap.get(4))\n hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n lower_blue = np.array([90, 50, 50])\n upper_blue = np.array([130, 255, 255])\n mask = cv2.inRange(hsv, lower_blue, upper_blue)\n result = cv2.bitwise_and(frame, frame, mask=mask)\n cv2.imshow(\'frame\', result)\n cv2.imshow(\'mask\', mask)\n if cv2.waitKey(1) == ord(\'q\'):\n  break\ncap.release()\ncv2.destroyAllWindows()\nimport numpy as np\nimport cv2\nimg = cv2.imread(\'assets/chessboard.png\')\nimg = cv2.resize(img, (0, 0), fx=0.75, fy=0.75)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\ncorners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 10)\ncorners = np.int0(corners)\nfor corner in corners:\n	x, y = corner.ravel()\n	cv2.circle(img, (x, y), 5, (255, 0, 0), -1)\nfor i in range(len(corners)):\n	for j in range(i + 1, len(corners)):\n		corner1 = tuple(corners[i][0])\n		corner2 = tuple(corners[j][0])\n		color = tuple(map(lambda x: int(x), np.random.randint(0, 255, size=3)))\n		cv2.line(img, corner1, corner2, color, 1)\ncv2.imshow(\'Frame\', img)\ncv2.waitKey(0)\ncv2.destroyAllWindows() \nimport numpy as np\nimport cv2\nimg = cv2.resize(cv2.imread(\'assets/soccer_practice.jpg\', 0), (0, 0), fx=0.8, fy=0.8)\ntemplate = cv2.resize(cv2.imread(\'assets/shoe.PNG\', 0), (0, 0), fx=0.8, fy=0.8)\nh, w = template.shape\nmethods = [cv2.TM_CCOEFF, cv2.TM_CCOEFF_NORMED, cv2.TM_CCORR,\n   cv2.TM_CCORR_NORMED, cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]\nfor method in methods:\n img2 = img.copy()\n result = cv2.matchTemplate(img2, template, method)\n min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\n if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:\n  location = min_loc\n else:\n  location = max_loc\n bottom_right = (location[0] + w, location[1] + h) \n cv2.rectangle(img2, location, bottom_right, 255, 5)\n cv2.imshow(\'Match\', img2)\n cv2.waitKey(0)\n cv2.destroyAllWindows() \nimport numpy as np\nimport cv2\ncap = cv2.VideoCapture(0)\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \'haarcascade_frontalface_default.xml\')\neye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \'haarcascade_eye.xml\')\nwhile True:\n ret, frame = cap.read()\n gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n for (x, y, w, h) in faces:\n  cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 5)\n  roi_gray = gray[y:y+w, x:x+w]\n  roi_color = frame[y:y+h, x:x+w]\n  eyes = eye_cascade.detectMultiScale(roi_gray, 1.3, 5)\n  for (ex, ey, ew, eh) in eyes:\n   cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 5)\n cv2.imshow(\'frame\', frame)\n if cv2.waitKey(1) == ord(\'q\'):\n  break\ncap.release()\ncv2.destroyAllWindows() \nimport numpy as np\nimport cv2\ncap = cv2.VideoCapture(0)\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \'haarcascade_frontalface_default.xml\')\neye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \'haarcascade_eye.xml\')\nwhile True:\n ret, frame = cap.read()\n gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n for (x, y, w, h) in faces:\n  cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 5)\n  roi_gray = gray[y:y+w, x:x+w]\n  roi_color = frame[y:y+h, x:x+w]\n  eyes = eye_cascade.detectMultiScale(roi_gray, 1.3, 5)\n  for (ex, ey, ew, eh) in eyes:\n   cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 5)\n cv2.imshow(\'frame\', frame)\n if cv2.waitKey(1) == ord(\'q\'):\n  break\ncap.release()\ncv2.destroyAllWindows() \n<a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html" class="whitebut ">OpenCV-Python Tutorials</a>\n<a href="https://stackoverflow.com/questions/20801015/recommended-values-for-opencv-detectmultiscale-parameters" class="whitebut ">Values for OpenCV detectMultiScale() parameters</a>\n',
'<h2>Python3 find the circle center from 3 pts</h2>\nfrom math import sqrt \ndef findCircle(x1, y1, x2, y2, x3, y3) : \n x12 = x1 - x2;  \n x13 = x1 - x3;  \n  \n y12 = y1 - y2;  \n y13 = y1 - y3;  \n  \n y31 = y3 - y1;  \n y21 = y2 - y1;  \n  \n x31 = x3 - x1;  \n x21 = x2 - x1;  \n  \n # x1^2 - x3^2  \n sx13 = pow(x1, 2) - pow(x3, 2);  \n  \n # y1^2 - y3^2  \n sy13 = pow(y1, 2) - pow(y3, 2);  \n  \n sx21 = pow(x2, 2) - pow(x1, 2);  \n sy21 = pow(y2, 2) - pow(y1, 2);  \n  \n f = (((sx13) * (x12) + (sy13) * \n    (x12) + (sx21) * (x13) + \n    (sy21) * (x13)) // (2 * \n    ((y31) * (x12) - (y21) * (x13)))); \n     \n g = (((sx13) * (y12) + (sy13) * (y12) + \n    (sx21) * (y13) + (sy21) * (y13)) // \n    (2 * ((x31) * (y12) - (x21) * (y13))));  \n  \n c = (-pow(x1, 2) - pow(y1, 2) - \n   2 * g * x1 - 2 * f * y1);  \n  \n # eqn of circle be x^2 + y^2 + 2*g*x + 2*f*y + c = 0  \n # where centre is (h = -g, k = -f) and  \n # radius r as r^2 = h^2 + k^2 - c  \n h = -g;  \n k = -f;  \n sqr_of_r = h * h + k * k - c;  \n  \n # r is the radius  \n r = round(sqrt(sqr_of_r), 5);  \n  \n print("Centre = (", h, ", ", k, ")");  \n print("Radius = ", r);  \n  \n# Driver code  \nif __name__ == "__main__" :  \n   \n x1 = 1 ; y1 = 1;  \n x2 = 2 ; y2 = 4;  \n x3 = 5 ; y3 = 3;  \n findCircle(x1, y1, x2, y2, x3, y3);  \n',
'<h2>Finding the “center of gravity” of multiple points</h2>\nwhere points have unequal weights\nimport math\nimport nummpy\nimport math\ndef toCartesian(t):\n  latD,longD = t\n  latR = math.radians(latD)\n  longR = math.radians(longD)\n  return (\n   math.cos(latR)*math.cos(longR), \n   math.cos(latR)*math.sin(longR), \n   math.sin(latR)\n   )\ndef toSpherical(t):\n x,y,z = t\n r = math.hypot(x,y)\n if r == 0:\n  if z > 0:\n   return (90,0)\n  elif z&lt; 0:\n   return (-90,0)\n  else:\n   return None\n else:\n  return (math.degrees(math.atan2(z, r)), math.degrees(math.atan2(y,x)))\nxyz = numpy.asarray([0.0,0.0,0.0])\ntotal = 0\nfor p in points:\n  weight = p["weight"]\n  total += weight\n  xyz += numpy.asarray(toCartesian((p["lat"],p["long"])))*weight\navgXYZ = xyz/total\navgLat, avgLong = toSpherical(avgXYZ)\nprint avgLat,avgLong\n',
'<h2>django find center of points</h2>\nhttps://stackoverflow.com/questions/6671183/calculate-the-center-point-of-multiple-latitude-longitude-coordinate-pairs\nfrom django.contrib.gis.geos import Point, MultiPoint\npoints = [\n Point((145.137075, -37.639981)),\n Point((144.137075, -39.639981)),\n]\nmultipoint = MultiPoint(*points)\npoint = multipoint.centroid\n',
'<h2>myro</h2>\n<a href="https://www.youtube.com/watch?v=KzF2LFc39zc" class="whitebut ">Interactive Graphics in Python</a>\n<a href="myro.html" class="whitebut ">myro</a>\n<a href="https://www.youtube.com/watch?v=nYhxBVDW7sM" class="whitebut ">Python Graphics Programming</a>\n',
'<h2>Python 提取 PDF</h2>\n简单文本类型数据\nimport pdfplumber as pr\nimport pandas as pd\npdf = pr.open(\'关于使用自有资金购买银行理财产品的进展公告.PDF\')\nps = pdf.pages\npg = ps[3]\ntables = pg.extract_tables()\ntable = tables[0]\nprint(table)\ndf = pd.DataFrame(table[1:],columns = table[0])\nfor i in range(len(table)):\n for j in range(len(table[i])):\n  table[i][j] = table[i][j].replace(\'\n\',\'\')\ndf1 = pd.DataFrame(table[1:],columns = table[0])\ndf1.to_excel(\'page2.xlsx\')\n复杂型表格提取\nimport pdfplumber as pr\nimport pandas as pd\npdf = pr.open(\'关于使用自有资金购买银行理财产品的进展公告.PDF\')\nps = pdf.pages\npg = ps[4]\ntables = pg.extract_tables()\ntable = tables[0]\nprint(table)\ndf = pd.DataFrame(table[1:],columns = table[0])\nfor i in range(len(table)):\n for j in range(len(table[i])):\n  table[i][j] = table[i][j].replace(\'\n\',\'\')\ndf1 = pd.DataFrame(table[1:],columns = table[0])\ndf2 = df1.iloc[2:,:]\ndf2 = df2.rename(columns = {"2019年12月31日":"2019年1-12月","2020年9月30日":"2020年1-9月"})\ndf2 = df2.loc[3:,:]\ndf1 = df1.loc[:1,:]\nwith pd.ExcelWriter(\'公司影响.xlsx\') as i:\n df1.to_excel(i,sheet_name=\'资产\', index=False, header=True) #放入资产数据\n df2.to_excel(i,sheet_name=\'营业\',index=False, header=True) #放入营业数据\n图片型表格提取\npip install pytesseract\nhttp://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe\nimport pytesseract\nfrom PIL import Image\nimport pandas as pd\npytesseract.pytesseract.tesseract_cmd = \'C://Program Files (x86)/Tesseract-OCR/tesseract.exe\'\ntiqu = pytesseract.image_to_string(Image.open(\'图片型.jpg\'))\nprint(tiqu)\ntiqu = tiqu.split(\'\n\')\nwhile \'\' in tiqu: #不能使用for\n  tiqu.remove(\'\')\n  first = tiqu[:6]\n  second = tiqu[6:12]\n  third =  tiqu[12:]\n  df = pd.DataFrame()\n  df[first[0]] = first[1:]\n  df[second[0]] = second[1:]\n  df[third[0]] = third[1:]\n#df.to_excel(\'图片型表格.xlsx\')  #转为xlsx文件\n我们的思路是用Tesseract-OCR来解析图片，得到一个字符串，接着对字符串运用split函数，把字符串变成列表同时删除\n。\n',
'<h2>encrypt and decrypt a string in python</h2>\nUSE cryptography.fernet.Fernet\nInitialize a cryptographic key by calling cryptography.fernet.Fernet.generate_key().\nConfigure the encryption type to symmetric encryption by calling the function cryptography.fernet.Fernet(key) with the cryptographic key from step 1 as key.\nEncrypt the string by calling cryptography.fernet.Fernet.encrypt(data) with data as the byte representation of a string.\nDecrypt an encrypted string by using the key generated from step 1 and the encryption scheme from step 2. Call cryptography.fernet.Fernet.decrypt(token) with the encrypted message as token to get the original message.\nkey = Fernet.generate_key()\nencryption_type = Fernet(key)\nencrypted_message = encryption_type.encrypt(b"Hello World")\nencode message\nprint(encrypted_message)\nOUTPUT\nb\'gAAAAABefl-Ur385W0q0YNZM7rbUL_ImiFKBI05hEMIqhgf4FeUKyZFDUzIi3tqnCt6N4mAR2o8-ryPOOyJH32bvZEVjAG-YLg==\'\ndecrypted_message = encryption_type.decrypt(encrypted_message)\n',
'<h2>Load a file into the python console</h2>\nFrom the shell command line:\npython file.py\nFrom the Python command line\nimport file\nor\nfrom file import *\n',
'<h2>print colored text to the terminal</h2>\n# install the <a href="https://pypi.org/project/termcolor/" class="whitebut ">Python termcolor</a> module\nfrom termcolor import colored\nin Python 3:\nprint(colored(\'hello\', \'red\'), colored(\'world\', \'green\'))\n',
'<h2>1、合并两个字典</h2>\nPython3.5之后，合并字典变得容易起来。\n我们可以通过**符号解压字典，并将多个字典传入{}中，实现合并。\ndef Merge(dict1, dict2):\n  res = {**dict1, **dict2}\n  return res\n# 两个字典\ndict1 = {"name": "Joy", "age": 25}\ndict2 = {"name": "Joy", "city": "New York"}\ndict3 = Merge(dict1, dict2) print(dict3)\n输出：\n{\'name\': \'Joy\', \'age\': 25, \'city\': \'New York\'}\n',
'<h2>2、链式比较</h2>\npython有链式比较的机制，在一行里支持多种运算符比较。\n相当于拆分多个逻辑表达式，再进行逻辑与操作。\na = 5\nprint(2 &lt; a &lt; 8)\nprint(1 == a &lt; 3)\n输出：\nTrueFalse\n',
'<h2>3、重复打印字符串</h2>将一个字符串重复打印多次，一般使用循环实现，但有更简易的方式可以实现。\nn = 5string = "Hello!"print(string * n)\n输出：\nHello!Hello!Hello!Hello!Hello!\n',
'<h2>4、检查文件是否存在</h2>我们知道Python有专门处理系统交互的模块-os，它可以处理文件的各种增删改查操作。\n那如何检查一个文件是否存在呢？os模块可以轻松实现。\nfrom os import path\ndef check_for_file():\n print("Does file exist:", path.exists("data.csv"))\nif __name__=="__main__":\n check_for_file()\n输出：\nDoes file exist: False\n',
'<h2>5、检索列表最后一个元素</h2>在使用列表的时候，有时会需要取最后一个元素，有下面几种方式可以实现。\nmy_list = [\'banana\', \'apple\', \'orange\', \'pineapple\']\n#索引方法last_element = my_list[-1]\n#pop方法last_element = my_list.pop()\n输出：\n\'pineapple\'\n',
'<h2>6、列表推导式</h2>列表推导式是for循环的简易形式，可以在一行代码里创建一个新列表，同时能通过if语句进行判断筛选\ndef get_vowels(string):\n return [vowel for vowel in string if vowel in \'aeiou\'] print("Vowels are:", get_vowels(\'This is some random string\'))\n输出：\nVowels are:  [\'i\', \'i\', \'o\', \'e\', \'a\', \'o\', \'i\']\n',
'<h2>7、计算代码执行时间</h2>python中time模块提供了时间处理相关的各种函数方法，我们可以使用它来计算代码执行的时间。\nimport time\nstart_time = time.time()\ntotal = 0\nfor i in range(10):\n  total += i\nprint("Sum:", total)\nend_time = time.time()\ntime_taken = end_time - start_time\nprint("Time: ", time_taken)\n输出：\nSum: 45Time:  0.0009975433349609375\n',
'<h2>8、查找出现次数最多的元素</h2>使用max方法找出列表中出现次数最多的元素。\ndef most_frequent(list):\n  return max(set(list), key=list.count)\nmylist = [1,1,2,3,4,5,6,6,2,2]\nprint("出现次数最多的元素是:", most_frequent(mylist))\n输出：\n出现次数最多的元素是: 2\n',
'<h2>9、将两个列表转换为字典</h2>有两个列表，将列表A里的元素作为键，将列表B里的对应元素作为值，组成一个字典。\ndef list_to_dictionary(keys, values):\n  return dict(zip(keys, values))\nlist1 = [1, 2, 3]\nlist2 = [\'one\', \'two\', \'three\']\nprint(list_to_dictionary(list1, list2))\n输出：\n{1: \'one\', 2: \'two\', 3: \'three\'}\n',
'<h2>10、异常处理</h2>Python提供了try...except...finally的方式来处理代码异常，当然还有其他组合的方式。\na, b = 1,0\ntry:\n print(a/b)\nexcept ZeroDivisionError:\n print("Can not divide by zero")\nfinally:\n print("Executing finally block")\n输出：\nCan not divide by zeroExecuting finally block\n',
'<h2>11、反转字符串</h2>使用切片操作对字符串进行反转，这是比较直接有效的方式。\n这也可以用来检测回文数。\nstr = "Hello World"\nprint("反转后字符串是:", str[::-1])\n输出：\n反转后字符串是: dlroW olleH\n',
'<h2>12、字符串列表组成单个字符串</h2>使用join方法将字符串列表组成单个字符串。\nlist = ["Hello", "world", "Ok", "Bye!"]\ncombined_string = " ".join(list)\nprint(combined_string)\n输出：\nHello world Ok Bye!\n',
'<h2>13、返回字典缺失键的默认值</h2>字典中的get方法用于返回指定键的值，如果键不在字典中返回默认值 None 或者设置的默认值。\ndict = {1:\'one\', 2:\'two\', 4:\'four\'}\n#returning three as default value\nprint(dict.get(3, \'three\'))\nprint("原始字典:", dict)\n输出：\nthree原始字典: {1: \'one\', 2: \'two\', 4: \'four\'}\n',
'<h2>14、交换两个变量的值</h2>在不使用临时变量的前提下，交换两个变量的值。\na, b = 5, 10\n# 方法1\na, b = b, a\n# 方法2\ndef swap(a,b):\n  return b,a\nswap(a,b)\n',
'<h2>15、正则表达式</h2>正则表达式用来匹配处理字符串，python中的re模块提供了全部的正则功能。\nimport re\ntext = "The rain in spain"\nresult = re.search("rain", text)\nprint(True if result else False)\n输出：\nTrue\n',
'<h2>16、筛选值</h2>python中的filter方法可以用来进行值的筛选。\nmy_list = [0,1,2,3,6,7,9,11]\nresult = filter(lambda x: x % 2!=0, my_list)\nprint(list(result))\n输出：\n[1, 3, 7, 9, 11]\n',
'<h2>17、统计字频</h2>判断字符串每个元素出现的次数，可以用collections模块中的Counter方法来实现，非常简洁。\nfrom collections import Counter\nresult = Counter(\'banana\')\nprint(result)\n输出：\nCounter({\'a\': 3, \'n\': 2, \'b\': 1})\n',
'<h2>18、变量的内存占用</h2>如何输出python中变量的内存占用大小，可以通过sys模块来实现。\nimport sys\nvar1 = 15list1 = [1,2,3,4,5]\nprint(sys.getsizeof(var1))\nprint(sys.getsizeof(list1))\n输出：\n28\n104\n',
'<h2>19、链式函数调用</h2>在一行代码中调用多个函数。\ndef add(a, b):\n return a + b\ndef subtract(a, b):\n return a - b\na, b = 5, 10\nprint((add if b &gt; a else subtract)(a,b))\n输出：\n15\n',
'<h2>20、从列表中删除重复项</h2>删除列表中重复项一般可以通过遍历来筛选去重，或者直接使用集合方法。\nlist1 = [1,2,3,3,4,\'John\', \'Ana\', \'Mark\', \'John\']\n# 方法1\ndef remove_duplicate(list_value):\n return list(set(list_value))\nprint(remove_duplicate(list1))\n# 方法2\nresult = []\n[result.append(x) for x in list1 if x not in result]\nprint(result)\n输出：\n[1, 2, 3, 4, \'Ana\', \'John\', \'Mark\']\n[1, 2, 3, 4, \'John\', \'Ana\', \'Mark\']\n',
'<h2>Linear Regression Machine Learning example</h2>\n""" Linear Regression Machine Learning example:\n### Uses data for machine age and time between failures ###\n### Predict a model for the data, supervised ML ####\nhttps://www.youtube.com/watch?v=2BusGJyn77E  """\n## Import packages\nimport tensorflow as tf\nimport numpy\nimport pandas as pd\nimport matplotlib.pyplot as plt\nrng = numpy.random\n#Define your spreadsheet\nspreadsheet = \'LR_ML.xlsx\'\ndata = pd.read_excel(spreadsheet)\n#Define your useful columns of data\nmonths = data[\'Machine Age (Months)\'].values\nMTBF = data[\'Mean Time Between Failure (Days)\'].values\n# HyperParameters\nlearning_rate = 0.02\ntraining_epochs = 3000\n#Parameter\ndisplay_step = 50\n# Training Data (X,Y) Sets\ntrain_X = numpy.asarray(months)\ntrain_Y = numpy.asarray(MTBF)\n#Specifying the length of the train_x data\nn_samples = train_X.shape[0]\n# tf Graph Input --- Setting the dtype for the placeholder information\nX = tf.placeholder("float")\nY = tf.placeholder("float")\n# Set model weights This is initializing the guesses of the model for weight and bias\nW = tf.Variable(rng.randn(), name="weight")\nb = tf.Variable(rng.randn(), name="bias")\n# Construct a linear model (y=WX+b)\npred = tf.add(tf.multiply(X, W), b)\n# Mean squared error This is the error in the calculation to try to minimize\nerror = tf.reduce_sum(tf.pow(pred-Y, 2))/(2*n_samples)\n# Gradient descent\n#  Note, minimize() knows to modify W and b because Variable objects are trainable=True by default\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(error)\n# Initialize the variables (i.e. assign their default value)\ninit = tf.global_variables_initializer()\n# Start training\nwith tf.Session() as sess:\n # Run the initializer\n sess.run(init)\n # Fit all training data\n for epoch in range(training_epochs):\n  for (x, y) in zip(train_X, train_Y):\n   sess.run(optimizer, feed_dict={X: x, Y: y})\n  # Display logs per epoch step\n  if (epoch+1) % display_step == 0:\n   c = sess.run(error, feed_dict={X: train_X, Y:train_Y})\n   print("Epoch:", \'%04d\' % (epoch+1), "error=", "{:.9f}".format(c), \\n    "W=", sess.run(W), "b=", sess.run(b))\n print("Optimization Finished!")\n training_error = sess.run(error, feed_dict={X: train_X, Y: train_Y})\n print("Training error=", training_error, "W=", sess.run(W), "b=", sess.run(b), \'\n\')\n # Graphic display\n plt.plot(train_X, train_Y, \'ro\', label=\'Original data\')\n plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=\'Fitted line\')\n plt.legend()\n plt.show()\n # Testing example, as requested (Issue #2)\n test_X = numpy.asarray([2,4,6,8,10])\n test_Y = numpy.asarray([25,23,21,19,17])\n print("Testing... (Mean square loss Comparison)")\n testing_error = sess.run(\n  tf.reduce_sum(tf.pow(pred - Y, 2)) / (2 * test_X.shape[0]),\n  feed_dict={X: test_X, Y: test_Y})  # same function as cost above\n print("Testing error=", testing_error)\n print("Absolute mean square loss difference:", abs(\n  training_error - testing_error))\n plt.plot(test_X, test_Y, \'bo\', label=\'Testing data\')\n plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=\'Fitted line\')\n plt.legend()\n plt.show()\n',
'<h2>python stock market realtime monitoring</h2>\nAlpha vantage website:\nhttps://www.alphavantage.co/\nFull code from the video:\nhttps://github.com/Derrick-Sherrill/DerrickSherrill.com/blob/master/stocks.py\nstocks.py\nimport pandas as pd\nfrom alpha_vantage.timeseries import TimeSeries\nimport time\napi_key = \'RNZPXZ6Q9FEFMEHM\'\nts = TimeSeries(key=api_key, output_format=\'pandas\')\ndata, meta_data = ts.get_intraday(symbol=\'MSFT\', interval = \'1min\', outputsize = \'full\')\nprint(data)\ni = 1\n#while i==1:\n# data, meta_data = ts.get_intraday(symbol=\'MSFT\', interval = \'1min\', outputsize = \'full\')\n# data.to_excel("output.xlsx")\n# time.sleep(60)\nclose_data = data[\'4. close\']\npercentage_change = close_data.pct_change()\nprint(percentage_change)\nlast_change = percentage_change[-1]\nif abs(last_change) > 0.0004:\n print("MSFT Alert:" + str(last_change))\n',
'<h2>python file server</h2>\npython -m http.server 8000\nip on hp\n192.168.128.93:8000\nip on acer\n192.168.128.77:8000\n',
'<h2>python ftp server</h2>\n<a href="https://stackoverflow.com/questions/4994638/one-line-ftp-server-in-python" class="whitebut ">One line ftp server in python</a>\n<a href="https://twistedmatrix.com/trac/" class="whitebut ">Twisted is an event-driven networking engine written in Python</a>\npip install twisted\ncode:\nfrom twisted.protocols.ftp import FTPFactory, FTPRealm\nfrom twisted.cred.portal import Portal\nfrom twisted.cred.checkers import AllowAnonymousAccess, FilePasswordDB\nfrom twisted.internet import reactor\nreactor.listenTCP(21, FTPFactory(Portal(FTPRealm(\'./\'), [AllowAnonymousAccess()])))\nreactor.run()\n<h3>pyftpdlib</h3>\npyftpdlib is one of the very best ftp servers out there for python.\npip3 install pyftpdlib\npython -m pyftpdlib\ncode:\nfrom pyftpdlib import servers\nfrom pyftpdlib.handlers import FTPHandler\naddress = ("0.0.0.0", 21)  # listen on every IP on my machine on port 21\nserver = servers.FTPServer(address, FTPHandler)\nserver.serve_forever()\nTo get a list of command line options:\npython3 -m pyftpdlib --help\nTo setup port 21 and writable\npython -m pyftpdlib -p 21 -w\nUsage: python -m pyftpdlib [options]\nStart a stand alone anonymous FTP server.\nOptions:\n  -h, --help.  show this help message and exit\n  -i ADDRESS, --interface=ADDRESS.  specify the interface to run on (default all interfaces)\n  -p PORT, --port=PORT.  specify port number to run on (default 2121)\n  -w, --write.  grants write access for logged in user (default read-only)\n  -d FOLDER, --directory=FOLDER.  specify the directory to share (default current directory)\n  -n ADDRESS, --nat-address=ADDRESS.  the NAT address to use for passive connections\n  -r FROM-TO, --range=FROM-TO.  the range of TCP ports to use for passive connections (e.g. -r 8000-9000)\n  -D, --debug.  enable DEBUG logging evel\n  -v, --version.  print pyftpdlib version and exit\n  -V, --verbose.  activate a more verbose logging\n  -u USERNAME, --username=USERNAME.  specify username to login with (anonymous login will be disabled and password required if supplied)\n  -P PASSWORD, --password=PASSWORD.  specify a password to login with (username required to be useful)\n',
'<h2>enable FTP through Chrome on all Windows devices</h2>\nIn Chrome 81, FTP support is disabled by default, but you can enable it using the # enable-ftp flag.\nOpen Chrome and type “chrome://flags” in the address bar.\nOnce in the flags area, type “enable-ftp” in the search bar stating “search flags”.\nWhen you see the “Enable support for FTP URLs” option tap where it says “Default”.\nTap “Enable” option.\nHit “Relaunch Now” option at the bottom of the page.\nFTP using Chrome\nYou can download content via ftp://username:password@your-domain.com. \nBut at the moment Chrome does not support uploading of content via FTP.\nTo upload your files you may want to use FileZilla or CuteFTP. \nSome web browsers, such as Microsoft Internet Explorer, can also be used for FTP purposes and konsoleH includes the File Manager, which allows you to transfer files to and from your upload area.\n',
'<h2>create a simple message box in Python</h2>\nimport ctypes  # An included library with Python install.   \nctypes.windll.user32.MessageBoxW(0, "Your text", "Your title", 1)\nOr define a function (Mbox) like so:\nimport ctypes  # An included library with Python install.\ndef Mbox(title, text, style):\n return ctypes.windll.user32.MessageBoxW(0, text, title, style)\nMbox(\'Your title\', \'Your text\', 1)\nNote the styles are as follows:\n##  Styles:\n##  0 : OK\n##  1 : OK | Cancel\n##  2 : Abort | Retry | Ignore\n##  3 : Yes | No | Cancel\n##  4 : Yes | No\n##  5 : Retry | Cancel \n##  6 : Cancel | Try Again | Continue\nNote: edited to use MessageBoxW instead of MessageBoxA\n',
'<h2>Python For Bluetooth</h2>\nhttps://ukbaz.github.io/en/html/reference/bluetooth_overview/index.html\nBack in 2015 I became aware of Bluetooth BLE Beacons and some of the things that could be done with them. \nAt the same time I was helping on a STEM initiative called Go4SET where I would help students build out ideas of how to solve problems they had observed in the world around them.\nTheir solution would show how electronics and software could be used to solve the problems. \nAs Python was the language of choice in the schools I was working with, I started to investigate how to scan for BLE Beacons using a Raspberry Pi.\nHere we are in 2020 and I still don’t have a great solution for how to do this, but things have got better in that time and I’ve learnt some things along the way.\nOne of the keys things I’ve learnt is that there is a lot of out-of-date information on the internet about Bluetooth.\nWhile I suspect my writings will (in time)  add to the volume of out-of-date information on the internet about Bluetooth. \nFor now I am aiming for it to be of some help to someone coming to the topic a new.\nSo here is some Python-Linux-Bluetooth information that might help someone starting.\n',
'<h2>Bad Information</h2>\nMany tutorials on the internet are done with command-line tools that have been deprecated, such as hcitool and hcidump.\nIf you see tutorials using the <a href="https://en.wikipedia.org/wiki/List_of_Bluetooth_protocols#HCI">HCI (Host Controller Interface)</a> socket then it is either out-of-date or at such a low level that it is best to stay away.\nThe command-line tools recommended by the BlueZ developers are\n<cite>bluetoothctl</cite> or, if you need more control, <cite>btmgmt</cite>. \nAnd instead of using\n<cite>hcidump</cite>, use <cite>btmon</cite>.\nI would also be very nervous about using a library that uses <cite>HCI sockets</cite>\nfor interfacing with the Bluetooth hardware on Linux. \nMore on the different programming interfaces later.\n',
'<h2>But BlueZ…Really?</h2>\nDuring the years I’ve been playing around with Bluetooth on Linux I’ve seen people show their frustration with the way that BlueZ handles things.\nAnd I see peoples point. \nAn example is that the HCI tools were deprecated and removed. \nIt is hard to find tutorials on how to use the new tools and answers to <a href="https://www.spinics.net/lists/linux-bluetooth/msg70489.html">questions on the mailing list</a> expect a certain level of knowledge. \nIt is also common for questions to go unanswered on the mailing list. \nThis is Open Source so they don’t owe anyone an answer.\nHowever, I have also seen the developers show their frustration that people go off and do crazy things rather than how they had intended things to work.\nI spent many years of my professional life as an Application Engineer for a software company. \nMy big learning from that time is that if you don’t show people how to use your tool (and make using it the way you wanted the easiest)\nthen smart people will workout their own way of doing it.\nHaving said all of that, the developers have settled on the DBus API and it is getting better and better. \nThe biggest barrier for most people is finding the “on-ramp” to learning about how to use it.\nThere are examples <a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/test/test-profile">Python examples</a>\nin the repository, but frankly they are often of limited value.\n',
'<h2>BlueZ API</h2>\nA list of the possible API’s starting from lowest level and going to the highest. \nFor most people, the higher the better.\n<h3>HCI Socket</h3>\nAs I said earlier, this bypasses the <cite>bluetoothd</cite> that is running on the Linux system that is used by the desktop tools. \nUsing this is not a great idea unless you really, really know what you are doing.\nAll the information is available in the Bluetooth <a href="https://www.bluetooth.com/specifications/bluetooth-core-specification/">Core Specification</a>\nwhich runs to about 3,256 pages for the 5.2 version of the spec.\n<h3>MGMT Socket</h3>\nThe BlueZ <a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/mgmt-api.txt">Bluetooth Mamagement API</a>\nis the next step up and the lowest level that the BlueZ developer recommend.\nThe problem for Python users is <a href="https://bugs.python.org/issue36132">this bug</a>\nmakes it difficult to access the mgmt socket. \nThere are other duplicate bugs on this in the system. \nUntil they are fixed, this remains off bounds for many Python users.\n<h3>DBus API</h3>\nThis should be the go to level for most people wanting to interact with the BlueZ API’s. \nHowever, it seems the number of people that have done things with DBus previously is a relatively small group and it is another level of indirection to learn.\nThere are a number of Python libraries that offer <a href="https://www.freedesktop.org/wiki/Software/DBusBindings/">DBus bindings</a>\nfor Python.\nHowever, there isn’t just one library that is correct for all cases.\n<a href="https://pypi.org/project/pydbus/">pydbus</a> is one of the easier ones to get started with.\nThe BlueZ DBus API for interacting with the Bluetooth Adapter on your Raspberry Pi is documented at\n<a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/adapter-api.txt">https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/adapter-api.txt</a>\nThis allows you to know that the DBus Service is (<cite>org.bluez</cite>). \nThe Object Path is less obvious from the documentation but is <cite>/org/bluez/hci0</cite> by default on most Linux machines.\nWith this information we can quickly look to see properties from the adapter using Python. \nThe example below looks at name, if it is powered, and its mac adderess:\n<img src="https://ukbaz.github.io/en/html/_images/pydbus_example.png" />\n',
'<h2>Python For Bluetooth</h2>\nIf you write applications on iOS or Android, then you will have seen there are some great libraries with API’s that hide much of the gnarly-ness of Bluetooth.\nWith Python there are not those libraries around with that level of abstraction for most things you might want to do.\nSo you might end up going a little deeper and needing to know some of the details of Bluetooth.\n',
'<h2>Libraries to help you Bluetooth</h2>\nThere are plenty of them out there. \nI keep a list of many of them at:\n<a href="https://github.com/ukBaz/python-bluezero/wiki">https://github.com/ukBaz/python-bluezero/wiki</a>\nMost of them are pretty niche in what they do. \nThere are a number of them that are abondonware. \nThis isn’t surprising given how big Bluetooth is and the many things you can do with it.\nIt is also really hard to automate the testing of Python Bluetooth libraries and I think this is what ends up being the main reason why the libraries stay niche or abandoned.\n',
'<h2>More than one Bluetooth</h2>\nDepending on where you are starting from there can be a number of details that can trip people up when they first engage with Bluetooth and code.\nThe first is that there are two different types of Bluetooth.\nThese are generally referred to as Classic and BLE. \nDevices like the Raspberry Pi support both. \nWhile the BBC micro:bit is BLE only.\nIf you try to use Classic (aka BR/EDR, aka rfcomm,\naka Serial port profile, aka spp, aka 1101,\naka 00001101-0000-1000-8000-00805f9b34fb) on the Raspberry Pi then it will never speak sensibly with a micro:bit.\nBluetooth Classic (BR/EDR) supports speeds up to about 24Mbps.\nIt was version 4.0 of the standard that introduced a low energy mode,\nBluetooth Low Energy (BLE or LE, also known as “Bluetooth Smart”),\nthat operates at 1Mbps. \nThis mode allows devices to leave their transmitters off most of the time. \nAs a result it is “Low Energy”.\nThese two modes have a different philosophy of how they behave. \nClassic is a cable replacement. \nIt makes the connection and stays connected.\nBLE is similar to a database where the transmitter is only on when it is being written to or read from. \nClients can also subscribe to notifications when data changes in the Generic ATTribute Profile (GATT).\n<img src="https://ukbaz.github.io/en/html/_images/two_bluetooth_types.jpeg" />\nIn classic mode there is a server and a client. \nThe server advertises and the client connects.\nWith BLE there are different terms of peripheral and central. \nA peripheral advertises and a central scans and connects.\nIn BLE you can also have a Broadcaster (beacon) which is a transmitter only\n(connectionless) application. \nThe Observer (scanner) role is for receiver only connectionless applications.\n',
'<h2>Endianness</h2>\nAs with most communication protocols, data is chopped up in to bytes that are sent between the two devices.\nWhen this is done there is a choice of what order those bytes are transmitted in.\nThis is referred to as <a href="https://en.wikipedia.org/wiki/Endianness">endianness</a>\nThe Bluetooth standard is little-endian which often trips people up that are looking at Bluetooth for the first time.\nThe exception to this is when looking at beacons. \nAs far as I can tell this seems to be because Apple did this when they brought out the iBeacon and many have followed that example.\n',
'<h2>Binary</h2>\nBecause Bluetooth has come out of the embedded world there are lots of binary numbers referring to things rather than nice string names. \nLots of values are\n128-bits in length.\nThis means that when I want to look at the status of button A on a micro:bit I need to look in the GATT database for <cite>E95DDA90-251D-470A-A062-FA1922DFA9A8</cite>\nIn classic mode, the <a href="https://www.bluetooth.com/specifications/assigned-numbers/service-discovery/">Serial Port Profile</a>\n(SPP) is normally referred to by the 16-bit hex value of <cite>0x1101</cite>.\nHowever, it is really an 128-bit value but because it is an official profile it can be shortened to a 16-bit value\n<h3>Bluetooth Special Interest Group (SIG) Reserved Values</h3>\nThe SIG has the following number reserved and the <cite>xxxx</cite> below is replaced with the 16-bit value.\n<cite>0000xxxx-0000-1000-8000-00805f9b34fb</cite>\nIf you see a tutorial that is using 16-bit values without using official SIG profiles then be suspicious if that is a good tutorial.\n',
'<h2>Asynchronous</h2>\nThere are parts of Bluetooth that just needs to be asynchronous. \nExamples are when scanning for new devices or getting notifications from a peripheral.\nWhile this is possible to do with Python, asynchronous isn’t the way most people learn Python.\nFor BlueZ, it works with the GLib event loop which will be familiar to people that have coded GUI’s in Python.\n',
'<h2>Pairing and Connecting</h2>\nI have seen confusion between these two terms when people come to programming Bluetooth.\nPairing is about the two devices exchanging information so that the devices can communicate securely. \nSo pairing is a one-off activity to exchange credentials. \nIt is not always required as sometimes it is OK for devices to exchange information without being secure. \nEspecially if you are just learning as it simplifies the processes involved.\nConnection needs to be done every time you want the devices to start communicating. \nIt is a straight forward step in the two devices already know about each other.\nI typically recommend that the one-off setup of scanning and pairing is done manually with <cite>bluetoothctl</cite>.\n',
'<h2>RFCOMM (Or is that SPP?)</h2>\nThis is the most useful profile in classic mode for many activities in the maker community when you want ot exchange information between two boards that support Bluetooth serial connection. \nFrom Python 3.3 this is supported within the standard socket library. \nBelow is an example of a client connecting to a server. \nThis assumes the pairing has already happened and will do the connection.\n>>> import socket\n>>> s = socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM)\n>>> s.connect((\'B8:27:EB:22:57:E0\', 1))\n>>> s.send(b\'Hello\')\n>>> s.recv(1024)\nb\'world\'\n>>> s.close()\nIf this just works then life is great. \nIf there are issues, then this is when Bluetooth can become more frustating. \nDebugging is probably a separate post.\n',
'<h2>BLE (Or is that GATT)</h2>\nWith BLE there is not the same level of support from native Python so it is required to use the DBus API. \nThis means using the\n<a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/device-api.txt">Device</a>\nand\n<a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/gatt-api.txt">GATT</a>.\nThe difficult piece with these is that it is not known ahead of connection what the DBus <cite>Object Path</cite> will be for the devices, GATT Services,\nand GATT Characteristics we are interested in.\nThis results in the need to do a reverse look-up from the UUID to the object path. \nThis was the subject of a\n<a href="https://github.com/campug/bzero_kata">kata</a>\nI held at my local Python user group.\n',
'<h2>Good To Know</h2>\nThis talk at Embedded Linux Conference gave lots of good insight in to how things are done with BlueZ. \nIt is worth a watch if you are interested in learning more.\n<iframe src="https://www.youtube.com/embed/VMDyebKT5c4"></iframe>\n',
'<h2>Python, Bluetooth, and Windows…</h2>\nIn Python 3.9 it is going to be easier to use Bluetooth RFCOMM (Serial Port Profile) thanks to this submission: <a href="https://bugs.python.org/issue36590">https://bugs.python.org/issue36590</a>\n範例 findmyphone.py 演示了使用一個 Python 小程式去尋找附近名稱為 My Phone 的藍芽裝置。範例如下所示，請自行修改 target_name 成你要尋找的藍芽裝置名稱即可，\nimport bluetooth\ntarget_name = "My Phone"\ntarget_address = None\nnearby_devices = bluetooth.discover_devices()\nfor bdaddr in nearby_devices:\n if target_name == bluetooth.lookup_name( bdaddr ):\n  target_address = bdaddr\n  break\nif target_address is not None:\n print "found target bluetooth device with address ", target_address\nelse:\n print "could not find target bluetooth device nearby"\n藍芽位址是由 xx:xx:xx:xx:xx:xx 的形式所組成，xx 為十六進制，怎麼查詢藍芽位址請看這篇，每個藍芽裝置都有個獨一無二的藍芽位址。但是如果我們要找”某個名稱”的藍芽裝置，而不是用藍芽位址去找，那會分成兩步驟：\n以上述 findmyphone.py 為例，首先程式會先掃描附近的藍芽裝置，呼叫 discover_devices() 尋找附近的裝置(大概10秒)，然後回傳一個列表，\n再來，使用 lookup_name() 去連接上每個已偵測到的裝置，請求它們的裝置名稱，並且順便判斷名稱是不是我們要尋找的 My Phone target name，是的話會顯示找到並印出藍芽位址。\n在區域內掃描藍芽裝置和查找裝置名稱這過程有時可能會失敗(空氣中其他的干擾等等不定因素，裝置很多，裝置在移動？！)，discover_devices() 有會回傳 None，意味著無法用裝置名稱來進行後續的匹配，這時最好的解決方式就是多試幾次看看XD。\nhttps://people.csail.mit.edu/albert/bluez-intro/c212.html\n',
'<h2>Ciphey</h2>\nInstallation\npython3 -m pip install ciphey --upgrade\nWindows Python defaults to install 32-bit.\nCiphey only supports 64-bit.\nMake sure you\'re using 64-bit Python.\nThere are 3 ways to run Ciphey.\nFile Input ciphey -f encrypted.txt\nUnqualified input ciphey -- "Encrypted input"\nNormal way ciphey -t "Encrypted input"\n<img class="lazy" data-src="https://youwuqiong.top/wp-admin/img.php?imgUrl=https://github.com/Ciphey/Ciphey/raw/master/Pictures_for_README/3ways.gif">\nTo get rid of the progress bars, probability table, and all the noise use the quiet mode.\nciphey -t "encrypted text here" -q\nFor a full list of arguments, run ciphey --help.\nImporting Ciphey\nYou can import Ciphey\'s main and use it in your own programs and code. from Ciphey.__main__ import main\n',
'<h2>47 个 Python 人工智能库</h2>\n<div>\n<a href="#pythonLibtopic-0">The List</a><br>\n<a href="#pythonLibtopic-1">Python 核心库</a><br>\n<a href="#pythonLibtopic-2">Python 机器学习</a><br>\n<a href="#pythonLibtopic-3">Python 深度学习</a><br>\n<a href="#pythonLibtopic-4">Python 分布式深度学习库</a><br>\n<a href="#pythonLibtopic-5">Python 自然语言处理</a><br>\n<a href="#pythonLibtopic-6">Python 计算机视觉</a><br>\n<a href="#pythonLibtopic-7">Python 生物/化学</a><br>\n</div>\n<h3 id="pythonLibtopic-0">The List</h3>\nNumpy 库 https://www.numpy.org.cn/\nSciPy 库 https://www.scipy.org/\nPandas 库 https://pandas.pydata.org/ \nstatsmodels 库 https://www.statsmodels.org/\nScikit-Learn 库 https://scikit-learn.org.cn/\nLightGBM 库 https://lightgbm.readthedocs.io\nCatBoost 库 https://catboost.ai/\nEli5 库 https://eli5.readthedocs.io\nTheano 库 https://pypi.org/project/Theano/\nPyBrain库 https://github.com/pybrain/pybrain/\nShogun库 https://github.com/shogun-toolbox/shogun\nChainer库 https://www.cnpython.com/pypi/chainerrl\nPyLearn2库 http://github.com/lisa-lab/pylearn2\nHebel库 https://www.oschina.net/p/hebel/\nNeurolab库 https://pythonhosted.org/neurolab/\nTensorFlow 库 https://www.tensorflow.org/\nPyTorch 库 https://pytorch.org/\nKeras 库 https://keras.io/zh/\nCaffe2 库 http://caffe.berkeleyvision.org/\ndist-Keras 库 https://joerihermans.com/work/distributed-keras/\nelephas 库 https://pypi.org/project/elephas/\nSpark-Deep-Learning 库 https://databricks.github.io/spark-deep-learning/\nMxnet库 https://pypi.org/project/mxnet/\nSklearn-theano库 https://github.com/sklearn-theano/\nNLTK 库 https://www.nltk.org/\nSpaCy 库 https://spacy.io/\nPKUSeg 库 https://pypi.org/project/pkuseg/\nGensim 库 https://radimrehurek.com/gensim/\nCoreNLP 库 https://stanfordnlp.github.io/CoreNLP/\nTextBlob 库 https://pypi.org/project/textblob/\nStanfordnlp 库 https://github.com/stanfordnlp/stanfordnlp\nopenCV 库 https://opencv.org/\nScikit-Image 库 https://scikit-image.org/\nPillow/PIL 库 https://pillow.readthedocs.io/en/stable\nSimpleCV 库 http://simplecv.org/\nMahotas 库 https://pypi.org/project/mahotas/0.99/\nITK 库 https://itk.org/\nPgmagick 库 https://pythonhosted.org/pgmagick/index.html\nPycairo 库 https://www.cairographics.org/pycairo/\nFastai库 https://pypi.org/project/fastai/\nImutils库 https://pypi.org/project/imutils/\nPyTorchCV库 https://pytorch-cn.readthedocs.io/zh/latest/\nBioPython 库 https://biopython-cn.readthedocs.io/\nDashBio 库 http://dash.plot.ly/dash-bio\nRDKit 库 http://www.rdkit.org/\n<h3 id="pythonLibtopic-1">Python 核心库</h3>\n1.Numpy 库 https://www.numpy.org.cn/\n特点：NumPy (Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。\nNumPy 通常 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用，这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。\n2.SciPy 库 https://www.scipy.org/\n特点：SciPy 是一个开源的 Python 算法库和数学工具包。SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。它用于有效计算 Numpy 矩阵，使 Numpy 和 Scipy 协同工作，高效解决问题。\n3.Pandas 库 https://pandas.pydata.org/ \n特点：Pandas 是 Python 语言的一个扩展程序库，用于数据分析。Pandas 是一个开放源码、BSD许可的库，提供高性能、易于使用的数据结构和数据分析工具，基础是 Numpy（提供高性能的矩阵运算），可以从各种文件格式比如CSV、JSON、SQL、Excel导入数据。Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。\n4.statsmodels 库 https://www.statsmodels.org/\n特点：statsmodels 是一个 Python 库，用于拟合多种统计模型，执行统计测试以及数据探索和可视化。statsmodels 包含更多的“经典”频率学派统计方法，而贝叶斯方法和机器学习模型可在其他库中找到。包含在 statsmodels 中的一些模型：线性模型，广义线性模型和鲁棒线性模型，线性混合效应模型，方差分析（ANOVA）方法，时间序列过程和状态空间模型，广义的矩量法。\n<h3 id="pythonLibtopic-2">Python 机器学习</h3>\n5.Scikit-Learn 库 https://scikit-learn.org.cn/\n特点：Scikit-learn（以前称为scikits.learn，也称为sklearn）是针对 Python 编程语言的免费软件机器学习库。它具有各种分类，回归和聚类算法，包括支持向量机，随机森林，梯度提升，k均值和DBSCAN，并且旨在与 Python 数值科学库 NumPy 和 SciPy 联合使用。\n//  6.XGBoost 库 https://xgboost.ai/\n特点：XGBoost是一个优化的分布式梯度增强库，旨在实现高效，灵活和便携。它在 Boosting框架下实现机器学习算法。XGBoost提供并行树提升（也称为GBDT，GBM），可以快速准确地解决许多数据科学问题。相同的代码在主要的分布式环境（Hadoop，SGE，MPI）上运行，并且可以解决数十亿个示例之外的问题。\n7.LightGBM 库 https://lightgbm.readthedocs.io\n特点：LightGBM（Light Gradient Boosting Machine） 是微软开源的一个实现 GBDT 算法的框架，支持高效率的并行训练。LightGBM 提出的主要原因是为了解决 GBDT 在海量数据遇到的问题，让 GBDT 可以更好更快地用于工业实践。其具有以下优点：更快的训练速度、更低的内存消耗、更好的准确率、分布式支持，可以快速处理海量数据。\n8.CatBoost 库 https://catboost.ai/\n特点：CatBoost 是由 Yandex 的研究人员和工程师开发的基于梯度提升决策树的机器学习方法，现已开源。CatBoost 在 Yandex 公司内广泛使用，用于排列任务、预测和提出建议。CatBoost 是通用的，可应用于广泛的领域和各种各样的问题。\n9.Eli5 库 https://eli5.readthedocs.io\n特点：ELI5 是一个 Python 库，允许使用统一API可视化地调试各种机器学习模型。它内置了对多个ML框架的支持，并提供了一种解释黑盒模型的方法。它有助于调试机器学习分类器并解释它们的预测。\n10.Theano 库 https://pypi.org/project/Theano/\n特点：Theano 是一个 Python 库，专门用于定义、优化、求值数学表达式，效率高，适用于多维数组。特别适合做机器学习。一般来说，使用时需要安装 Python 和 Numpy 。\n11.PyBrain库 https://github.com/pybrain/pybrain/\n特点：PyBrain的概念是将一系列的数据处理的算法封装到被称之为Module的模块中。一个最小的Module通常包含基于机器学习算法的可调整的参数集合。\n12.Shogun库 https://github.com/shogun-toolbox/shogun\n特点：Shogun是一个开源机器学习库，它提供广泛的高效和统一的机器学习方法，如多种数据表示、算法类和通用工具的组合，用于快速原型设计数据管道。\n<h3 id="pythonLibtopic-3">Python 深度学习</h3>\n13.Chainer库 https://www.cnpython.com/pypi/chainerrl\n特点：ChainerCV是一个基于Chainer用于训练和运行计算机视觉任务的神经网络工具。它涵盖了计算机视觉模型的高质量实现,以及开展计算机视觉研究的必备工具集。\n14. PyLearn2库 http://github.com/lisa-lab/pylearn2\n特点：Pylearn2是一个基于Theano的机器学习库,它的大部分功能是基于Theano顶层实现的。这意味着用户可以用数学表达式去编写Pylearn2插件(新模型、算法等)。\n15.Hebel库 https://www.oschina.net/p/hebel/\n特点：Hebel 是一个通过 PyCUDA 库使用 GPU CUDA 来加速建立神经网络的深度学习库。它实现了几类最重要的神经网络模型，提供各种激活函数和训练模型。\n16.Neurolab库 https://pythonhosted.org/neurolab/\n特点：neurolab是一个简单而强大的Python神经网络库。包含基于神经网络、训练算法和灵活的框架来创建和探索其他神经网络类型。\n17.TensorFlow 库 https://www.tensorflow.org/\n特点：TensorFlow 是一个基于数据流编程（dataflow programming）的符号数学系统，被广泛应用于各类机器学习（machine learning）算法的编程实现，其前身是谷歌的神经网络算法库 DistBelief 。Tensorflow 拥有多层级结构，可部署于各类服务器、PC终端和网页并支持GPU和TPU高性能数值计算，被广泛应用于谷歌内部的产品开发和各领域的科学研究。\n18.PyTorch 库 https://pytorch.org/\n特点：PyTorch 是一个开源的 Python 机器学习库，基于 Torch，用于自然语言处理等应用程序。PyTorch 的前身是 Torch ，其底层和 Torch 框架一样，但是使用 Python 重新写了很多内容，不仅更加灵活，支持动态图，而且提供了 Python接口。它是由 Torch7 团队开发，是一个以 Python 优先的深度学习框架，不仅能够实现强大的GPU加速，同时还支持动态神经网络。PyTorch 既可以看作加入了GPU支持的 Numpy，同时也可以看成一个拥有自动求导功能的强大的深度神经网络。除了 Facebook 外，它已经被Twitter、CMU 和 Salesforce 等机构采用。\n19.Keras 库 https://keras.io/zh/\n特点：Keras 是一个由 Python 编写的开源人工神经网络库，可以作为 Tensorflow、 Microsoft-CNTK 和 Theano 的高阶应用程序接口，进行深度学习模型的设计、调试、评估、应用和可视化。Keras 在代码结构上由面向对象方法编写，完全模块化并具有可扩展性。Keras 支持现代人工智能领域的主流算法，包括前馈结构和递归结构的神经网络，也可以通过封装参与构建统计学习模型。在硬件和开发环境方面，Keras 支持多操作系统下的多GPU并行计算，可以根据后台设置转化为 Tensorflow、Microsoft-CNTK 等系统下的组件。\n20.Caffe2 库 http://caffe.berkeleyvision.org/\n特点：Caffe是由Berkeley Vision and Learning Center(BVLC)建立的深度学习框架。它是模块化的，速度极快。\n<h3 id="pythonLibtopic-4">Python 分布式深度学习库</h3>\n21.dist-Keras 库 https://joerihermans.com/work/distributed-keras/\n特点：dist-Keras 是在 Apache Spark 和 Keras 之上构建的分布式深度学习框架，其重点是“最先进的”分布式优化算法。以易于实现新的分布式优化器的方式设计了框架，从而使人们能够专注于研究。支持多种分布式方法，例如但不限于使用数据并行方法训练合奏和模型。\n22.elephas 库 https://pypi.org/project/elephas/\n特点：elephas 是一个把 Python 深度学习框架 Keras 衔接到 Spark 集群的第三方 python 包。\n23.Spark-Deep-Learning 库 https://databricks.github.io/spark-deep-learning/\n特点：Spark-Deep-Learning 为使用 Apache Spark 的 Python 中可伸缩的深度学习提供了高级api。该库来自 Databricks ，并利用 Spark 实现了两个最强大的方面：本着 Spark 和 Spark MLlib 的精神，它提供了易于使用的API，能够在很少的代码行中进行深入学习；它使用 Spark 强大的分布式引擎来扩展对海量数据集的深度学习。 \n24.Mxnet库 https://pypi.org/project/mxnet/\n特点：MXNet 是一款设计为效率和灵活性的深度学习框架。它允许你混合符号编程和命令式编程,从而最大限度提高效率和生产力。\n25.Sklearn-theano库 https://github.com/sklearn-theano/\n特点：sklearn-theano的功能所在。你不能用它从头到尾的训练一个模型，但它的神奇之处就是可以把网络作为特征提取器。\n<h3 id="pythonLibtopic-5">Python 自然语言处理</h3>\n26.NLTK 库 https://www.nltk.org/\n特点：NLTK（Natural Language Toolkit）自然语言处理工具包，是 NLP 研究领域常用的一个 Python 库，由宾夕法尼亚大学的 Steven Bird 和 Edward Loper 在 Python 的基础上开发的一个模块，至今已有超过十万行的代码。这是一个开源项目，包含数据集、  Python 模块、教程等。\n27.SpaCy 库 https://spacy.io/\n特点：SpaCy 是一个 Python 和 CPython 的 NLP 自然语言文本处理库。SpaCy主要功能包括分词、词性标注、词干化、命名实体识别、名词短语提取等等。\n28.PKUSeg 库 https://pypi.org/project/pkuseg/\n特点：PKUSeg-Python 是由北京大学语言计算与机器学习研究组研制推出的一个高准确度的中文分词工具包。PKUSeg-Python 简单易用，支持多领域分词，在不同领域的数据上都大幅提高了分词的准确率。\n29.Gensim 库 https://radimrehurek.com/gensim/\n特点：Gensim 是一个相当专业的主题模型 Python 工具包。在文本处理中，比如商品评论挖掘，有时需要了解每个评论分别和商品的描述之间的相似度，以此衡量评论的客观性。评论和商品描述的相似度越高，说明评论的用语比较官方，不带太多感情色彩，比较注重描述商品的属性和特性，角度更客观。Gensim 就是  Python 里面计算文本相似度的程序包。\n30.CoreNLP 库 https://stanfordnlp.github.io/CoreNLP/\n特点：Stanford CoreNLP 提供了一套人类语言技术工具。支持多种自然语言处理基本功能，Stanford CoreNLP 是它的一个 Python 接口。Stanford CoreNLP 主要功能包括分词、词性标注、命名实体识别、句法结构分析和依存分析等等。\n31.TextBlob 库 https://pypi.org/project/textblob/\n特点：用于处理文本数据的Python库。它提供一个简单的API，可用于深入研究常见的NLP任务，如词性标注、名词短语提取、情感分析、文本翻译、分类等。\n32.Stanfordnlp 库 https://github.com/stanfordnlp/stanfordnlp\n特点：Stanford NLP提供了一系列自然语言分析工具。它能够给出基本的词形、词性，并且能够标记句子的结构，语法形式和字词的依赖，指明那些名字指向同样的实体，指明情绪，提取发言中的开放关系等。\n<h3 id="pythonLibtopic-6">Python 计算机视觉</h3>\n33.openCV 库 https://opencv.org/\n特点：OpenCV 是一个基于BSD许可（开源）发行的跨平台计算机视觉和机器学习软件库，可以运行在 Linux、Windows、Android 和 MacOS 操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了 Python、Ruby、MATLAB 等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。\n34.Scikit-Image 库 https://scikit-image.org/\n特点：Scikit-Image 是图像处理算法的集合，采用 Python 语言编写。它实现了用于研究、教育和工业应用的算法和实用程序。它是一个相当简单和直接的库，即使对于 Python 生态系统的新手也是如此。\n35.Pillow/PIL 库 https://pillow.readthedocs.io/en/stable\n特点：PIL（Python Imaging Library）已经是 Python 平台事实上的图像处理标准库了。PIL 功能非常强大，但API却非常简单易用。由于 PIL 仅支持到 Python2.7，加上年久失修，于是一群志愿者在 PIL 的基础上创建了兼容的版本，名字叫 Pillow，支持最新Python 3.x，又加入了许多新特性。\n36.SimpleCV 库 http://simplecv.org/\n特点：SimpleCV 将很多强大的开源计算机视觉库包含在一个便捷的 Python 包中。使用 SimpleCV，你可以在统一的框架下使用高级算法，例如特征检测、滤波和模式识别。使用者不用清楚一些细节，比如图像比特深度、文件格式、颜色空间、缓冲区管理、特征值还有矩阵和图像的存储。\n37.Mahotas 库 https://pypi.org/project/mahotas/0.99/\n特点：Mahotas 是一个 Python 的图像处理库，包含大量的图像处理算法，使用 C++ 实现的算法，处理性能相当好。\n38.ITK 库 https://itk.org/\n特点：ITK（ Insight Segmentation and Registration Toolkit）是美国国家卫生院下属的国立医学图书馆开发的一款医学图像处理软件包，是一个开源的、跨平台的影像分析扩展软件工具。\n39.Pgmagick 库 https://pythonhosted.org/pgmagick/index.html\n特点：Pgmagick 是 GraphicsMagick 库的一个基于 Python 的包装器。图像处理系统有时被称为图像处理的瑞士军刀。它提供了一个健壮而高效的工具和库集合，支持以88种主要格式（包括重要格式，如DPX、GIF、JPEG、JPEG-2000、PNG、PDF、PNM和TIFF）读取、写入和操作图像。\n40.Pycairo 库 https://www.cairographics.org/pycairo/\n特点：pyCairo 是一个 Python 的优秀2D图形渲染库。\n41.Fastai库 https://pypi.org/project/fastai/\n特点：计算机视觉、文本、表格数据、时间序列、协同过滤等常见深度学习应用提供单一一致界面的深度学习库。\n42.Imutils库 https://pypi.org/project/imutils/\n特点：imutils是在OPenCV基础上的一个封装,达到更为简结的调用OPenCV接口的目的,它可以轻松的实现图像的平移,旋转,缩放,骨架化等一系列的操作。\n43.PyTorchCV库 https://pytorch-cn.readthedocs.io/zh/latest/\n特点：TorchCV 支持图像分类、语义分割、目标检测、姿态检测、实例分割、生成对抗网络等任务中的多个常见模型。\n<h3 id="pythonLibtopic-7">Python 生物/化学</h3>\n45.BioPython 库 https://biopython-cn.readthedocs.io/\n特点：Biopython 项目是旨在减少计算生物学中代码重复的开源项目之一，由国际开发人员协会创建。它包含表示生物序列和序列注释的类，并且能够读取和写入各种文件格式（FASTA，FASTQ，GenBank 和 Clustal 等），支持以程序化方式访问生物信息的在线数据库（例如，NCBI）。独立的模块扩展了 Biopython 的序列比对，蛋白质结构，群体遗传学，系统发育，序列基序和机器学习等功能。\n46.DashBio 库 http://dash.plot.ly/dash-bio\n特点：Dash Bio 是一个免费的开源 Python 库,用于生物信息学和药物开发应用。 \n47.RDKit 库 http://www.rdkit.org/\n特点：RDKit 是一个用于化学信息学的开源工具包，基于对化合物2D和3D分子操作，利用机器学习方法进行化合物描述符生成，fingerprint 生成，化合物结构相似性计算，2D和3D分子展示等。基于Python语言进行调取使用。\n',
'<h2>Python 爬虫 pyquery</h2>\n在使用之前，请确保已经安装好qyquery库。安装教程如下所示：\npip install pyquery\n<h3 id="pyquerytopic-0">初始化</h3>\n和Beautiul Soup一样，在初始化pyquery的时候，也需要传入html文本来初始化一个pyquery对象。\n初始化的时候一般有三种传入方式：传入字符串、传入URL、传入html文件。\n<k>字符串初始化</k>\nhtml = \'\'\'\n&lt;div&gt;\n &lt;ul&gt;\n  &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n  &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item=-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n &lt;/ul&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nprint(doc)\nprint(type(doc))\nprint(doc(\'li\'))\n先对上面的代码做简单的描述：\n首先引入PyQuery对象，取名为pq。然后声明一个长HTML字符串，并将其当作参数传给PyQuery类，这样就成功的进行了初始化。\n接下来将css选择器作为参数传入初始化对象，在这个示例中我们传入li节点，这样就可以选择所有的li节点.。\n<k>URL初始化</k>\n初始化对象的参数不仅可以是字符串，还可以是网页的URL，这时可以将URL作为参数传入初始化对象。\n具体代码如下所示：\nfrom pyquery import PyQuery as pq\ndoc = pq(\'https://www.baidu.com\', encoding=\'utf-8\')\nprint(doc)\nprint(type(doc))\nprint(doc(\'title\'))\n试着运行上面的代码你会发现，我们成功的获取到了百度的title节点和网页信息。\nPyQuery对象会先请求这个URL，然后用得到的HTML内容完成初始化，这其实就相当于网页源代码以字符串的形式传递给初始化对象。\n因此，还可以这样写代码：\nfrom pyquery import PyQuery as pq\nimport requests\nurl = \'https://www.baidu.com\'\ndoc = pq(requests.get(url).content.decode(\'utf-8\'))\nprint(doc)\nprint(type(doc))\nprint(doc(\'title\'))\n运行结果与上面那段代码的运行结果是一致的。\n<k>文件初始化</k>\n除了传递URL以外还可以传递本地的文件名，此时只要传递本地文件名，此时将参数指定为filename即可。\n具体代码如下所示：\nfrom pyquery import PyQuery as pq\ndoc = pq(filename=\'baidu.html\')\nprint(doc)\nprint(type(doc))\nprint(doc(\'title\'))\n以上三种初始化的方式都是可以的，当然最常用的初始化方式还是以字符串的形式传递。\n<h3 id="pyquerytopic-1">基本CSS选择器</h3>html = \'\'\'\n&lt;div id="container"&gt;\n &lt;ul class="list"&gt;\n  &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n  &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item=-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n &lt;/ul&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nprint(doc(\'#container .list li\'))\nprint(type(doc(\'#container .list li\')))\n初始化PyQuery对象之后，传入CSS选择器#container .list li将所有符合条件的节点输出，并且运行上面的代码之后你会发现它的类型依然还是PyQuery类型。\n<h3 id="pyquerytopic-2">查找节点</h3>\n下面介绍一些常用的查询函数，这些函数与jQuery函数的用法是完全相同的。\n<k>子节点</k>\n查找子节点时需要用到find()方法，并传入的参数是CSS选择器，以前面的html为例子。\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nprint(doc.find(\'li\'))\nprint(type(doc.find(\'li\')))\n调用find()方法，将节点名称li传入该方法，获取所有符合条件的内容。类型依然还是PyQuery。\n当然我们还可以这样写：\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'.list\')\nprint(type(items))\nlis = items.find(\'li\')\nprint(type(lis))\nprint(lis)\n首先先选取class为list的节点，然后调用find()方法，传入CSS选择器，选取内部的``li`节点，最后打印输出。\n其实find()方法是查找所有的子孙节点，要获取所有的子节点可以调用chirdren()方法。具体代码如下所示：\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'.list\')\nlis = items.children()\nprint(lis)\nprint(type(lis))\n如果想要筛选子节点中符合条件的节点，可以向chirdren()方法传入CSS选择器。具体代码如下所示：\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'.list\')\nlis = items.children(\'.active\')\nprint(lis)\nprint(type(lis))\n试着运行上面的代码你会发现，这里已经成功获取到了class为active的节点。\n<k>父节点</k>\n我们可以调用parent()方法来获取某个节点的父节点。\nhtml = \'\'\'\n&lt;div id="container"&gt;\n &lt;ul class="list"&gt;\n  &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n  &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item=-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n  &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n &lt;/ul&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'.list\')\ncontainer = items.parent()\nprint(container)\nprint(type(container))\n先对上面的代码做简要的说明：\n首先选取class为list的节点，然后再调用parent()方法得到其父节点，其类型依然还是PyQuery类型。\n这里的父节点是直接父节点，但是如果要获取祖父节点，可以调用parents()方法。\nhtml = \'\'\'\n&lt;div class="wrap"&gt;\n &lt;div id="container"&gt;\n  &lt;ul class="list"&gt;\n   &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n   &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item=-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n  &lt;/ul&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'.list\')\ncontainer = items.parents()\nprint(container)\nprint(type(container))\n运行上面的代应为码之后，你会发现这里输出的内容有四个，因为class为list节点的祖父节点有四个，分别是：container、wrap、body、html。在初始化对象的时候已经添加上了body和html节点。\n<k>兄弟节点</k>\n除了可以获取到父节点和子节点之外，还可以获取到兄弟节点。如果需要获取兄弟节点，可以调用siblings()方法。\n具体代码如下所示：\nhtml = \'\'\'\n&lt;div class="wrap"&gt;\n &lt;div id="container"&gt;\n  &lt;ul class="list"&gt;\n   &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n   &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n  &lt;/ul&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'.list .item-0.active\')\nprint(items.siblings())\n这里首先选取类为.item-0.active的节点，再调用siblings()方法获取到该节点的兄弟节点。\n试着运行上面的代码，你会发现获取到其他四个兄弟节点。\n<h3 id="pyquerytopic-3">遍历</h3>\n通过上面的代码可以观察到，pyquery的选择结果可能是多个节点，也可能是单个节点，类型都是PyQuery类型，并没有向Beautiful Soup那样的列表。\n对于单个节点来说，可以直接打印输出，也可以直接转成字符串。\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'.list .item-0.active\')\nprint(items)\nprint(str(items))\nprint(type(items))\n对于多个节点，可以通过调用item()方法，将获取的内容转换成生成器类型，在通过遍历的方式输出。\n具体代码如下所示：\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nlis = doc(\'li\').items()\nprint(lis)\nfor li in lis:\n print(li, type(li))\n运行上面的代码，你会发现输出变量lis的结果是生成器，因此可以遍历输出。\n<h3 id="pyquerytopic-4">获取信息</h3>\n一般来说，在网页里面我们需要获取的信息有两类：一类是文本内容，另一类是节点属性值。\n<k>获取属性</k>\n获取到某个PyQuery类型的节点之后，就可以通过attr()方法来获取属性。\n具体代码如下所示：\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\na = doc(\'.list .item-0.active a\')\nprint(a.attr(\'href\'))\n先获取class为list下面的class为item-0 active的节点下的a节点，这时变量a是PyQuery类型，再调用attr()方法并传入属性值href。\n当然也可以通过调用attr属性来获取属性。\nprint(a.attr.href)\n你会发现输出结果与上面的代码是一样的。\n当然，我们也可以获取到所有a节点的属性，具体代码如下所示：\nhtml = \'\'\'\n&lt;div class="wrap"&gt;\n &lt;div id="container"&gt;\n  &lt;ul class="list"&gt;\n   &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n   &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n  &lt;/ul&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\na = doc(\'a\').items()\nfor item in a:\n print(item.attr(\'href\'))\n但是如果代码这样写：\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\na = doc(\'a\')\nprint(a.attr(\'href\'))\n运行上面的代码之后，你会发现只获取到第一个a节点的href属性。\n所有这个是需要注意的地方！！\n<k>提取文本</k>\n提取文本与提取属性的逻辑是一样的，首先获取到class为PyQuery的节点，再调用text()方法获取文本。\n首先来获取一个节点的文本内容。具体代码如下所示：\nhtml = \'\'\'\n&lt;div class="wrap"&gt;\n &lt;div id="container"&gt;\n  &lt;ul class="list"&gt;\n   &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n   &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n  &lt;/ul&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\na = doc(\'.list .item-0.active a\')\nprint(a.text())\n试着运行上面的代码你会发现成功获取a节点的文本内容。\n接下来我们就来获取多个li节点的文本内容。\n具体代码如下所示：\nhtml = \'\'\'\n&lt;div class="wrap"&gt;\n &lt;div id="container"&gt;\n  &lt;ul class="list"&gt;\n   &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n   &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n  &lt;/ul&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'li\')\nprint(items.text())\n运行上面的代码，你会发现该代码成功获取到了所有节点名称为li的文本内容，中间用空格隔开。\n如果你想要一个一个获取，那还是少不了生成器，具体代码如下所示：\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nitems = doc(\'li\').items()\nfor item in items:\n print(item.text())\n<h3 id="pyquerytopic-5">节点操作</h3>\npyquery提供了一系列方法对节点进行动态修改，比如为某个节点添加一个class，移除某个节点，这些操作有时会为提取信息带来便利。\n<k>add_class和remove_class</k>\nhtml = \'\'\'\n&lt;div class="wrap"&gt;\n &lt;div id="container"&gt;\n  &lt;ul class="list"&gt;\n   &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n   &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n  &lt;/ul&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nli = doc(\'.list .item-0.active\')\nprint(li)\nli.remove_class(\'active\')\nprint(li)\nli.add_class(\'active\')\nprint(li)\n运行结果如下所示：\n&lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="" bold=""&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   \n&lt;li class="item-0"&gt;&lt;a href="link3.html"&gt;&lt;span class="" bold=""&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   \n&lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="" bold=""&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n上面有三段输出内容，首先先获取一个li节点，然后再删除active类属性，第三段代码是添加active类属性。\n<h3 id="pyquerytopic-6">伪类选择器</h3>\nCSS选择器之所以强大，还有一个很重要的原因，那就是它可以支持多种多样的伪类选择器，例如选择第一个节点、最后一个节点、奇偶数节点、包含某一文本的节点。\nhtml = \'\'\'\n&lt;div class="wrap"&gt;\n &lt;div id="container"&gt;\n  &lt;ul class="list"&gt;\n   &lt;li class="item-0"&gt;first-item&lt;/li&gt;\n   &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class=""bold&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;\n   &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;  \n  &lt;/ul&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\'\'\'\nfrom pyquery import PyQuery as pq\ndoc = pq(html)\nli = doc(\'li:first-child\') # 第一个li节点\nprint(li)\nli = doc(\'li:last-child\') # 最后一个li节点\nprint(li)\nli = doc(\'li:nth-child(2)\') # 第二个位置的li节点\nprint(li)\nli = doc(\'li:gt(2)\') # 第三个之后的li节点\nprint(li)\nli = doc(\'li:nth-child(2n)\') # 偶数位置的li节点\nprint(li)\nli = doc(\'li:contains(second)\') # 包含second文本的li节点\nprint(li)\n至此，关于pyquery的所有内容都讲完了，接下来就进入实战了，光说不练肯定是不行的，只有通过实战才能正真学会刚刚所学会的知识。\n<h1>实战</h1>\n本次我带来的实战内容是爬取猫眼电影的TOP100的排行榜及评分情况。\n<h3 id="pyquerytopic-7">准备</h3>\n<k>工欲善其事，必先利其器</k>。首先，我们要准备几个库：pyquery、requests。\n安装过程如下：\npip install pyquery\npip install requests\n<h3 id="pyquerytopic-8">前言</h3>\n寒假又到来了，小伙伴们准备怎么过呢？\n在大冬天里，躲在被窝刷剧是最舒服的，好怀念当年的生活啊~\n所以今天就来爬取猫眼电影的TOP100排行榜，为冬眠做好准备。\n网站链接：\nhttps://maoyan.com/board/4\n<h3 id="pyquerytopic-9">需求分析与功能实现</h3><h3 id="pyquerytopic-10">获取电影名称</h3>\n需要的信息藏在class为board-item-main的div标签下的a标签内，因此我们需要获取其文本信息。\n核心代码如下所示：\nmovie_name = doc(\'.board-item-main .board-item-content .movie-item-info p a\').text()\n<h3 id="pyquerytopic-11">获取主演信息</h3>\n从上图可以看到，主演的信息位于board-item-main的子节点p标签内，因此我们可以这样获取主演信息。\n核心代码如下所示：\np = doc(\'.board-item-main .board-item-content .movie-item-info\')\nstar = p.children(\'.star\').text()\n<h3 id="pyquerytopic-12">获取上映时间</h3>\n从前面的图片也可以看到，上映时间的信息与主演信息的节点是兄弟节点，所以我们可以这样写代码。\np = doc(\'.board-item-main .board-item-content .movie-item-info\')\ntime = p.children(\'.releasetime\').text()\n<h3 id="pyquerytopic-13">获取评分</h3>\n要获取每一部电影的评分相对要复杂一些，为什么这样说呢？我们来看下面的图片。\n从上面的图片可以看到，整数部分与小数部分被分割了成了两部分。因此需要分别获取两部分的数据，在进行拼接即可。\n核心代码如下所示：\nscore1 = doc(\'.board-item-main .movie-item-number.score-num .integer\').text().split()\nscore2 = doc(\'.board-item-main .movie-item-number.score-num .fraction\').text().split()\nscore = [score1[i]+score2[i] for i in range(0, len(score1))]\n<h3 id="pyquerytopic-14">关于翻页</h3>\n打开网页的时候，你会发现榜单一共有10页，每一页的URL都不相同，那该怎么办呢？总不能每一次都手动更换URL地址吧。\n先来观察前四页的URL地址吧。\nhttps://maoyan.com/board/4 # 第一页\nhttps://maoyan.com/board/4?offset=10 # 第二页\nhttps://maoyan.com/board/4?offset=20 # 第三页\nhttps://maoyan.com/board/4?offset=30 # 第四页\n观察完之后，我想不需要我过多叙述它的特点了吧。\n接下来我们就可以构建每一页的URL地址了，具体代码如下所示：\n def get_url(self, page):\n  url = f\'https://maoyan.com/board/4?offset={page}\'\n  return url\n if __name__ == \'__main__\':\n maoyan = MaoYan()\n for page in range(10):\n  url = maoyan.get_url(page*10)\n',
'<h2>反爬虫</h2>\n<a href="https://cloud.tencent.com/developer/column/5263" class="whitebut ">未闻Code</a>\n<a href="https://www.gushiciku.cn/pla/未聞Code" class="whitebut ">未聞Code</a>\n<a href="https://www.gushiciku.cn/pl/gnve/zh-hk" class="whitebut ">逃不掉被反爬蟲</a>\n<h3>一、为什么要反爬虫</h3>\n1、爬虫占总PV比例较高，这样浪费钱（尤其是三月份爬虫）。\n三月份爬虫是个什么概念呢？\n每年的三月份我们会迎接一次爬虫高峰期。\n最初我们百思不得其解。\n直到有一次，四月份的时候，我们删除了一个url，然后有个爬虫不断的爬取url，导致大量报错，测试开始找我们麻烦。\n我们只好特意为这个爬虫发布了一次站点，把删除的url又恢复回去了。\n但是当时我们的一个组员表示很不服，说，我们不能干掉爬虫，也就罢了，还要专门为它发布，这实在是太没面子了。\n于是出了个主意，说：url可以上，但是，绝对不给真实数据。\n于是我们就把一个静态文件发布上去了。\n报错停止了，爬虫没有停止，也就是说对方并不知道东西都是假的。\n这个事情给了我们一个很大的启示，也直接成了我们反爬虫技术的核心：变更。\n后来有个学生来申请实习。\n我们看了简历发现她爬过携程。\n后来面试的时候确认了下，果然她就是四月份害我们发布的那个家伙。\n不过因为是个妹子，技术也不错，后来就被我们招安了。\n现在已经快正式入职了。\n后来我们一起讨论的时候，她提到了，有大量的硕士在写论文的时候会选择爬取OTA数据，并进行舆情分析。\n因为五月份交论文，所以嘛，大家都是读过书的，你们懂的，前期各种DotA，LOL，到了三月份了，来不及了，赶紧抓数据，四月份分析一下，五月份交论文。\n就是这么个节奏。\n<k>2、公司可免费查询的资源被批量抓走，丧失竞争力，这样少赚钱。</k>\nOTA的价格可以在非登录状态下直接被查询，这个是底线。\n如果强制登陆，那么可以通过封杀账号的方式让对方付出代价，这也是很多网站的做法。\n但是我们不能强制对方登录。\n那么如果没有反爬虫，对方就可以批量复制我们的信息，我们的竞争力就会大大减少。\n竞争对手可以抓到我们的价格，时间长了用户就会知道，只需要去竞争对手那里就可以了，没必要来携程。\n这对我们是不利的。\n<k>3、爬虫是否涉嫌违法？如果是的话，是否可以起诉要求赔偿？这样可以赚钱。</k>\n这个问题我特意咨询了法务，最后发现这在国内还是个擦边球，就是有可能可以起诉成功，也可能完全无效。\n所以还是需要用技术手段来做最后的保障。\n<h3>二、反什么样的爬虫</h3>\n<k>1、十分低级的应届毕业生</k>\n开头我们提到的三月份爬虫，就是一个十分明显的例子。\n应届毕业生的爬虫通常简单粗暴，根本不管服务器压力，加上人数不可预测，很容易把站点弄挂。\n顺便说下，通过爬携程来获取offer这条路已经行不通了。\n因为我们都知道，第一个说漂亮女人像花的人，是天才。\n而第二个。。。你们懂的吧？\n<k>2、十分低级的创业小公司</k>\n现在的创业公司越来越多，也不知道是被谁忽悠的然后大家创业了发现不知道干什么好，觉得大数据比较热，就开始做大数据。\n分析程序全写差不多了，发现自己手头没有数据。\n怎么办？写爬虫爬啊。\n于是就有了不计其数的小爬虫，出于公司生死存亡的考虑，不断爬取数据。\n<k>3、不小心写错了没人去停止的失控小爬虫</k>\n携程上的点评有的时候可能高达60%的访问量是爬虫。\n我们已经选择直接封锁了，它们依然孜孜不倦地爬取。\n什么意思呢？\n就是说，他们根本爬不到任何数据，除了http code是200以外，一切都是不对的，可是爬虫依然不停止这个很可能就是一些托管在某些服务器上的小爬虫，已经无人认领了，依然在辛勤地工作着。\n<k>4、成型的商业对手</k>\n这个是最大的对手，他们有技术，有钱，要什么有什么，如果和你死磕，你就只能硬着头皮和他死磕。\n<k>5、抽风的搜索引擎</k>\n大家不要以为搜索引擎都是好人，他们也有抽风的时候，而且一抽风就会导致服务器性能下降，请求量跟网络攻击没什么区别。\n<h3>三、什么是爬虫和反爬虫</h3>\n因为反爬虫暂时是个较新的领域，因此有些定义要自己下。\n我们内部定义是这样的：\n<li>爬虫：使用任何技术手段，批量获取网站信息的一种方式。关键在于批量。</li>\n<li>反爬虫：使用任何技术手段，阻止别人批量获取自己网站信息的一种方式。\n关键也在于批量。</li>\n<li>误伤：在反爬虫的过程中，错误的将普通用户识别为爬虫。\n误伤率高的反爬虫策略，效果再好也不能用。</li>\n<li>拦截：成功地阻止爬虫访问。这里会有拦截率的概念。\n通常来说，拦截率越高的反爬虫策略，误伤的可能性就越高。因此需要做个权衡。</li>\n<li>资源：机器成本与人力成本的总和。</li>\n这里要切记，人力成本也是资源，而且比机器更重要。\n因为，根据摩尔定律，机器越来越便宜。\n而根据IT行业的发展趋势，程序员工资越来越贵。\n因此，让对方加班才是王道，机器成本并不是特别值钱。\n<h3>四、知己知彼：如何编写简单爬虫</h3>\n要想做反爬虫，我们首先需要知道如何写个简单的爬虫。\n目前网络上搜索到的爬虫资料十分有限，通常都只是给一段python代码。\npython是一门很好的语言，但是用来针对有反爬虫措施的站点做爬虫，真的不是最优选择。\n更讽刺的是，通常搜到的python爬虫代码都会使用一个lynx的user-agent。\n你们应该怎么处理这个user-agent，就不用我来说了吧？\n通常编写爬虫需要经过这么几个过程：\n<li>分析页面请求格式</li>\n<li>创建合适的http请求</li>\n<li>批量发送http请求，获取数据</li>\n举个例子，直接查看携程生产url。\n在详情页点击“确定”按钮，会加载价格。\n假设价格是你想要的，那么抓出网络请求之后，哪个请求才是你想要的结果呢？\n答案出乎意料的简单，你只需要用根据网络传输数据量进行倒序排列即可。\n因为其他的迷惑性的url再多再复杂，开发人员也不会舍得加数据量给他。\n<h3>五、知己知彼：如何编写高级爬虫</h3>\n那么爬虫进阶应该如何做呢？\n通常所谓的进阶有以下几种：\n<k>分布式</k>\n通常会有一些教材告诉你，为了爬取效率，需要把爬虫分布式部署到多台机器上。\n这完全是骗人的。\n分布式唯一的作用是：防止对方封IP。\n封IP是终极手段，效果非常好，当然，误伤起用户也是非常爽的。\n<k>模拟JavaScript</k>\n有些教程会说，模拟javascript，抓取动态网页，是进阶技巧。\n但是其实这只是个很简单的功能。\n因为，如果对方没有反爬虫，你完全可以直接抓ajax本身，而无需关心js怎么处理的。\n如果对方有反爬虫，那么javascript必然十分复杂，重点在于分析，而不仅仅是简单的模拟。\n换句话说：这应该是基本功。\n<k>PhantomJs</k>\n这个是一个极端的例子。\n这个东西本意是用来做自动测试的，结果因为效果很好，很多人拿来做爬虫。\n但是这个东西有个硬伤，就是：效率。\n此外PhantomJs也是可以被抓到的，出于多方面原因，这里暂时不讲。\n　\n<h3>六、不同级别爬虫的优缺点</h3>\n越是低级的爬虫，越容易被封锁，但是性能好，成本低。\n越是高级的爬虫，越难被封锁，但是性能低，成本也越高。\n当成本高到一定程度，我们就可以无需再对爬虫进行封锁。\n经济学上有个词叫边际效应。\n付出成本高到一定程度，收益就不是很多了。\n那么如果对双方资源进行对比，我们就会发现，无条件跟对方死磕，是不划算的。\n应该有个黄金点，超过这个点，那就让它爬好了。\n毕竟我们反爬虫不是为了面子，而是为了商业因素。\n<h3>七、如何设计一个反爬虫系统(常规架构)</h3>\n有个朋友曾经给过我这样一个架构：\n1、对请求进行预处理，便于识别；\n2、识别是否是爬虫；\n3、针对识别结果，进行适当的处理；\n当时我觉得，听起来似乎很有道理，不愧是架构，想法就是和我们不一样。\n后来我们真正做起来反应过来不对了。\n因为：\n如果能识别出爬虫，哪还有那么多废话？\n想怎么搞它就怎么搞它。\n如果识别不出来爬虫，你对谁做适当处理？\n三句话里面有两句是废话，只有一句有用的，而且还没给出具体实施方式。\n那么：这种架构(师)有什么用？\n因为当前存在一个架构师崇拜问题，所以很多创业小公司以架构师名义招开发。\n给出的title都是：初级架构师，架构师本身就是个高级岗位，为什么会有初级架构。\n这就相当于：初级将军/初级司令。\n最后去了公司，发现十个人，一个CTO，九个架构师，而且可能你自己是初级架构师，其他人还是高级架构师。\n不过初级架构师还不算坑爹了，有些小创业公司还招CTO做开发呢。\n<k>传统反爬虫手段</k>\n1、后台对访问进行统计，如果单个IP访问超过阈值，予以封锁。\n这个虽然效果还不错，但是其实有两个缺陷，一个是非常容易误伤普通用户，另一个就是，IP其实不值钱，几十块钱甚至有可能买到几十万个IP。\n所以总体来说是比较亏的。\n不过针对三月份呢爬虫，这点还是非常有用的。\n2、后台对访问进行统计，如果单个session访问超过阈值，予以封锁。\n这个看起来更高级了一些，但是其实效果更差，因为session完全不值钱，重新申请一个就可以了。\n3、后台对访问进行统计，如果单个userAgent访问超过阈值，予以封锁。\n这个是大招，类似于抗生素之类的，效果出奇的好，但是杀伤力过大，误伤非常严重，使用的时候要非常小心。\n至今为止我们也就只短暂封杀过mac下的火狐。\n4、以上的组合\n组合起来能力变大，误伤率下降，在遇到低级爬虫的时候，还是比较好用的。\n由以上我们可以看出，其实爬虫反爬虫是个游戏，RMB玩家才最牛逼。\n因为上面提到的方法，效果均一般，所以还是用JavaScript比较靠谱。\n也许有人会说：javascript做的话，不是可以跳掉前端逻辑，直接拉服务吗？\n怎么会靠谱呢？\n因为啊，我是一个标题党啊。\nJavaScript不仅仅是做前端。\n跳过前端不等于跳过JavaScript。\n也就是说：我们的服务器是nodejs做的。\n<blockquote>思考题：我们写代码的时候，最怕碰到什么代码？\n什么代码不好调试？\n</blockquote>\n<k>eval</k>\neval已经臭名昭著了，它效率低下，可读性糟糕。\n正是我们所需要的。\n<k>goto</k>\njs对goto支持并不好，因此需要自己实现goto。\n<k>混淆</k>\n目前的minify工具通常是minify成abcd之类简单的名字，这不符合我们的要求。\n我们可以minify成更好用的，比如阿拉伯语。\n为什么呢？\n 因为阿拉伯语有的时候是从左向右写，有的时候是从右向左写，还有的时候是从下向上写。\n除非对方雇个阿拉伯程序员，否则非头疼死不可。\n<k>不稳定代码</k>\n什么bug不容易修？\n不容易重现的bug不好修。\n因此，我们的代码要充满不确定性，每次都不一样。\n<k>代码演示</k>\n下载代码本身，可以更容易理解。\n这里简短介绍下思路：\n<li>纯JAVASCRIPT反爬虫DEMO，通过更改连接地址，来让对方抓取到错误价格。\n这种方法简单，但是如果对方针对性的来查看，十分容易被发现。</li>\n<li>纯JAVASCRIPT反爬虫DEMO，更改key。\n这种做法简单，不容易被发现。\n但是可以通过有意爬取错误价格的方式来实现。</li>\n<li>纯JAVASCRIPT反爬虫DEMO，更改动态key。\n这种方法可以让更改key的代价变为0，因此代价更低。</li>\n<li>纯JAVASCRIPT反爬虫DEMO，十分复杂的更改key。\n这种方法，可以让对方很难分析，如果加了后续提到的浏览器检测，更难被爬取。</li>\n到此为止。\n前面我们提到了边际效应，就是说，可以到此为止了。\n后续再投入人力就得不偿失了。\n除非有专门的对手与你死磕。\n不过这个时候就是为了尊严而战，不是为了商业因素了。\n<k>浏览器检测</k>\n针对不同的浏览器，我们的检测方式是不一样的。\n<li>IE 检测bug；</li>\n<li>FF 检测对标准的严格程度；</li>\n<li>Chrome 检测强大特性。</li>\n<h3>八、我抓到你了——然后该怎么办</h3>\n不会引发生产事件——直接拦截\n可能引发生产事件——给假数据(也叫投毒)\n此外还有一些发散性的思路。\n例如是不是可以在响应里做SQL注入？\n毕竟是对方先动的手。\n不过这个问题法务没有给具体回复，也不容易和她解释。\n因此暂时只是设想而已。\n<k>1、技术压制</k>\n我们都知道，DotA AI里有个de命令，当AI被击杀后，它获取经验的倍数会提升。\n因此，前期杀AI太多，AI会一身神装，无法击杀。\n正确的做法是，压制对方等级，但是不击杀。\n反爬虫也是一样的，不要一开始就搞太过分，逼人家和你死磕。\n<k>2、心理战</k>\n挑衅、怜悯、嘲讽、猥琐。\n以上略过不提，大家领会精神即可。\n<k>3、放水</k>\n这个可能是是最高境界了。\n程序员都不容易，做爬虫的尤其不容易。\n可怜可怜他们给他们一小口饭吃吧。\n没准过几天你就因为反爬虫做得好，改行做爬虫了。\n',
'<h2>Python simple message box</h2>\nimport ctypes  # An included library with Python install.   \nctypes.windll.user32.MessageBoxW(0, "Your text", "Your title", 1)\nOr define a function (Mbox) like so:\nimport ctypes  # An included library with Python install.\ndef Mbox(title, text, style):\n return ctypes.windll.user32.MessageBoxW(0, text, title, style)\nMbox(\'Your title\', \'Your text\', 1)\nNote: edited to use MessageBoxW instead of MessageBoxA\nNote the styles are as follows:\n##  Styles:\n##  0 : OK\n##  1 : OK | Cancel\n##  2 : Abort | Retry | Ignore\n##  3 : Yes | No | Cancel\n##  4 : Yes | No\n##  5 : Retry | Cancel \n##  6 : Cancel | Try Again | Continue\n',
'<h2>Importing EasyGui</h2>\nIn order to use EasyGui, you must import it. The simplest import statement is:\nimport easygui\nIf you use this form, then to access the EasyGui functions, you must prefix them with the name “easygui”, this way:\neasygui.msgbox(...)\nOne alternative is to import EasyGui this way:\nfrom easygui import *\nThis makes it easier to invoke the EasyGui functions; you won’t have to prefix the function names with “easygui”. You can just code something like this:\nmsgbox(...)\nA third alternative is to use something like the following import statement:\nimport easygui as g\nThis allows you to keep the EasyGui namespace separate with a minimal amount of typing. You can access easgui functions like this:\ng.msgbox(...)\nThis third alterative is actually the best way to do it once you get used to python and easygui.\n<h3>Using EasyGui</h3>\nOnce your module has imported EasyGui, GUI operations are a simple a matter of invoking EasyGui functions with a few parameters. For example, using EasyGui, the famous “Hello, world!” program looks like this:\nfrom easygui import *\nmsgbox("Hello, world!")\nTo see a demo of what EasyGui output looks like, invoke easyGui from the command line, this way:\npython easygui.py\nTo see examples of code that invokes the EasyGui functions, look at the demonstration code at the end of easygui.py.\n<h3>Default arguments for EasyGui functions</h3>\nFor all of the boxes, the first two arguments are for message and title, in that order. In some cases, this might not be the most user-friendly arrangement (for example, the dialogs for getting directory and filenames ignore the message argument), but I felt that keeping this consistent across all widgets was a consideration that is more important.\nMost arguments to EasyGui functions have defaults.\nAlmost all of the boxes display a message and a title. The title defaults to the empty string, and the message usually has a simple default.\nThis makes it is possible to specify as few arguments as you need in order to get the result that you want. For instance, the title argument to msgbox is optional, so you can call msgbox specifying only a message, this way:\nmsgbox("Danger, Will Robinson!")\nor specifying a message and a title, this way:\nmsgbox("Danger, Will Robinson!", "Warning!")\nOn the various types of buttonbox, the default message is “Shall I continue?”, so you can (if you wish) invoke them without arguments at all. Here we invoke ccbox (the close/cancel box, which returns a boolean value) without any arguments at all:\nif ccbox():\n pass  # user chose to continue else:\n return   # user chose to cancel\n<h3>Using keyword arguments when calling EasyGui functions</h3>\nIt is possible to use keyword arguments when calling EasyGui functions.\nSuppose for instance that you wanted to use a buttonbox, but\n(for whatever reason) did not want to specify the title (second) positional argument. You could still specify the choices argument (the third argument)\nusing a keyword, this way:\nchoices = ["Yes","No","Only on Friday"]\nreply = choicebox("Do you like to eat fish?", choices=choices)\n<h3>Using buttonboxes</h3>\nThere are a number of functions built on top of buttonbox() for common needs.\n<h3>msgbox</h3>\nmsgbox displays a message and offers an OK button. You can send whatever message you want, along with whatever title you want. You can even over-ride the default text of “OK” on the button if you wish. Here is the signature of the msgbox function:\ndef msgbox(msg="(Your message goes here)", title=", ok_button="OK"):\n ....\nThe clearest way to over-ride the button text is to do it with a keyword argument, like this:\nmsgbox("Backup complete!", ok_button="Good job!")\nHere are a couple of examples:\nmsgbox("Hello, world!")\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_msgbox.png" />\nmsg = "Do you want to continue?"\ntitle = "Please Confirm"\nif ccbox(msg, title):  # show a Continue/Cancel dialog\n pass  # user chose Continue else:  # user chose Cancel\n sys.exit(0)\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_ccbox.png" />\n<h3>ccbox</h3>\nccbox offers a choice of Continue and Cancel, and returns either True (for continue) or False (for cancel).\n<h3>ynbox</h3>\nynbox offers a choice of Yes and No, and returns either True of False.\n<h3>buttonbox</h3>\nTo specify your own set of buttons in a buttonbox, use the buttonbox() function.\nThe buttonbox can be used to display a set of buttons of your choice. When the user clicks on a button, buttonbox() returns the text of the choice. If the user cancels or closes the buttonbox, the default choice (the first choice) is returned.\nbuttonbox displays a message, a title, and a set of buttons. Returns the text of the button that the user selected.\n<h3>indexbox</h3>\nindexbox displays a message, a title, and a set of buttons. Returns the index of the user’s choice. For example, if you invoked index box with three choices (A, B, C), indexbox would return 0 if the user picked A, 1 if he picked B, and 2 if he picked C.\n<h3>boolbox</h3>\nboolbox (boolean box) displays a message, a title, and a set of buttons. Returns returns 1 if the first button is chosen. Otherwise returns 0.\nHere is a simple example of a boolbox():\nmessage = "What does she say?"\ntitle = "\nif boolbox(message, title, ["She loves me", "She loves me not"]):\n sendher("Flowers") # This is just a sample function that you might write.\nelse:\n pass\n<h3>How to show an image in a buttonbox</h3>\n<dl class="docutils">\n<dt>When you invoke the buttonbox function (or other functions that display a button box, such as msgbox, indexbox, ynbox,</dt>\n<dd>etc.), you can specify the keyword argument image=xxx where xxx is the filename of an image.  The file can be .gif.</dd>\n</dl>\nUsually, you can use other image formats such as .png.\nNote\nThe types of files supported depends on how you installed python.  If other formats don’t work, you may need to install the PIL library.\nIf an image argument is specified, the image file will be displayed after the message.\nHere is some sample code from EasyGui’s demonstration routine:\nimage = "python_and_check_logo.gif"\nmsg = "Do you like this picture?"\nchoices = ["Yes","No","No opinion"]\nreply = buttonbox(msg, image=image, choices=choices)\nIf you click on one of the buttons on the bottom, its value will be returned in ‘reply’.  You may also click on the image.\nIn that case, the image filename is returned.\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_buttonbox_with_image.png" />\n<h3>Letting the user select from a list of choices</h3>\n<h3>choicebox</h3>\nButtonboxes are good for offering the user a small selection of short choices. But if there are many choices, or the text of the choices is long, then a better strategy is to present them as a list.\nchoicebox provides a way for a user to select from a list of choices. The choices are specified in a sequence (a tuple or a list). The choices will be given a case-insensitive sort before they are presented.\nThe keyboard can be used to select an element of the list.\nPressing “g” on the keyboard, for example, will jump the selection to the first element beginning with “g”. Pressing “g” again, will jump the cursor to the next element beginning with “g”. At the end of the elements beginning with “g”, pressing “g” again will cause the selection to wrap around to the beginning of the list and jump to the first element beginning with “g”.\nIf there is no element beginning with “g”, then the last element that occurs before the position where “g” would occur is selected. If there is no element before “g”, then the first element in the list is selected:\nmsg ="What is your favorite flavor?"\ntitle = "Ice Cream Survey"\nchoices = ["Vanilla", "Chocolate", "Strawberry", "Rocky Road"]\nchoice = choicebox(msg, title, choices)\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_choicebox_icecream.png" />\nAnother example of a choicebox:\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_choicebox.png" />\n<h3>multchoicebox</h3>\nThe multchoicebox() function provides a way for a user to select from a list of choices. The interface looks just like the choicebox, but the user may select zero, one, or multiple choices.\nThe choices are specified in a sequence (a tuple or a list). The choices will be given a case-insensitive sort before they are presented.\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_multchoicebox.png" />\n<h3>Letting the user enter information</h3>\n<h3>enterbox</h3>\nenterbox is a simple way of getting a string from the user\n<h3>integerbox</h3>\nintegerbox is a simple way of getting an integer from the user.\n<h3>multenterbox</h3>\nmultenterbox is a simple way of showing multiple enterboxes on a single screen.\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_multenterbox_vista.png" />\nIn the multenterbox:\n<blockquote>\n<ul class="simple">\n<li>If there are fewer values than names, the list of values is padded with empty strings until the number of values is the same as the number of names.</li>\n<li>If there are more values than names, the list of values is truncated so that there are as many values as names.</li>\n</ul>\n</div></blockquote>\nReturns a list of the values of the fields, or None if the user cancels the operation.\nHere is some example code, that shows how values returned from multenterbox can be checked for validity before they are accepted:\nfrom __future__ import print_function msg = "Enter your personal information"\ntitle = "Credit Card Application"\nfieldNames = ["Name", "Street Address", "City", "State", "ZipCode"]\nfieldValues = multenterbox(msg, title, fieldNames)\nif fieldValues is None:\n sys.exit(0)\n# make sure that none of the fields were left blank while 1:\n errmsg = "\n for i, name in enumerate(fieldNames):\n  if fieldValues[i].strip() == ":\n    errmsg += "{} is a required field.\n\n".format(name)\n if errmsg == ":\n  break # no problems found\n fieldValues = multenterbox(errmsg, title, fieldNames, fieldValues)\n if fieldValues is None:\n  break print("Reply was:{}".format(fieldValues))\nNote\nThe first line ‘from __future__’ is only necessary if you are using Python 2.*, and is only needed for this demo.\n<h3>Letting the user enter password information</h3>\n<h3>passwordbox</h3>\nA passwordbox box is like an enterbox, but used for entering passwords. The text is masked as it is typed in.\n<h3>multpasswordbox</h3>\nmultpasswordbox has the same interface as multenterbox, but when it is displayed, the last of the fields is assumed to be a password, and is masked with asterisks.\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_passwordbox.png" />\n<h3>Displaying text</h3>\nEasyGui provides functions for displaying text.\n<h3>textbox</h3>\nThe textbox() function displays text in a proportional font. The text will word-wrap.\n<h3>codebox</h3>\nThe codebox() function displays text in a monospaced font and does not wrap.\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_codebox_vista.png" />\nNote that you can pass codebox() and textbox() either a string or a list of strings. A list of strings will be converted to text before being displayed. This means that you can use these functions to display the contents of a file this way:\nimport os filename = os.path.normcase("c:/autoexec.bat")\nf = open(filename, "r")\ntext = f.readlines()\nf.close()\ncodebox("Contents of file " + filename, "Show File Contents", text)\n<h3>Working with files</h3>\nA common need is to ask the user for a filename or for a directory. EasyGui provides a few basic functions for allowing a user to navigate through the file system and choose a directory or a file. (These functions are wrappers around widgets and classes in lib-tk.)\nNote that in the current version of EasyGui, the startpos argument is not supported.\n<h3>diropenbox</h3>\ndiropenbox returns the name of a directory\n<h3>fileopenbox</h3>\nfileopenbox returns the name of a file\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_fileopenbox_vista.png" />\n<h3>filesavebox</h3>\nfilesavebox returns the name of a file\n<h3>Remembering User Settings</h3>\n<h3>EgStore</h3>\nA common need is to ask the user for some setting, and then to “persist it”, or store it on disk, so that the next time the user uses your application, you can remember his previous setting.\nIn order to make the process of storing and restoring user settings, EasyGui provides a class called EgStore. In order to remember some settings, your application must define a class (let’s call it Settings, although you can call it anything you want) that inherits from EgStore.\nYour application must also create an object of that class (let’s call the object settings).\nThe constructor (the __init__ method) of the Settings class can initialize all of the values that you wish to remember.\nOnce you have done this, you can remember the settings simply by assigning values to instance variables in the settings object, and use the settings.store() method to persist the settings object to disk.\nHere is an example of code using the Settings class:\nfrom easygui import EgStore\n# -----------------------------------------------------------------------\n# define a class named Settings as a subclass of EgStore\n# -----------------------------------------------------------------------\nclass Settings(EgStore):\n def __init__(self, filename):  # filename is required\n  # -------------------------------------------------\n  # Specify default/initial values for variables that\n  # this particular application wants to remember.\n  # -------------------------------------------------\n  self.userId = "\n  self.targetServer = "\n  # -------------------------------------------------\n  # For subclasses of EgStore, these must be\n  # the last two statements in  __init__\n  # -------------------------------------------------\n  self.filename = filename  # this is required\n  self.restore()\n# Create the settings object.\n# If the settingsFile exists, this will restore its values\n# from the settingsFile.\n# create "settings", a persistent Settings object\n# Note that the "filename" argument is required.\n# The directory for the persistent file must already exist.\nsettingsFilename = "settings.txt"\nsettings = Settings(settingsFilename)\n# Now use the settings object.\n# Initialize the "user" and "server" variables\n# In a real application, we&#39;d probably have the user enter them via enterbox user = "obama_barak"\nserver  = "whitehouse1"\n# Save the variables as attributes of the "settings" object settings.userId = user settings.targetServer = server settings.store() # persist the settings print("\nInitial settings")\nprint settings\n# Run code that gets a new value for userId\n# then persist the settings with the new value user = "biden_joe"\nsettings.userId = user settings.store()\nprint("\nSettings after modification")\nprint settings\n# Delete setting variable del settings.userId print("\nSettings after deletion of userId")\nprint settings\nHere is an example of code using a dedicated function to create the Settings class:\nfrom easygui import read_or_create_settings\n# Create the settings object.\nsettings = read_or_create_settings(&#39;settings1.txt&#39;)\n# Save the variables as attributes of the "settings" object settings.userId = "obama_barak"\nsettings.targetServer = "whitehouse1"\nsettings.store() # persist the settings print("\nInitial settings")\nprint settings\n# Run code that gets a new value for userId\n# then persist the settings with the new value user = "biden_joe"\nsettings.userId = user settings.store()\nprint("\nSettings after modification")\nprint settings\n# Delete setting variable del settings.userId print("\nSettings after deletion of userId")\nprint settings\n<h3>Trapping Exceptions</h3>\n<h3>exceptionbox</h3>\nSometimes exceptions are raised… even in EasyGui applications. Depending on how you run your application, the stack trace might be thrown away, or written to stdout while your application crashes.\nEasyGui provides a better way of handling exceptions via exceptionbox. Exceptionbox displays the stack trace in a codebox and may allow you to continue processing.\nExceptionbox is easy to use. Here is a code example:\ntry:\n someFunction()  # this may raise an exception except:\n exceptionbox()\n<img class="lazy" src="https://easygui.readthedocs.io/en/latest/_images/screenshot_exceptionbox_vista.png" />\n',
'<h2>Create a package for Android</h2>\nYou can create a package for android using the <a href="https://github.com/kivy/python-for-android">python-for-android</a> project. \nThis page explains how to download and use it directly on your own machine (see Packaging with python-for-android) or use the Buildozer tool to automate the entire process. \nYou can also see Packaging your application for the Kivy Launcher to run kivy programs without compiling them.\nFor new users, we recommend using Buildozer as the easiest way to make a full APK. \nYou can also run your Kivy app without a compilation step with the Kivy Launcher app.\nKivy applications can be released on an Android market such as the Play store, with a few extra steps to create a fully signed APK.\nThe Kivy project includes tools for accessing Android APIs to accomplish vibration, sensor access, texting etc. \nThese, along with information on debugging on the device, are documented at the\n<a href="https://kivy.org/doc/stable/guide/android.html">main Android page</a>.\n<h3>Buildozer</h3>\nBuildozer is a tool that automates the entire build process. \nIt downloads and sets up all the prequisites for python-for-android,\nincluding the android SDK and NDK, then builds an apk that can be automatically pushed to the device.\nBuildozer currently works only in Linux, and is a beta release, but it already works well and can significantly simplify the apk build.\nYou can get buildozer at <a href="https://github.com/kivy/buildozer">https://github.com/kivy/buildozer</a>:\ngit clone https://github.com/kivy/buildozer.git cd buildozer sudo python setup.py install\nThis will install buildozer in your system. \nAfterwards, navigate to your project directory and run:\nbuildozer init\nThis creates a <cite>buildozer.spec</cite> file controlling your build configuration. \nYou should edit it appropriately with your app name etc. \nYou can set variables to control most or all of the parameters passed to python-for-android.\nInstall buildozer’s <a href="https://buildozer.readthedocs.io/en/latest/installation.html#targeting-android">dependencies</a>.\nFinally, plug in your android device and run:\nbuildozer android debug deploy run\nto build, push and automatically run the apk on your device.\nBuildozer has many available options and tools to help you, the steps above are just the simplest way to build and run your APK. \nThe full documentation is available <a href="http://buildozer.readthedocs.org/en/latest/">here</a>. \nYou can also check the Buildozer README at <a href="https://github.com/kivy/buildozer">https://github.com/kivy/buildozer</a>.\n<h3>Packaging with python-for-android</h3>\nYou can also package directly with python-for-android, which can give you more control but requires you to manually download parts of the Android toolchain.\nSee the <a href="https://python-for-android.readthedocs.io/en/latest/quickstart/">python-for-android documentation</a>\nfor full details.\n<h3>Packaging your application for the Kivy Launcher</h3>\nThe <a href="https://play.google.com/store/apps/details?id=org.kivy.pygame&amp;hl=en">Kivy launcher</a>\nis an Android application that runs any Kivy examples stored on your SD Card.\nTo install the Kivy launcher, you must:\nGo to the <a href="https://market.android.com/details?id=org.kivy.pygame">Kivy Launcher page</a>\non the Google Play Store\nClick on Install\nSelect your phone… And you’re done!\nIf you don’t have access to the Google Play Store on your phone/tablet,\nyou can download and install the APK manually from  <a href="http://kivy.org/#download">http://kivy.org/#download</a>.\nOnce the Kivy launcher is installed, you can put your Kivy applications in the Kivy directory in your external storage directory\n(often available at /sdcard even in devices where this memory is internal), e.g.\n/sdcard/kivy/&lt;yourapplication&gt;\n&lt;yourapplication&gt; should be a directory containing:\n# Your main application file:\nmain.py\n# Some info Kivy requires about your app on android:\nandroid.txt\nThe file <cite>android.txt</cite> must contain:\ntitle=&lt;Application Title&gt;\nauthor=&lt;Your Name&gt;\norientation=&lt;portrait|landscape&gt;\nThese options are just a very basic configuration. \nIf you create your own APK using the tools above, you can choose many other settings.\n<h3>Installation of Examples</h3>\nKivy comes with many examples, and these can be a great place to start trying the Kivy launcher. \nYou can run them as below:\n#. \nDownload the `Kivy demos for Android &lt;https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/kivy/kivydemo-for-android.zip&gt;`_\n#. \nUnzip the contents and go to the folder `kivydemo-for-android`\n#. \nCopy all the the subfolders here to\n/sdcard/kivy\nRun the launcher and select one of the Pictures, Showcase, Touchtracer, Cymunk or other demos…\n<h3>Release on the market</h3>\nIf you have built your own APK with Buildozer or with python-for-android, you can create a release version that may be released on the Play store or other Android markets.\nTo do this, you must run Buildozer with the release parameter\n(e.g. buildozer android release), or if using python-for-android use the --release option to build.py. \nThis creates a release APK in the bin directory, which you must properly sign and zipalign.\nThe procedure for doing this is described in the Android documentation at <a href="https://developer.android.com/studio/publish/app-signing.html#signing-manually">https://developer.android.com/studio/publish/app-signing.html#signing-manually</a> -\nall the necessary tools come with the Android SDK.\n<h3>Targeting Android</h3>\nKivy is designed to operate identically across platforms and as a result, makes some clear design decisions. \nIt includes its own set of widgets and by default,\nbuilds an APK with all the required core dependencies and libraries.\nIt is possible to target specific Android features, both directly and in a (somewhat) cross-platform way. \nSee the <cite>Using Android APIs</cite> section of the <a href="android.html">Kivy on Android documentation</a> for more details.\n',
'<h2>Python 一行代码</h2>\n在学习Python的过程中，总会发现Python能够轻易的解决许多问题。\n一些复杂的任务，甚至可以使用一行Python代码就能搞定。\n下面给大家介绍50个有趣的Python一行代码，都很实用。\n希望大家能从中找到对自己有帮助的技巧。\n<h3>1、字母异位词</h3>\n两个单词如果包含相同的字母，次序不同，则称为字母易位词(anagram)。\n例如，“silent”和“listen”是字母易位词，而“apple”和“aplee”不是易位词。\nfrom collections import Counter\ns1 = \'below\'\ns2 = \'elbow\'\nprint(\'anagram\') if Counter(s1) == Counter(s2) else print(\'not an anagram\')\n使用一行Python代码，就能判断出来了。\n<h3>2、二进制转十进制</h3>\ndecimal = int(\'1010\', 2)\nprint(decimal) #10\n<h3>3、将字符串转换为小写</h3>\nprint("Hi my name is XiaoF".lower())\n# \'hi my name is xiaof\'\nprint("Hi my name is XiaoF".casefold())\n# \'hi my name is xiaof\'\n<h3>4、将字符串转换为大写</h3>\nprint("hi my name is XiaoF".upper())\n# \'HI MY NAME IS XIAOF\'\n<h3>5、将字符串转换为字节</h3>\nprint("convert string to bytes using encode method".encode())\n# b\'convert string to bytes using encode method\'\n<h3>6、拷贝文件</h3>\nimport shutil\nshutil.copyfile(\'source.txt\', \'dest.txt\')\n<h3>7、快速排序</h3>\nqsort = lambda l: l if len(l) &lt;= 1 else qsort([x for x in l[1:] if x &lt; l[0]]) + [l[0]] + qsort([x for x in l[1:] if x &gt;= l[0]])\nprint(qsort([17, 29, 11, 97, 103, 5]))\n# [5, 11, 17, 29, 97, 103]\n<h3>8、n个连续数的和</h3>\nn = 10\nprint(sum(range(0, n+1)))\n# 55\n<h3>9、交换两个变量的值</h3>\na,b = b,a\n<h3>10、斐波纳契数列</h3>\nfib = lambda x: x if x&lt;=1 else fib(x-1) + fib(x-2)\nprint(fib(20))\n# 6765\n<h3>11、将嵌套列表合并为一个列表</h3>\nmain_list = [[0, 1, 2], [11, 12, 13], [52, 53, 54]]\nresult = [item for sublist in main_list for item in sublist]\nprint(result)\n&gt;\n[0, 1, 2, 11, 12, 13, 52, 53, 54]\n<h3>12、运行一个HTTP服务器</h3>\npython3 -m http.server 8000\npython2 -m SimpleHTTPServer\n<h3>13、反转列表</h3>\nnumbers = [0, 1, 2, 11, 12, 13, 52, 53, 54]\nprint(numbers[::-1])\n# [54, 53, 52, 13, 12, 11, 2, 1, 0]\n<h3>14、阶乘</h3>\nimport math\nfact_5 = math.factorial(5)\nprint(fact_5)\n# 120\n<h3>15、在列表推导式中使用for和if</h3>\neven_list = [number for number in [1, 2, 3, 4] if number % 2 == 0]\nprint(even_list)\n# [2, 4]\n<h3>16、列表中最长的字符串</h3>\nwords = [\'This\', \'is\', \'a\', \'list\', \'of\', \'words\']\nresult = max(words, key=len)\nprint(result)\n# \'words\'\n<h3>17、列表推导式</h3>\nli = [num for num in range(0, 10)]\nprint(li)\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n<h3>18、集合推导式</h3>\nnum_set = {num for num in range(0, 10)}\nprint(num_set)\n# {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n<h3>19、字典推导式</h3>\ndict_numbers = {x: x*x for x in range(1, 5)}\nprint(dict_numbers)\n# {1: 1, 2: 4, 3: 9, 4: 16}\n<h3>20、if-else</h3>\nprint("even") if 4 % 2==0 else print("odd")\n<h3>21、无限循环</h3>\nwhile 1:0\n<h3>22、检查数据类型</h3>\nprint(isinstance(2, int))\n# True\nprint(isinstance("allwin", str))\n# True\nprint(isinstance([3, 4, 1997], list))\n# True\n<h3>23、While循环</h3>\na = 5\nwhile a &gt; 0:\n a = a - 1\nprint(a)\n# 0\n<h3>24、使用print语句写入文件</h3>\nprint("Hello, World!", file=open(\'file.txt\', \'w\'))\n既可打印出信息，还能将信息保存文件。\n<h3>25、计算一个字符在字符串中出现的频率</h3>\nprint("umbrella".count(\'l\'))\n# 2\n<h3>26、合并列表</h3>\nlist1 = [1, 2, 4]\nlist2 = [\'XiaoF\']\nlist1.extend(list2)\nprint(list1)\n# [1, 2, 4, \'XiaoF\']\n<h3>27、合并字典</h3>\ndict1 = {\'name\': \'weiwei\', \'age\': 23}\ndict2 = {\'city\': \'Beijing\'}\ndict1.update(dict2)\nprint(dict1)\n# {\'name\': \'weiwei\', \'age\': 23, \'city\': \'Beijing\'}\n<h3>28、合并集合</h3>\nset1 = {0, 1, 2}\nset2 = {11, 12, 13}\nset1.update(set2)\nprint(set1)\n# {0, 1, 2, 11, 12, 13}\n<h3>29、时间戳</h3>\nimport time\nprint(time.time())\n<h3>30、列表中出现次数最多的元素</h3>\ntest_list = [9, 4, 5, 4, 4, 5, 9, 5, 4]\nmost_frequent_element = max(set(test_list), key=test_list.count)\nprint(most_frequent_element)\n# 4\n<h3>31、嵌套列表</h3>\nnumbers = [[num] for num in range(10)]\nprint(numbers)\n# [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]\n<h3>32、八进制转十进制</h3>\nprint(int(\'30\', 8)) \n# 24\n<h3>33、将键值对转换为字典</h3>\nresult = dict(name=\'XiaoF\', age=23)\nprint(result)\n# {\'name\': \'XiaoF\', \'age\': 23}\n<h3>34、求商和余数</h3>\nquotient, remainder = divmod(4, 5)\nprint(quotient, remainder)\n# 0 4\ndivmod()函数返回当参数1除以参数2时，包含商和余数的元组。\n<h3>35、删除列表中的重复项</h3>\nprint(list(set([4, 4, 5, 5, 6])))\n# [4, 5, 6]\n<h3>36、按升序排序列表</h3>\nprint(sorted([5, 2, 9, 1]))\n# [1, 2, 5, 9]\n<h3>37、按降序排序列表</h3>\nprint(sorted([5, 2, 9, 1], reverse=True))\n# [9, 5, 2, 1]\n<h3>38、获取小写字母表</h3>\nimport string\nprint(string.ascii_lowercase)\n# abcdefghijklmnopqrstuvwxyz\n<h3>39、获取大写字母表import string</h3>\nprint(string.ascii_uppercase)\n# ABCDEFGHIJKLMNOPQRSTUVWXYZ\n<h3>40、获取0到9字符串</h3>\nimport string\nprint(string.digits)\n# 0123456789\n<h3>41、十六进制转十进制</h3>\nprint(int(\'da9\', 16))\n# 3497\n<h3>42、日期时间</h3>\nimport time\nprint(time.ctime())\n# Thu Aug 13 20:00:00 2021\n<h3>43、将列表中的字符串转换为整数</h3>\nprint(list(map(int, [\'1\', \'2\', \'3\'])))\n# [1, 2, 3]\n<h3>44、用键对字典进行排序</h3>\nd = {\'one\': 1, \'four\': 4, \'eight\': 8}\nresult = {key: d[key] for key in sorted(d.keys())}\nprint(result)\n# {\'eight\': 8, \'four\': 4, \'one\': 1}\n<h3>45、用键值对字典进行排序</h3>\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nresult = {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}\nprint(result)\n# {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\n<h3>46、列表旋转</h3>\nli = [1, 2, 3, 4, 5]\n# li[n:] + li[:n], 右变左\nprint(li[2:] + li[:2])\n# [3, 4, 5, 1, 2]\n# li[-n:] + li[:-n], 左变右\nprint(li[-1:] + li[:-1])\n# [5, 1, 2, 3, 4]\n<h3>47、将字符串中的数字移除</h3>\nmessage = \'\'.join(list(filter(lambda x: x.isalpha(), \'abc123def4fg56vcg2\')))\nprint(message)\n# abcdeffgvcg\n<h3>48、矩阵变换</h3>\nold_list = [[1, 2, 3], [3, 4, 6], [5, 6, 7]]\nresult = list(list(x) for x in zip(*old_list))\nprint(result)\n# [[1, 3, 5], [2, 4, 6], [3, 6, 7]]\n<h3>49、列表过滤</h3>\nresult = list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5, 6]))\nprint(result)\n# [2, 4, 6]\n<h3>50、解包</h3>\na, *b, c = [1, 2, 3, 4, 5]\nprint(a) # 1\nprint(b) # [2, 3, 4]\nprint(c) # 5\n',
'<h2>Web Scrapingwith Mechanical Soup</h2>\n<a href="https://www.youtube.com/watch?v=MkGQmZoMuRM" class="whitebut ">Web Scraping Databases with Mechanical Soup and SQlite</a>\nimport mechanicalsoup\nimport pandas as pd\nimport sqlite3\n# create browser object & open URL\nbrowser = mechanicalsoup.StatefulBrowser()\nbrowser.open("https://en.wikipedia.org/wiki/Comparison_of_Linux_distributions")\n# extract all table headers (entire "Distribution" column)\nth = browser.page.find_all("th", attrs={"class": "table-rh"})\n# tidy up and slice off non-table elements \ndistribution = [value.text.replace("\n", "") for value in th]\ndistribution = distribution[:95]\n# extract table data (the rest of the table)\ntd = browser.page.find_all("td")\n# tidy up and slice off non-table elements\ncolumns = [value.text.replace("\n", "") for value in td]\ncolumns = columns[6:1051]\ncolumn_names = ["Founder", \n    "Maintainer", \n    "Initial_Release_Year", \n    "Current_Stable_Version", \n    "Security_Updates", \n    "Release_Date", \n    "System_Distribution_Commitment", \n    "Forked_From", \n    "Target_Audience", \n    "Cost", \n    "Status"]\ndictionary = {"Distribution": distribution}\n# insert column names and their data into a dictionary\nfor idx, key in enumerate(column_names):\n dictionary[key] = columns[idx:][::11]\n# convert dictionary to data frame\ndf = pd.DataFrame(data = dictionary)\n# create new database and cursor\nconnection = sqlite3.connect("linux_distro.db")\ncursor = connection.cursor()\n# create database table and insert all data frame rows\ncursor.execute("create table linux (Distribution, " + ",".join(column_names)+ ")")\nfor i in range(len(df)):\n cursor.execute("insert into linux values (?,?,?,?,?,?,?,?,?,?,?,?)", df.iloc[i])\n# PERMANENTLY save inserted data in "linux_distro.db"\nconnection.commit()\nconnection.close()\n',
'<h2>GUI 神器</h2>\n<a href="https://github.com/chriskiehl/Gooey" class="whitebut ">transform aommand line applications into GUI</a>\n<a href="https://pythonrepo.com/repo/chriskiehl-Gooey-python-graphical-user-interface-applications" class="whitebut ">TurnPython command line program into a GUI application</a>\nGUI是一个人机交互的界面，换句话说，它是人类与计算机交互的一种方法。\nGUI主要使用窗口，图标和菜单，也可以通过鼠标和键盘进行操作。\nGUI库包含部件。\n部件是一系列图形控制元素的集合。\n在构建GUI程序时，通常使用层叠方式。\n众多图形控制元素直接叠加起来。\n当使用python编写应用程序时，你就必须使用GUI库来完成。\n对于Python GUI库，你可以有很多的选择。\n最多的是 Tkinter ，这个 GUI 库比较灵活，可以做出比较复杂的界面。\n但是在页面布局和控件使用上比较复杂，想画出一个好看的界面还是要花很多功夫的。\n今天介绍一个 GUI 库 —— Gooey ，一行代码就可以快速生成 GUI 应用程序。\n<h3>安装</h3>安装方法毫无新意，跟以前我们安装其他库一样：\npip install Gooey<h3>简单示例</h3>\nfrom gooey import Gooey, GooeyParser\n@Gooey(program_name="简单的实例")\ndef main():\n parser = GooeyParser(description="第一个示例!")\n parser.add_argument(\'文件路径\', widget="FileChooser")   # 文件选择框\n parser.add_argument(\'日期\', widget="DateChooser")    # 日期选择框\n args = parser.parse_args()         # 接收界面传递的参数\n print(args)\nif   __name__ == \'__main__\':\n main()\n这里看代码应该大致知道界面有些什么控件：\n文件选择框、日期选择框。\n运行之后的效果如下：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGY7kk9Ivg2bXYs6v8SJlkoobvblB5DNNYNvzl5ibnndkTopBOjZAh8ZA/640>\n<h3>组件</h3>GUI 界面都是由一个个组件排列组成的，上面的例子中我们使用了 FileChooser 和 DateChooser 这两个组件，使用起来是不是很简单？\n我们来看看 Gooey 还有哪些组件。\n控件名			控件类型\nFileChooser		文件选择器\nMultiFileChooser	文件多选器\nDirChooser		目录选择器\nMultiDirChooser	目录多选器\nFileSaver			文件保存\nDateChooser		日期选择\nTextField			文本输入框\nDropdown			下拉列表\nCounter			计数器\nCheckBox			复选框\nRadioGroup		单选框\n这些组件基本上看名称就知道是什么样子的了，都是我们平时常用的页面组件。\n<h3>配置</h3>配置参数主要是对Gooey界面做全局配置，配置方法如下：\n@Gooey(program_name=\'全局配置Demo\')\ndef main():\n ...\n这里就使用了 program_name 这个配置，主要是配置显示程序的名称。\n除此之外，Gooey 还有好多其他的配置参数：\n参数				类型				简介\nadvanced			Boolean			切换显示全部设置还是仅仅是简化版本\nshow_config		Boolean			跳过所有配置并立即运行程序\nlanguage			str				指定从 gooey/languages 目录读取哪个语言包\nprogram_name		str				GUI 窗口显示的程序名。默认会显 sys.argv[0]。\nprogram_description	str				Settings 窗口顶栏显示的描述性文字。默认值从 ArgumentParser 中获取。\ndefault_size		tuple			窗口默认大小，(600,400)\nrequired_cols		int				设置必选参数行数。\noptional_cols		int				设置可选参数行数。\ndump_build_config	Boolean			将设置以 JSON 格式保存在硬盘中以供编辑/重用。\nrichtext_controls	Boolean			打开/关闭控制台对终端控制序列的支持（对字体粗细和颜色的有限支持）\n比如我们上面的例子中除了我们自己设置的，其他的控件例如选择按钮、确定按钮等默认都是英文的，我们可以通过 language 参数来设置语言。\n语言包在 Gooey 的 GitHub 源码中有：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGh318nJMxPSaRJKKh0vUaCfbubiciafnrl4iaqdQvwBoWSa5WDmM5icaia7A/640>\n我们使用语言配置：\nfrom gooey import Gooey, GooeyParser\n@Gooey(program_name="简单的实例", language=\'chinese\')\ndef main():\n parser = GooeyParser(description="第一个示例!")\n parser.add_argument(\'文件路径\', widget="FileChooser")   # 文件选择框\n parser.add_argument(\'日期\', widget="DateChooser")    # 日期选择框\n args = parser.parse_args()         # 接收界面传递的参数\n print(args)\nif   __name__ == \'__main__\':\n main()\n这里加了一个 language 参数，我们看看运行后效果：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGsOdca4cBcmUCmuldWjVXtveiaicawiayxbhcIVmZw9bf2iaM9ibhxaibt89A/640>\n我们可以看到，界面上的文字都变成中文了。\n<h3>结构布局</h3>通过使用一些简单的自定义，您可以使用Gooey实现相当灵活的布局。\n我们可以通过Gooey装饰器的各种参数来控制总体布局选项。\nshow_sidebar=True\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGZiaZSx1Xet6aca2UFK5wGnu8Bwqo03sZW8Yib3FL3pcC3I9CibZOKKNIw/640>\nshow_sidebar=False\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGRS5exaq0tgWMnX8m4lOW5FFiaCLZLSM3wibyLrKpOKwPqeiaKqG6ia5mwg/640>\nnavigation=\'TABBED\'\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGd3Nmr9HCGsvpeDKtcc77RTfadXb68ibaBFbFsNq97OwxY5vLwE8sF4g/640>\ntabbed_groups=True\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGd6SQNulq5CM8HfSBflMNOyHTLQ9KAHgeGr4aWQTdwjMZJWYRG2TOWw/640>\n<h3>实例</h3>我们通过一个小栗子来看看运行的效果吧。\nfromgooeyimportGooey,GooeyParser@Gooey(richtext_controls=True,#打from gooey import Gooey, GooeyParser\n@Gooey(\n richtext_controls=True,     # 打开终端对颜色支持\n program_name="MQTT连接订阅小工具",  # 程序名称\n encoding="utf-8",        # 设置编码格式，打包的时候遇到问题\n progress_regex=r"^progress: (\d+)%$" # 正则，用于模式化运行时进度信息\n)\ndef main():\n settings_msg = \'MQTT device activation information subscription\'\n parser = GooeyParser(description=settings_msg)\n subs = parser.add_subparsers(help=\'commands\', dest=\'command\')\n my_parser = subs.add_parser(\'MQTT消息订阅\')\n my_parser.add_argument("connect", metavar=\'运行环境\',help="请选择开发环境",choices=[\'dev环境\',\'staging环境\'], default=\'dev环境\')\n my_parser.add_argument("device_type",metavar=\'设备类型\',help="请选择设备类型",choices=[\'H2\',\'H3\'],default=\'H2\')\n my_parser.add_argument("serialNumber", metavar=\'设备SN号\',default=\'LKVC19060047\',help=\'多个请用逗号或空格隔开\')\n siege_parser = subs.add_parser(\'进度条控制\')\n siege_parser.add_argument(\'num\',help=\'请输入数字\',default=100)\n args = parser.parse_args()\n print(args, flush=True) # flush=True在打包的时候会用到\nif __name__ == \'__main__\':\n main()\n这个例子运行的效果如下：\n<img src="https://mmbiz.qpic.cn/mmbiz_gif/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGUEltAAs98ZjJtROEE3qs1hQR3iaxbmpb0yDI6wnrt4MKAKMFjqL3Zfw/640>\n<h3>打包成应用程序</h3>第一步，先安装我们的打包库：\npip install pyinstaller\n第二步，执行打包命令：\npyinstaller -F gooeydemo.py -w\n等待执行完成，我们就可以在代码目录下看到这样的结构：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/pbRNVEA1d2yFSVflGghcE5VCkAVqQpLGWEqNkibgiaTj4rNW8gjwy872NWBbncIP6ibqm4WWZAkbxACxSgH9q11zw/640>\n我们的 exe 可执行文件就在 dist 文件夹下。\n<h3>总结</h3>今天给大家介绍了 Gooey 的一些简单使用，个人觉得比 Tkinter 要好用一些，应对一些简单的 GUI 界面，我们使用 Gooey 可以快速生成，而使用 Tkinter 的话，可能就需要耗费一些时间了。\n当然，Gooey 还有一些其他的特性，大家有兴趣可以去探索！\n',
'<h2>爬虫利器 Playwright</h2>\n<a href="https://www.scrapingbee.com/blog/playwright-web-scraping/" class="whitebut ">Scraping the web with Playwright</a>\n<a href="https://oxylabs.io/blog/playwright-web-scraping" class="whitebut ">Web Scraping with Playwright Tutorial</a>\n<a href="https://blog.apify.com/how-to-scrape-the-web-with-playwright-ece1ced75f73/" class="whitebut ">How to scrape the web with Playwright</a>\nPlaywright 是微软在 2020 年初开源的新一代自动化测试工具，它的功能类似于 Selenium、Pyppeteer 等，都可以驱动浏览器进行各种自动化操作。\n它的功能也非常强大，对市面上的主流浏览器都提供了支持，API 功能简洁又强大。\n虽然诞生比较晚，但是现在发展得非常火热。\n因为 Playwright 是一个类似 Selenium 一样可以支持网页页面渲染的工具，再加上其强大又简洁的 API，Playwright 同时也可以作为网络爬虫的一个爬取利器。\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo9HR1K6mEPU1MUYexC6bDicHsRGDh5Z5rDdicbPdAydyvTjCnaeiaK6vvRQ/640>\n<h3>1. Playwright 的特点</h3>\nPlaywright 支持当前所有主流浏览器，包括 Chrome 和 Edge（基于 Chromium）、Firefox、Safari（基于 WebKit） ，提供完善的自动化控制的 API。\nPlaywright 支持移动端页面测试，使用设备模拟技术可以使我们在移动 Web 浏览器中测试响应式 Web 应用程序。\nPlaywright 支持所有浏览器的 Headless 模式和非 Headless 模式的测试。\nPlaywright 的安装和配置非常简单，安装过程中会自动安装对应的浏览器和驱动，不需要额外配置 WebDriver 等。\nPlaywright 提供了自动等待相关的 API，当页面加载的时候会自动等待对应的节点加载，大大简化了 API 编写复杂度。\n本节我们就来了解下 Playwright 的使用方法。\n<h3>2. 安装</h3>Playwright 目前提供了 Python 和 Node.js 的 API，下面我们针对 Python 版的 Playwright 进行介绍。\n要使用 Playwright，需要 Python 3.7 版本及以上，请确保 Python 的版本符合要求。\n要安装 Playwright，可以直接使用 pip3，命令如下：\npip3 install playwright\n安装完成之后需要进行一些初始化操作：\nplaywright install\n这时候 Playwrigth 会安装 Chromium, Firefox and WebKit 浏览器并配置一些驱动，我们不必关心中间配置的过程，Playwright 会为我们配置好。\n具体的安装说明可以参考：\nhttps://setup.scrape.center/playwright。\n安装完成之后，我们便可以使用 Playwright 启动 Chromium 或 Firefox 或 WebKit 浏览器来进行自动化操作了。\n<h3>3. 基本使用</h3>Playwright 支持两种编写模式，一种是类似 Pyppetter 一样的异步模式，另一种是像 Selenium 一样的同步模式，我们可以根据实际需要选择使用不同的模式。\n我们先来看一个基本同步模式的例子：\nfrom playwright.sync_api import sync_playwright\nwith sync_playwright() as p:\n for browser_type in [p.chromium, p.firefox, p.webkit]:\n  browser = browser_type.launch(headless=False)\n  page = browser.new_page()\n  page.goto(\'https://www.baidu.com\')\n  page.screenshot(path=f\'screenshot-{browser_type.name}.png\')\n  print(page.title())\n  browser.close()\n首先我们导入了 sync_playwright 方法，然后直接调用了这个方法，该方法返回的是一个 PlaywrightContextManager 对象，可以理解是一个浏览器上下文管理器，我们将其赋值为变量 p。\n接着我们调用了 PlaywrightContextManager 对象的 chromium、firefox、webkit 属性依次创建了一个 Chromium、Firefox 以及 Webkit 浏览器实例，接着用一个 for 循环依次执行了它们的 launch 方法，同时设置了 headless 参数为 False。\n“注意：\n如果不设置为 False，默认是无头模式启动浏览器，我们看不到任何窗口。\n”launch 方法返回的是一个 Browser 对象，我们将其赋值为 browser 变量。\n然后调用 browser 的 new_page 方法，相当于新建了一个选项卡，返回的是一个 Page 对象，将其赋值为 page，这整个过程其实和 Pyppeteer 非常类似。\n接着我们就可以调用 page 的一系列 API 来进行各种自动化操作了，比如调用 goto，就是加载某个页面，这里我们访问的是百度的首页。\n接着我们调用了 page 的 screenshot 方法，参数传一个文件名称，这样截图就会自动保存为该图片名称，这里名称中我们加入了 browser_type 的 name 属性，代表浏览器的类型，结果分别就是 chromium, firefox, webkit。\n另外我们还调用了 title 方法，该方法会返回页面的标题，即 HTML 中 title 节点中的文字，也就是选项卡上的文字，我们将该结果打印输出到控制台。\n最后操作完毕，调用 browser 的 close 方法关闭整个浏览器，运行结束。\n运行一下，这时候我们可以看到有三个浏览器依次启动并加载了百度这个页面，分别是 Chromium、Firefox 和 Webkit 三个浏览器，页面加载完成之后，生成截图、控制台打印结果就退出了。\n这时候当前目录便会生成三个截图文件，都是百度的首页，文件名中都带有了浏览器的名称，如图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo9NNO6GCJQeXk7xNH2VnfxRibTfIibHMApnqPoWibjq8NrmGAgwDVW0zc1g/640>\n控制台运行结果如下：\n百度一下，你就知道\n百度一下，你就知道\n百度一下，你就知道\n通过运行结果我们可以发现，我们非常方便地启动了三种浏览器并完成了自动化操作，并通过几个 API 就完成了截图和数据的获取，整个运行速度是非常快的，者就是 Playwright 最最基本的用法。\n当然除了同步模式，Playwright 还提供异步的 API，如果我们项目里面使用了 asyncio，那就应该使用异步模式，写法如下：\nimport asyncio\nfrom playwright.async_api import async_playwright\nasync def main():\n async with async_playwright() as p:\n  for browser_type in [p.chromium, p.firefox, p.webkit]:\n   browser = await browser_type.launch()\n   page = await browser.new_page()\n   await page.goto(\'https://www.baidu.com\')\n   await page.screenshot(path=f\'screenshot-{browser_type.name}.png\')\n   print(await page.title())\n   await browser.close()\nasyncio.run(main())\n可以看到整个写法和同步模式基本类似，导入的时候使用的是 async_playwright 方法，而不再是 sync_playwright 方法。\n写法上添加了 async/await 关键字的使用，最后的运行效果是一样的。\n另外我们注意到，这例子中使用了 with as 语句，with 用于上下文对象的管理，它可以返回一个上下文管理器，也就对应一个 PlaywrightContextManager 对象，无论运行期间是否抛出异常，它能够帮助我们自动分配并且释放 Playwright 的资源。\n<h3>4. 代码生成</h3>Playwright 还有一个强大的功能，那就是可以录制我们在浏览器中的操作并将代码自动生成出来，有了这个功能，我们甚至都不用写任何一行代码，这个功能可以通过 playwright 命令行调用 codegen 来实现，我们先来看看 codegen 命令都有什么参数，输入如下命令：\nplaywright codegen --help\n结果类似如下：\nUsage: npx playwright codegen [options] [url]\nopen page and generate code for user actions\nOptions:\n  -o, --output <file name>  saves the generated script to a file\n  --target <language>    language to use, one of javascript, python, python-async, csharp (default: "python")\n  -b, --browser <browserType>  browser to use, one of cr, chromium, ff, firefox, wk, webkit (default: "chromium")\n  --channel <channel>    Chromium distribution channel, "chrome", "chrome-beta", "msedge-dev", etc\n  --color-scheme <scheme>   emulate preferred color scheme, "light" or "dark"\n  --device <deviceName>  emulate device, for example  "iPhone 11"\n  --geolocation <coordinates>  specify geolocation coordinates, for example "37.819722,-122.478611"\n  --load-storage <filename> load context storage state from the file, previously saved with --save-storage\n  --lang <language>   specify language / locale, for example "en-GB"\n  --proxy-server <proxy>    specify proxy server, for example "http://myproxy:3128" or "socks5://myproxy:8080"\n  --save-storage <filename> save context storage state at the end, for later use with --load-storage\n  --timezone <time zone>    time zone to emulate, for example "Europe/Rome"\n  --timeout <timeout>    timeout for Playwright actions in milliseconds (default: "10000")\n  --user-agent <ua string>  specify user agent string\n  --viewport-size <size>    specify browser viewport size in pixels, for example "1280, 720"\n  -h, --help       display help for command\nExamples:\n  $ codegen\n  $ codegen --target=python\n  $ codegen -b webkit https://example.com\n可以看到这里有几个选项，比如 -o 代表输出的代码文件的名称；\n--target 代表使用的语言，默认是 python，即会生成同步模式的操作代码，如果传入 python-async 就会生成异步模式的代码；\n-b 代表的是使用的浏览器，默认是 Chromium，其他还有很多设置，比如 --device 可以模拟使用手机浏览器，比如 iPhone 11，--lang 代表设置浏览器的语言，--timeout 可以设置页面加载超时时间。\n好，了解了这些用法，那我们就来尝试启动一个 Firefox 浏览器，然后将操作结果输出到 script.py 文件，命令如下：\nplaywright codegen -o script.py -b firefox\n这时候就弹出了一个 Firefox 浏览器，同时右侧会输出一个脚本窗口，实时显示当前操作对应的代码。\n我们可以在浏览器中做任何操作，比如打开百度，然后点击输入框并输入 nba，然后再点击搜索按钮，浏览器窗口如下：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo9lRvbIf1abnqMzorHKtLEIzCv5HVu5IFubUV6DtVuuM9pUO8xia7bNCg/640>\n可以看见浏览器中还会高亮显示我们正在操作的页面节点，同时还显示了对应的选择器字符串\ninput[name="wd"]\n，右侧的窗口如图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo9rk4ZNzIg8xSlicSyYVIMTPTAgAKyanicWibZFmltwTSBhTRkzZRGTlt9w/640>\n在操作过程中，该窗口中的代码就实时变化，可以看到这里生成了我们一系列操作的对应代码，比如在搜索框中输入 nba，就对应如下代码：\npage.fill("input[name=\"wd\"]", "nba")\n操作完毕之后，关闭浏览器，Playwright 会生成一个 script.py 文件，内容如下：\nfrom playwright.sync_api import sync_playwright\ndef run(playwright):\n browser = playwright.firefox.launch(headless=False)\n context = browser.new_context()\n # Open new page\n page = context.new_page()\n # Go to https://www.baidu.com/\n page.goto("https://www.baidu.com/")\n # Click input[name="wd"]\n page.click("input[name=\"wd\"]")\n # Fill input[name="wd"]\n page.fill("input[name=\"wd\"]", "nba")\n # Click text=百度一下\n with page.expect_navigation():\n  page.click("text=百度一下")\n context.close()\n browser.close()\nwith sync_playwright() as playwright:\n run(playwright)\n可以看到这里生成的代码和我们之前写的示例代码几乎差不多，而且也是完全可以运行的，运行之后就可以看到它又可以复现我们刚才所做的操作了。\n所以，有了这个功能，我们甚至都不用编写任何代码，只通过简单的可视化点击就能把代码生成出来，可谓是非常方便了！\n另外这里有一个值得注意的点，仔细观察下生成的代码，和前面的例子不同的是，这里 new_page 方法并不是直接通过 browser 调用的，而是通过 context 变量调用的，这个 context 又是由 browser 通过调用 new_context 方法生成的。\n有读者可能就会问了，这个 context 究竟是做什么的呢？\n其实这个 context 变量对应的是一个 BrowserContext 对象，BrowserContext 是一个类似隐身模式的独立上下文环境，其运行资源是单独隔离的，在做一些自动化测试过程中，每个测试用例我们都可以单独创建一个 BrowserContext 对象，这样可以保证每个测试用例之间互不干扰，具体的 API 可以参考https://playwright.dev/python/docs/api/class-browsercontext。\n<h3>5. 移动端浏览器支持</h3>Playwright 另外一个特色功能就是可以支持移动端浏览器的模拟，比如模拟打开 iPhone 12 Pro Max 上的 Safari 浏览器，然后手动设置定位，并打开百度地图并截图。\n首先我们可以选定一个经纬度，比如故宫的经纬度是 39.913904, 116.39014，我们可以通过 geolocation 参数传递给 Webkit 浏览器并初始化。\n示例代码如下：\nfrom playwright.sync_api import sync_playwright\nwith sync_playwright() as p:\n iphone_12_pro_max = p.devices[\'iPhone 12 Pro Max\']\n browser = p.webkit.launch(headless=False)\n context = browser.new_context(\n  **iphone_12_pro_max,\n  locale=\'zh-CN\',\n  geolocation={\'longitude\': 116.39014, \'latitude\': 39.913904},\n  permissions=[\'geolocation\']\n )\n page = context.new_page()\n page.goto(\'https://amap.com\')\n page.wait_for_load_state(state=\'networkidle\')\n page.screenshot(path=\'location-iphone.png\')\n browser.close()\n这里我们先用 PlaywrightContextManager 对象的 devices 属性指定了一台移动设备，这里传入的是手机的型号，比如 iPhone 12 Pro Max，当然也可以传其他名称，比如 iPhone 8，Pixel 2 等。\n前面我们已经了解了 BrowserContext 对象，BrowserContext 对象也可以用来模拟移动端浏览器，初始化一些移动设备信息、语言、权限、位置等信息，这里我们就用它来创建了一个移动端 BrowserContext 对象，通过 geolocation 参数传入了经纬度信息，通过 permissions 参数传入了赋予的权限信息，最后将得到的 BrowserContext 对象赋值为 context 变量。\n接着我们就可以用 BrowserContext 对象来新建一个页面，还是调用 new_page 方法创建一个新的选项卡，然后跳转到高德地图，并调用了 wait_for_load_state 方法等待页面某个状态完成，这里我们传入的 state 是 networkidle，也就是网络空闲状态。\n因为在页面初始化和加载过程中，肯定是伴随有网络请求的，所以加载过程中肯定不算 networkidle 状态，所以这里我们传入 networkidle 就可以标识当前页面和数据加载完成的状态。\n加载完成之后，我们再调用 screenshot 方法获取当前页面截图，最后关闭浏览器。\n运行下代码，可以发现这里就弹出了一个移动版浏览器，然后加载了高德地图，并定位到了故宫的位置，如图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo98KP21icUAKHZL2f1nVJ6ajNkesbD4iavQ2Xp9KBwCQa7mJI0dia3QIIDg/640>\n输出的截图也是浏览器中显示的结果。\n所以这样我们就成功实现了移动端浏览器的模拟和一些设置，其操作 API 和 PC 版浏览器是完全一样的。\n<h3>6. 选择器</h3>前面我们注意到 click 和 fill 等方法都传入了一个字符串，这些字符串有的符合 CSS 选择器的语法，有的又是 text= 开头的，感觉似乎没太有规律的样子，它到底支持怎样的匹配规则呢？\n下面我们来了解下。\n传入的这个字符串，我们可以称之为 Element Selector，它不仅仅支持 CSS 选择器、XPath，Playwright 还扩展了一些方便好用的规则，比如直接根据文本内容筛选，根据节点层级结构筛选等等。\n<h3>文本选择</h3>文本选择支持直接使用\ntext=\n这样的语法进行筛选，示例如下：\npage.click("text=Log in")\n这就代表选择文本是 Log in 的节点，并点击。\n<h3>CSS 选择器</h3>CSS 选择器之前也介绍过了，比如根据 id 或者 class 筛选：\npage.click("button")\npage.click("#nav-bar .contact-us-item")\n根据特定的节点属性筛选：\npage.click("[data-test=login-button]")\npage.click("[aria-label=\'Sign in\']")\n<h3>CSS 选择器 + 文本</h3>我们还可以使用 CSS 选择器结合文本值进行海选，比较常用的就是 has-text 和 text，前者代表包含指定的字符串，后者代表字符串完全匹配，示例如下：\npage.click("article:has-text(\'Playwright\')")\npage.click("#nav-bar :text(\'Contact us\')")\n第一个就是选择文本中包含 Playwright 的 article 节点，第二个就是选择 id 为 nav-bar 节点中文本值等于 Contact us 的节点。\n<h3>CSS 选择器 + 节点关系</h3>还可以结合节点关系来筛选节点，比如使用 has 来指定另外一个选择器，示例如下：\npage.click(".item-description:has(.item-promo-banner)")\n比如这里选择的就是选择 class 为 item-description 的节点，且该节点还要包含 class 为 item-promo-banner 的子节点。\n另外还有一些相对位置关系，比如 right-of 可以指定位于某个节点右侧的节点，示例如下：\npage.click("input:right-of(:text(\'Username\'))")\n这里选择的就是一个 input 节点，并且该 input 节点要位于文本值为 Username 的节点的右侧。\n<h3>XPath</h3>当然 XPath 也是支持的，不过 xpath 这个关键字需要我们自行制定，示例如下：\npage.click("xpath=//button")\n这里需要在开头指定xpath=\n字符串，代表后面是一个 XPath 表达式。\n关于更多选择器的用法和最佳实践，可以参考官方文档：\nhttps://playwright.dev/python/docs/selectors。\n<h3>7. 常用操作方法</h3>上面我们了解了浏览器的一些初始化设置和基本的操作实例，下面我们再对一些常用的操作 API 进行说明。\n常见的一些 API 如点击 click，输入 fill 等操作，这些方法都是属于 Page 对象的，所以所有的方法都从 Page 对象的 API 文档查找就好了，文档地址：\nhttps://playwright.dev/python/docs/api/class-page。\n下面介绍几个常见的 API 用法。\n<h3>事件监听</h3>Page 对象提供了一个 on 方法，它可以用来监听页面中发生的各个事件，比如 close、console、load、request、response 等等。\n比如这里我们可以监听 response 事件，response 事件可以在每次网络请求得到响应的时候触发，我们可以设置对应的回调方法获取到对应 Response 的全部信息，示例如下：\nfrom playwright.sync_api import sync_playwright\ndef on_response(response):\n print(f\'Statue {response.status}: {response.url}\')\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n page.on(\'response\', on_response)\n page.goto(\'https://spa6.scrape.center/\')\n page.wait_for_load_state(\'networkidle\')\n browser.close()\n这里我们在创建 Page 对象之后，就开始监听 response 事件，同时将回调方法设置为 on_response，on_response 对象接收一个参数，然后把 Response 的状态码和链接都输出出来了。\n运行之后，可以看到控制台输出结果如下：\nStatue 200: https://spa6.scrape.center/\nStatue 200: https://spa6.scrape.center/css/app.ea9d802a.css\nStatue 200: https://spa6.scrape.center/js/app.5ef0d454.js\nStatue 200: https://spa6.scrape.center/js/chunk-vendors.77daf991.js\nStatue 200: https://spa6.scrape.center/css/chunk-19c920f8.2a6496e0.css\n...\nStatue 200: https://spa6.scrape.center/css/chunk-19c920f8.2a6496e0.css\nStatue 200: https://spa6.scrape.center/js/chunk-19c920f8.c3a1129d.js\nStatue 200: https://spa6.scrape.center/img/logo.a508a8f0.png\nStatue 200: https://spa6.scrape.center/fonts/element-icons.535877f5.woff\nStatue 301: https://spa6.scrape.center/api/movie?limit=10&offset=0&token=NGMwMzFhNGEzMTFiMzJkOGE0ZTQ1YjUzMTc2OWNiYTI1Yzk0ZDM3MSwxNjIyOTE4NTE5\nStatue 200: https://spa6.scrape.center/api/movie/?limit=10&offset=0&token=NGMwMzFhNGEzMTFiMzJkOGE0ZTQ1YjUzMTc2OWNiYTI1Yzk0ZDM3MSwxNjIyOTE4NTE5\nStatue 200: https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@464w_644h_1e_1c\nStatue 200: https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@464w_644h_1e_1c\n....\nStatue 200: https://p1.meituan.net/movie/b607fba7513e7f15eab170aac1e1400d878112.jpg@464w_644h_1e_1c\n“注意：\n这里省略了部分重复的内容。\n”可以看到，这里的输出结果其实正好对应浏览器 Network 面板中所有的请求和响应内容，和下图是一一对应的：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo9y4pIfJ8EKWpYlPKXJmnmZRanxDpYYedI1bJAOGUQFHO8aV2o7pGUkg/640>\n这个网站我们之前分析过，其真实的数据都是 Ajax 加载的，同时 Ajax 请求中还带有加密参数，不好轻易获取。\n但有了这个方法，这里如果我们想要截获 Ajax 请求，岂不是就非常容易了？\n改写一下判定条件，输出对应的 JSON 结果，改写如下：\nfrom playwright.sync_api import sync_playwright\ndef on_response(response):\n if \'/api/movie/\' in response.url and response.status == 200:\n  print(response.json())\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n page.on(\'response\', on_response)\n page.goto(\'https://spa6.scrape.center/\')\n page.wait_for_load_state(\'networkidle\')\n browser.close()\n控制台输入如下：\n{\'count\': 100, \'results\': [{\'id\': 1, \'name\': \'霸王别姬\', \'alias\': \'Farewell My Concubine\', \'cover\': \'https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c\', \'categories\': [\'剧情\', \'爱情\'], \'published_at\': \'1993-07-26\', \'minute\': 171, \'score\': 9.5, \'regions\': [\'中国大陆\', \'中国香港\']}, \n...\n\'published_at\': None, \'minute\': 103, \'score\': 9.0, \'regions\': [\'美国\']}, {\'id\': 10, \'name\': \'狮子王\', \'alias\': \'The Lion King\', \'cover\': \'https://p0.meituan.net/movie/27b76fe6cf3903f3d74963f70786001e1438406.jpg@464w_644h_1e_1c\', \'categories\': [\'动画\', \'歌舞\', \'冒险\'], \'published_at\': \'1995-07-15\', \'minute\': 89, \'score\': 9.0, \'regions\': [\'美国\']}]}\n简直是得来全不费工夫，我们直接通过这个方法拦截了 Ajax 请求，直接把响应结果拿到了，即使这个 Ajax 请求有加密参数，我们也不用关心，因为我们直接截获了 Ajax 最后响应的结果，这对数据爬取来说实在是太方便了。\n另外还有很多其他的事件监听，这里不再一一介绍了，可以查阅官方文档，参考类似的写法实现。\n<h3>获取页面源码</h3>要获取页面的 HTML 代码其实很简单，我们直接通过 content 方法获取即可，用法如下：\nfrom playwright.sync_api import sync_playwright\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n page.goto(\'https://spa6.scrape.center/\')\n page.wait_for_load_state(\'networkidle\')\n html = page.content()\n print(html)\n browser.close()\n运行结果就是页面的 HTML 代码。\n获取了 HTML 代码之后，我们通过一些解析工具就可以提取想要的信息了。\n<h3>页面点击</h3>刚才我们通过示例也了解了页面点击的方法，那就是 click，这里详细说一下其使用方法。\n页面点击的 API 定义如下：\npage.click(selector, **kwargs)\n这里可以看到必传的参数是 selector，其他的参数都是可选的。\n第一个 selector 就代表选择器，可以用来匹配想要点击的节点，如果传入的选择器匹配了多个节点，那么只会用第一个节点。\n这个方法的内部执行逻辑如下：\n根据 selector 找到匹配的节点，如果没有找到，那就一直等待直到超时，超时时间可以由额外的 timeout 参数设置，默认是 30 秒。\n等待对该节点的可操作性检查的结果，比如说如果某个按钮设置了不可点击，那它会等待该按钮变成了可点击的时候才去点击，除非通过 force 参数设置跳过可操作性检查步骤强制点击。\n如果需要的话，就滚动下页面，将需要被点击的节点呈现出来。\n调用 page 对象的 mouse 方法，点击节点中心的位置，如果指定了 position 参数，那就点击指定的位置。\nclick 方法的一些比较重要的参数如下：\nclick_count：\n点击次数，默认为 1。\ntimeout：\n等待要点击的节点的超时时间，默认是 30 秒。\nposition：\n需要传入一个字典，带有 x 和 y 属性，代表点击位置相对节点左上角的偏移位置。\nforce：\n即使不可点击，那也强制点击。\n默认是 False。\n具体的 API 设置参数可以参考官方文档：\nhttps://playwright.dev/python/docs/api/class-page/#pageclickselector-kwargs。\n<h3>文本输入</h3>文本输入对应的方法是 fill，API 定义如下：\npage.fill(selector, value, **kwargs)\n这个方法有两个必传参数，第一个参数也是 selector，第二个参数是 value，代表输入的内容，另外还可以通过 timeout 参数指定对应节点的最长等待时间。\n<h3>获取节点属性</h3>除了对节点进行操作，我们还可以获取节点的属性，方法就是 get_attribute，API 定义如下：\npage.get_attribute(selector, name, **kwargs)\n这个方法有两个必传参数，第一个参数也是 selector，第二个参数是 name，代表要获取的属性名称，另外还可以通过 timeout 参数指定对应节点的最长等待时间。\n示例如下：\nfrom playwright.sync_api import sync_playwright\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n page.goto(\'https://spa6.scrape.center/\')\n page.wait_for_load_state(\'networkidle\')\n href = page.get_attribute(\'a.name\', \'href\')\n print(href)\n browser.close()\n这里我们调用了 get_attribute 方法，传入的 selector 是a.name，选定了 class 为 name 的 a 节点，然后第二个参数传入了 href，获取超链接的内容，输出结果如下：\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIx\n可以看到对应 href 属性就获取出来了，但这里只有一条结果，因为这里有个条件，那就是如果传入的选择器匹配了多个节点，那么只会用第一个节点。\n那怎么获取所有的节点呢？\n<h3>获取多个节点</h3>获取所有节点可以使用 query_selector_all 方法，它可以返回节点列表，通过遍历获取到单个节点之后，我们可以接着调用单个节点的方法来进行一些操作和属性获取，示例如下：\nfrom playwright.sync_api import sync_playwright\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n page.goto(\'https://spa6.scrape.center/\')\n page.wait_for_load_state(\'networkidle\')\n elements = page.query_selector_all(\'a.name\')\n for element in elements:\n  print(element.get_attribute(\'href\'))\n  print(element.text_content())\n browser.close()\n这里我们通过 query_selector_all 方法获取了所有匹配到的节点，每个节点对应的是一个 ElementHandle 对象，然后 ElementHandle 对象也有 get_attribute 方法来获取节点属性，另外还可以通过 text_content 方法获取节点文本。\n运行结果如下：\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIx\n霸王别姬 - Farewell My Concubine\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIy\n这个杀手不太冷 - Léon\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIz\n肖申克的救赎 - The Shawshank Redemption\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI0\n泰坦尼克号 - Titanic\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI1\n罗马假日 - Roman Holiday\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI2\n唐伯虎点秋香 - Flirting Scholar\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI3\n乱世佳人 - Gone with the Wind\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI4\n喜剧之王 - The King of Comedy\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWI5\n楚门的世界 - The Truman Show\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIxMA==\n狮子王 - The Lion King\n<h3>获取单个节点</h3>获取单个节点也有特定的方法，就是 query_selector，如果传入的选择器匹配到多个节点，那它只会返回第一个节点，示例如下：\nfrom playwright.sync_api import sync_playwright\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n page.goto(\'https://spa6.scrape.center/\')\n page.wait_for_load_state(\'networkidle\')\n element = page.query_selector(\'a.name\')\n print(element.get_attribute(\'href\'))\n print(element.text_content())\n browser.close()\n运行结果如下：\n/detail/ZWYzNCN0ZXVxMGJ0dWEjKC01N3cxcTVvNS0takA5OHh5Z2ltbHlmeHMqLSFpLTAtbWIx\n霸王别姬 - Farewell My Concubine\n可以看到这里只输出了第一个匹配节点的信息。\n<h3>网络劫持</h3>最后再介绍一个实用的方法 route，利用 route 方法，我们可以实现一些网络劫持和修改操作，比如修改 request 的属性，修改 response 响应结果等。\n看一个实例：\nfrom playwright.sync_api import sync_playwright\nimport re\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n def cancel_request(route, request):\n  route.abort()\n page.route(re.compile(r"(\.png)|(\.jpg)"), cancel_request)\n page.goto("https://spa6.scrape.center/")\n page.wait_for_load_state(\'networkidle\')\n page.screenshot(path=\'no_picture.png\')\n browser.close()\n这里我们调用了 route 方法，第一个参数通过正则表达式传入了匹配的 URL 路径，这里代表的是任何包含\n.png\n或\n.jpg\n的链接，遇到这样的请求，会回调 cancel_request 方法处理，cancel_request 方法可以接收两个参数，一个是 route，代表一个 CallableRoute 对象，另外一个是 request，代表 Request 对象。\n这里我们直接调用了 route 的 abort 方法，取消了这次请求，所以最终导致的结果就是图片的加载全部取消了。\n观察下运行结果，如图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo9BMUWxc4ROcUmTfacCCe7zoS3wwOoNZnjsgcuPyGEDwia4S1WR20iaicZQ/640>\n可以看到图片全都加载失败了。\n这个设置有什么用呢？\n其实是有用的，因为图片资源都是二进制文件，而我们在做爬取过程中可能并不想关心其具体的二进制文件的内容，可能只关心图片的 URL 是什么，所以在浏览器中是否把图片加载出来就不重要了。\n所以如此设置之后，我们可以提高整个页面的加载速度，提高爬取效率。\n另外，利用这个功能，我们还可以将一些响应内容进行修改，比如直接修改 Response 的结果为自定义的文本文件内容。\n首先这里定义一个 HTML 文本文件，命名为 custom_response.html，内容如下：\n&lt;!DOCTYPE html>\n&lt;html>\n  &lt;head>\n &lt;title>Hack Response&lt;/title>\n  &lt;/head>\n  &lt;body>\n &lt;h3>Hack Response&lt;/h3>\n  &lt;/body>\n&lt;/html>\n代码编写如下：\nfrom playwright.sync_api import sync_playwright\nwith sync_playwright() as p:\n browser = p.chromium.launch(headless=False)\n page = browser.new_page()\n def modify_response(route, request):\n  route.fulfill(path="./custom_response.html")\n page.route(\'/\', modify_response)\n page.goto("https://spa6.scrape.center/")\n browser.close()\n这里我们使用 route 的 fulfill 方法指定了一个本地文件，就是刚才我们定义的 HTML 文件，运行结果如下：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/DAE6TYB3GWibwYv8CSPkcL8ql6DCtsYo9j80gsu2gafSNiaxDGCeLsAtxuK9puIewJSb802U8X1nNUG0FIDo7dNg/640>\n可以看到，Response 的运行结果就被我们修改了，URL 还是不变的，但是结果已经成了我们修改的 HTML 代码。\n所以通过 route 方法，我们可以灵活地控制请求和响应的内容，从而在某些场景下达成某些目的。\n<h3>8. \n总结</h3>本节介绍了 Playwright 的基本用法，其 API 强大又易于使用，同时具备很多 Selenium、Pyppeteer 不具备的更好用的 API，是新一代 JavaScript 渲染页面的爬取利器。\n本节代码：\nhttps://github.com/Python3WebSpider/PlaywrightTest\n<h3>scrape with Playwright</h3>\nPlaywright is a rising star in the web scraping and automation space. \nIf you thought Puppeteer was powerful, Playwright will blow your mind.\n<a href="https://github.com/microsoft/playwright">Playwright</a> is a browser automation library very similar to <a href="https://github.com/puppeteer/puppeteer">Puppeteer</a>. \nBoth allow you to control a web browser with only a few lines of code. \nThe possibilities are endless. \nFrom automating mundane tasks and testing web applications to data mining.\nWith Playwright you can run Firefox and Safari (WebKit), not only Chromium based browsers. \nIt will also save you time, because Playwright automates away repetitive code, such as waiting for buttons to appear in the page.\n<blockquote>You don’t need to be familiar with Playwright, Puppeteer or web scraping to enjoy this tutorial, but knowledge of HTML, CSS and JavaScript is expected.</blockquote>\nIn this tutorial you’ll learn how to:\n<k>Start a browser with Playwright</k>\n<k>Click buttons and wait for actions</k>\n<k>Extract data from a website</k>\n<h3>The Project</h3>\nTo showcase the basics of Playwright, we will create a simple scraper that extracts data about <a href="https://github.com/topics">GitHub Topics</a>. \nYou’ll be able to select a topic and the scraper will return information about repositories tagged with this topic.\n<img src="https://blog.apify.com/content/images/max/2000/1-gNQkSVS-2f4tk11yVIW4Cw.png">\nThe page for JavaScript GitHub Topic\nWe will use Playwright to start a browser, open the GitHub topic page, click the <em>Load more</em> button to display more repositories, and then extract the following information:\nOwner\nName\nURL\nNumber of stars\nDescription\nList of repository topics\n<h3>Installation</h3>\nTo use Playwright you’ll need <a href="https://nodejs.org/">Node.js</a> version higher than 10 and a package manager. \nWe’ll use npm, which comes preinstalled with Node.js. \nYou can confirm their existence on your machine by running:\nnode -v &amp;&amp; npm -v\nIf you’re missing either Node.js or NPM, visit the <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm">installation tutorial</a> to get started.\nNow that we know our environment checks out, let’s create a new project and install Playwright.\nmkdir playwright-scraper &amp;&amp; cd playwright-scraper\nnpm init -y\nnpm i playwright\n<blockquote>The first time you install Playwright, it will download browser binaries, so the installation may take a bit longer.</blockquote><h3>Building a scraper</h3>\nCreating a scraper with Playwright is surprisingly easy, even if you have no previous scraping experience. \nIf you understand JavaScript and CSS, it will be a piece of cake.\nIn your project folder, create a file called scraper.js (or choose any other name) and open it in your favorite code editor. \nFirst, we will confirm that Playwright is correctly installed and working by running a simple script.\n<script src="https://gist.github.com/mnmkng/b517605fe5b4d4982cc5f1a52f56bd56.js"></script>\nNow run it using your code editor or by executing the following command in your project folder.\nnode scraper.js\nIf you saw a Chromium window open and the GitHub Topics page successfully loaded, congratulations, you just robotized your web browser with Playwright!\n<img src="https://blog.apify.com/content/images/max/2000/1--g0d8utMzc4sGG7ACHOt7Q.png">\nJavaScript GitHub topic\n<h3>Loading more repositories</h3>\nWhen you first open the topic page, the number of displayed repositories is limited to 30. \nYou can load more by clicking the <em>Load more…</em> button at the bottom of the page.\n<img src="https://blog.apify.com/content/images/max/2000/1-XgVRjVfZ7f-H4GGgAclBaQ.png">\n</figure>\nThere are two things we need to tell Playwright to load more repositories:\n<k>Click</k> the <em>Load more…</em> button.\n<k>Wait</k> for the repositories to load.\nClicking buttons is extremely easy with Playwright. \nBy prefixing text= to a string you’re looking for, Playwright will find the element that includes this string and click it. \nIt will also wait for the element to appear if it’s not rendered on the page yet.\n<img src="https://blog.apify.com/content/images/max/2000/1-3c8mpVdheQFEGZDRhew-0A.png">\nClicking a button\nThis is a huge improvement over Puppeteer and it makes Playwright lovely to work with.\nAfter clicking, we need to wait for the repositories to load. \nIf we didn’t, the scraper could finish before the new repositories show up on the page and we would miss that data. \n<a href="https://playwright.dev/#version=v1.2.1&amp;path=docs%2Fapi.md&amp;q=pagewaitforfunctionpagefunction-arg-options">page.waitForFunction()</a> allows you to execute a function inside the browser and wait until the function returns true .\n<img src="https://blog.apify.com/content/images/max/2000/1-qX1qjuy6E4mpFQDVIjHq9g.png">\nWaiting for\nTo find that article.border selector, we used browser Dev Tools, which you can open in most browsers by right-clicking anywhere on the page and selecting <k>Inspect</k>. \nIt means: Select the &lt;article&gt; tag with the border class.\n<img src="https://blog.apify.com/content/images/2021/10/1-T4qVh-PhMS3TVLYvpT-J-Q-min.png">\nChrome Dev Tools\nLet’s plug this into our code and do a test run.\n<script src="https://gist.github.com/mnmkng/0ace1f4e1035f92d8da4f4ae1080f026.js"></script>\nIf you watch the run, you’ll see that the browser first scrolls down and clicks the <em>Load more…</em> button, which changes the text into <em>Loading more</em>. \nAfter a second or two, you’ll see the next batch of 30 repositories appear. \nGreat job!\n<h3>Extracting data</h3>\nNow that we know how to load more repositories, we will extract the data we want. \nTo do this, we’ll use the <a href="https://playwright.dev/#version=v1.2.1&amp;path=docs%2Fapi.md&amp;q=pageevalselector-pagefunction-arg-1">page.$$eval</a> function. \nIt tells the browser to find certain elements and then execute a JavaScript function with those elements.\n<img src="https://blog.apify.com/content/images/2021/09/carbon-12-.png">\nExtracting data from page\nIt works like this: page.$$evalfinds our repositories and executes the provided function in the browser. \nWe get repoCards which is an Array of all the repo elements. \nThe return value of the function becomes the return value of the page.$$eval call. \nThanks to Playwright, you can pull data out of the browser and save them to a variable in Node.js. \nMagic!\nIf you’re struggling to understand the extraction code itself, be sure to check out <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors">this guide on working with CSS selectors</a> and <a href="https://javascript.info/searching-elements-dom#querySelectorAll">this tutorial on using those selectors to find HTML elements</a>.\nAnd here’s the code with extraction included. \nWhen you run it, you’ll see 60 repositories with their information printed to the console.\n<script src="https://gist.github.com/mnmkng/3390066cd11c68a35d8998d2e4497c1c.js"></script>\n<h3>Conclusion</h3>\nIn this tutorial we learned how to start a browser with <a href="https://playwright.dev/">Playwright</a>, and control its actions with some of Playwright’s most useful functions: page.click() to emulate mouse clicks, page.waitForFunction() to wait for things to happen and page.$$eval() to extract data from a browser page.\nBut we’ve only scratched the surface of what’s possible with Playwright. \nYou can log into websites, fill forms, intercept network communication, and most importantly, use almost any browser in existence. \nWhere will you take this project next? How about turning it into a command-line interface (CLI) tool that takes a topic and number of repositories on input and outputs a file with the repositories? You can do it now.\n',
'<h2>Python - Command Line Arguments</h2>\nPython provides a <b>getopt</b> module that helps you parse command-line options and arguments.\n$ python test.py arg1 arg2 arg3\nThe Python <b>sys</b> module provides access to any command-line arguments via the <b>sys.argv</b>. This serves two purposes &minus;\n<li>sys.argv is the list of command-line arguments.</li>\n<li>len(sys.argv) is the number of command-line arguments.</li>\nHere sys.argv[0] is the program ie. script name.\nExample\nConsider the following script test.py &minus;\n#!/usr/bin/python\nimport sys\nprint( \'Number of arguments:\', len(sys.argv), \'arguments.\')\nprint( \'Argument List:\', str(sys.argv))\nNow run above script as follows &minus;\n$ python test.py arg1 arg2 arg3\nThis produce following result &minus;\nNumber of arguments: 4 arguments.\nArgument List: [\'test.py\', \'arg1\', \'arg2\', \'arg3\']\n<b>NOTE</b> &minus; As mentioned above, first argument is always script name and it is also being counted in number of arguments.\n<h3>Parsing Command-Line Arguments</h3>\nPython provided a <b>getopt</b> module that helps you parse command-line options and arguments. This module provides two functions and an exception to enable command line argument parsing.\ngetopt.getopt method\nThis method parses command line options and parameter list. Following is simple syntax for this method &minus;\ngetopt.getopt(args, options, [long_options])\nHere is the detail of the parameters &minus;\n<li><b>args</b> &minus; This is the argument list to be parsed.</li>\n<li><b>options</b> &minus; This is the string of option letters that the script wants to recognize, with options that require an argument should be followed by a colon (:).</li>\n<li><b>long_options</b> &minus; This is optional parameter and if specified, must be a list of strings with the names of the long options, which should be supported. Long options, which require an argument should be followed by an equal sign (\'=\'). To accept only long options, options should be an empty string.</li>\n<li>This method returns value consisting of two elements: the first is a list of <b>(option, value)</b> pairs. The second is the list of program arguments left after the option list was stripped.</li>\n<li>Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., \'-x\') or two hyphens for long options (e.g., \'--long-option\').</li>\n<h3>Exception getopt.GetoptError</h3>\nThis is raised when an unrecognized option is found in the argument list or when an option requiring an argument is given none.\nThe argument to the exception is a string indicating the cause of the error. The attributes <b>msg</b> and <b>opt</b> give the error message and related option.\n<h3>Example</h3>\nConsider we want to pass two file names through command line and we also want to give an option to check the usage of the script. Usage of the script is as follows &minus;\nusage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;\nHere is the following script to test.py &minus;\n#!/usr/bin/python\nimport sys, getopt\ndef main(argv):\n   inputfile = \'\'\n   outputfile = \'\'\n   try:\n   opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])\n   except getopt.GetoptError:\n   print( \'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;\')\n   sys.exit(2)\n   for opt, arg in opts:\n   if opt == \'-h\':\n   print( \'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;\')\n   sys.exit()\n   elif opt in ("-i", "--ifile"):\n   inputfile = arg\n   elif opt in ("-o", "--ofile"):\n   outputfile = arg\n   print( \'Input file is "\', inputfile)\n   print( \'Output file is "\', outputfile)\nNow, run above script as follows &minus;\n$ test.py -h\nusage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;\n$ test.py -i BMP -o\nusage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;\n$ test.py -i inputfile\nInput file is " inputfile\nOutput file is "\n<h3>process command line arguments</h3>\nimport sys\nprint("\n".join(sys.argv))\nsys.argv is a list that contains all the arguments passed to the script on the command line.\nsys.argv[0] is the script name.\nimport sys\nprint(sys.argv[1:])\nfrom argparse import ArgumentParser\nparser = ArgumentParser()\nparser.add_argument("-f", "--file", dest="filename",\n     help="write report to FILE", metavar="FILE")\nparser.add_argument("-q", "--quiet",\n     action="store_false", dest="verbose", default=True,\n     help="don\'t print status messages to stdout")\nargs = parser.parse_args()\n',
'<h2>streamlit</h2>\nhttps://hackernoon.com/how-to-use-streamlit-and-python-to-build-a-data-science-app\nUse Streamlit and Python to Build a Data Science App\nhttps://github.com/streamlit/streamlit\nstreamlit\n',
'<h2>Uninstalling/removing Python packages</h2>\nPIP uninstall camelot\n',
'<h2>Extract text from PDF</h2>\nimport PyPDF2 \npdfFileObj = open(\'acer aspire 515.pdf\', \'rb\') \npdfReader = PyPDF2.PdfFileReader(pdfFileObj) \nprint(pdfReader.numPages) \npageObj = pdfReader.getPage(0) \nprint(pageObj.extractText()) \n \n# closing the pdf file object \npdfFileObj.close() \n',
'<h2>Python 项目</h2>\n<div id="PythonProjtoc" class="toc"><a href="#PythonProjtopic-0" target="_self"><span class="orange">界面应用</span></a><br><a href="#PythonProjtopic-1" target="_self">1、计算器</a><br><a href="#PythonProjtopic-2" target="_self">2、记事本</a><br><a href="#PythonProjtopic-3" target="_self">3、登录和注册</a><br><a href="#PythonProjtopic-4" target="_self"><span class="orange">游戏开发</span></a><br><a href="#PythonProjtopic-5" target="_self">1、2048</a><br><a href="#PythonProjtopic-6" target="_self">2、贪吃蛇</a><br><a href="#PythonProjtopic-7" target="_self">3、俄罗斯方块</a><br><a href="#PythonProjtopic-8" target="_self">4、连连看</a><br></div>\n<br><br>\n<h3 id="PythonProjtopic-0"><span class="orange">界面应用</span></h3>\n<h3 id="PythonProjtopic-1">1、计算器</h3>\n<k>1. 案例介绍</k>\n本例利用 Python 开发一个可以进行简单的四则运算的图形化计算器，会用到 Tkinter 图形组件进行开发。\n主要知识点：\nPython Tkinter 界面编程；\n计算器逻辑运算实现。\n本例难度为初级，适合具有 Python 基础和 Tkinter 组件编程知识的用户学习。\n<k>2. 设计原理</k>\n要制作一个计算器，首先需要知道它由哪些部分组成。\n示意如下图所示。\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHbtFFSWA48U43aUibjFNySwTwPRn6BXcnp0Lz0tCrzJg5jFbNkIpBzNA/640">\n从结构上来说，一个简单的图形界面，需要由界面组件、组件的事件监听器(响应各类事件的逻辑)和具体的事件处理逻辑组成。\n界面实现的主要工作是创建各个界面组件对象，对其进行初始化，以及控制各组件之间的层次关系和布局。\n<k>3. 示例效果</k>\n<img data-src="https://mmbiz.qpic.cn/mmbiz_gif/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHKUnIsnv7hJfcajZ28C9jmZJDSlbOERAT7GS3M2zDM9BUUdoXkAeK5g/640">\n<k>4. 示例源码</k>\nimport tkinter\nimport math\nimport tkinter.messagebox\nclass Calculator(object):\n# 界面布局方法\ndef __init__(self):\n# 创建主界面，并且保存到成员属性中\nself.root = tkinter.Tk()\nself.root.minsize(280, 450)\nself.root.maxsize(280, 470)\nself.root.title(\'计算器\')\n# 设置显式面板的变量\nself.result = tkinter.StringVar()\nself.result.set(0)\n# 设置一个全局变量  运算数字和f符号的列表\nself.lists = []\n# 添加一个用于判断是否按下运算符号的标志\nself.ispresssign = False\n# 界面布局\nself.menus()\nself.layout()\nself.root.mainloop()\n# 计算器菜单界面摆放\ndef menus(self):\n# 添加菜单\n# 创建总菜单\nallmenu = tkinter.Menu(self.root)\n# 添加子菜单\nfilemenu = tkinter.Menu(allmenu, tearoff=0)\n# 添加选项卡\nfilemenu.add_command(\nlabel=\'标准型(T)   Alt+1\', command=self.myfunc)\nfilemenu.add_command(\nlabel=\'科学型(S)   Alt+2\', command=self.myfunc)\nfilemenu.add_command(\nlabel=\'程序员(P)   Alt+3\', command=self.myfunc)\nfilemenu.add_command(label=\'统计信息(A)  Alt+4\', command=self.myfunc)\n# 添加分割线\nfilemenu.add_separator()\n# 添加选项卡\nfilemenu.add_command(label=\'历史记录(Y)   Ctrl+H\', command=self.myfunc)\nfilemenu.add_command(label=\'数字分组(I)\', command=self.myfunc)\n# 添加分割线\nfilemenu.add_separator()\n# 添加选项卡\nfilemenu.add_command(\nlabel=\'基本(B)    Ctrl+F4\', command=self.myfunc)\nfilemenu.add_command(label=\'单位转换(U)   Ctrl+U\', command=self.myfunc)\nfilemenu.add_command(label=\'日期计算(D)   Ctrl+E\', command=self.myfunc)\nmenu1 = tkinter.Menu(filemenu, tearoff=0)\nmenu1.add_command(label=\'抵押(M)\', command=self.myfunc)\nmenu1.add_command(label=\'汽车租赁(V)\', command=self.myfunc)\nmenu1.add_command(label=\'油耗(mpg)(F)\', command=self.myfunc)\nmenu1.add_command(label=\'油耗(l/100km)(U)\', command=self.myfunc)\nfilemenu.add_cascade(label=\'工作表(W)\', menu=menu1)\nallmenu.add_cascade(label=\'查看(V)\', menu=filemenu)\n# 添加子菜勀2\neditmenu = tkinter.Menu(allmenu, tearoff=0)\n# 添加选项卡\neditmenu.add_command(label=\'复制(C)   Ctrl+C\', command=self.myfunc)\neditmenu.add_command(label=\'粘贴(V)   Ctrl+V\', command=self.myfunc)\n# 添加分割线\neditmenu.add_separator()\n# 添加选项卡\nmenu2 = tkinter.Menu(filemenu, tearoff=0)\nmenu2.add_command(label=\'复制历史记录(I)\', command=self.myfunc)\nmenu2.add_command(\nlabel=\'编辑(E)       F2\', command=self.myfunc)\nmenu2.add_command(label=\'取消编辑(N)   Esc\', command=self.myfunc)\nmenu2.add_command(label=\'清除(L) Ctrl+Shift+D\', command=self.myfunc)\neditmenu.add_cascade(label=\'历史记录(H)\', menu=menu2)\nallmenu.add_cascade(label=\'编辑(E)\', menu=editmenu)\n# 添加子菜单3\nhelpmenu = tkinter.Menu(allmenu, tearoff=0)\n# 添加选项卡\nhelpmenu.add_command(label=\'查看帮助(V)    F1\', command=self.myfunc)\n# 添加分割线\nhelpmenu.add_separator()\n# 添加选项卡\nhelpmenu.add_command(label=\'关于计算器(A)\', command=self.myfunc)\nallmenu.add_cascade(label=\'帮助(H)\', menu=helpmenu)\nself.root.config(menu=allmenu)\n# 计算器主界面摆放\ndef layout(self):\n# 显示屏\nresult = tkinter.StringVar()\nresult.set(0)\nshow_label = tkinter.Label(self.root, bd=3, bg=\'white\', font=(\n\'宋体\', 30), anchor=\'e\', textvariable=self.result)\nshow_label.place(x=5, y=20, width=270, height=70)\n# 功能按钮MC\nbutton_mc = tkinter.Button(self.root, text=\'MC\', command=self.wait)\nbutton_mc.place(x=5, y=95, width=50, height=50)\n# 功能按钮MR\nbutton_mr = tkinter.Button(self.root, text=\'MR\', command=self.wait)\nbutton_mr.place(x=60, y=95, width=50, height=50)\n# 功能按钮MS\nbutton_ms = tkinter.Button(self.root, text=\'MS\', command=self.wait)\nbutton_ms.place(x=115, y=95, width=50, height=50)\n# 功能按钮M+\nbutton_mjia = tkinter.Button(self.root, text=\'M+\', command=self.wait)\nbutton_mjia.place(x=170, y=95, width=50, height=50)\n# 功能按钮M-\nbutton_mjian = tkinter.Button(self.root, text=\'M-\', command=self.wait)\nbutton_mjian.place(x=225, y=95, width=50, height=50)\n# 功能按钮←\nbutton_zuo = tkinter.Button(self.root, text=\'←\', command=self.dele_one)\nbutton_zuo.place(x=5, y=150, width=50, height=50)\n# 功能按钮CE\nbutton_ce = tkinter.Button(\nself.root, text=\'CE\', command=lambda: self.result.set(0))\nbutton_ce.place(x=60, y=150, width=50, height=50)\n# 功能按钮C\nbutton_c = tkinter.Button(self.root, text=\'C\', command=self.sweeppress)\nbutton_c.place(x=115, y=150, width=50, height=50)\n# 功能按钮±\nbutton_zf = tkinter.Button(self.root, text=\'±\', command=self.zf)\nbutton_zf.place(x=170, y=150, width=50, height=50)\n# 功能按钮√\nbutton_kpf = tkinter.Button(self.root, text=\'√\', command=self.kpf)\nbutton_kpf.place(x=225, y=150, width=50, height=50)\n# 数字按钮7\nbutton_7 = tkinter.Button(\nself.root, text=\'7\', command=lambda: self.pressnum(\'7\'))\nbutton_7.place(x=5, y=205, width=50, height=50)\n# 数字按钮8\nbutton_8 = tkinter.Button(\nself.root, text=\'8\', command=lambda: self.pressnum(\'8\'))\nbutton_8.place(x=60, y=205, width=50, height=50)\n# 数字按钮9\nbutton_9 = tkinter.Button(\nself.root, text=\'9\', command=lambda: self.pressnum(\'9\'))\nbutton_9.place(x=115, y=205, width=50, height=50)\n# 功能按钮/\nbutton_division = tkinter.Button(\nself.root, text=\'/\', command=lambda: self.presscalculate(\'/\'))\nbutton_division.place(x=170, y=205, width=50, height=50)\n# 功能按钮%\nbutton_remainder = tkinter.Button(\nself.root, text=\'//\', command=lambda: self.presscalculate(\'//\'))\nbutton_remainder.place(x=225, y=205, width=50, height=50)\n# 数字按钮4\nbutton_4 = tkinter.Button(\nself.root, text=\'4\', command=lambda: self.pressnum(\'4\'))\nbutton_4.place(x=5, y=260, width=50, height=50)\n# 数字按钮5\nbutton_5 = tkinter.Button(\nself.root, text=\'5\', command=lambda: self.pressnum(\'5\'))\nbutton_5.place(x=60, y=260, width=50, height=50)\n# 数字按钮6\nbutton_6 = tkinter.Button(\nself.root, text=\'6\', command=lambda: self.pressnum(\'6\'))\nbutton_6.place(x=115, y=260, width=50, height=50)\n# 功能按钮*\nbutton_multiplication = tkinter.Button(\nself.root, text=\'*\', command=lambda: self.presscalculate(\'*\'))\nbutton_multiplication.place(x=170, y=260, width=50, height=50)\n# 功能按钮1/x\nbutton_reciprocal = tkinter.Button(\nself.root, text=\'1/x\', command=self.ds)\nbutton_reciprocal.place(x=225, y=260, width=50, height=50)\n# 数字按钮1\nbutton_1 = tkinter.Button(\nself.root, text=\'1\', command=lambda: self.pressnum(\'1\'))\nbutton_1.place(x=5, y=315, width=50, height=50)\n# 数字按钮2\nbutton_2 = tkinter.Button(\nself.root, text=\'2\', command=lambda: self.pressnum(\'2\'))\nbutton_2.place(x=60, y=315, width=50, height=50)\n# 数字按钮3\nbutton_3 = tkinter.Button(\nself.root, text=\'3\', command=lambda: self.pressnum(\'3\'))\nbutton_3.place(x=115, y=315, width=50, height=50)\n# 功能按钮-\nbutton_subtraction = tkinter.Button(\nself.root, text=\'-\', command=lambda: self.presscalculate(\'-\'))\nbutton_subtraction.place(x=170, y=315, width=50, height=50)\n# 功能按钮=\nbutton_equal = tkinter.Button(\nself.root, text=\'=\', command=lambda: self.pressequal())\nbutton_equal.place(x=225, y=315, width=50, height=105)\n# 数字按钮0\nbutton_0 = tkinter.Button(\nself.root, text=\'0\', command=lambda: self.pressnum(\'0\'))\nbutton_0.place(x=5, y=370, width=105, height=50)\n# 功能按钮.\nbutton_point = tkinter.Button(\nself.root, text=\'.\', command=lambda: self.pressnum(\'.\'))\nbutton_point.place(x=115, y=370, width=50, height=50)\n# 功能按钮+\nbutton_plus = tkinter.Button(\nself.root, text=\'+\', command=lambda: self.presscalculate(\'+\'))\nbutton_plus.place(x=170, y=370, width=50, height=50)\n# 计算器菜单功能\ndef myfunc(self):\ntkinter.messagebox.showinfo(\'\', \'预留接口，学成之后，你是不是有冲动添加该功能.\')\n# 数字方法\ndef pressnum(self, num):\n# 全局化变量\n# 判断是否按下了运算符号\nif self.ispresssign == False:\npass\nelse:\nself.result.set(0)\n# 重置运算符号的状态\nself.ispresssign = False\nif num == \'.\':\nnum = \'0.\'\n# 获取面板中的原有数字\noldnum = self.result.get()\n# 判断界面数字是否为0\nif oldnum == \'0\':\nself.result.set(num)\nelse:\n# 连接上新按下的数字\nnewnum = oldnum + num\n# 将按下的数字写到面板中\nself.result.set(newnum)\n# 运算函数\ndef presscalculate(self, sign):\n# 保存已经按下的数字和运算符号\n# 获取界面数字\nnum = self.result.get()\nself.lists.append(num)\n# 保存按下的操作符号\nself.lists.append(sign)\n# 设置运算符号为按下状态\nself.ispresssign = True\n# 获取运算结果\ndef pressequal(self):\n# 获取所有的列表中的内容（之前的数字和操作）\n# 获取当前界面上的数字\ncurnum = self.result.get()\n# 将当前界面的数字存入列表\nself.lists.append(curnum)\n# 将列表转化为字符串\ncalculatestr = \'\'.join(self.lists)\n# 使用eval执行字符串中的运算即可\nendnum = eval(calculatestr)\n# 将运算结果显示在界面中\nself.result.set(str(endnum)[:10])\nif self.lists != 0:\nself.ispresssign = True\n# 清空运算列表\nself.lists.clear()\n# 暂未开发说明\ndef wait(self):\ntkinter.messagebox.showinfo(\'\', \'更新中......\')\n# ←按键功能\ndef dele_one(self):\nif self.result.get() == \'\' or self.result.get() == \'0\':\nself.result.set(\'0\')\nreturn\nelse:\nnum = len(self.result.get())\nif num &gt; 1:\nstrnum = self.result.get()\nstrnum = strnum[0:num - 1]\nself.result.set(strnum)\nelse:\nself.result.set(\'0\')\n# ±按键功能\ndef zf(self):\nstrnum = self.result.get()\nif strnum[0] == \'-\':\nself.result.set(strnum[1:])\nelif strnum[0] != \'-\' and strnum != \'0\':\nself.result.set(\'-\' + strnum)\n# 1/x按键功能\ndef ds(self):\ndsnum = 1 / int(self.result.get())\nself.result.set(str(dsnum)[:10])\nif self.lists != 0:\nself.ispresssign = True\n# 清空运算列表\nself.lists.clear()\n# C按键功能\ndef sweeppress(self):\nself.lists.clear()\nself.result.set(0)\n# √按键功能\ndef kpf(self):\nstrnum = float(self.result.get())\nendnum = math.sqrt(strnum)\nif str(endnum)[-1] == \'0\':\nself.result.set(str(endnum)[:-2])\nelse:\nself.result.set(str(endnum)[:10])\nif self.lists != 0:\nself.ispresssign = True\n# 清空运算列表\nself.lists.clear()\n# 实例化对象\nmy_calculator = Calculator()\n<h3 id="PythonProjtopic-2">2、记事本</h3>\n<k>1. 案例介绍</k>\ntkinter 是 Python下面向 tk 的图形界面接口库，可以方便地进行图形界面设计和交互操作编程。\ntkinter 的优点是简单易用、与 Python 的结合度好。\ntkinter 在 Python 3.x 下默认集成，不需要额外的安装操作；\n不足之处为缺少合适的可视化界面设计工具，需要通过代码来完成窗口设计和元素布局。\n本例采用的 Python 版本为 3.8，如果想在 python 2.x下使用 tkinter，请先进行安装。\n需要注意的是，不同 Python 版本下的 tkinter 使用方式可能略有不同，建议采用 Python3.x 版本。\n本例难度为中级，适合具有 Python 基础和 Tkinter 组件编程知识的用户学习。\n<k>2. 示例效果</k>\n<img data-src="https://mmbiz.qpic.cn/mmbiz_gif/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPH6VEjiaVKhqmM0AfMc3DZfwjiaXzaqo8De5uuAuY1p642icsb6KsncQZuA/640">\n<k>3. 示例源码</k>\nfrom tkinter import *\nfrom tkinter.filedialog import *\nfrom tkinter.messagebox import *\nimport os\nfilename = ""\ndef author():\nshowinfo(title="作者", message="Python")\ndef power():\nshowinfo(title="版权信息", message="课堂练习")\ndef mynew():\nglobal top, filename, textPad\ntop.title("未命名文件")\nfilename = None\ntextPad.delete(1.0, END)\ndef myopen():\nglobal filename\nfilename = askopenfilename(defaultextension=".txt")\nif filename == "":\nfilename = None\nelse:\ntop.title("记事本" + os.path.basename(filename))\ntextPad.delete(1.0, END)\nf = open(filename, \'r\')\ntextPad.insert(1.0, f.read())\nf.close()\ndef mysave():\nglobal filename\ntry:\nf = open(filename, \'w\')\nmsg = textPad.get(1.0, \'end\')\nf.write(msg)\nf.close()\nexcept:\nmysaveas()\ndef mysaveas():\nglobal filename\nf = asksaveasfilename(initialfile="未命名.txt", defaultextension=".txt")\nfilename = f\nfh = open(f, \'w\')\nmsg = textPad.get(1.0, END)\nfh.write(msg)\nfh.close()\ntop.title("记事本 " + os.path.basename(f))\ndef cut():\nglobal textPad\ntextPad.event_generate("&lt;&lt;Cut&gt;&gt;")\ndef copy():\nglobal textPad\ntextPad.event_generate("&lt;&lt;Copy&gt;&gt;")\ndef paste():\nglobal textPad\ntextPad.event_generate("&lt;&lt;Paste&gt;&gt;")\ndef undo():\nglobal textPad\ntextPad.event_generate("&lt;&lt;Undo&gt;&gt;")\ndef redo():\nglobal textPad\ntextPad.event_generate("&lt;&lt;Redo&gt;&gt;")\ndef select_all():\nglobal textPad\n# textPad.event_generate("&lt;&lt;Cut&gt;&gt;")\ntextPad.tag_add("sel", "1.0", "end")\ndef find():\nt = Toplevel(top)\nt.title("查找")\nt.geometry("260x60+200+250")\nt.transient(top)\nLabel(t, text="查找：\n").grid(row=0, column=0, sticky="e")\nv = StringVar()\ne = Entry(t, width=20, textvariable=v)\ne.grid(row=0, column=1, padx=2, pady=2, sticky="we")\ne.focus_set()\nc = IntVar()\nCheckbutton(t, text="不区分大小写", variable=c).grid(row=1, column=1, sticky=\'e\')\nButton(t, text="查找所有", command=lambda: search(v.get(), c.get(),\ntextPad, t, e)).grid(row=0, column=2, sticky="e" + "w", padx=2,\npady=2)\ndef close_search():\ntextPad.tag_remove("match", "1.0", END)\nt.destroy()\nt.protocol("WM_DELETE_WINDOW", close_search)\ndef mypopup(event):\n# global editmenu\neditmenu.tk_popup(event.x_root, event.y_root)\ndef search(needle, cssnstv, textPad, t, e):\ntextPad.tag_remove("match", "1.0", END)\ncount = 0\nif needle:\npos = "1.0"\nwhile True:\npos = textPad.search(needle, pos, nocase=cssnstv, stopindex=END)\nif not pos:\nbreak\nlastpos = pos + str(len(needle))\ntextPad.tag_add("match", pos, lastpos)\ncount += 1\npos = lastpos\ntextPad.tag_config(\'match\', fg=\'yellow\', bg="green")\ne.focus_set()\nt.title(str(count) + "个被匹配")\ntop = Tk()\ntop.title("记事本")\ntop.geometry("600x400+100+50")\nmenubar = Menu(top)\n# 文件功能\nfilemenu = Menu(top)\nfilemenu.add_command(label="新建", accelerator="Ctrl+N", command=mynew)\nfilemenu.add_command(label="打开", accelerator="Ctrl+O", command=myopen)\nfilemenu.add_command(label="保存", accelerator="Ctrl+S", command=mysave)\nfilemenu.add_command(label="另存为", accelerator="Ctrl+shift+s", command=mysaveas)\nmenubar.add_cascade(label="文件", menu=filemenu)\n# 编辑功能\neditmenu = Menu(top)\neditmenu.add_command(label="撤销", accelerator="Ctrl+Z", command=undo)\neditmenu.add_command(label="重做", accelerator="Ctrl+Y", command=redo)\neditmenu.add_separator()\neditmenu.add_command(label="剪切", accelerator="Ctrl+X", command=cut)\neditmenu.add_command(label="复制", accelerator="Ctrl+C", command=copy)\neditmenu.add_command(label="粘贴", accelerator="Ctrl+V", command=paste)\neditmenu.add_separator()\neditmenu.add_command(label="查找", accelerator="Ctrl+F", command=find)\neditmenu.add_command(label="全选", accelerator="Ctrl+A", command=select_all)\nmenubar.add_cascade(label="编辑", menu=editmenu)\n# 关于 功能\naboutmenu = Menu(top)\naboutmenu.add_command(label="作者", command=author)\naboutmenu.add_command(label="版权", command=power)\nmenubar.add_cascade(label="关于", menu=aboutmenu)\ntop[\'menu\'] = menubar\n# shortcutbar = Frame(top, height=25, bg=\'light sea green\')\n# shortcutbar.pack(expand=NO, fill=X)\n# Inlabe = Label(top, width=2, bg=\'antique white\')\n# Inlabe.pack(side=LEFT, anchor=\'nw\', fill=Y)\ntextPad = Text(top, undo=True)\ntextPad.pack(expand=YES, fill=BOTH)\nscroll = Scrollbar(textPad)\ntextPad.config(yscrollcommand=scroll.set)\nscroll.config(command=textPad.yview)\nscroll.pack(side=RIGHT, fill=Y)\n# 热键绑定\ntextPad.bind("&lt;Control-N&gt;", mynew)\ntextPad.bind("&lt;Control-n&gt;", mynew)\ntextPad.bind("&lt;Control-O&gt;", myopen)\ntextPad.bind("&lt;Control-o&gt;", myopen)\ntextPad.bind("&lt;Control-S&gt;", mysave)\ntextPad.bind("&lt;Control-s&gt;", mysave)\ntextPad.bind("&lt;Control-A&gt;", select_all)\ntextPad.bind("&lt;Control-a&gt;", select_all)\ntextPad.bind("&lt;Control-F&gt;", find)\ntextPad.bind("&lt;Control-f&gt;", find)\ntextPad.bind("&lt;Button-3&gt;", mypopup)\ntop.mainloop()\n<h3 id="PythonProjtopic-3">3、登录和注册</h3>\n<k>1. 案例介绍</k>\n本例设计一个用户登录和注册模块，使用 Tkinter 框架构建界面，主要用到画布、文本框、按钮等组件。\n涉及知识点：\nPython Tkinter 界面编程、pickle 数据存储。\n本例实现了基本的用户登录和注册互动界面，并提供用户信息存储和验证。\npickle 是 python 语言的一个标准模块，安装 python 后已包含 pickle 库，不需要单独再安装。\npickle 模块实现了基本的数据序列化和反序列化。\n通过 pickle 模块的序列化操作能够将程序中运行的对象信息保存到文件中去，永久存储；\n通过 pickle 模块的反序列化操作，能够从文件中创建上一次程序保存的对象。\n本例难度为中级，适合具有 Python 基础和 Tkinter 组件编程知识的用户学习。\n<k>2. 示例效果</k>\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHIsb2aO7LYmylJI5vDVh0BKic0fXMibFWk2FmuUtKvsCC4NfclClrmRQw/640">\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHZ8MAXtI8r4aZKnmS5ic671Xc1bF4O3Qwrde9W8Vhkeic31rsB7Cr0JjA/640">\n<k>3. 示例源码</k>\nimport tkinter as tk\nimport pickle\nimport tkinter.messagebox\nfrom PIL import Image, ImageTk\n# 设置窗口---最开始的母体窗口\nwindow = tk.Tk()  # 建立一个窗口\nwindow.title(\'欢迎登录\')\nwindow.geometry(\'450x300\')  # 窗口大小为300x200\n# 画布\ncanvas = tk.Canvas(window, height=200, width=900)\n# 加载图片\nim = Image.open("images/01.png")\nimage_file = ImageTk.PhotoImage(im)\n# image_file = tk.PhotoImage(file=\'images/01.gif\')\nimage = canvas.create_image(100, 40, anchor=\'nw\', image=image_file)\ncanvas.pack(side=\'top\')\n# 两个文字标签，用户名和密码两个部分\ntk.Label(window, text=\'用户名\').place(x=100, y=150)\ntk.Label(window, text=\'密  码\').place(x=100, y=190)\nvar_usr_name = tk.StringVar()  # 讲文本框的内容，定义为字符串类型\nvar_usr_name.set(\'amoxiang@163.com\')  # 设置默认值\nvar_usr_pwd = tk.StringVar()\n# 第一个输入框-用来输入用户名的。\n# textvariable 获取文本框的内容\nentry_usr_name = tk.Entry(window, textvariable=var_usr_name)\nentry_usr_name.place(x=160, y=150)\n# 第二个输入框-用来输入密码的。\nentry_usr_pwd = tk.Entry(window, textvariable=var_usr_pwd, show=\'*\')\nentry_usr_pwd.place(x=160, y=190)\ndef usr_login():\nusr_name = var_usr_name.get()\nusr_pwd = var_usr_pwd.get()\ntry:\nwith open(\'usrs_info.pickle\', \'rb\') as usr_file:\nusrs_info = pickle.load(usr_file)\nexcept FileNotFoundError:\nwith open(\'usrs_info.pickle\', \'wb\') as usr_file:\nusrs_info = {\'admin\': \'admin\'}\npickle.dump(usrs_info, usr_file)\nif usr_name in usrs_info:\nif usr_pwd == usrs_info[usr_name]:\ntk.messagebox.showinfo(\ntitle=\'欢迎光临\', message=usr_name + \'：\n请进入个人首页，查看最新资讯\')\nelse:\ntk.messagebox.showinfo(message=\'错误提示：\n密码不对，请重试\')\nelse:\nis_sign_up = tk.messagebox.askyesno(\'提示\', \'你还没有注册，请先注册\')\nprint(is_sign_up)\nif is_sign_up:\nusr_sign_up()\n# 注册按钮\ndef usr_sign_up():\ndef sign_to_Mofan_Python():\nnp = new_pwd.get()\nnpf = new_pwd_confirm.get()\nnn = new_name.get()\n# 上面是获取数据，下面是查看一下是否重复注册过\nwith open(\'usrs_info.pickle\', \'rb\') as usr_file:\nexist_usr_info = pickle.load(usr_file)\nif np != npf:\ntk.messagebox.showerror(\'错误提示\', \'密码和确认密码必须一样\')\nelif nn in exist_usr_info:\ntk.messagebox.showerror(\'错误提示\', \'用户名早就注册了！\n\')\nelse:\nexist_usr_info[nn] = np\nwith open(\'usrs_info.pickle\', \'wb\') as usr_file:\npickle.dump(exist_usr_info, usr_file)\ntk.messagebox.showinfo(\'欢迎\', \'你已经成功注册了\')\nwindow_sign_up.destroy()\n# 点击注册之后，会弹出这个窗口界面。\nwindow_sign_up = tk.Toplevel(window)\nwindow_sign_up.title(\'欢迎注册\')\nwindow_sign_up.geometry(\'360x200\')  # 中间是x，而不是*号\n# 用户名框--这里输入用户名框。\nnew_name = tk.StringVar()\nnew_name.set(\'amoxiang@163.com\')  # 设置的是默认值\ntk.Label(window_sign_up, text=\'用户名\').place(x=10, y=10)\nentry_new_name = tk.Entry(window_sign_up, textvariable=new_name)\nentry_new_name.place(x=100, y=10)\n# 新密码框--这里输入注册时候的密码\nnew_pwd = tk.StringVar()\ntk.Label(window_sign_up, text=\'密  码\').place(x=10, y=50)\nentry_usr_pwd = tk.Entry(window_sign_up, textvariable=new_pwd, show=\'*\')\nentry_usr_pwd.place(x=100, y=50)\n# 密码确认框\nnew_pwd_confirm = tk.StringVar()\ntk.Label(window_sign_up, text=\'确认密码\').place(x=10, y=90)\nentry_usr_pwd_confirm = tk.Entry(\nwindow_sign_up, textvariable=new_pwd_confirm, show=\'*\')\nentry_usr_pwd_confirm.place(x=100, y=90)\nbtn_confirm_sign_up = tk.Button(\nwindow_sign_up, text=\' 注  册 \', command=sign_to_Mofan_Python)\nbtn_confirm_sign_up.place(x=120, y=130)\n# 创建注册和登录按钮\nbtn_login = tk.Button(window, text=\' 登  录 \', command=usr_login)\nbtn_login.place(x=150, y=230)  # 用place来处理按钮的位置信息。\nbtn_sign_up = tk.Button(window, text=\' 注  册 \', command=usr_sign_up)\nbtn_sign_up.place(x=250, y=230)\nwindow.mainloop()\n<h3 id="PythonProjtopic-4"><span class="orange">游戏开发</span></h3>\n<h3 id="PythonProjtopic-5">1、2048</h3>\n<k>1. 游戏简介</k>\n2048 是一款比较流行的数字游戏。\n游戏规则：\n每次可按上、下、左、右方向键滑动数字，每滑动一次，所有数字都会往滑动方向靠拢，同时在空白位置随机出现一个数字，相同数字在靠拢时会相加。\n不断叠加最终拼出 2048 这个数字算成功。\n2048 最早于 2014年3月20日发行。\n原版 2048 首先在 GitHub 上发布，原作者是 Gabriele Cirulli，后被移植到各个平台。\n本例难度为初级，适合具有 Python 基础和 Pygame 编程知识的用户学习。\n<k>2. 设计原理</k>\n这个游戏的本质是二维列表，就以 4*4 的二位列表来分析关键的逻辑以及实现。\n二维列表如下图：\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHhQuouje7oYIXFhpMG0xO12DbSapQOdjfkHupibmzvz08po9G9g4aoWA/640">\n所有的操作都是对这个二维列表的数据的操作。\n分为上下左右四个方向。\n先说向左的方向(如图)。\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHgsuYd1x57iaIqKicicIJRvGyBJibfYHtpIzknQZrbexnC4XibNXImjx8pqQ/640">\n向左操作的结果如下图；\n当向左的方向是，所有的数据沿着水平方向向左跑。\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPH1RkiatPQ8HFEbDdgia3KLBxhay8cUqLrIzWulvsibl3RSF5zceSicruetg/640">\n水平说明操作的是二维列表的一行，而垂直操作的则是二位列表的一列。\n这样就可以将二维列表的操作变成遍历后对一维列表的操作。\n向左说明数据的优先考虑的位置是从左开始的。\n这样就确定了一维列表的遍历开始的位置。\n上面第 2 个图共四行，每一个行都能得到一个列表。\nlist1：\n[0,0,2,0]\nlist2：\n[0,4,2,0]\nlist3：\n[0,0,4,4]\nlist4：\n[2,0,2,0]\n这样一来向左的方向就变成。\n从上到下获得每一行的列表，方向向左。\n参数(row,left)。\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHCc2A08MMIIAAFickeavGbgyxOgNa6sRgK2sic3IYZ8mNZJDhV5Jib7NjQ/640">\n其他的三个方向在开始的时候记住是怎样获得以为列表的，等操作完才放回去这样就能实现了。\n<k>3. 示例效果</k>\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHpAfk0fzw6Hx3E2FxFo29Mtr7arjxxCBA1lSFXCap693AYeFKKGjDVw/640">\n<k>4. 示例源码</k>\nimport random\nimport sys\nimport pygame\nfrom pygame.locals import *\nPIXEL = 150\nSCORE_PIXEL = 100\nSIZE = 4\n# 地图的类\nclass Map:\ndef __init__(self, size):\nself.size = size\nself.score = 0\nself.map = [[0 for i in range(size)] for i in range(size)]\nself.add()\nself.add()\n# 新增2或4，有1/4概率产生4\ndef add(self):\nwhile True:\np = random.randint(0, self.size * self.size - 1)\nif self.map[int(p / self.size)][int(p % self.size)] == 0:\nx = random.randint(0, 3) &gt; 0 and 2 or 4\nself.map[int(p / self.size)][int(p % self.size)] = x\nself.score += x\nbreak\n# 地图向左靠拢，其他方向的靠拢可以通过适当旋转实现，返回地图是否更新\ndef adjust(self):\nchanged = False\nfor a in self.map:\nb = []\nlast = 0\nfor v in a:\nif v != 0:\nif v == last:\nb.append(b.pop() &lt;&lt; 1)\nlast = 0\nelse:\nb.append(v)\nlast = v\nb += [0] * (self.size - len(b))\nfor i in range(self.size):\nif a[i] != b[i]:\nchanged = True\na[:] = b\nreturn changed\n# 逆时针旋转地图90度\ndef rotate90(self):\nself.map = [[self.map[c][r]\nfor c in range(self.size)] for r in reversed(range(self.size))]\n# 判断游戏结束\ndef over(self):\nfor r in range(self.size):\nfor c in range(self.size):\nif self.map[r][c] == 0:\nreturn False\nfor r in range(self.size):\nfor c in range(self.size - 1):\nif self.map[r][c] == self.map[r][c + 1]:\nreturn False\nfor r in range(self.size - 1):\nfor c in range(self.size):\nif self.map[r][c] == self.map[r + 1][c]:\nreturn False\nreturn True\ndef moveUp(self):\nself.rotate90()\nif self.adjust():\nself.add()\nself.rotate90()\nself.rotate90()\nself.rotate90()\ndef moveRight(self):\nself.rotate90()\nself.rotate90()\nif self.adjust():\nself.add()\nself.rotate90()\nself.rotate90()\ndef moveDown(self):\nself.rotate90()\nself.rotate90()\nself.rotate90()\nif self.adjust():\nself.add()\nself.rotate90()\ndef moveLeft(self):\nif self.adjust():\nself.add()\n# 更新屏幕\ndef show(map):\nfor i in range(SIZE):\nfor j in range(SIZE):\n# 背景颜色块\nscreen.blit(map.map[i][j] == 0 and block[(i + j) % 2]\nor block[2 + (i + j) % 2], (PIXEL * j, PIXEL * i))\n# 数值显示\nif map.map[i][j] != 0:\nmap_text = map_font.render(\nstr(map.map[i][j]), True, (106, 90, 205))\ntext_rect = map_text.get_rect()\ntext_rect.center = (PIXEL * j + PIXEL / 2,\nPIXEL * i + PIXEL / 2)\nscreen.blit(map_text, text_rect)\n# 分数显示\nscreen.blit(score_block, (0, PIXEL * SIZE))\nscore_text = score_font.render((map.over(\n) and "Game over with score " or "Score: ") + str(map.score), True, (106, 90, 205))\nscore_rect = score_text.get_rect()\nscore_rect.center = (PIXEL * SIZE / 2, PIXEL * SIZE + SCORE_PIXEL / 2)\nscreen.blit(score_text, score_rect)\npygame.display.update()\nmap = Map(SIZE)\npygame.init()\nscreen = pygame.display.set_mode((PIXEL * SIZE, PIXEL * SIZE + SCORE_PIXEL))\npygame.display.set_caption("2048")\nblock = [pygame.Surface((PIXEL, PIXEL)) for i in range(4)]\n# 设置颜色\nblock[0].fill((152, 251, 152))\nblock[1].fill((240, 255, 255))\nblock[2].fill((0, 255, 127))\nblock[3].fill((225, 255, 255))\nscore_block = pygame.Surface((PIXEL * SIZE, SCORE_PIXEL))\nscore_block.fill((245, 245, 245))\n# 设置字体\nmap_font = pygame.font.Font(None, int(PIXEL * 2 / 3))\nscore_font = pygame.font.Font(None, int(SCORE_PIXEL * 2 / 3))\nclock = pygame.time.Clock()\nshow(map)\nwhile not map.over():\n# 12为实验参数\nclock.tick(12)\nfor event in pygame.event.get():\nif event.type == QUIT:\nsys.exit()\n# 接收玩家操作\npressed_keys = pygame.key.get_pressed()\nif pressed_keys[K_w] or pressed_keys[K_UP]:\nmap.moveUp()\nelif pressed_keys[K_s] or pressed_keys[K_DOWN]:\nmap.moveDown()\nelif pressed_keys[K_a] or pressed_keys[K_LEFT]:\nmap.moveLeft()\nelif pressed_keys[K_d] or pressed_keys[K_RIGHT]:\nmap.moveRight()\nshow(map)\n# 游戏结束\npygame.time.delay(3000)\n<h3 id="PythonProjtopic-6">2、贪吃蛇</h3>\n<k>1. 案例介绍</k>\n贪吃蛇是一款经典的益智游戏，简单又耐玩。\n该游戏通过控制蛇头方向吃蛋，从而使得蛇变得越来越长。\n通过上下左右方向键控制蛇的方向，寻找吃的东西，每吃一口就能得到一定的积分，而且蛇的身子会越吃越长，身子越长玩的难度就越大，不能碰墙，不能咬到自己的身体，更不能咬自己的尾巴，等到了一定的分数，就能过关，然后继续玩下一关。\n本例难度为中级，适合具有 Python 基础和 Pygame 编程知识的用户学习。\n<k>2. 设计要点</k>\n游戏是基于 PyGame 框架制作的，程序核心逻辑如下：\n游戏界面分辨率是 640*480，蛇和食物都是由 1 个或多个 20*20 像素的正方形块儿(为了方便，下文用点表示 20*20 像素的正方形块儿) 组成，这样共有 32*24 个点，使用 pygame.draw.rect 来绘制每一个点；\n初始化时蛇的长度是 3，食物是 1 个点，蛇初始的移动的方向是右，用一个数组代表蛇，数组的每个元素是蛇每个点的坐标，因此数组的第一个坐标是蛇尾，最后一个坐标是蛇头；\n游戏开始后，根据蛇的当前移动方向，将蛇运动方向的前方的那个点 append 到蛇数组的末位，再把蛇尾去掉，蛇的坐标数组就相当于往前挪了一位；\n如果蛇吃到了食物，即蛇头的坐标等于食物的坐标，那么在第 2 点中蛇尾就不用去掉，就产生了蛇长度增加的效果；\n食物被吃掉后，随机在空的位置(不能与蛇的身体重合) 再生成一个；\n通过 PyGame 的 event 监控按键，改变蛇的方向，例如当蛇向右时，下一次改变方向只能向上或者向下；\n当蛇撞上自身或墙壁，游戏结束，蛇头装上自身，那么蛇坐标数组里就有和舌头坐标重复的数据，撞上墙壁则是蛇头坐标超过了边界，都很好判断；\n其他细节：\n做了个开始的欢迎界面；\n食物的颜色随机生成；\n吃到实物的时候有声音提示等。\n<k>3. 示例效果</k>\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPH4JlJDGhzWrxBfjWkta3rn2uP2KBz6y5D1eOE7hgQNa1UxKZwfWFqjg/640">\n<k>4. 示例源码</k>\nimport pygame\nfrom os import path\nfrom sys import exit\nfrom time import sleep\nfrom random import choice\nfrom itertools import product\nfrom pygame.locals import QUIT, KEYDOWN\ndef direction_check(moving_direction, change_direction):\ndirections = [[\'up\', \'down\'], [\'left\', \'right\']]\nif moving_direction in directions[0] and change_direction in directions[1]:\nreturn change_direction\nelif moving_direction in directions[1] and change_direction in directions[0]:\nreturn change_direction\nreturn moving_direction\nclass Snake:\ncolors = list(product([0, 64, 128, 192, 255], repeat=3))[1:-1]\ndef __init__(self):\nself.map = {(x, y): 0 for x in range(32) for y in range(24)}\nself.body = [[100, 100], [120, 100], [140, 100]]\nself.head = [140, 100]\nself.food = []\nself.food_color = []\nself.moving_direction = \'right\'\nself.speed = 4\nself.generate_food()\nself.game_started = False\ndef check_game_status(self):\nif self.body.count(self.head) &gt; 1:\nreturn True\nif self.head[0] &lt; 0 or self.head[0] &gt; 620 or self.head[1] &lt; 0 or self.head[1] &gt; 460:\nreturn True\nreturn False\ndef move_head(self):\nmoves = {\n\'right\': (20, 0),\n\'up\': (0, -20),\n\'down\': (0, 20),\n\'left\': (-20, 0)\n}\nstep = moves[self.moving_direction]\nself.head[0] += step[0]\nself.head[1] += step[1]\ndef generate_food(self):\nself.speed = len(\nself.body) // 16 if len(self.body) // 16 &gt; 4 else self.speed\nfor seg in self.body:\nx, y = seg\nself.map[x // 20, y // 20] = 1\nempty_pos = [pos for pos in self.map.keys() if not self.map[pos]]\nresult = choice(empty_pos)\nself.food_color = list(choice(self.colors))\nself.food = [result[0] * 20, result[1] * 20]\ndef main():\nkey_direction_dict = {\n119: \'up\',  # W\n115: \'down\',  # S\n97: \'left\',  # A\n100: \'right\',  # D\n273: \'up\',  # UP\n274: \'down\',  # DOWN\n276: \'left\',  # LEFT\n275: \'right\',  # RIGHT\n}\nfps_clock = pygame.time.Clock()\npygame.init()\npygame.mixer.init()\nsnake = Snake()\nsound = False\nif path.exists(\'eat.wav\'):\nsound_wav = pygame.mixer.Sound("eat.wav")\nsound = True\ntitle_font = pygame.font.SysFont(\'simsunnsimsun\', 32)\nwelcome_words = title_font.render(\n\'贪吃蛇\', True, (0, 0, 0), (255, 255, 255))\ntips_font = pygame.font.SysFont(\'simsunnsimsun\', 20)\nstart_game_words = tips_font.render(\n\'点击开始\', True, (0, 0, 0), (255, 255, 255))\nclose_game_words = tips_font.render(\n\'按ESC退出\', True, (0, 0, 0), (255, 255, 255))\ngameover_words = title_font.render(\n\'游戏结束\', True, (205, 92, 92), (255, 255, 255))\nwin_words = title_font.render(\n\'蛇很长了，你赢了！\n\', True, (0, 0, 205), (255, 255, 255))\nscreen = pygame.display.set_mode((640, 480), 0, 32)\npygame.display.set_caption(\'贪吃蛇\')\nnew_direction = snake.moving_direction\nwhile 1:\nfor event in pygame.event.get():\nif event.type == QUIT:\nexit()\nelif event.type == KEYDOWN:\nif event.key == 27:\nexit()\nif snake.game_started and event.key in key_direction_dict:\ndirection = key_direction_dict[event.key]\nnew_direction = direction_check(\nsnake.moving_direction, direction)\nelif (not snake.game_started) and event.type == pygame.MOUSEBUTTONDOWN:\nx, y = pygame.mouse.get_pos()\nif 213 &lt;= x &lt;= 422 and 304 &lt;= y &lt;= 342:\nsnake.game_started = True\nscreen.fill((255, 255, 255))\nif snake.game_started:\nsnake.moving_direction = new_direction  # 在这里赋值，而不是在event事件的循环中赋值，避免按键太快\nsnake.move_head()\nsnake.body.append(snake.head[:])\nif snake.head == snake.food:\nif sound:\nsound_wav.play()\nsnake.generate_food()\nelse:\nsnake.body.pop(0)\nfor seg in snake.body:\npygame.draw.rect(screen, [0, 0, 0], [\nseg[0], seg[1], 20, 20], 0)\npygame.draw.rect(screen, snake.food_color, [\nsnake.food[0], snake.food[1], 20, 20], 0)\nif snake.check_game_status():\nscreen.blit(gameover_words, (241, 310))\npygame.display.update()\nsnake = Snake()\nnew_direction = snake.moving_direction\nsleep(3)\nelif len(snake.body) == 512:\nscreen.blit(win_words, (33, 210))\npygame.display.update()\nsnake = Snake()\nnew_direction = snake.moving_direction\nsleep(3)\nelse:\nscreen.blit(welcome_words, (240, 150))\nscreen.blit(start_game_words, (246, 310))\nscreen.blit(close_game_words, (246, 350))\npygame.display.update()\nfps_clock.tick(snake.speed)\nif __name__ == \'__main__\':\nmain()\n<h3 id="PythonProjtopic-7">3、俄罗斯方块</h3>\n<k>1. 案例介绍</k>\n俄罗斯方块是由 4 个小方块组成不同形状的板块，随机从屏幕上方落下，按方向键调整板块的位置和方向，在底部拼出完整的一行或几行。\n这些完整的横条会消失，给新落下来的板块腾出空间，并获得分数奖励。\n没有被消除掉的方块不断堆积，一旦堆到顶端，便告输，游戏结束。\n本例难度为高级，适合具有 Python 进阶和 Pygame 编程技巧的用户学习。\n<k>2. 设计要点</k>\n边框――由 15*25 个空格组成，方块就落在这里面。\n盒子――组成方块的其中小方块，是组成方块的基本单元。\n方块――从边框顶掉下的东西，游戏者可以翻转和改变位置。\n每个方块由 4 个盒子组成。\n形状――不同类型的方块。\n这里形状的名字被叫做 T, S, Z ,J, L, I , O。\n如下图所示：\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHviaz4GFp0O4U1fN7DHdfPnYMtXY8NEsjOFgexT6fhRNCSjMiaIInurJw/640">\n<img data-src="https://mmbiz.qpic.cn/mmbiz_png/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHiatoAa8ViaT0zZzWWSD5md4MEGnDKzjNxo9UibZFS3Y2R8hn8SgMn9Q2g/640">\n模版――用一个列表存放形状被翻转后的所有可能样式。\n全部存放在变量里，变量名字如 S or J。\n着陆――当一个方块到达边框的底部或接触到在其他的盒子话，就说这个方块着陆了。\n那样的话，另一个方块就会开始下落。\n<k>3. 示例效果</k>\n<img data-src="https://mmbiz.qpic.cn/mmbiz_gif/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHYRajW5I8YpjOicrdyGiboH88sXXqUZv6zptguTN0fiaHYSI3vzFQqzZEg/640">\n<k>4. 示例源码</k>\nimport pygame\nimport random\nimport os\npygame.init()\nGRID_WIDTH = 20\nGRID_NUM_WIDTH = 15\nGRID_NUM_HEIGHT = 25\nWIDTH, HEIGHT = GRID_WIDTH * GRID_NUM_WIDTH, GRID_WIDTH * GRID_NUM_HEIGHT\nSIDE_WIDTH = 200\nSCREEN_WIDTH = WIDTH + SIDE_WIDTH\nWHITE = (0xff, 0xff, 0xff)\nBLACK = (0, 0, 0)\nLINE_COLOR = (0x33, 0x33, 0x33)\nCUBE_COLORS = [\n(0xcc, 0x99, 0x99), (0xff, 0xff, 0x99), (0x66, 0x66, 0x99),\n(0x99, 0x00, 0x66), (0xff, 0xcc, 0x00), (0xcc, 0x00, 0x33),\n(0xff, 0x00, 0x33), (0x00, 0x66, 0x99), (0xff, 0xff, 0x33),\n(0x99, 0x00, 0x33), (0xcc, 0xff, 0x66), (0xff, 0x99, 0x00)\n]\nscreen = pygame.display.set_mode((SCREEN_WIDTH, HEIGHT))\npygame.display.set_caption("俄罗斯方块")\nclock = pygame.time.Clock()\nFPS = 30\nscore = 0\nlevel = 1\nscreen_color_matrix = [[None] * GRID_NUM_WIDTH for i in range(GRID_NUM_HEIGHT)]\n# 设置游戏的根目录为当前文件夹\nbase_folder = os.path.dirname(__file__)\ndef show_text(surf, text, size, x, y, color=WHITE):\nfont_name = os.path.join(base_folder, \'font/font.ttc\')\nfont = pygame.font.Font(font_name, size)\ntext_surface = font.render(text, True, color)\ntext_rect = text_surface.get_rect()\ntext_rect.midtop = (x, y)\nsurf.blit(text_surface, text_rect)\nclass CubeShape(object):\nSHAPES = [\'I\', \'J\', \'L\', \'O\', \'S\', \'T\', \'Z\']\nI = [[(0, -1), (0, 0), (0, 1), (0, 2)],\n[(-1, 0), (0, 0), (1, 0), (2, 0)]]\nJ = [[(-2, 0), (-1, 0), (0, 0), (0, -1)],\n[(-1, 0), (0, 0), (0, 1), (0, 2)],\n[(0, 1), (0, 0), (1, 0), (2, 0)],\n[(0, -2), (0, -1), (0, 0), (1, 0)]]\nL = [[(-2, 0), (-1, 0), (0, 0), (0, 1)],\n[(1, 0), (0, 0), (0, 1), (0, 2)],\n[(0, -1), (0, 0), (1, 0), (2, 0)],\n[(0, -2), (0, -1), (0, 0), (-1, 0)]]\nO = [[(0, 0), (0, 1), (1, 0), (1, 1)]]\nS = [[(-1, 0), (0, 0), (0, 1), (1, 1)],\n[(1, -1), (1, 0), (0, 0), (0, 1)]]\nT = [[(0, -1), (0, 0), (0, 1), (-1, 0)],\n[(-1, 0), (0, 0), (1, 0), (0, 1)],\n[(0, -1), (0, 0), (0, 1), (1, 0)],\n[(-1, 0), (0, 0), (1, 0), (0, -1)]]\nZ = [[(0, -1), (0, 0), (1, 0), (1, 1)],\n[(-1, 0), (0, 0), (0, -1), (1, -1)]]\nSHAPES_WITH_DIR = {\n\'I\': I, \'J\': J, \'L\': L, \'O\': O, \'S\': S, \'T\': T, \'Z\': Z\n}\ndef __init__(self):\nself.shape = self.SHAPES[random.randint(0, len(self.SHAPES) - 1)]\n# 骨牌所在的行列\nself.center = (2, GRID_NUM_WIDTH // 2)\nself.dir = random.randint(0, len(self.SHAPES_WITH_DIR[self.shape]) - 1)\nself.color = CUBE_COLORS[random.randint(0, len(CUBE_COLORS) - 1)]\ndef get_all_gridpos(self, center=None):\ncurr_shape = self.SHAPES_WITH_DIR[self.shape][self.dir]\nif center is None:\ncenter = [self.center[0], self.center[1]]\nreturn [(cube[0] + center[0], cube[1] + center[1])\nfor cube in curr_shape]\ndef conflict(self, center):\nfor cube in self.get_all_gridpos(center):\n# 超出屏幕之外，说明不合法\nif cube[0] &lt; 0 or cube[1] &lt; 0 or cube[0] &gt;= GRID_NUM_HEIGHT or \\ncube[1] &gt;= GRID_NUM_WIDTH:\nreturn True\n# 不为None，说明之前已经有小方块存在了，也不合法\nif screen_color_matrix[cube[0]][cube[1]] is not None:\nreturn True\nreturn False\ndef rotate(self):\nnew_dir = self.dir + 1\nnew_dir %= len(self.SHAPES_WITH_DIR[self.shape])\nold_dir = self.dir\nself.dir = new_dir\nif self.conflict(self.center):\nself.dir = old_dir\nreturn False\ndef down(self):\n# import pdb; pdb.set_trace()\ncenter = (self.center[0] + 1, self.center[1])\nif self.conflict(center):\nreturn False\nself.center = center\nreturn True\ndef left(self):\ncenter = (self.center[0], self.center[1] - 1)\nif self.conflict(center):\nreturn False\nself.center = center\nreturn True\ndef right(self):\ncenter = (self.center[0], self.center[1] + 1)\nif self.conflict(center):\nreturn False\nself.center = center\nreturn True\ndef draw(self):\nfor cube in self.get_all_gridpos():\npygame.draw.rect(screen, self.color,\n(cube[1] * GRID_WIDTH, cube[0] * GRID_WIDTH,\nGRID_WIDTH, GRID_WIDTH))\npygame.draw.rect(screen, WHITE,\n(cube[1] * GRID_WIDTH, cube[0] * GRID_WIDTH,\nGRID_WIDTH, GRID_WIDTH),\n1)\ndef draw_grids():\nfor i in range(GRID_NUM_WIDTH):\npygame.draw.line(screen, LINE_COLOR,\n(i * GRID_WIDTH, 0), (i * GRID_WIDTH, HEIGHT))\nfor i in range(GRID_NUM_HEIGHT):\npygame.draw.line(screen, LINE_COLOR,\n(0, i * GRID_WIDTH), (WIDTH, i * GRID_WIDTH))\npygame.draw.line(screen, WHITE,\n(GRID_WIDTH * GRID_NUM_WIDTH, 0),\n(GRID_WIDTH * GRID_NUM_WIDTH, GRID_WIDTH * GRID_NUM_HEIGHT))\ndef draw_matrix():\nfor i, row in zip(range(GRID_NUM_HEIGHT), screen_color_matrix):\nfor j, color in zip(range(GRID_NUM_WIDTH), row):\nif color is not None:\npygame.draw.rect(screen, color,\n(j * GRID_WIDTH, i * GRID_WIDTH,\nGRID_WIDTH, GRID_WIDTH))\npygame.draw.rect(screen, WHITE,\n(j * GRID_WIDTH, i * GRID_WIDTH,\nGRID_WIDTH, GRID_WIDTH), 2)\ndef draw_score():\nshow_text(screen, u\'得分：\n{}\'.format(score), 20, WIDTH + SIDE_WIDTH // 2, 100)\ndef remove_full_line():\nglobal screen_color_matrix\nglobal score\nglobal level\nnew_matrix = [[None] * GRID_NUM_WIDTH for i in range(GRID_NUM_HEIGHT)]\nindex = GRID_NUM_HEIGHT - 1\nn_full_line = 0\nfor i in range(GRID_NUM_HEIGHT - 1, -1, -1):\nis_full = True\nfor j in range(GRID_NUM_WIDTH):\nif screen_color_matrix[i][j] is None:\nis_full = False\ncontinue\nif not is_full:\nnew_matrix[index] = screen_color_matrix[i]\nindex -= 1\nelse:\nn_full_line += 1\nscore += n_full_line\nlevel = score // 20 + 1\nscreen_color_matrix = new_matrix\ndef show_welcome(screen):\nshow_text(screen, u\'俄罗斯方块\', 30, WIDTH / 2, HEIGHT / 2)\nshow_text(screen, u\'按任意键开始游戏\', 20, WIDTH / 2, HEIGHT / 2 + 50)\nrunning = True\ngameover = True\ncounter = 0\nlive_cube = None\nwhile running:\nclock.tick(FPS)\nfor event in pygame.event.get():\nif event.type == pygame.QUIT:\nrunning = False\nelif event.type == pygame.KEYDOWN:\nif gameover:\ngameover = False\nlive_cube = CubeShape()\nbreak\nif event.key == pygame.K_LEFT:\nlive_cube.left()\nelif event.key == pygame.K_RIGHT:\nlive_cube.right()\nelif event.key == pygame.K_DOWN:\nlive_cube.down()\nelif event.key == pygame.K_UP:\nlive_cube.rotate()\nelif event.key == pygame.K_SPACE:\nwhile live_cube.down() == True:\npass\nremove_full_line()\n# level 是为了方便游戏的难度，level 越高 FPS // level 的值越小\n# 这样屏幕刷新的就越快，难度就越大\nif gameover is False and counter % (FPS // level) == 0:\n# down 表示下移骨牌，返回False表示下移不成功，可能超过了屏幕或者和之前固定的\n# 小方块冲突了\nif live_cube.down() == False:\nfor cube in live_cube.get_all_gridpos():\nscreen_color_matrix[cube[0]][cube[1]] = live_cube.color\nlive_cube = CubeShape()\nif live_cube.conflict(live_cube.center):\ngameover = True\nscore = 0\nlive_cube = None\nscreen_color_matrix = [[None] * GRID_NUM_WIDTH for i in range(GRID_NUM_HEIGHT)]\n# 消除满行\nremove_full_line()\ncounter += 1\n# 更新屏幕\nscreen.fill(BLACK)\ndraw_grids()\ndraw_matrix()\ndraw_score()\nif live_cube is not None:\nlive_cube.draw()\nif gameover:\nshow_welcome(screen)\npygame.display.update()\n<h3 id="PythonProjtopic-8">4、连连看</h3>\n<k>1. 案例介绍</k>\n连连看是一款曾经非常流行的小游戏。\n游戏规则：\n<ol><li>点击选中两个相同的方块。\n</li><li>两个选中的方块之间连接线的折点不超过两个(接线由X轴和Y轴的平行线组成)。\n</li><li>每找出一对，它们就会自动消失。\n</li><li>连线不能从尚未消失的图案上经过。\n</li><li>把所有的图案全部消除即可获得胜利。\n</li></ol>\n<k>2. 设计思路</k>\n<ol><li>生成成对的图片元素。\n</li><li>将图片元素打乱排布。\n</li><li>定义什么才算 相连(两张图片的连线不多于3跟直线，或者说转角不超过2个)。\n</li><li>实现 相连 判断算法。\n</li><li>消除图片元素并判断是否消除完毕。\n</li></ol>\n<k>3. 示例效果</k>\n<img data-src="https://mmbiz.qpic.cn/mmbiz_gif/ULibHgXIt3jxicPrfwF9p6rQnZMOGSuYPHHagN5icromRJicGl7JHmwwPSasXexBmKFNywwWqHAdB2ibveo7S3hPKzg/640">\n<k>4. 示例源码</k>\nfrom tkinter import *\nfrom tkinter.messagebox import *\nfrom threading import Timer\nimport time\nimport random\nclass Point:\n# 点类\ndef __init__(self, x, y):\nself.x = x\nself.y = y\n# --------------------------------------\n\'\'\'\n判断选中的两个方块是否可以消除\n\'\'\'\ndef IsLink(p1, p2):\nif lineCheck(p1, p2):\nreturn True\nif OneCornerLink(p1, p2):  # 一个转弯（折点）的联通方式\nreturn True\nif TwoCornerLink(p1, p2):  # 两个转弯（折点）的联通方式\nreturn True\nreturn False\n# ---------------------------\ndef IsSame(p1, p2):\nif map[p1.x][p1.y] == map[p2.x][p2.y]:\nprint("clicked at IsSame")\nreturn True\nreturn False\ndef callback(event):  # 鼠标左键事件代码\nglobal Select_first, p1, p2\nglobal firstSelectRectId, SecondSelectRectId\n# print ("clicked at", event.x, event.y,turn)\nx = (event.x) // 40  # 换算棋盘坐标\ny = (event.y) // 40\nprint("clicked at", x, y)\nif map[x][y] == " ":\nshowinfo(title="提示", message="此处无方块")\nelse:\nif Select_first == False:\np1 = Point(x, y)\n# 画选定（x1,y1)处的框线\nfirstSelectRectId = cv.create_rectangle(x * 40, y * 40, x * 40 + 40, y * 40 + 40, width=2, outline="blue")\nSelect_first = True\nelse:\np2 = Point(x, y)\n# 判断第二次点击的方块是否已被第一次点击选取，如果是则返回。\nif (p1.x == p2.x) and (p1.y == p2.y):\nreturn\n# 画选定（x2,y2)处的框线\nprint(\'第二次点击的方块\', x, y)\n# SecondSelectRectId=cv.create_rectangle(100,20,x*40+40,y*40+40,width=2,outline="yellow")\nSecondSelectRectId = cv.create_rectangle(x * 40, y * 40, x * 40 + 40, y * 40 + 40, width=2,\noutline="yellow")\nprint(\'第二次点击的方块\', SecondSelectRectId)\ncv.pack()\n# 判断是否连通\nif IsSame(p1, p2) and IsLink(p1, p2):\nprint(\'连通\', x, y)\nSelect_first = False\n# 画选中方块之间连接线\ndrawLinkLine(p1, p2)\n# clearTwoBlock()\n# time.sleep(0.6)\n# clearFlag=True\nt = Timer(timer_interval, delayrun)  # 定时函数\nt.start()\nelse:  # 重新选定第一个方块\n# 清除第一个选定框线\ncv.delete(firstSelectRectId)\ncv.delete(SecondSelectRectId)\n# print(\'清除第一个选定框线\')\n# firstSelectRectId=SecondSelectRectId\n# p1=Point(x,y)     #设置重新选定第一个方块的坐标\nSelect_first = False\ntimer_interval = 0.3  # 0.3秒\n# --------------------------------------\ndef delayrun():\nclearTwoBlock()  # 清除连线及方块\ndef clearTwoBlock():  # 清除连线及方块\n# 延时0.1秒\n# time.sleep(0.1)\n# 清除第一个选定框线\ncv.delete(firstSelectRectId)\n# 清除第2个选定框线\ncv.delete(SecondSelectRectId)\n# 清空记录方块的值\nmap[p1.x][p1.y] = " "\ncv.delete(image_map[p1.x][p1.y])\nmap[p2.x][p2.y] = " "\ncv.delete(image_map[p2.x][p2.y])\nSelect_first = False\nundrawConnectLine()  # 清除选中方块之间连接线\ndef drawQiPan():  # 画棋盘\nfor i in range(0, 15):\ncv.create_line(20, 20 + 40 * i, 580, 20 + 40 * i, width=2)\nfor i in range(0, 15):\ncv.create_line(20 + 40 * i, 20, 20 + 40 * i, 580, width=2)\ncv.pack()\ndef print_map():  # 输出map地图\nglobal image_map\nfor x in range(0, Width):  # 0--14\nfor y in range(0, Height):  # 0--14\nif (map[x][y] != \' \'):\nimg1 = imgs[int(map[x][y])]\nid = cv.create_image((x * 40 + 20, y * 40 + 20), image=img1)\nimage_map[x][y] = id\ncv.pack()\nfor y in range(0, Height):  # 0--14\nfor x in range(0, Width):  # 0--14\nprint(map[x][y], end=\' \')\nprint(",", y)\n\'\'\'\n* 同行同列情况消除方法 原理：\n如果两个相同的被消除元素之间的 空格数\nspaceCount等于他们的（行/列差-1）则 两者可以联通消除\n* x代表列，y代表行\n* param p1 第一个保存上次选中点坐标的点对象\n* param p2 第二个保存上次选中点坐标的点对象\n\'\'\'\n# 直接连通\ndef lineCheck(p1, p2):\nabsDistance = 0\nspaceCount = 0\nif (p1.x == p2.x or p1.y == p2.y):  # 同行同列的情况吗？\nprint("同行同列的情况------")\n# 同列的情况\nif (p1.x == p2.x and p1.y != p2.y):\nprint("同列的情况")\n# 绝对距离(中间隔着的空格数)\nabsDistance = abs(p1.y - p2.y) - 1\n# 正负值\nif p1.y - p2.y &gt; 0:\nzf = -1\nelse:\nzf = 1\nfor i in range(1, absDistance + 1):\nif (map[p1.x][p1.y + i * zf] == " "):\n# 空格数加1\nspaceCount += 1\nelse:\nbreak;  # 遇到阻碍就不用再探测了\n# 同行的情况\nelif (p1.y == p2.y and p1.x != p2.x):\nprint(" 同行的情况")\nabsDistance = abs(p1.x - p2.x) - 1\n# 正负值\nif p1.x - p2.x &gt; 0:\nzf = -1\nelse:\nzf = 1\nfor i in range(1, absDistance + 1):\nif (map[p1.x + i * zf][p1.y] == " "):\n# 空格数加1\nspaceCount += 1\nelse:\nbreak;  # 遇到阻碍就不用再探测了\nif (spaceCount == absDistance):\n# 可联通\nprint(absDistance, spaceCount)\nprint("行/列可直接联通")\nreturn True\nelse:\nprint("行/列不能消除！\n")\nreturn False\nelse:\n# 不是同行同列的情况所以直接返回false\nreturn False;\n# --------------------------------------\n# 第二种，直角连通\n\'\'\'\n直角连接，即X,Y坐标都不同的，可以用这个方法尝试连接\nparam first:选中的第一个点\nparam second:选中的第二个点\n\'\'\'\ndef OneCornerLink(p1, p2):\n# 第一个直角检查点，如果这里为空则赋予相同值供检查\ncheckP = Point(p1.x, p2.y)\n# 第二个直角检查点，如果这里为空则赋予相同值供检查\ncheckP2 = Point(p2.x, p1.y);\n# 第一个直角点检测\nif (map[checkP.x][checkP.y] == " "):\nif (lineCheck(p1, checkP) and lineCheck(checkP, p2)):\nlinePointStack.append(checkP)\nprint("直角消除ok", checkP.x, checkP.y)\nreturn True\n# 第二个直角点检测\nif (map[checkP2.x][checkP2.y] == " "):\nif (lineCheck(p1, checkP2) and lineCheck(checkP2, p2)):\nlinePointStack.append(checkP2)\nprint("直角消除ok", checkP2.x, checkP2.y)\nreturn True\nprint("不能直角消除")\nreturn False;\n# -----------------------------------------\n\'\'\'\n#第三种，双直角连通\n双直角联通判定可分两步走：\n1. \n在p1点周围4个方向寻找空格checkP\n2. \n调用OneCornerLink(checkP, p2)\n3. \n即遍历 p1 4 个方向的空格，使之成为 checkP,然后调用 OneCornerLink(checkP, \np2)判定是否为真，如果为真则可以双直角连同，否则当所有的空格都遍历完而没有找\n到一个checkP使OneCornerLink(checkP, p2)为真，则两点不能连同\n具体代码：\n双直角连接方法\n@param p1 第一个点\n@param p2 第二个点\n\'\'\'\ndef TwoCornerLink(p1, p2):\ncheckP = Point(p1.x, p1.y)\n# 四向探测开始\nfor i in range(0, 4):\ncheckP.x = p1.x\ncheckP.y = p1.y\n# 向下\nif (i == 3):\ncheckP.y += 1\nwhile ((checkP.y &lt; Height) and map[checkP.x][checkP.y] == " "):\nlinePointStack.append(checkP)\nif (OneCornerLink(checkP, p2)):\nprint("下探测OK")\nreturn True\nelse:\nlinePointStack.pop()\ncheckP.y += 1\nprint("ssss", checkP.y, Height - 1)\n# 补充两个折点都在游戏区域底侧外部\nif checkP.y == Height:  # 出了底部，则仅需判断p2能否也达到底部边界\nz = Point(p2.x, Height - 1)  # 底部边界点\nif lineCheck(z, p2):  # 两个折点在区域外部的底侧\nlinePointStack.append(Point(p1.x, Height))\nlinePointStack.append(Point(p2.x, Height))\nprint("下探测到游戏区域外部OK")\nreturn True\n# 向右\nelif (i == 2):\ncheckP.x += 1\nwhile ((checkP.x &lt; Width) and map[checkP.x][checkP.y] == " "):\nlinePointStack.append(checkP)\nif (OneCornerLink(checkP, p2)):\nprint("右探测OK")\nreturn True\nelse:\nlinePointStack.pop()\ncheckP.x += 1\n# 补充两个折点都在游戏区域右侧外部\nif checkP.x == Width:  # 出了右侧，则仅需判断p2能否也达到右部边界\nz = Point(Width - 1, p2.y)  # 右部边界点\nif lineCheck(z, p2):  # 两个折点在区域外部的底侧\nlinePointStack.append(Point(Width, p1.y))\nlinePointStack.append(Point(Width, p2.y))\nprint("右探测到游戏区域外部OK")\nreturn True\n# 向左\nelif (i == 1):\ncheckP.x -= 1\nwhile ((checkP.x &gt;= 0) and map[checkP.x][checkP.y] == " "):\nlinePointStack.append(checkP)\nif (OneCornerLink(checkP, p2)):\nprint("左探测OK")\nreturn True\nelse:\nlinePointStack.pop()\ncheckP.x -= 1\n# 向上\nelif (i == 0):\ncheckP.y -= 1\nwhile ((checkP.y &gt;= 0) and map[checkP.x][checkP.y] == " "):\nlinePointStack.append(checkP)\nif (OneCornerLink(checkP, p2)):\nprint("上探测OK")\nreturn True\nelse:\nlinePointStack.pop()\ncheckP.y -= 1\n# 四个方向都寻完都没找到适合的checkP点\nprint("两直角连接没找到适合的checkP点")\nreturn False;\n# ---------------------------\n# 画连接线\ndef drawLinkLine(p1, p2):\nif (len(linePointStack) == 0):\nLine_id.append(drawLine(p1, p2))\nelse:\nprint(linePointStack, len(linePointStack))\nif (len(linePointStack) == 1):\nz = linePointStack.pop()\nprint("一折连通点z", z.x, z.y)\nLine_id.append(drawLine(p1, z))\nLine_id.append(drawLine(p2, z))\nif (len(linePointStack) == 2):\nz1 = linePointStack.pop()\nprint("2折连通点z1", z1.x, z1.y)\nLine_id.append(drawLine(p2, z1))\nz2 = linePointStack.pop()\nprint("2折连通点z2", z2.x, z2.y)\nLine_id.append(drawLine(z1, z2))\nLine_id.append(drawLine(p1, z2))\n# 删除连接线\ndef undrawConnectLine():\nwhile len(Line_id) &gt; 0:\nidpop = Line_id.pop()\ncv.delete(idpop)\ndef drawLine(p1, p2):\nprint("drawLine p1,p2", p1.x, p1.y, p2.x, p2.y)\n# cv.create_line( 40+20, 40+20,200,200,width=5,fill=\'red\')\nid = cv.create_line(p1.x * 40 + 20, p1.y * 40 + 20, p2.x * 40 + 20, p2.y * 40 + 20, width=5, fill=\'red\')\n# cv.pack()\nreturn id\n# --------------------------------------\ndef create_map():  # 产生map地图\nglobal map\n# 生成随机地图\n# 将所有匹配成对的动物物种放进一个临时的地图中\ntmpMap = []\nm = (Width) * (Height) // 10\nprint(\'m=\', m)\nfor x in range(0, m):\nfor i in range(0, 10):  # 每种方块有10个\ntmpMap.append(x)\nrandom.shuffle(tmpMap)\nfor x in range(0, Width):  # 0--14\nfor y in range(0, Height):  # 0--14\nmap[x][y] = tmpMap[x * Height + y]\n# --------------------------------------\ndef find2Block(event):  # 自动查找\nglobal firstSelectRectId, SecondSelectRectId\nm_nRoW = Height\nm_nCol = Width\nbFound = False;\n# 第一个方块从地图的0位置开始\nfor i in range(0, m_nRoW * m_nCol):\n# 找到则跳出循环\nif (bFound):\nbreak\n# 算出对应的虚拟行列位置\nx1 = i % m_nCol\ny1 = i // m_nCol\np1 = Point(x1, y1)\n# 无图案的方块跳过\nif (map[x1][y1] == \' \'):\ncontinue\n# 第二个方块从前一个方块的后面开始\nfor j in range(i + 1, m_nRoW * m_nCol):\n# 算出对应的虚拟行列位置\nx2 = j % m_nCol\ny2 = j // m_nCol\np2 = Point(x2, y2)\n# 第二个方块不为空 且与第一个方块的动物相同\nif (map[x2][y2] != \' \' and IsSame(p1, p2)):\n# 判断是否可以连通\nif (IsLink(p1, p2)):\nbFound = True\nbreak\n# 找到后自动消除\nif (bFound):  # p1（x1,y1）与p2（x2,y2）连通\nprint(\'找到后\', p1.x, p1.y, p2.x, p2.y)\n# 画选定（x1,y1)处的框线\nfirstSelectRectId = cv.create_rectangle(x1 * 40, y1 * 40, x1 * 40 + 40, y1 * 40 + 40, width=2, outline="red")\n# 画选定（x2,y2)处的框线\nsecondSelectRectId = cv.create_rectangle(x2 * 40, y2 * 40, x2 * 40 + 40, y2 * 40 + 40, width=2, outline="red")\n# t=Timer(timer_interval,delayrun)#定时函数\n# t.start()\nreturn bFound\n# 游戏主逻辑\nroot = Tk()\nroot.title("Python连连看 ")\nimgs = [PhotoImage(file=\'images\\bar_0\' + str(i) + \'.gif\') for i in range(0, 10)]  # 所有图标图案\nSelect_first = False  # 是否已经选中第一块\nfirstSelectRectId = -1  # 被选中第一块地图对象\nSecondSelectRectId = -1  # 被选中第二块地图对象\nclearFlag = False\nlinePointStack = []\nLine_id = []\nHeight = 10\nWidth = 10\nmap = [[" " for y in range(Height)] for x in range(Width)]\nimage_map = [[" " for y in range(Height)] for x in range(Width)]\ncv = Canvas(root, bg=\'green\', width=440, height=440)\n# drawQiPan( )\ncv.bind("&lt;Button-1&gt;", callback)  # 鼠标左键事件\ncv.bind("&lt;Button-3&gt;", find2Block)  # 鼠标右键事件\ncv.pack()\ncreate_map()  # 产生map地图\nprint_map()  # 打印map地图\nroot.mainloop()\n',
'<h2>Python获取全部股票代码信息</h2>\n<a href="https://juejin.cn/user/2604119467234270" class="whitebut ">Angryshark128</a>\n# 保存股票信息至本地 save_stocks()\n# 获取全部股票代码及名称 _get_all_stocks()\n# 获取股票信息 _get_stocks(base_url, stock)\n# 保存股票信息至本地\ndef save_stocks():\n all_stocks = target_util._get_all_stocks()\n with open ("stock.csv",\'a+\') as f:\n  f.write("股票代码,股票名称,市场,分类,类型\n")\n  for stock in all_stocks:\n   f.write("{stock[id]},{stock[name]},{stock[category]},{stock[tag]},{stock[type]}\n".format(\n    stock=stock\n   ))\n logging.info("全部股票信息写入完成！")\n \nif __name__ == "__main__":\n save_stocks()\n# 获取全部股票代码及名称\ndef _get_all_stocks():\n base_url = "http://54.push2.eastmoney.com/api/qt/clist/get?pn={page_num}&pz={page_size}&po=1&np=1&fltt=2&invt=2&fid=f3&fs={time_id}&fields=f12,f14"\n stocks = [\n  {\n   "category": "A股",\n   "tag": "沪深A股",\n   "type": "股票",\n   "time_id": "m:0+t:6,m:0+t:80,m:1+t:2,m:1+t:23"\n  },\n  {\n   "category": "A股",\n   "tag": "上证A股",\n   "type": "股票",\n   "time_id": "m:1+t:2,m:1+t:23"\n  },\n  {\n   "category": "A股",\n   "tag": "深证A股",\n   "type": "股票",\n   "time_id": "m:0+t:6,m:0+t:80"\n  },\n  {\n   "category": "A股",\n   "tag": "新股",\n   "type": "股票",\n   "time_id": "m:0+f:8,m:1+f:8"\n  },\n  {\n   "category": "A股",\n   "tag": "创业板",\n   "type": "股票",\n   "time_id": "m:0+t:80"\n  },\n  {\n   "category": "A股",\n   "tag": "科创板",\n   "type": "股票",\n   "time_id": "m:1+t:23"\n  },\n  {\n   "category": "A股",\n   "tag": "沪股通",\n   "type": "股票",\n   "time_id": "b:BK0707"\n  },\n  {\n   "category": "A股",\n   "tag": "深股通",\n   "type": "股票",\n   "time_id": "b:BK0804"\n  },\n  {\n   "category": "B股",\n   "tag": "B股",\n   "type": "股票",\n   "time_id": "m:0+t:7,m:1+t:3"\n  },\n  {\n   "category": "A-B股",\n   "tag": "上证AB股比价",\n   "type": "股票",\n   "time_id": "m:1+b:BK0498"\n  },\n  {\n   "category": "A-B股",\n   "tag": "深证AB股比价",\n   "type": "股票",\n   "time_id": "m:0+b:BK0498"\n  },\n  {\n   "category": "A-B股",\n   "tag": "风险警示板",\n   "type": "股票",\n   "time_id": "m:0+f:4,m:1+f:4"\n  },\n  {\n   "category": "A-B股",\n   "tag": "两网及退市",\n   "type": "股票",\n   "time_id": "m:0+s:3"\n  },\n  {\n   "category": "美股",\n   "tag": "美股",\n   "type": "股票",\n   "time_id": "m:105,m:106,m:107"\n  },\n  {\n   "category": "港股",\n   "tag": "港股",\n   "type": "股票",\n   "time_id": "m:128+t:3,m:128+t:4,m:128+t:1,m:128+t:2"\n  },\n  {\n   "category": "英股",\n   "tag": "英股",\n   "type": "股票",\n   "time_id": "m:155+t:1,m:155+t:2,m:155+t:3,m:156+t:1,m:156+t:2,m:156+t:5,m:156+t:6,m:156+t:7,m:156+t:8"\n  }\n ]\n all_stocks = []\n for stock in stocks:\n  all_stocks.extend(_get_stocks(base_url, stock))\n logging.warning("全部股票信息共{0}条。".format(len(all_stocks)))\n return all_stocks\n# 获取股票信息\ndef _get_stocks(base_url, stock):\n max_page_num = 50\n page_size = 100\n result = []\n for page_num in range(1, max_page_num):\n  url = base_url.format(time_id=stock["time_id"], page_num=page_num, page_size=page_size)\n  resp = requests.get(url)\n  if not resp.ok:\n   logging.error("{0}-{1}-{2}请求失败：{3}".format(stock["type"],\n                stock["category"],\n                stock["tag"],\n                url))\n  resp_json = resp.json()\n  if not resp_json["data"]:\n   logging.warning("当前页无数据，将不再继续请求！")\n   break\n  stocks = resp_json["data"]["diff"]\n  result.extend(list(\n   map(lambda s: {"id": s["f12"].replace(" ", "").replace("\'", "_"),\n         "name": s["f14"].replace(" ", "").replace("\'", "_"),\n         "category": stock["category"],\n         "tag": stock["tag"],\n         "type": stock["type"]},\n    stocks)))\n logging.info("{0}-{1}-{2}信息爬取完成，共{3}条。".format(stock["type"], stock["category"], stock["tag"], len(result)))\n return result\n',
'<h2>YYDS 分析股票数据特征</h2>\n<div id="YYDStoc"><a href="#YYDStopic-0" target="_self">数据准备</a><br><a href="#YYDStopic-1" target="_self">特征构造</a><br><a href="#YYDStopic-2" target="_self">描述性统计</a><br><a href="#YYDStopic-3" target="_self">缺失值分析</a><br><a href="#YYDStopic-4" target="_self">特征间相关性分析</a><br><a href="#YYDStopic-5" target="_self">特征值分布</a><br><a href="#YYDStopic-6" target="_self">特征间的关系</a><br><a href="#YYDStopic-7" target="_self"><span class="orange">特征重要性</span></a><br><a href="#YYDStopic-8" target="_self">线性回归系数大小排序</a><br><a href="#YYDStopic-9" target="_self">随机森林特征重要性排序</a><br><a href="#YYDStopic-10" target="_self">RandomizedLasso</a><br><a href="#YYDStopic-11" target="_self">RFE递归特征消除特征排序</a><br><a href="#YYDStopic-12" target="_self">RFECV</a><br><a href="#YYDStopic-13" target="_self">LarsCV</a><br><a href="#YYDStopic-14" target="_self">创建特征排序矩阵</a><br><a href="#YYDStopic-15" target="_self">绘制特征重要性排序图</a><br></div></center>\n<br><br>\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx4aynvrr0g2Lm4cFLqFQVhrozxfXLP29ASlnGF2sTJXpR8piaUOx35Uw/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx4aynvrr0g2Lm4cFLqFQVhrozxfXLP29ASlnGF2sTJXpR8piaUOx35Uw/640" data-was-processed="true">\n本文主要从股市数据变量的<k>特征分布及特征重要性</k>两个角度对数据进行分析。\n通过绘制图表等方法分析特征本身对分布状况或特征间相互关系。\n通过机器学习模型方法分析出特种重要性排序，选出对结果贡献较大对那几个特征，这对后面建模对模型效果有着不可小觑对效果。\n<h3 id="YYDStopic-0">数据准备</h3>此处数据获取可参见<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;mid=2652587312&amp;idx=2&amp;sn=e49850868c977904ac5d803c43acabb7&amp;chksm=84656d7ab312e46c7de429cac932623c276ce51a47e567144cd70e8c5ab9ad1b6351652b38a0&amp;scene=21#wechat_redirect" textvalue="金融数据准备">金融数据准备</a>。\ndf.info()\n&lt;class \'pandas.core.frame.DataFrame\'&gt;\nDatetimeIndex: 1260 entries, 2015-12-31 to 2020-12-31\nData columns (total 6 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Open    1260 non-null   float64\n 1   High    1260 non-null   float64\n 2   Low  1260 non-null   float64\n 3   Close   1260 non-null   float64\n 4   Adj Close  1260 non-null   float64\n 5   Volume  1260 non-null   int64  \ndtypes: float64(5), int64(1)\nmemory usage: 68.9 KB\n<h3 id="YYDStopic-1">特征构造</h3>\ndf[\'H-L\'] = df[\'High\'] - df[\'Low\']\ndf[\'O-C\'] = df[\'Adj Close\'] - df[\'Open\']\ndf[\'3day MA\'] = df[\'Adj Close\'].shift(1).rolling(window=3).mean()\ndf[\'10day MA\'] = df[\'Adj Close\'].shift(1).rolling(window=10).mean()\ndf[\'30day MA\'] = df[\'Adj Close\'].shift(1).rolling(window=30).mean()\ndf[\'Std_dev\'] = df[\'Adj Close\'].rolling(5).std()\ndf.dtypes\n<h3 id="YYDStopic-2">描述性统计</h3>\ndf.describe().T\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxJ3ornzD0zAgmda1AaIEYm7j3qL6McTG21bstYp95Ea4SWUiasQOSNqA/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxJ3ornzD0zAgmda1AaIEYm7j3qL6McTG21bstYp95Ea4SWUiasQOSNqA/640" data-was-processed="true">\n<h3 id="YYDStopic-3">缺失值分析</h3><h4>检查缺失值</h4>\ndf.isnull().sum() \nOpen    0\nHigh    0\nLow     0\nClose   0\nAdj Close  0\nVolume  0\nH-L     0\nO-C     0\n3day MA    3\n10day MA  10\n30day MA  30\nStd_dev    4\ndtype: int64\n<h4>缺失值可视化</h4>这里使用Series的属性plot直接绘制条形图。\ndf_missing_count = df.isnull().sum() \n# -1表示缺失数据\n# 另一个不常见的设置画布的方法\nplt.rcParams[\'figure.figsize\'] = (15,8)\ndf_missing_count.plot.bar()\nplt.show()\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxsA7wmd9uK7K4iaKIjiblHw9YVEibe0ACJmc2bUI3aPXHX8FSCgPx6sCHw/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxsA7wmd9uK7K4iaKIjiblHw9YVEibe0ACJmc2bUI3aPXHX8FSCgPx6sCHw/640" data-was-processed="true">\nfor column in df:\n   print("column nunique  NaN")\n print("{0:15} {1:6d} {2:6}".format(\n    column, df[column].nunique(), \n    (df[column] == -1).sum()))\ncolumn   nunique   NaN\nOpen     1082   0\nHigh     1083   0\nLow      1025   0\nClose    1098   0\nAdj Close   1173   0\nVolume   1250   0\nH-L    357   0\nO-C      1237   2\n3day MA     1240   0\n10day MA    1244   0\n30day MA    1230   0\nStd_dev     1252   0\n<h3 id="YYDStopic-4">特征间相关性分析</h3>\nimport seaborn as sns\n# 一个设置色板的方法\n# cmap = sns.diverging_palette(220, 10,\n      as_cmap=True)\nsns.heatmap(df.iloc[:df.shape[0]].corr()\n  ,annot = True, cmap = \'Blues\')\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx0EkIqYxwwyiagC4iasZjPKPmzZhekGLWGdvQicxKzB0n4iaDA1dj37uHicQ/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx0EkIqYxwwyiagC4iasZjPKPmzZhekGLWGdvQicxKzB0n4iaDA1dj37uHicQ/640" data-was-processed="true">\n<h3 id="YYDStopic-5">特征值分布</h3><h4>直方图</h4>\ncolumns_multi = [x for x in list(df.columns)]\ndf.hist(layout = (3,4), column = columns_multi)\n# 一种不常用的调整画布大小的方法\nfig=plt.gcf()\nfig.set_size_inches(20,9)\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx8mgEf6eibb8u1GMMLKOkiczN6yMRVSeqBjLHW8VsF4VY94uNgia1z2OQQ/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx8mgEf6eibb8u1GMMLKOkiczN6yMRVSeqBjLHW8VsF4VY94uNgia1z2OQQ/640" data-was-processed="true">\n<h4>密度图</h4>\nnames = columns_multi\ndf.plot(kind=\'density\', subplots=True, \n  layout=(3,4), sharex=False)\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxXPR9mXSTC4XsK1MOicPGyt7dGhO54TAcCwq7RPhFQ2sFL0QdqFOBQhA/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxXPR9mXSTC4XsK1MOicPGyt7dGhO54TAcCwq7RPhFQ2sFL0QdqFOBQhA/640" data-was-processed="true">\n<h3 id="YYDStopic-6">特征间的关系</h3><k>函数可视化探索数据特征间的关系</k>\nsns.pairplot(df, size=3, \n    diag_kind="kde")\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbZlibm15O9H3ribG7TDl2C1TaXwT0a7WGEia9g7FhZnTTmiajMtGXJHQHuNkEziaEL5UZ5QIpib6smVn2gw/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbZlibm15O9H3ribG7TDl2C1TaXwT0a7WGEia9g7FhZnTTmiajMtGXJHQHuNkEziaEL5UZ5QIpib6smVn2gw/640" data-was-processed="true">\n<h3 id="YYDStopic-7"><span class="orange">特征重要性</span></h3>通过多种方式对特征重要性进行评估，将每个特征的特征重要的得分取均值，最后以均值大小排序绘制特征重要性排序图，直观查看特征重要性。\n<h4>导入相关模块</h4>\nfrom sklearn.feature_selection import RFE,RFECV, f_regression\nfrom sklearn.linear_model import (LinearRegression, Ridge, Lasso，LarsCV)\nfrom stability_selection import StabilitySelection, RandomizedLasso\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVR\n<h3 id="YYDStopic-8">线性回归系数大小排序</h3>回归系数(regression coefficient)在回归方程中表示自变量 x 对因变量 y 影响大小的参数。\n回归系数越大表示 x 对 y 影响越大。\n<h4>创建排序函数</h4>\ndf = df.dropna()\nY = df[\'Adj Close\'].values\nX = df.values\ncolnames = df.columns\n# 定义字典来存储的排名\nranks = {}\n# 创建函数，它将特征排名存储到rank字典中\ndef ranking(ranks, names, order=1):\n minmax = MinMaxScaler()\n ranks = minmax.fit_transform(order*np.array([ranks]).T).T[0]\n ranks = map(lambda x: round(x,2), ranks)\n res = dict(zip(names, ranks))\n return res\n<h4>多个回归模型系数排序</h4>\n# 使用线性回归\nlr = LinearRegression(normalize=True)\nlr.fit(X,Y)\nranks["LinReg"] = ranking(np.abs(lr.coef_), colnames)\n# 使用 Ridge \nridge = Ridge(alpha = 7)\nridge.fit(X,Y)\nranks[\'Ridge\'] = ranking(np.abs(ridge.coef_), colnames)\n# 使用 Lasso\nlasso = Lasso(alpha=.05)\nlasso.fit(X, Y)\nranks["Lasso"] = ranking(np.abs(lasso.coef_), colnames)\n<h3 id="YYDStopic-9">随机森林特征重要性排序</h3>随机森林得到的特征重要性的原理是我们平时用的较频繁的一种方法，无论是对分类型任务还是连续型任务，都有较好对效果。\n在随机森林中某个特征X的重要性的计算方法如下：\n对于随机森林中的每一颗决策树， 使用相应的OOB(袋外数据)数据来计算它的袋外数据误差 ，记为errOOB1.\n随机地对袋外数据OOB所有样本的特征X加入噪声干扰 (就可以随机的改变样本在特征X处的值)， 再次计算它的袋外数据误差 ，记为errOOB2.\n假设随机森林中有Ntree 棵树，那么对于特征X的重要性<img style="width:200px; background-color:gray;" src="https://mmbiz.qlogo.cn/mmbiz_svg/47CicbLQOxtUxCJwVFD9RPfiaaSzNh2nT7oaX11CiaDeiaXbCsJK0UaQL4YqCIhvbib4bhX8NdicWMacKvDvyicLicNsefkr7HSs92Qic/0">，之所以可以用这个表达式来作为相应特征的重要性的度量值是因为：若给某个特征随机加入噪声之后，袋外的准确率大幅度降低，则说明这个特征对于样本的分类结果影响很大，也就是说它的重要程度比较高。\n<h4>连续型特征重要性</h4>对于连续型任务的特征重要性，可以使用回归模型<k>RandomForestRegressor</k>中feature_importances_属性。\nX_1 = dataset[[\'Open\', \'High\', \'Low\', \'Volume\', \n      \'Increase_Decrease\',\'Buy_Sell_on_Open\', \'Buy_Sell\', \'Returns\']]\ny_1 = dataset[\'Adj Close\']\n# 创建决策树分类器对象\nclf = RandomForestRegressor(random_state=0, n_jobs=-1)\n# 训练模型\nmodel = clf.fit(X_1, y_1)\n# 计算特征重要性\nimportances = model.feature_importances_\n# 按降序排序特性的重要性\nindices = np.argsort(importances)[::-1]\n# 重新排列特性名称，使它们与已排序的特性重要性相匹配\nnames = [dataset.columns[i] for i in indices]\n# 创建画布\nplt.figure(figsize=(10,6))\n# 添加标题\nplt.title("Feature Importance")\n# 添加柱状图\nplt.bar(range(X.shape[1]), importances[indices])\n# 为x轴添加特征名\nplt.xticks(range(X.shape[1]), names, rotation=90)\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxbCZP3O64tOy646UtJobBTVOmA9YtU5RNQ9fVTBhP1YsOonQoeQkXLg/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxbCZP3O64tOy646UtJobBTVOmA9YtU5RNQ9fVTBhP1YsOonQoeQkXLg/640" data-was-processed="true">\n<h4>分类型特征重要性</h4>当该任务是分类型，需要用分类型模型时，可以使用<k>RandomForestClassifier</k>中的feature_importances_属性。\nX2 = dataset[[\'Open\', \'High\', \'Low\',\'Adj Close\', \'Volume\', \'Buy_Sell_on_Open\', \n     \'Buy_Sell\', \'Returns\']]\ny2 = dataset[\'Increase_Decrease\']\nclf = RandomForestClassifier(random_state=0, n_jobs=-1)\nmodel = clf.fit(X2, y2)\nimportances = model.feature_importances_\nindices = np.argsort(importances)[::-1]\nnames = [dataset.columns[i] for i in indices]\nplt.figure(figsize=(10,6))\nplt.title("Feature Importance")\nplt.bar(range(X2.shape[1]), importances[indices])\nplt.xticks(range(X2.shape[1]), names, rotation=90)\nplt.show()\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx3TUnNyxEic5pDJ1a2t1JvxYX5tQLZmiafW6KDqMCg2ViaxXYqctWXmQLQ/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx3TUnNyxEic5pDJ1a2t1JvxYX5tQLZmiafW6KDqMCg2ViaxXYqctWXmQLQ/640" data-was-processed="true">\n<h4>本案例中使用回归模型</h4>\nrf = RandomForestRegressor(n_jobs=-1, n_estimators=50, verbose=3)\nrf.fit(X,Y)\nranks["RF"] = ranking(rf.feature_importances_, colnames);\n下面介绍两个顶层特征选择算法，之所以叫做顶层，是因为他们都是建立在基于模型的特征选择方法基础之上的，例如回归和SVM，在不同的子集上建立模型，然后汇总最终确定特征得分。\n<h3 id="YYDStopic-10">RandomizedLasso</h3><k>RandomizedLasso的选择稳定性方法排序。</k>\n稳定性选择是一种基于二次抽样和选择算法相结合较新的方法，选择算法可以是回归、SVM或其他类似的方法。\n它的主要思想是在不同的数据子集和特征子集上运行特征选择算法，不断的重复，最终汇总特征选择结果，比如可以统计某个特征被认为是重要特征的频率（被选为重要特征的次数除以它所在的子集被测试的次数）。\n理想情况下，重要特征的得分会接近100%。\n稍微弱一点的特征得分会是非0的数，而最无用的特征得分将会接近于0。\nlambda_grid = np.linspace(0.001, 0.5, num=100)\nrlasso = RandomizedLasso(alpha=0.04)\nselector = StabilitySelection(base_estimator=rlasso, lambda_name=\'alpha\',\n         lambda_grid=lambda_grid, threshold=0.9, verbose=1)\nselector.fit(X, Y)\n# 运行随机Lasso的选择稳定性方法\nranks["rlasso/Stability"] = ranking(np.abs(selector.stability_scores_.max(axis=1)), colnames)\nprint(\'finished\')\n{\'Open\': 1.0, \'High\': 1.0, \'Low\': 0.76, \n\'Close\': 1.0, \'Adj Close\': 0.99, \'Volume\': 0.0, \n\'H-L\': 0.0, \'O-C\': 1.0, \'3day MA\': 1.0, \n\'10day MA\': 0.27, \'30day MA\': 0.75, \'Std_dev\': 0.0}\nfinished\n<h4>稳定性得分可视化</h4>\nfig, ax = plot_stability_path(selector)\nfig.set_size_inches(15,6)\nfig.show()\n<img class="lazy loaded" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx3PO9hdqCVeEUVukqUseQiaPCbOmvHD5RyAVLoSUYWiaMOlkKWho6ZWLA/640" src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdx3PO9hdqCVeEUVukqUseQiaPCbOmvHD5RyAVLoSUYWiaMOlkKWho6ZWLA/640" data-was-processed="true">\n<h4>查看得分超过阈值的变量索引及其得分</h4>\n# 获取所选特征的掩码或整数索引\nselected_variables = selector.get_support(indices=True)\nselected_scores = selector.stability_scores_.max(axis=1)\nprint(\'Selected variables are:\')\nprint(\'-----------------------\')\nfor idx, (variable, score) in enumerate(\n    zip(selected_variables, selected_scores[selected_variables])):\n print(\'Variable %d: [%d], \n    score %.3f\' % (idx + 1, variable, score))\nSelected variables are:\n-----------------------\nVariable 1: [0], score 1.000\nVariable 2: [1], score 1.000\nVariable 3: [3], score 1.000\nVariable 4: [4], score 0.990\nVariable 5: [7], score 1.000\nVariable 6: [8], score 1.000\n<h3 id="YYDStopic-11">RFE递归特征消除特征排序</h3>基于递归特征消除的特征排序。\n给定一个给特征赋权的外部评估器(如线性模型的系数)，递归特征消除(RFE)的目标是通过递归地考虑越来越小的特征集来选择特征。\n主要思想是反复的构建模型(如SVM或者回归模型)然后选出最好的(或者最差的)的特征(可以根据系数来选)。\n首先，在初始特征集上训练评估器，并通过任何特定属性或可调用属性来获得每个特征的重要性。\n然后，从当前的特征集合中剔除最不重要的特征。\n这个过程在训练集上递归地重复，直到最终达到需要选择的特征数。\n这个过程中特征被消除的次序就是特征的排序。\n因此，这是一种寻找最优特征子集的贪心算法。\nRFE的稳定性很大程度上取决于在迭代的时候底层用哪种模型。\n例如，假如RFE采用的普通的回归，没有经过正则化的回归是不稳定的，那么RFE就是不稳定的；假如采用的是Ridge，而用Ridge正则化的回归是稳定的，那么RFE就是稳定的。\nsklearn.feature_selection.RFE(estimator, *, n_features_to_select=None,\n  step=1, verbose=0, importance_getter=\'auto\')\n<k>estimator</k> <em>Estimator instance</em>\n一种带有""拟合""方法的监督学评估器，它提供关于特征重要性的信息(例如"coef_"、"feature_importances_")。\n<k>n_features_to_select</k> <em>int or float, default=None</em>\n要选择的功能的数量。\n如果\'None\'，则选择一半的特性。\n如果为整数，则该参数为要选择的特征的绝对数量。\n如果浮点数在0和1之间，则表示要选择的特征的分数。\n<k>step</k> <em>int or float, default=1</em>\n如果大于或等于1，那么\'step\'对应于每次迭代要删除的(整数)特征数。\n如果在(0.0,1.0)范围内，则\'step\'对应于每次迭代中要删除的特性的百分比(向下舍入)。\n<k>verbose</k> <em>int, default=0</em>\n控制输出的冗长。\n<k>importance_getter</k> <em>str or callable, default=\'auto\'</em>\n如果是\'auto\'，则通过估计器的\'coef_\'或\'feature_importances_\'属性使用特征重要性。\nlr = LinearRegression(normalize=True)\nlr.fit(X,Y)\n# 当且仅当剩下最后一个特性时停止搜索\nrfe = RFE(lr, n_features_to_select=1, verbose =3)\nrfe.fit(X,Y)\nranks["RFE"] = ranking(list(map(float, rfe.ranking_)),\n        colnames, order=-1)\nFitting estimator with 12 features.\n...\nFitting estimator with 2 features.\n<h3 id="YYDStopic-12">RFECV</h3><k>递归特征消除交叉验证。</k>\nSklearn提供了 RFE 包，可以用于特征消除，还提供了 RFECV ，可以通过交叉验证来对的特征进行排序。\n# 实例化估计器和特征选择器\nsvr_mod = SVR(kernel="linear")\nrfecv = RFECV(svr_mod, cv=5)\n# 训练模型\nrfecv.fit(X, Y)\nranks["RFECV"] = ranking(list(map(float, rfecv.ranking_)), colnames, order=-1)\n# Print support and ranking\nprint(rfecv.support_)\nprint(rfecv.ranking_)\nprint(X.columns)\n<h3 id="YYDStopic-13">LarsCV</h3><k>最小角度回归模型(Least Angle Regression)交叉验证。</k>\n# 删除第二步中不重要的特征\n# X = X.drop(\'sex\', axis=1)\n# 实例化\nlarscv = LarsCV(cv=5, normalize=False)\n# 训练模型\nlarscv.fit(X, Y)\nranks["LarsCV"] = ranking(list(map(float, larscv.ranking_)), colnames, order=-1)\n# 输出r方和估计alpha值\nprint(larscv.score(X, Y))\nprint(larscv.alpha_)\n以上是两个交叉验证，在对特征重要性要求高时可以使用。\n因运行时间有点长，这里大家可以自行运行得到结果。\n<h3 id="YYDStopic-14">创建特征排序矩阵</h3>创建一个空字典来存储所有分数，并求其平均值。\nr = {}\nfor name in colnames:\n r[name] = round(np.mean([ranks[method][name] \n        for method in ranks.keys()]), 2)\nmethods = sorted(ranks.keys())\nranks["Mean"] = r\nmethods.append("Mean")\nprint("\t%s" % "\t".join(methods))\nfor name in colnames:\n print("%s\t%s" % (name, "\t".join(map(str, \n       [ranks[method][name] for method in methods]))))\n	Lasso	LinReg	RF	RFE	Ridge	rlasso/Stability	Mean\nOpen	1.0	1.0	0.02	0.91	0.47	1.0	0.73\nHigh	0.14	0.0	0.1	0.36	0.06	1.0	0.28\nLow	0.02	0.0	0.08	0.73	0.05	0.76	0.27\nClose	0.14	0.0	0.64	0.55	0.32	1.0	0.44\nAdj Close	0.02	1.0	1.0	0.82	1.0	0.99	0.8\nVolume	0.0	0.0	0.0	0.0	0.0	0.0	0.0\nH-L	0.0	0.0	0.0	0.45	0.01	0.0	0.08\nO-C	0.85	1.0	0.0	1.0	0.53	1.0	0.73\n3day MA	0.0	0.0	0.0	0.27	0.01	1.0	0.21\n10day MA	0.0	0.0	0.02	0.09	0.0	0.27	0.06\n30day MA	0.0	0.0	0.0	0.18	0.0	0.75	0.16\nStd_dev	0.0	0.0	0.0	0.64	0.01	0.0	0.11\n<h3 id="YYDStopic-15">绘制特征重要性排序图</h3>将平均得到创建<k>DataFrame</k>数据框，从高到低排序，并利用可视化方法将结果展示出。\n这样就一目了然，每个特征重要性大小。\nmeanplot = pd.DataFrame(list(r.items()), columns= [\'Feature\',\'Mean Ranking\'])\n# 排序\nmeanplot = meanplot.sort_values(\'Mean Ranking\', ascending=False)\ng=sns.factorplot(x="Mean Ranking", y="Feature", data = meanplot, kind="bar", \n      size=14, aspect=1.9, palette=\'coolwarm\')\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/CBC1V6TTLbYo7n7x3u3cfJ2l6p8AeCdxTvX7CvcwOuGlXaEb5ayJPI35c5I3e7xFpT8ObxBKQ3REIMLibI85rLw/640">\n推荐阅读\n1、<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;mid=2652586506&amp;idx=2&amp;sn=8b226620468ebf3b69c514401ca4b735&amp;chksm=84656a40b312e356a765a4f64cc27d3315bbdbdc8ccd88c4eccf9b431b64d131f6329e5d1bb7&amp;scene=21#wechat_redirect" textvalue="一文详解 RNN 股票预测实战（Python代码）" linktype="text" imgurl="" imgdata="null" data-itemshowtype="11" tab="innerlink" data-linktype="2">一文详解 RNN 股票预测实战（Python代码）</a>\n2、<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;mid=2652581207&amp;idx=2&amp;sn=bb077138fd4b0e8b81e2e11a44682f01&amp;chksm=8465051db3128c0ba7fcff26fb50b72c284622cd9e7eefc000fa8b456c8f3b5206cd9d4ce5e6&amp;scene=21#wechat_redirect" textvalue="关于“数据分析”如何快速入门一些基本思路" linktype="text" imgurl="" imgdata="null" data-itemshowtype="11" tab="innerlink" data-linktype="2">关于“数据分析”如何快速入门一些基本思路</a>\n3、<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;mid=2652587312&amp;idx=2&amp;sn=e49850868c977904ac5d803c43acabb7&amp;chksm=84656d7ab312e46c7de429cac932623c276ce51a47e567144cd70e8c5ab9ad1b6351652b38a0&amp;scene=21#wechat_redirect" textvalue="超级攻略！Pandas\NumPy\Matrix 用于金融数据准备" linktype="text" imgurl="" imgdata="null" data-itemshowtype="11" tab="innerlink" data-linktype="2">超级攻略！Pandas\NumPy\Matrix 用于金融数据准备</a>\n\n',
'<h2>Handy Automation Scripts</h2>\n<div id="AutomationScriptstoc"><a href="#AutomationScriptstopic-0" target="_self">Your Friend For Reading Articles</a><br><a href="#AutomationScriptstopic-1" target="_self">One-Click Sketching</a><br><a href="#AutomationScriptstopic-2" target="_self">Stay Up With Top Headlines</a><br><a href="#AutomationScriptstopic-3" target="_self">Stocks Updates On The Start</a><br><a href="#AutomationScriptstopic-4" target="_self">Bulk Email Sender</a><br><a href="#AutomationScriptstopic-5" target="_self">No Time For EDA</a><br><a href="#AutomationScriptstopic-6" target="_self">Smart Login To Different Sites</a><br><a href="#AutomationScriptstopic-7" target="_self">Be Safe &amp; Watermark Your Images</a><br><a href="#AutomationScriptstopic-8" target="_self">Remember That</a><br><a href="#AutomationScriptstopic-9" target="_self">Google Scraper</a><br><a href="#AutomationScriptstopic-10" target="_self">Converting PDF To Audio Files</a><br><a href="#AutomationScriptstopic-11" target="_self">Playing Random Music From The List</a><br><a href="#AutomationScriptstopic-12" target="_self">No BookMarks Anymore</a><br><a href="#AutomationScriptstopic-13" target="_self">Getting Wikipedia Information</a><br><a href="#AutomationScriptstopic-14" target="_self">Smart Weather Information</a><br><a href="#AutomationScriptstopic-15" target="_self">Sending Emails With Attachment</a><br><a href="#AutomationScriptstopic-16" target="_self">Shorting URLs</a><br><a href="#AutomationScriptstopic-17" target="_self">Downloading Youtube Videos</a><br><a href="#AutomationScriptstopic-18" target="_self">Cleaning Download Folder</a><br><a href="#AutomationScriptstopic-19" target="_self">Sending Text Messages</a><br><a href="#AutomationScriptstopic-20" target="_self">Converting hours to seconds</a><br><a href="#AutomationScriptstopic-21" target="_self">Raising a number to the power</a><br><a href="#AutomationScriptstopic-22" target="_self">If/else statement</a><br><a href="#AutomationScriptstopic-23" target="_self">Convert images to JPEG</a><br><a href="#AutomationScriptstopic-24" target="_self">Download Google images</a><br><a href="#AutomationScriptstopic-25" target="_self">Read battery level of Bluetooth device</a><br><a href="#AutomationScriptstopic-26" target="_self">Delete Telegram messages</a><br><a href="#AutomationScriptstopic-27" target="_self">Get song lyrics</a><br><a href="#AutomationScriptstopic-28" target="_self">Heroku hosting</a><br><a href="#AutomationScriptstopic-29" target="_self">Github activity</a><br><a href="#AutomationScriptstopic-30" target="_self">Removing duplicate code</a><br><a href="#AutomationScriptstopic-31" target="_self">Sending emails</a><br><a href="#AutomationScriptstopic-32" target="_self">Find specific files on your system</a><br><a href="#AutomationScriptstopic-33" target="_self">Generating random passwords</a><br><a href="#AutomationScriptstopic-34" target="_self">Print odd numbers</a><br><a href="#AutomationScriptstopic-35" target="_self">Get date value</a><br><a href="#AutomationScriptstopic-36" target="_self">Removing items from a list</a><br><a href="#AutomationScriptstopic-37" target="_self">Count list items</a><br><a href="#AutomationScriptstopic-38" target="_self">Text grabber</a><br><a href="#AutomationScriptstopic-39" target="_self">Tweet search</a><br></div></center>\n<br>\n<br>\n<a href="https://medium.com/pythoneers/10-really-helpful-automation-scripts-you-need-to-try-using-python-7dda9408fa74">Automation scripts you need to try</a>.\n<h3 id="AutomationScriptstopic-0">Your Friend For Reading Articles</h3>\nThis automation script scrapes the article content from medium and then reads it loud and clear. \nIf you change the script a little bit then it can be used to read articles from other websites too. \nI use this script when I am not in the mood to read but to listen.\n<b>Libraries:-</b>\n<b>Beautiful Soup</b> is a Python package for parsing HTML and XML documents.\n<b>requests</b> Let’s You Establish a Connection Between Client and Server With Just One Line of Code.\n<b>Pyttsx3, </b>converts text into speech, with control over rate, frequency, and voice.\nimport pyttsx3\nimport requests\nfrom bs4 import BeautifulSoup\nengine = pyttsx3.init(\'sapi5\')\nvoices = engine.getProperty(\'voices\')\nnewVoiceRate = 130        ## Reduce The Speech Rate\nengine.setProperty(\'rate\',newVoiceRate)\nengine.setProperty(\'voice\', voices[1].id)\ndef speak(audio):\n  engine.say(audio)\n  engine.runAndWait()\ntext = str(input("Paste article\n"))\nres = requests.get(text)\nsoup = BeautifulSoup(res.text,\'html.parser\')\narticles = []\nfor i in range(len(soup.select(\'.p\'))):\n article = soup.select(\'.p\')[i].getText().strip()\n articles.append(article)\ntext = " ".join(articles)\nspeak(text)\n# engine.save_to_file(text, \'test.mp3\') ## If you want to save the speech as a audio file\nengine.runAndWait()\n<h4>Script Applications:-</h4>\nAudioBooks\nRead Wikipedia Articles\nQ&amp;A Bots\n<h3 id="AutomationScriptstopic-1">One-Click Sketching</h3>\nI just love this script. \nIt lets you convert your amazing images into a pencil sketch with a few lines of code. \nYou can use this script to impress someone by gifting them their pencil sketch.\n<b>Libraries:-\nOpencv, </b>is a python library that is designed to solve Computer Vision problems. \nIt has many inbuilt methods to perform the biggest tasks in fewer lines of code.\n  """ Photo Sketching Using Python """\n  import cv2\n  img = cv2.imread("elon.jpg")\n  ## Image to Gray Image\n  gray_image = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n  ## Gray Image to Inverted Gray Image\n  inverted_gray_image = 255-gray_image\n  ## Blurring The Inverted Gray Image\n  blurred_inverted_gray_image = cv2.GaussianBlur(inverted_gray_image, (19,19),0)\n  ## Inverting the blurred image\n  inverted_blurred_image = 255-blurred_inverted_gray_image\n  ### Preparing Photo sketching\n  sketck = cv2.divide(gray_image, inverted_blurred_image,scale= 256.0)\n  cv2.imshow("Original Image",img)\n  cv2.imshow("Pencil Sketch", sketck)\n  cv2.waitKey(0)\n<img class="lazy" data-src="https://miro.medium.com/max/875/1*LOUJzRP_JJwOQbqswIJKQA.png">\nResult — Image By Author\n<h4>Script Applications:-</h4>\nBuilding OCR Software\nDetecting Number Plate\nDetecting Edges, Creating Funky Images\n<h3 id="AutomationScriptstopic-2">Stay Up With Top Headlines</h3>\nEveryone wants to stay up to date with the latest and trending news of your country. \nThis automation script can do the work for you. \nIt uses an external API to extract all the trending news of your country, state, city, etc. \nThis script increases productivity and knowledge.\nThe external API that is used in the script is news API by google. \nIt offers the latest and trending news, different articles about a particular topic like tesla, business headlines, articles published by a journal, trending news between a timeline, etc.\n<b>Libraries:-\nPyttsx3 </b>is a text-to-speech Library In Python<b>. \n&amp; Requests.</b>\nimport pyttsx3 \nimport requests\nengine = pyttsx3.init(\'sapi5\')\nvoices = engine.getProperty(\'voices\')\nengine.setProperty(\'voice\', voices[0].id)\ndef speak(audio):\n engine.say(audio)\n engine.runAndWait()\ndef trndnews(): \n url = " http://newsapi.org/v2/top-headlines?country=us&amp;apiKey=GET_YOUR_OWN"\n page = requests.get(url).json() \n article = page["articles"] \n results = [] \n for ar in article: \n  results.append(ar["title"]) \n for i in range(len(results)): \n  print(i + 1, results[i]) \n speak(results)\n \ntrndnews() \n<h4>Script Applications:-</h4>\nML Fake News Detection.\n<h3 id="AutomationScriptstopic-3">Stocks Updates On The Start</h3>\nBuying and selling stocks is one of the trendiest ways of earning money nowadays. \nA stock known as equity represents the ownership of a fraction of a corporation.\nThis automation script will give you the stock price of stock whenever you open your desktop. \nAlso with the same script, you can generate past years\' data of the stock for better knowledge of the stock.\nTo Run This Script On The Start, You Can Simply Add it to the <a href="https://stackoverflow.com/questions/4438020/how-to-start-a-python-file-while-windows-starts" target="_blank">window startup folder</a>. \nJust Press win+r and then type shell:startup paste your script there.\n<b>Libraries:- Pyfinance, yahoo_fin</b>\n\'\'\' Live price of The Stock \'\'\'\nfrom yahoo_fin import stock_info\nlive_price = stock_info.get_live_price("TSLA")\nprint(round(live_price,2)," USD")\n\'\'\' Stock Price From 2019 to 2021 \'\'\'\nimport yfinance as yf\nstockSymbol = \'TSLA\'\nstockData = yf.Ticker(stockSymbol)\nstockDf_past_2 = stockData.history(period=\'5d\', start=\'2019-1-1\', end=\'2021-12-31\')\nprint(stockDf_past_2)\n<h4>Script Applications:-</h4>\nThis Script Can Be Used For Creating Algo Trading Bots, Stock Analysis, Researches, etc.\n<h3 id="AutomationScriptstopic-4">Bulk Email Sender</h3>\nIn My Previous Article About <a href="https://medium.com/pythoneers/10-really-helpful-automation-scripts-you-need-to-try-using-python-7dda9408fa74">Automation Scripts</a>, I talked about how you can automate sending emails with attachments. \nThis automation script is a level up to that script. \nIt allows you to send multiple emails at a time with the same or different data, and messages.\n<b>Libraries:-\nEmail, </b>is a python library that is used to manage emails.\n<b>Smtlib</b>, defines a session object over which we can send emails and files.\n<b>Pandas</b>, Reading the CSV or Excel file.\nimport smtplib \nfrom email.message import EmailMessage\nimport pandas as pd\ndef send_email(remail, rsubject, rcontent):\n email = EmailMessage()        ## Creating a object for EmailMessage\n email[\'from\'] = \'The Pythoneer Here\'   ## Person who is sending\n email[\'to\'] = remail       ## Whom we are sending\n email[\'subject\'] = rsubject      ## Subject of email\n email.set_content(rcontent)      ## content of email\n with smtplib.SMTP(host=\'smtp.gmail.com\',port=587)as smtp:  \n  smtp.ehlo()         ## server object\n  smtp.starttls()        ## used to send data between server and client\n  smtp.login(SENDER_EMAIL,SENDER_PSWRD)    ## login id and password of gmail\n  smtp.send_message(email)     ## Sending email\n  print("email send to ",remail)     ## Printing success message\nif __name__ == \'__main__\':\n df = pd.read_excel(\'list.xlsx\')\n length = len(df)+1\n for index, item in df.iterrows():\n  email = item[0]\n  subject = item[1]\n  content = item[2]\n  send_email(email,subject,content)\n<h4>Script Applications:-</h4>\nCan Be Used For Sending Newsletters.\nStay Connected With All Your Clients.\nBecome a Genuine Medium Member With The Cost of One Pizza. \nIt’s Just <b>5$ </b>a month. \nYou Can Use <a href="https://abhayparashar31.medium.com/membership">My Referral Link</a> To Become One. \n“Don’t Just Read, Support The Writer Too”\n<h3 id="AutomationScriptstopic-5">No Time For EDA</h3>\nEda(exploratory data analysis) refers to the initial investigation done to understand the data more clearly. \nIt is one of the most important stages of the data science project lifecycle. \nIt is also referred to as the decision-making stage because, by the output analysis of this stage model, algorithms, parameters, weights everything is chosen.\nAnyone who knows a little bit about data science will agree with me that EDA is a time-consuming process. \nWell, not anymore. \nThis automation script used an amazing library <a href="https://github.com/man-group/dtale" target="_blank">Dtale</a> and generate a quick summary report of the data given to it with just one line of code.\nThere are also many similar libraries that can also generate a quick summary like Dtale for example Autoviz, Sweetviz, etc.\nimport seaborn as sns\n### Printing Inbuilt Datasets of Seaborn Library\nprint(sns.get_dataset_names())\n### Loading Titanic Dataset\ndf=sns.load_dataset(\'titanic\')\n### Importing The Library\nimport dtale\n#### Generating Quick Summary\ndtale.show(df)\n<h4>Script Applications:-</h4>\nGives a Quick Review About The Dataset. \nBest for beginners.\n<h3 id="AutomationScriptstopic-6">Smart Login To Different Sites</h3>\nTo prevent yourself from hackers you should always log out from your social media account like Facebook, Twitter, Instagram, etc. \nOnce you are done with your session. \nEntering use id and password each time is not very joyful work to do. \nThis automation script will log in to different sites for you and once you are done the session is closed automatically.\n<b>Libraries:-\nSelenium </b>is an open-source web automation tool used for testing and automation.\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\nPATH = \'chromedriver.exe\' ##Same Directory as Python Program\ndriver = webdriver.Chrome(executable_path=PATH)\n##### Login Functions \ndef login_fb(fid,fpsd):\n driver.get("https://www.facebook.com/")\n def login(id,password):\n  email = driver.find_element_by_id("email")\n  email.send_keys(id)\n  Password = driver.find_element_by_id("pass")\n  Password.send_keys(password)\n  button = driver.find_element_by_id("u_0_d_Dw").click()\n  pass\n login(fid,fpsd)\n### Like Facebook Write Login Function For Other Platforms Too.\ndef login_insta():\n pass\ndef login_medium():\n pass\ndef login_twitter():\n pass\ndef login_linkedin():\n pass\nlogin_fb("YOUR_LOGIN_ID", "YOUR_PASSWORD")\nlogin_insta()\nlogin_medium()\nlogin_twitter()\nlogin_linkedin()\n<a href="https://medium.com/pythoneers/automate-facebook-posts-using-python-4d17b3a26100">Related Article</a>\nThis Automation Script Saves Time, and Increase Productivity.\n<h3 id="AutomationScriptstopic-7">Be Safe &amp; Watermark Your Images</h3>\nInternet is filled with digital thieves, who always look for other people’s work to use it as their own without giving proper attribution. \nImages are one of the most stoled properties on the internet. \nYou clicked a masterpiece, upload it on the internet to showcase it to the world and some thief come and stole it and published it with their own name. \nTo prevent this you should always watermark all images with your unique sign. \nThis automation script will do the work for you.\n<b>Libraries:- Opencv</b>\n<b>Process:- </b>We are basically overlaying one image (watermark) on top of another image (original image) with center coordinates. \nwith little changes and a loop, you can watermark hundreds of images in minutes.\nimport cv2\nwatermark = cv2.imread("watermark.png")\nimg = cv2.imread("no-problem.jpg")\nh_img, w_img, _ = img.shape\ncenter_x = int(w_img/2)\ncenter_y = int(h_img/2)\nh_watermark, w_watermark, _ = watermark.shape\ntop_y = center_y - int(h_watermark/2)\nleft_x = center_x - int(w_watermark/2)\nbottom_y = top_y + h_watermark\nright_x = left_x + w_watermark\nposition = img[top_y:bottom_y, left_x:right_x]\nresult = cv2.addWeighted(position, 1, watermark, 0.5, 0)\nimg[top_y:bottom_y, left_x:right_x] = result\ncv2.imwrite("watermarked_image.jpg", img)\ncv2.imshow("Image With Watermark", img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n<h4>Script Applications:-</h4>\nOverlaying Two Images.\nImage Filtering &amp; Masking.\n<h3 id="AutomationScriptstopic-8">Remember That</h3>\nSometimes when working on a project you get disturbed by some other task that also needs to be done the same day and most of the time you forgot it. \nNow anymore, this script will remember everything for you and remind you about it after a certain time as a desktop notification.\n<b>Libraries:- win10toast </b>is python library that sends a desktop notification.\nfrom win10toast import ToastNotifier\nimport time\ntoaster = ToastNotifier()\nheader = input("What You Want Me To Remember\n")\ntext = input("Releated Message\n")\ntime_min=float(input("In how many minutes?\n"))\ntime_min = time_min * 60\nprint("Setting up reminder..")\ntime.sleep(2)\nprint("all set!")\ntime.sleep(time_min)\ntoaster.show_toast(f"{header}", f"{text}", duration=10, threaded=True)\nwhile toaster.notification_active(): time.sleep(0.005)  \n<h3 id="AutomationScriptstopic-9">Google Scraper</h3>\nGoogle is one of the biggest and most used search engines. \nThere are over 3.8 million searches done per minute around the globe. \nMost of them are just queries that get answered on the first result page. \nThis script will scrape the results from google search and generate answers without even going to actual google.\n<b>Libraries:- requests, BeautifulSoup, and Tkinter </b>a GUI library in python.\n<b>Process:- </b>At first with the help of Tkinter, a GUI is created that is used to take the query of the user. \nOnce the user entered the query it is sent to the google scraper function that scrapes the results based on the query and generates the answers. \nThen with the help of the showinfo class in Tkinter, the results are shown as a pop-up notification.\nfrom tkinter import *\nfrom tkinter.messagebox import showinfo\nfrom bs4 import BeautifulSoup \nimport requests\nheaders = {\'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\'}\ndef action():\n ### Code For Receiving Query\n query=textF.get()\n textF.delete(0,END)\n print(query)\n def google(query):\n  query = query.replace(" ","+")\n  try:\n   url = f\'https://www.google.com/search?q={query}&amp;oq={query}&amp;aqs=chrome..69i57j46j69i59j35i39j0j46j0l2.4948j0j7&amp;sourceid=chrome&amp;ie=UTF-8\'\n   res = requests.get(url,headers=headers)\n   soup = BeautifulSoup(res.text,\'html.parser\')\n  except:\n   print("Make sure you have a internet connection")\n  try:\n   try:\n    ans = soup.select(\'.RqBzHd\')[0].getText().strip()\n   \n   except:\n    try:\n     title=soup.select(\'.AZCkJd\')[0].getText().strip()\n     try:\n      ans=soup.select(\'.e24Kjd\')[0].getText().strip()\n     except:\n      ans=""\n     ans=f\'{title}\n{ans}\'\n     \n    except:\n     try:\n      ans=soup.select(\'.hgKElc\')[0].getText().strip()\n     except:\n      ans=soup.select(\'.kno-rdesc span\')[0].getText().strip()\n  \n  except:\n   ans = "can\'t find on google"\n  return ans\n \n result = google(str(query))\n showinfo(title="Result For Your Query", message=result)\nmain = Tk()\nmain.geometry("300x100")\nmain.title("Karl")\ntop = Frame(main)\ntop.pack(side=TOP)\ntextF = Entry(main,font=("helvetica",14,"bold"))\ntextF.focus()\ntextF.pack(fill=X,pady=5)\ntextF.insert(0,"Enter your query")\ntextF.configure(state=DISABLED)\ndef on_click(event):\n textF.configure(state=NORMAL)\n textF.delete(0,END)\n textF.unbind(\'&lt;Button-1&gt;\',on_click_id)\non_click_id = textF.bind(\'&lt;Button-1&gt;\',on_click)\nbtn = Button(main,text="Search",font=("Verdana",16),command=action)\nbtn.pack()\nmain.mainloop()\n<h3 id="AutomationScriptstopic-10">Converting PDF To Audio Files</h3>This automation task is one of my favorites. \nI use it almost every day. \nHere our task is to write a python script that can convert pdfs into audio files.\n<b>Libraries:- \nPyPDF, is a library in python that is used to read text from a pdf file.\nPyttsx3, is a text-to-speech convert library.\nProcess:- </b>We first use the PyPDF library to read text from the pdf file and then we convert the text into speech and save it as an audio file.\nimport pyttsx3,PyPDF2\npdfreader = PyPDF2.PdfFileReader(open(\'story.pdf\',\'rb\'))\nspeaker = pyttsx3.init()\nfor page_num in range(pdfreader.numPages):   \n text = pdfreader.getPage(page_num).extractText()  ## extracting text from the PDF\n cleaned_text = text.strip().replace(\'\n\',\' \')  ## Removes unnecessary spaces and break lines\n print(cleaned_text) ## Print the text from PDF\n #speaker.say(cleaned_text) ## Let The Speaker Speak The Text\n speaker.save_to_file(cleaned_text,\'story.mp3\')  ## Saving Text In a audio file \'story.mp3\'\n speaker.runAndWait()\nspeaker.stop()\n<h4>Script Applications:-</h4>\nAudiobooks.\nStoryteller.\nBy Adding Little Bit of Web Scraping, The Same Script Can Be Used To Read Articles From Sites Like Medium and WordPress.\n<h3 id="AutomationScriptstopic-11">Playing Random Music From The List</h3>I have a good collection of songs that I love to listen to while working on my projects. \nFor a music lover like me, this script is very useful. \nIt randomly picks a song from a folder of songs.\n<b>Libraries:-\nOS, is a module in python that deals with different tasks related to operating systems Like Opening, deleting, renaming, closing a file, etc.\nrandom, module provides randomness.\nProcess:- </b>At First With The Help of the OS Module We Detect All The Music Files Inside The Folder and store them in a list, then we generate a random number in the range of length of the folder. \nAfter Generating the random number we use it to run the music file using os.startfile() function.\nmusic_dir = \'G:\\new english songs\'\nsongs = os.listdir(music_dir)\nsong = random.randint(0,len(songs))\nprint(songs[song])  ## Prints The Song Name\nos.startfile(os.path.join(music_dir, songs[0])) \n<h4>Script Features:-</h4>\nPlaying Music, Videos.\nCan Be Used To Run Random Files Inside a Folder.\n<h3 id="AutomationScriptstopic-12">No BookMarks Anymore</h3>Every day before going to bed i search the internet to find some good content to read the next day. \nMost of the time i bookmark the website or article i came across but day by day my bookmarks have increased so much that now i have over 100+ bookmarks around my browsers. \nSo i figured out a different way to tackle this problem with the help of python. \nNow i copy-paste the link to those websites in a text file and every morning i run my script that opens all those websites again in my browser.\n<b>Libraries:-\nwebbrowser, is a library in python that opens URLs inside the default browser automatically.\nProcess:- </b>The Process is pretty simple, the script reads different URLs from the files and opens each URL in the browser with the help of a web browser\'s library.\n<img class="lazy" data-src="https://miro.medium.com/max/875/1*cT9CLCOmVkVls_Un0OXCAg.png">\n<h3 id="AutomationScriptstopic-13">Getting Wikipedia Information</h3>Wikipedia is a great source of knowledge and information. \nThis script lets you fetch every information from Wikipedia directly from your command line.\n<b>Libraries:-\nWikipedia is a python library that makes parsing data from Wikipedia super easy.</b>\nWorking:- The Script Will Takes a Query, Parse The Results From Wikipedia For It and Then Speaks The Results Out Loud.\nimport wikipedia\nimport pyttsx3 \nengine = pyttsx3.init(\'sapi5\')\nvoices = engine.getProperty(\'voices\')\nengine.setProperty(\'voice\', voices[0].id)\ndef speak(audio):\n engine.say(audio)\n engine.runAndWait()\nquery = input("What You Want To Ask ??")\nresults = wikipedia.summary(query, sentences=2)\nspeak("According to Wikipedia\n")\nprint(results)\nspeak(results)\n<h3 id="AutomationScriptstopic-14">Smart Weather Information</h3>No one wants to get stuck in the rain or heavy snowfall. \nEveryone wants to be updated with the weather forecast. \nThis automation script will send weather information as a desktop notification whenever you opened your pc.\n<b>Libraries:-\nrequests, the library that makes sending HTTP requests simpler and more human-friendly with one single line of code it can establish a connection between client and target server.\nBeautiful Soup </b>is a Python package for parsing HTML and XML documents.\nToastNotifier, a python library that sends a desktop notification.\nheaders = {\'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\'}\ndef weather(city):\n city=city.replace(" ","+")\n res = requests.get(f\'https://www.google.com/search?q={city}&amp;oq={city}&amp;aqs=chrome.0.35i39l2j0l4j46j69i60.6128j1j7&amp;sourceid=chrome&amp;ie=UTF-8\',headers=headers)\n soup = BeautifulSoup(res.text,\'html.parser\')   \n location = soup.select(\'#wob_loc\')[0].getText().strip()  \n current_time = soup.select(\'#wob_dts\')[0].getText().strip() \n info = soup.select(\'#wob_dc\')[0].getText().strip() \n weather = soup.select(\'#wob_tm\')[0].getText().strip()\n information = f"{location} \n {current_time} \n {info} \n {weather} °C "\n \n toaster = ToastNotifier()\n toaster.show_toast("Weather Information",\n f"{information}",\n duration=10,\n threaded=True)\n while toaster.notification_active(): time.sleep(0.005)   \n# print("enter the city name")\n# city=input()\ncity = "London"\ncity=city+" weather"\nweather(city)\n<a rel="noopener" href="/pythoneers/python-script-that-sends-weather-information-as-notification-693aca5edc90">Understand The Code Better</a>\n<h3 id="AutomationScriptstopic-15">Sending Emails With Attachment</h3>As a freelancer every day, I need to send multiple emails that look almost the same with little difference. \nThis script helps us to send multiple emails at the same time with different names and content.\n<b>Libraries:-\nEmail, is a python library that is used to manage emails.\nSmtlib, defines a session object over which we can send emails and files.</b>\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\nbody = \'\'\'\nHello, Admin\nI am attaching The Sales Files With This Email.\nThis Year We Got a Wooping 200% Profit One Our Sales.\nRegards,\nTeam Sales\nxyz.com\n\'\'\'\n#Sender Email addresses and password\nsenders_email = \'deltadelta371@gmail.com\'\nsender_password = \'delta@371\'\nreveiver_email = \'parasharabhay13@gmail.com\'\n#MIME Setup\nmessage = MIMEMultipart()\nmessage[\'From\'] = senders_email\nmessage[\'To\'] = reveiver_email\nmessage[\'Subject\'] = \'Sales Report 2021-- Team Sales\'\nmessage.attach(MIMEText(body, \'plain\'))\n## File\nattach_file_name = \'car-sales.csv\'\nattach_file = open(attach_file_name, \'rb\') \npayload = MIMEBase(\'application\', \'octate-stream\')\npayload.set_payload((attach_file).read())\nencoders.encode_base64(payload) \npayload.add_header(\'Content-Decomposition\', \'attachment\', filename=attach_file_name)\nmessage.attach(payload)\n#SMTP Connection For Sending Email\nsession = smtplib.SMTP(\'smtp.gmail.com\', 587) #use gmail with port\nsession.starttls() #enable security\nsession.login(senders_email, sender_password) #login with mail_id and password\ntext = message.as_string()\nsession.sendmail(senders_email, reveiver_email, text)\nsession.quit()\nprint(\'Mail Sent\')\n<h3 id="AutomationScriptstopic-16">Shorting URLs</h3>Sometimes those big URLs become very annoying to read and share. \nThis script uses an external API to short the URL.\nfrom __future__ import with_statement\nimport contextlib\ntry:\n	from urllib.parse import urlencode\nexcept ImportError:\n	from urllib import urlencode\ntry:\n	from urllib.request import urlopen\nexcept ImportError:\n	from urllib2 import urlopen\nimport sys\ndef make_tiny(url):\n	request_url = (\'http://tinyurl.com/api-create.php?\' + \n	urlencode({\'url\':url}))\n	with contextlib.closing(urlopen(request_url)) as response:\n		return response.read().decode(\'utf-8\')\ndef main():\n	for tinyurl in map(make_tiny, sys.argv[1:]):\n		print(tinyurl)\nif __name__ == \'__main__\':\n	main()\n \n\'\'\'\n-----------------------------OUTPUT------------------------\npython url_shortener.py https://www.wikipedia.org/\nhttps://tinyurl.com/buf3qt3\n\'\'\'\n \n<h3 id="AutomationScriptstopic-17">Downloading Youtube Videos</h3>I use youtube for 2–3 hours every day sometimes even more. \nMost of my learnings come from youtube because it is free and contains a vast amount of information. \nThere are certain videos that stand out from others that I want to store with me to watch later even when I don’t have an internet connection. \nThis script does the job for me, by downloading the youtube video for me. \nIt uses an external API to do the job.\n<b>Libraries:-\npytube, is a lightweight Python library for downloading youtube videos.\nTkinter, is one of the most famous and useful GUI Development Library That Makes It Super Easy to Create Awesome GUIs With Fewer Efforts.</b>\nWhy Tkinter:-\nThe Whole Concept of the script is to create an interface through which you can download youtube videos by just putting a link. \nThat Interface can’t be our CLI so we are going to create a simple GUI for our script. \nYou Can make it even better by <a rel="noopener" href="/pythoneers/python-without-console-330be0c288ac">running your python code without a console with just one click</a>.\n<figure><figcaption><a href="https://gist.github.com/Abhayparashar31/9508ecdb5fa7ca16f6283db56cf7a604" rel="noopener ugc nofollow" target="_blank">Complete GUI Code</a>\nfrom pytube import  YouTube  \nimport pytube  \ntry:\n video_url = \'https://www.youtube.com/watch?v=lTTajzrSkCw\'   \n youtube = pytube.YouTube(video_url)  \n video = youtube.streams.first()  \n video.download(\'C:/Users/abhay/Desktop/\')  \n print("Download Successfull !!")\nexcept:\n print("Something Went Wrong !!")\n<h3 id="AutomationScriptstopic-18">Cleaning Download Folder</h3>One of the messiest things in this world is the download folder of a developer. \nWhen writing a blog, working on a project, something similar we just download images and save them with ugly and funny names like asdfg.jpg.\nThis python script will clean your download folder by renaming and deleting certain files based on some condition.\n<b>Libraries:- OS</b>\nimport os\nfolder_location = \'C:\\Users\\user\\Downloads\\demo\'\nos.chdir(folder_location)\nlist_of_files = os.listdir()\n## Selecting All Images\nimages = [content for content in list_of_files if content.endswith((\'.png\',\'.jpg\',\'.jpeg\'))] \nfor index, image in  enumerate(images):\n os.rename(image,f\'{index}.png\')\n## Deleting All Images\n################## Write Your Script Here ######## Try To Create Your Own Code \n<h3 id="AutomationScriptstopic-19">Sending Text Messages</h3>There are many free text message services available on the internet like Twillo, fast2sms, etc.\nFast2sms provide 50 free messages with a prebuild template to connect your script with their API. \nThis script will let us send text SMS to any number directly through our command-line interface.\nimport requests\nimport json\ndef send_sms(number, message):\n url = \'https://www.fast2sms.com/dev/bulk\'\n params = {\n \'authorization\': \'FIND_YOUR_OWN\',\n \'sender_id\': \'FSTSMS\',\n \'message\': message,\n \'language\': \'english\',\n \'route\': \'p\',\n \'numbers\': number\n }\n response = requests.get(url, params=params)\n dic = response.json()\n #print(dic)\n return dic.get(\'return\')\nnum = int(input("Enter The Number:\n"))\nmsg = input("Enter The Message You Want To Send:\n")\ns = send_sms(num, msg)\nif s:\n print("Successfully sent")\nelse:\n print("Something went wrong..")\n<h3 id="AutomationScriptstopic-20">Converting hours to seconds</h3>\nWhen working on projects that require you to convert hours into seconds, you can use the following Python script.\ndef convert(seconds):\n seconds = seconds % (24 * 3600)\n hour = seconds // 3600\n seconds %= 3600\n minutes = seconds // 60\n seconds %= 60\n return "%d:%02d:%02d" % (hour, minutes, seconds)\n# Driver program\nn = 12345\nprint(convert(n))\n<h3 id="AutomationScriptstopic-21">Raising a number to the power</h3>\nAnother popular Python script calculates the power of a number. For example, 2 to the power of 4. Here, there are at least three methods to choose from. You can use the <em>math.pow(),</em> <em>pow(),</em> or **. Here is the script.\nimport math\n# Assign values to x and n\nx = 4\nn = 3\n# Method 1\npower = x ** n\nprint("%d to the power %d is %d" % (x,n,power))\n# Method 2\npower = pow(x,n)\nprint("%d to the power %d is %d" % (x,n,power))\n# Method 3\npower = math.pow(2,6.5)\nprint("%d to the power %d is %5.2f" % (x,n,power))\n<h3 id="AutomationScriptstopic-22">If/else statement</h3>\nThis is arguably one of the most used <a href="https://codesource.io/ways-to-implement-python-switch-case-statement/">statements in Python</a>. It allows your code to execute a function if a certain condition is met. Unlike other languages, you don’t need to use curly braces. Here is a simple if/else script.\n# Assign a value\nnumber = 50\n# Check the is more than 50 or not\nif (number &gt;= 50):\n print("You have passed")\nelse:\n print("You have not passed")\n<h3 id="AutomationScriptstopic-23">Convert images to JPEG</h3>\nThe most conventional systems rarely accept image formats such as PNG. As such, you’ll be required to convert them into JPEG files. Luckily, there’s a Python script that allows you to automate this process.\nimport os\nimport sys\nfrom PIL import Image\nif len(sys.argv) &gt; 1:\n if os.path.exists(sys.argv[1]):\n  im = Image.open(sys.argv[1])\n  target_name = sys.argv[1] + ".jpg"\n  rgb_im = im.convert(\'RGB\')\n  rgb_im.save(target_name)\n  print("Saved as " + target_name)\n else:\n  print(sys.argv[1] + " not found")\nelse:\n print("Usage: convert2jpg.py &lt;file&gt;")\n<h3 id="AutomationScriptstopic-24">Download Google images</h3>\nIf you are working on a project that demands many images, there’s a Python script that enables you to do so. With it, you can download hundreds of images simultaneously. However, you should avoid violating copyright terms. <a href="https://awesomeopensource.com/project/hardikvasa/google-images-download">Click here for more information</a>.\n<h3 id="AutomationScriptstopic-25">Read battery level of Bluetooth device</h3>\nThis script allows you to read the battery level of your Bluetooth headset. This is especially crucial if the level does not display on your PC. However, it does not support all Bluetooth headsets. For it to run, you need to have Docker on your system. <a href="https://awesomeopensource.com/project/TheWeirdDev/Bluetooth_Headset_Battery_Level">Click here for more information</a>.\n<h3 id="AutomationScriptstopic-26">Delete Telegram messages</h3>\nLet’s face it, messaging apps do chew up much of your device’s storage space. And Telegram is no different. Luckily, this script allows you to delete all supergroups messages. You need to enter the supergroup’s information for the script to run. <a href="https://awesomeopensource.com/project/gurland/telegram-delete-all-messages">Click here for more information.</a>\n<h3 id="AutomationScriptstopic-27">Get song lyrics</h3>\nThis is yet another popular Python script that enables you to scrape lyrics from the Genius site. It primarily works with Spotify, however, other media players with DBus MediaPlayer2 can also use the script. With it, you can sing along to your favorite song. <a href="https://awesomeopensource.com/project/kenogo/spotify-lyrics-cli">Click here for more information</a>.\n<h3 id="AutomationScriptstopic-28">Heroku hosting</h3>\nHeroku is one of the most preferred hosting services. Used by thousands of developers, it allows you to build apps for free. Likewise, you can host your Python applications and scripts on Heroku with this script. <a href="https://awesomeopensource.com/project/michaelkryukov/heroku-python-script">Click here for more information</a>.\n<h3 id="AutomationScriptstopic-29">Github activity</h3>\nIf you contribute to open source projects, keeping a record of your contributions is recommended. Not only do you track your contributions, but also appear professional when displaying your work to other people. With this script, you can generate a robust activity graph. <a href="https://awesomeopensource.com/project/Shpota/github-activity-generator">Click here for information</a>.\n<h3 id="AutomationScriptstopic-30">Removing duplicate code</h3>\nWhen creating large apps or working on projects, it is normal to have duplicates in your list. This not only makes coding strenuous, but also makes your code appear unprofessional. With <a href="https://www.geeksforgeeks.org/python-ways-to-remove-duplicates-from-list/">this script</a>, you can remove duplicates seamlessly.\n<h3 id="AutomationScriptstopic-31">Sending emails</h3>\nEmails are crucial to any businesses’ communication avenues. With Python, you can enable sites and web apps to send them without hiccups. However, businesses do not want to send each email manually, instead, they prefer to automate the process. <a href="https://www.pythonforbeginners.com/code-snippets-source-code/using-python-to-send-email">This script</a> allows you to choose which emails to reply to.\n<h3 id="AutomationScriptstopic-32">Find specific files on your system</h3>\nOften, you forget the names or location of files on your system. This is not only annoying but also consumes time navigating through different folders. While there are programs that help you search for files, you need one that can automate the process.\nLuckily, <a href="https://www.pythonforbeginners.com/code-snippets-source-code/os-walk-and-fnmatch-in-python">this script</a> enables you to choose which files and file types to search for. For example, if want to search for MP3 files, you can use this script.\nimport fnmatch\nimport os\nrootPath = \'/\'\npattern = \'*.mp3\'\nfor root, dirs, files in os.walk(rootPath):\n for filename in fnmatch.filter(files, pattern):\n  print( os.path.join(root, filename))\n<h3 id="AutomationScriptstopic-33">Generating random passwords</h3>\nPasswords bolster the privacy of app and website users. Besides, they prevent fraudulent use of accounts by cyber criminals. As such, you need to create an app or website that can generate random strong passwords. With <a href="https://www.pythonforbeginners.com/code-snippets-source-code/script-password-generator">this script</a>, you can seamlessly generate them.\nimport string\nfrom random import *\ncharacters = string.ascii_letters + string.punctuation  + string.digits\npassword =  "".join(choice(characters) for x in range(randint(8, 16)))\nprint (password)\n<h3 id="AutomationScriptstopic-34">Print odd numbers</h3>\nSome projects may require you to print odd numbers within a specific range. While you can do this manually, it is time-consuming and prone to error. This means you need a program that can automate the process. Thanks to <a href="https://www.sanfoundry.com/python-program-print-odd-numbers-given-range/">this script</a>, you can achieve this.\n<h3 id="AutomationScriptstopic-35">Get date value</h3>\nPython allows you to format a date value in numerous ways. With the DateTime module, this script allows you to read the current date and set a custom value.\n<h3 id="AutomationScriptstopic-36">Removing items from a list</h3>\nYou’ll often have to modify lists on your projects. Python enables you to do this using the Insert() and remove() methods. Here is a script you can use to achieve this.\n# Declare a fruit list\nfruits = ["Mango","Orange","Guava","Banana"]\n# Insert an item in the 2nd position\nfruits.insert(1, "Grape")\n# Displaying list after inserting\nprint("The fruit list after insert:")\nprint(fruits)\n# Remove an item\nfruits.remove("Guava")\n# Print the list after delete\nprint("The fruit list after delete:")\nprint(fruits)\n<h3 id="AutomationScriptstopic-37">Count list items</h3>\nUsing the count() method, you can print how many times a string appears in another string. You need to provide the string that Python will search. Here is a script to help you do so.\n# Define the string\nstring = \'Python Bash Java PHP PHP PERL\'\n# Define the search string\nsearch = \'P\'\n# Store the count value\ncount = string.count(search)\n# Print the formatted output\nprint("%s appears %d times" % (search, count))\n<h3 id="AutomationScriptstopic-38">Text grabber</h3>\nWith this Python script, you can take a screenshot and copy the text in it. <a href="https://awesomeopensource.com/project/ianzhao05/textshot">Click here for more information</a>.\n<h3 id="AutomationScriptstopic-39">Tweet search</h3>\nEver searched for a tweet to no avail? Annoying, right! Well, why not use <a href="https://towardsdatascience.com/searching-for-tweets-with-python-f659144b225f">this script</a> and let it do the legwork for you.\n',
'<h2>反爬虫代码 直接炸了爬虫服务器</h2>\n很多人的爬虫是使用Requests来写的，如果你阅读过Requests的文档，那么你可能在文档中的Binary Response Content[1]这一小节，看到这样一句话：\nThe gzip and deflate transfer-encodings are automatically decoded for you.\n（Request）会自动为你把gzip和deflate转码后的数据进行解码网站服务器可能会使用gzip压缩一些大资源，这些资源在网络上传输的时候，是压缩后的二进制格式。\n客户端收到返回以后，如果发现返回的Headers里面有一个字段叫做Content-Encoding，其中的值包含gzip，那么客户端就会先使用gzip对数据进行解压，解压完成以后再把它呈现到客户端上面。\n浏览器自动就会做这个事情，用户是感知不到这个事情发生的。\n而requests、Scrapy这种网络请求库或者爬虫框架，也会帮你做这个事情，因此你不需要手动对网站返回的数据解压缩。\n这个功能原本是一个方便开发者的功能，但我们可以利用这个功能来做报复爬虫的事情。\n我们首先写一个客户端，来测试一下返回gzip压缩数据的方法。\n我首先在硬盘上创建一个文本文件text.txt，里面有两行内容，如下图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/ohoo1dCmvqcSiaBY6GEBTWnsh4kpssWnmK4HkBalmTALTcPw3pwr4ibOkUdEm6y4CGMib5vMor0kEjia8zxMACkAqw/640">\n然后，我是用gzip命令把它压缩成一个.gz文件：\ncattext.txt|gzip&gt;data.gz\n接下来，我们使用FastAPI写一个HTTP服务器server.py：\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import FileResponse\napp = FastAPI()\n@app.get(\'/\')\ndef index():\n resp = FileResponse(\'data.gz\')\n return resp\n然后使用命令uvicorn server:app启动这个服务。\n接下来，我们使用requests来请求这个接口，会发现返回的数据是乱码，如下图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/ohoo1dCmvqcSiaBY6GEBTWnsh4kpssWnmTGM1MGUzFMFIVibKcLgzD38pk02RWlK8un3jMfr1NL5xzCU55Ws3CJQ/640">\n返回的数据是乱码，这是因为服务器没有告诉客户端，这个数据是gzip压缩的，因此客户端只有原样展示。\n由于压缩后的数据是二进制内容，强行转成字符串就会变成乱码。\n现在，我们稍微修改一下server.py的代码，通过Headers告诉客户端，这个数据是经过gzip压缩的：\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import FileResponse\napp = FastAPI()\n@app.get(\'/\')\ndef index():\n resp = FileResponse(\'data.gz\')\n resp.headers[\'Content-Encoding\'] = \'gzip\'  # 说明这是gzip压缩的数据\n return resp\n修改以后，重新启动服务器，再次使用requests请求，发现已经可以正常显示数据了：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/ohoo1dCmvqcSiaBY6GEBTWnsh4kpssWnm0YsFj2lpcoPxllPOUdObVM243w7sO7nGviaoj8olw1s7CogzkKo4MTQ/640">\n这个功能已经展示完了，那么我们怎么利用它呢？\n这就不得不提到压缩文件的原理了。\n文件之所以能压缩，是因为里面有大量重复的元素，这些元素可以通过一种更简单的方式来表示。\n压缩的算法有很多种，其中最常见的一种方式，我们用一个例子来解释。\n假设有一个字符串，它长成下面这样：\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111我们可以用5个字符来表示：\n192个1。\n这就相当于把192个字符压缩成了5个字符，压缩率高达97.4%。\n如果我们可以把一个1GB的文件压缩成1MB，那么对服务器来说，仅仅是返回了1MB的二进制数据，不会造成任何影响。\n但是对客户端或者爬虫来说，它拿到这个1MB的数据以后，就会在内存中把它还原成1GB的内容。\n这样一瞬间爬虫占用的内存就增大了1GB。\n如果我们再进一步增大这个原始数据，那么很容易就可以把爬虫所在的服务器内存全部沾满，轻者服务器直接杀死爬虫进程，重则爬虫服务器直接死机。\n你别以为这个压缩比听起来很夸张，其实我们使用很简单的一行命令就可以生成这样的压缩文件。\n如果你用的是Linux，那么请执行命令：\ndd if=/dev/zero bs=1M count=1000 | gzip > boom.gz\n如果你的电脑是macOS，那么请执行命令：\ndd if=/dev/zero bs=1048576 count=1000 | gzip > boom.gz\n执行过程如下图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/ohoo1dCmvqcSiaBY6GEBTWnsh4kpssWnm3ibGeQ7hro8e5hrUmE1UuRVzDEhzxREp2lgUppXtxqibnfAt5adibbo0w/640">\n生成的这个boom.gz文件只有995KB。\n但是如果我们使用gzip -d boom.gz对这个文件解压缩，就会发现生成了一个1GB的boom文件，如下图所示：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/ohoo1dCmvqcSiaBY6GEBTWnsh4kpssWnm8lgkicNohcib3BDE6yHk77l0UhmtjIG6iaia7Aq6aGJyeXLplQf0xRRR3Q/640">\n只要大家把命令里面的count=1000改成一个更大的数字，就能得到更大的文件。\n我现在把count改成10，给大家做一个演示（不敢用1GB的数据来做测试，害怕我的Jupyter崩溃）。\n生成的boom.gz文件只有10KB：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/ohoo1dCmvqcSiaBY6GEBTWnsh4kpssWnmv3icSpupBmrJdggbGE7tW1kHKicy68JlQ7jevG89DbWte8sH9VtFs2KA/640">\n服务器返回一个10KB的二进制数据，没有任何问题。\n现在我们用requests去请求这个接口，然后查看一下resp这个对象占用的内存大小：\n<img src="https://mmbiz.qpic.cn/mmbiz_png/ohoo1dCmvqcSiaBY6GEBTWnsh4kpssWnmJHoWJhCQWx1ZdlMfRzdt791e14ibgoStObYxJSicpLlelYHBP1qK50kQ/640">\n可以看到，由于requests自动会对返回的数据解压缩，因此最终获得的resp对象竟然有10MB这么大。\n如果大家想使用这个方法，一定要先确定这个请求是爬虫发的，再使用。\n否则被你干死的不是爬虫而是真实用户就麻烦了。\n本文的写作过程中，参考了文章网站gzip炸弹\n网站gzip炸弹 http://da.dadaaierer.com/?p=577\n',
'<h2>Fancier Output Formatting</h2>\nhttps://docs.python.org/3/tutorial/\nSo far we’ve encountered two ways of writing values: <em>expression statements</em> and the print() function. \n(A third way is using the write() method of file objects; the standard output file can be referenced as sys.stdout.\nSee the Library Reference for more information on this.)\nOften you’ll want more control over the formatting of your output than simply printing space-separated values. \nThere are several ways to format output.\nTo use formatted string literals, begin a string with f or F before the opening quotation mark or triple quotation mark.\nInside this string, you can write a Python expression between { and }\ncharacters that can refer to variables or literal values.\n>>> year = 2016\n>>> event = "Referendum"\n>>> f"Results of the {year} {event}"\n"Results of the 2016 Referendum"\nThe str.format() method of strings requires more manual effort. \nYou’ll still use { and } to mark where a variable will be substituted and can provide detailed formatting directives,\nbut you’ll also need to provide the information to be formatted.\n>>> yes_votes = 42_572_654\n>>> no_votes = 43_132_495\n>>> percentage = yes_votes / (yes_votes + no_votes)\n>>> "{:-9} YES votes  {:2.2%}".format(yes_votes, percentage)\n" 42572654 YES votes  49.67%"\nFinally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine. \nThe string type has some methods that perform useful operations for padding strings to a given column width.</li>\nWhen you don’t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr() or str() functions.\nThe str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax). \nFor objects which don’t have a particular representation for human consumption, str() will return the same value as\nrepr(). \nMany values, such as numbers or structures like lists and dictionaries, have the same representation using either function. \nStrings, in particular, have two distinct representations.\nSome examples:\n>>> s = "Hello, world."\n>>> str(s)\n"Hello, world."\n>>> repr(s)\n""Hello, world.""\n>>> str(1/7)\n"0.14285714285714285"\n>>> x = 10 * 3.25\n>>> y = 200 * 200\n>>> s = "The value of x is " + repr(x) + ", and y is " + repr(y) + "..."\n>>> print(s)\nThe value of x is 32.5, and y is 40000...\n>>> # The repr() of a string adds string quotes and backslashes:\n... \nhello = "hello, world\n"\n>>> hellos = repr(hello)\n>>> print(hellos)\n"hello, world\n"\n>>> # The argument to repr() may be any Python object:\n... \nrepr((x, y, ("spam", "eggs")))\n"(32.5, 40000, ("spam", "eggs"))"\nThe string module contains a Template class that offers yet another way to substitute values into strings, using placeholders like\n$x and replacing them with values from a dictionary, but offers much less control of the formatting.\n<i>7.1.1. Formatted String Literals</i>\nFormatted string literals (also called f-strings for short) let you include the value of Python expressions inside a string by prefixing the string with f or F and writing expressions as\n{expression}.\nAn optional format specifier can follow the expression. \nThis allows greater control over how the value is formatted. \nThe following example rounds pi to three places after the decimal:\n>>> import math\n>>> print(f"The value of pi is approximately {math.pi:.3f}.")\nThe value of pi is approximately 3.142.\nPassing an integer after the \':\' will cause that field to be a minimum number of characters wide. \nThis is useful for making columns line up.\n>>> table = {"Sjoerd": 4127, "Jack": 4098, "Dcab": 7678}\n>>> for name, phone in table.items():\n... \nprint(f"{name:10} ==> {phone:10d}")\n...\nSjoerd  ==>    4127\nJack    ==>    4098\nDcab    ==>    7678\nOther modifiers can be used to convert the value before it is formatted.\n\'!a\' applies ascii(), \'!s\' applies str(), and \'!r\'\napplies repr():\n>>> animals = "eels"\n>>> print(f"My hovercraft is full of {animals}.")\nMy hovercraft is full of eels.\n>>> print(f"My hovercraft is full of {animals!r}.")\nMy hovercraft is full of "eels".\nThe = specifier can be used to expand an expression to the text of the expression, an equal sign, then the representation of the evaluated expression:\n>>> bugs = "roaches"\n>>> count = 13\n>>> area = "living room"\n>>> print(f"Debugging {bugs=} {count=} {area=}")\nDebugging bugs="roaches" count=13 area="living room"\nSee self-documenting expressions for more information on the = specifier. \nFor a reference on these format specifications, see the reference guide for the Format Specification Mini-Language.\n<i>7.1.2. The String format() Method</i>\nBasic usage of the str.format() method looks like this:\n>>> print("We are the {} who say "{}!"".format("knights", "Ni"))\nWe are the knights who say "Ni!"\nThe brackets and characters within them (called format fields) are replaced with the objects passed into the str.format() method. \nA number in the brackets can be used to refer to the position of the object passed into the\nstr.format() method.\n>>> print("{0} and {1}".format("spam", "eggs"))\nspam and eggs\n>>> print("{1} and {0}".format("spam", "eggs"))\neggs and spam If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument.\n>>> print("This {food} is {adjective}.".format(\n... \nfood="spam", adjective="absolutely horrible"))\nThis spam is absolutely horrible.\nPositional and keyword arguments can be arbitrarily combined:\n>>> print("The story of {0}, {1}, and {other}.".format("Bill", "Manfred",\n... \nother="Georg"))\nThe story of Bill, Manfred, and Georg.\nIf you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position. \nThis can be done by simply passing the dict and using square brackets \'[]\' to access the keys.\n>>> table = {"Sjoerd": 4127, "Jack": 4098, "Dcab": 8637678}\n>>> print("Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; "\n... \n"Dcab: {0[Dcab]:d}".format(table))\nJack: 4098; Sjoerd: 4127; Dcab: 8637678\nThis could also be done by passing the table dictionary as keyword arguments with the **\nnotation.\n>>> table = {"Sjoerd": 4127, "Jack": 4098, "Dcab": 8637678}\n>>> print("Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}".format(**table))\nJack: 4098; Sjoerd: 4127; Dcab: 8637678\nThis is particularly useful in combination with the built-in function\nvars(), which returns a dictionary containing all local variables.\nAs an example, the following lines produce a tidily aligned set of columns giving integers and their squares and cubes:\n>>> for x in range(1, 11):\n... \nprint("{0:2d} {1:3d} {2:4d}".format(x, x*x, x*x*x))\n...\n1   1 1\n2   4 8\n3   9   27\n4  16   64\n5  25  125\n6  36  216\n7  49  343\n8  64  512\n9  81  729\n10 100 1000\nFor a complete overview of string formatting with str.format(), see Format String Syntax.\n<i>7.1.3. Manual String Formatting</i>\nHere’s the same table of squares and cubes, formatted manually:\n>>> for x in range(1, 11):\n... \nprint(repr(x).rjust(2), repr(x*x).rjust(3), end=" ")\n... \n# Note use of "end" on previous line\n... \nprint(repr(x*x*x).rjust(4))\n...\n1   1 1\n2   4 8\n3   9   27\n4  16   64\n5  25  125\n6  36  216\n7  49  343\n8  64  512\n9  81  729\n10 100 1000\n(Note that the one space between each column was added by the way print() works: it always adds spaces between its arguments.)\nThe str.rjust() method of string objects right-justifies a string in a field of a given width by padding it with spaces on the left. \nThere are similar methods str.ljust() and str.center(). \nThese methods do not write anything, they just return a new string. \nIf the input string is too long, they don’t truncate it, but return it unchanged; this will mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. \n(If you really want truncation you can always add a slice operation, as in x.ljust(n)[:n].)\nThere is another method, str.zfill(), which pads a numeric string on the left with zeros. \nIt understands about plus and minus signs:\n>>> "12".zfill(5)\n"00012"\n>>> "-3.14".zfill(7)\n"-003.14"\n>>> "3.14159265359".zfill(5)\n"3.14159265359"\n<i>7.1.4. Old string formatting</i>\nThe % operator (modulo) can also be used for string formatting. \nGiven \'string\'\n% values, instances of % in string are replaced with zero or more elements of values. \nThis operation is commonly known as string interpolation. \nFor example:\n>>> import math\n>>> print("The value of pi is approximately %5.3f." % math.pi)\nThe value of pi is approximately 3.142.\nMore information can be found in the printf-style String Formatting section.\n',
'<h2>Reading and Writing Files</h2>\nopen() returns a file object, and is most commonly used with two positional arguments and one keyword argument:\nopen(filename, mode, encoding=None)\n>>> f = open("workfile", "w", encoding="utf-8")\nThe first argument is a string containing the filename. \nThe second argument is another string containing a few characters describing the way in which the file will be used. \n<em>mode</em> can be \'r\' when the file will only be read, \'w\' for only writing (an existing file with the same name will be erased), and \'a\' opens the file for appending; any data written to the file is automatically added to the end. \n\'r+\' opens the file for both reading and writing. \nThe <em>mode</em> argument is optional; \'r\' will be assumed if it’s omitted.\nNormally, files are opened in <em>text mode</em>, that means, you read and write strings from and to the file, which are encoded in a specific <em>encoding</em>.\nIf <em>encoding</em> is not specified, the default is platform dependent (see open()).\nBecause UTF-8 is the modern de-facto standard, encoding="utf-8" is recommended unless you know that you need to use a different encoding.\nAppending a \'b\' to the mode opens the file in <em>binary mode</em>.\nBinary mode data is read and written as bytes objects.\nYou can not specify <em>encoding</em> when opening file in binary mode.\nIn text mode, the default when reading is to convert platform-specific line endings (\n on Unix, \r\n on Windows) to just \n. \nWhen writing in text mode, the default is to convert occurrences of \n back to platform-specific line endings. \nThis behind-the-scenes modification to file data is fine for text files, but will corrupt binary data like that in\nJPEG or EXE files. \nBe very careful to use binary mode when reading and writing such files.\nIt is good practice to use the with keyword when dealing with file objects. \nThe advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point. \nUsing with is also much shorter than writing equivalent try-finally blocks:\n>>> with open("workfile", encoding="utf-8") as f:\n... \nread_data = f.read()\n>>> # We can check that the file has been automatically closed.\n>>> f.closed True If you’re not using the with keyword, then you should call f.close() to close the file and immediately free up any system resources used by it.\nWarning Calling f.write() without using the with keyword or calling f.close() <k>might</k> result in the arguments of f.write() not being completely written to the disk, even if the program exits successfully.\nAfter a file object is closed, either by a with statement or by calling f.close(), attempts to use the file object will automatically fail.\n>>> f.close()\n>>> f.read()\nTraceback (most recent call last):\nFile "&lt;stdin>", line 1, in &lt;module>\nValueError: I/O operation on closed file.\n<i>7.2.1. Methods of File Objects</i>\nThe rest of the examples in this section will assume that a file object called f has already been created.\nTo read a file’s contents, call f.read(size), which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode).\n<em>size</em> is an optional numeric argument. \nWhen <em>size</em> is omitted or negative, the entire contents of the file will be read and returned; it’s your problem if the file is twice as large as your machine’s memory. \nOtherwise, at most <em>size</em> characters (in text mode) or <em>size</em> bytes (in binary mode) are read and returned.\nIf the end of the file has been reached, f.read() will return an empty string (\'\').\n>>> f.read()\n"This is the entire file.\n"\n>>> f.read()\n""\nf.readline() reads a single line from the file; a newline character (\n) is left at the end of the string, and is only omitted on the last line of the file if the file doesn’t end in a newline. \nThis makes the return value unambiguous; if f.readline() returns an empty string, the end of the file has been reached, while a blank line is represented by \'\n\', a string containing only a single newline.\n>>> f.readline()\n"This is the first line of the file.\n"\n>>> f.readline()\n"Second line of the file\n"\n>>> f.readline()\n""\nFor reading lines from a file, you can loop over the file object. \nThis is memory efficient, fast, and leads to simple code:\n>>> for line in f:\n... \nprint(line, end=")\n...\nThis is the first line of the file.\nSecond line of the file If you want to read all the lines of a file in a list you can also use\nlist(f) or f.readlines().\nf.write(string) writes the contents of <em>string</em> to the file, returning the number of characters written.\n>>> f.write("This is a test\n")\n15\nOther types of objects need to be converted – either to a string (in text mode) or a bytes object (in binary mode) – before writing them:\n>>> value = ("the answer", 42)\n>>> s = str(value)  # convert the tuple to string\n>>> f.write(s)\n18\nf.tell() returns an integer giving the file object’s current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode.\nTo change the file object’s position, use f.seek(offset, whence). \nThe position is computed from adding <em>offset</em> to a reference point; the reference point is selected by the <em>whence</em> argument. \nA <em>whence</em> value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point. \n<em>whence</em> can be omitted and defaults to 0, using the beginning of the file as the reference point.\n>>> f = open("workfile", "rb+")\n>>> f.write(b"0123456789abcdef")\n16\n>>> f.seek(5)   # Go to the 6th byte in the file\n5\n>>> f.read(1)\nb"5"\n>>> f.seek(-3, 2)  # Go to the 3rd byte before the end\n13\n>>> f.read(1)\nb"d"\nIn text files (those opened without a b in the mode string), only seeks relative to the beginning of the file are allowed (the exception being seeking to the very file end with seek(0, 2)) and the only valid <em>offset</em> values are those returned from the f.tell(), or zero. \nAny other <em>offset</em> value produces undefined behaviour.\nFile objects have some additional methods, such as isatty() and\ntruncate() which are less frequently used; consult the Library Reference for a complete guide to file objects.\n<i>7.2.2. Saving structured data with json</i>\nStrings can easily be written to and read from a file. \nNumbers take a bit more effort, since the read() method only returns strings, which will have to be passed to a function like int(), which takes a string like \'123\' and returns its numeric value 123. \nWhen you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated.\nRather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation). \nThe standard module called json can take Python data hierarchies, and convert them to string representations; this process is called <em>serializing</em>. \nReconstructing the data from the string representation is called <em>deserializing</em>. \nBetween serializing and deserializing, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.\nNote The JSON format is commonly used by modern applications to allow for data exchange. \nMany programmers are already familiar with it, which makes it a good choice for interoperability.\nIf you have an object x, you can view its JSON string representation with a simple line of code:\n>>> import json\n>>> x = [1, "simple", "list"]\n>>> json.dumps(x)\n"[1, "simple", "list"]"\nAnother variant of the dumps() function, called dump(), simply serializes the object to a text file. \nSo if f is a text file object opened for writing, we can do this:\njson.dump(x, f)\nTo decode the object again, if f is a binary file or text file object which has been opened for reading:\nx = json.load(f)\nNote JSON files must be encoded in UTF-8. \nUse encoding="utf-8" when opening JSON file as a text file for both of reading and writing.\nThis simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra effort.\nThe reference for the json module contains an explanation of this.\nSee also\npickle - the pickle module Contrary to JSON, <em>pickle</em> is a protocol which allows the serialization of arbitrarily complex Python objects. \nAs such, it is specific to Python and cannot be used to communicate with applications written in other languages. \nIt is also insecure by default: deserializing pickle data coming from an untrusted source can execute arbitrary code, if the data was crafted by a skilled attacker.\n',
'<h2>Python Dictionaries</h2>\nA dictionary is a collection which is ordered, changeable and do not allow duplicates.\nDictionaries are used to store data values in key:value pairs.\nDictionaries cannot have two items with the same key.\nDuplicate values will overwrite existing values.\nthisdict = {\n  "brand": "Ford",\n  "model": "Mustang",\n  "year": 1964\n}\nprint(thisdict["brand"])\n',
'<h2>Python PDF</h2>\npip install fpdf\n<img class="lazy" data-src="https://pic3.zhimg.com/80/v2-83e8b889ec70e3aa98aabee5c950c4be_1440w.webp">\n<img class="lazy" data-src="https://pic1.zhimg.com/80/v2-2bcc1296de139a463128b1ad345b77a0_1440w.webp">\n',
'<h2>10 Python Scripts to Automate Your Daily Task</h2>\n<div id="PythonScriptstoc" class="toc"><a href="#PythonScriptstopic-0" target="_self">Parse and Extract HTML</a><br><a href="#PythonScriptstopic-1" target="_self">Qrcode Scanner</a><br><a href="#PythonScriptstopic-2" target="_self">Take Screenshots</a><br><a href="#PythonScriptstopic-3" target="_self">Create AudioBooks</a><br><a href="#PythonScriptstopic-4" target="_self">PDF Editor</a><br><a href="#PythonScriptstopic-5" target="_self">👉Mini Stackoverflow</a><br><a href="#PythonScriptstopic-6" target="_self">Automate Mobile Phone</a><br><a href="#PythonScriptstopic-7" target="_self">Monitor CPU/GPU Temp</a><br><a href="#PythonScriptstopic-8" target="_self">Instagram Uploader Bot</a><br><a href="#PythonScriptstopic-9" target="_self">Video Watermarker</a><br></div></center><br><br>\n<h3 id="PythonScriptstopic-0">Parse and Extract HTML</h3>\nThis automation script will help you to extract the<b> HTML from the webpage URL</b> and then also provide you function that you can use to<b> Parse the HTML </b>for data. \nThis awesome script is a great treat for web scrapers and for those who want to Parse HTML for important data.\n# Parse and Extract HTML\n# pip install gazpacho\nimport gazpacho\n# Extract HTML from URL\nurl = \'https://www.example.com/\'\nhtml = gazpacho.get(url)\nprint(html)\n# Extract HTML with Headers\nheaders = {\'User-Agent\': \'Mozilla/5.0\'}\nhtml = gazpacho.get(url, headers=headers)\nprint(html)\n# Parse HTML\nparse = gazpacho.Soup(html)\n# Find single tags\ntag1 = parse.find(\'h1\')\ntag2 = parse.find(\'span\')\n# Find multiple tags\ntags1 = parse.find_all(\'p\')\ntags2 = parse.find_all(\'a\')\n# Find tags by class\ntag = parse.find(\'.class\')\n# Find tags by Attribute\ntag = parse.find("div", attrs={"class": "test"})\n# Extract text from tags\ntext = parse.find(\'h1\').text\ntext = parse.find_all(\'p\')[0].text\n<h3 id="PythonScriptstopic-1">Qrcode Scanner</h3>Having a lot of <b>Qr images</b> or just want to scan a QR image then this automation script will help you with it. \nThis script uses<b> the Qrtools module</b> that will enable you to scan your QR images programmatically.\n# Qrcode Scanner\n# pip install qrtools\nfrom qrtools import Qr\ndef Scan_Qr(qr_img):\n qr = Qr()\n qr.decode(qr_img)\n print(qr.data)\n return qr.data\nprint("Your Qr Code is: ", Scan_Qr("qr.png"))\n<h3 id="PythonScriptstopic-2">Take Screenshots</h3>Now you can Take <b>Screenshots programmatically</b> by using this awesome script below. \nWith this script, you can take a direct screenshots or take specific area screenshots too.\n# Grab Screenshot\n# pip install pyautogui\n# pip install Pillow\nfrom pyautogui import screenshot\nimport time\nfrom PIL import ImageGrab\n# Grab Screenshot of Screen\ndef grab_screenshot():\n shot = screenshot()\n shot.save(\'my_screenshot.png\')\n# Grab Screenshot of Specific Area\ndef grab_screenshot_area():\n area = (0, 0, 500, 500)\n shot = ImageGrab.grab(area)\n shot.save(\'my_screenshot_area.png\')\n# Grab Screenshot with Delay\ndef grab_screenshot_delay():\n time.sleep(5)\n shot = screenshot()\n shot.save(\'my_screenshot_delay.png\')\n<h3 id="PythonScriptstopic-3">Create AudioBooks</h3>Tired of converting Your <b>PDF books to Audiobooks</b> manually, Then here is your automation script that uses the<b> GTTS module</b> that will convert your PDF text to audio.\n# Create Audiobooks\n# pip install gTTS\n# pip install PyPDF2\nfrom PyPDF2 import PdfFileReader as reader\nfrom gtts import gTTS\ndef create_audio(pdf_file):\n read_Pdf = reader(open(pdf_file, \'rb\'))\n for page in range(read_Pdf.numPages):\n  text = read_Pdf.getPage(page).extractText()\n  tts = gTTS(text, lang=\'en\')\n  tts.save(\'page\' + str(page) + \'.mp3\')\ncreate_audio(\'book.pdf\')\n<h3 id="PythonScriptstopic-4">PDF Editor</h3>Use this below automation script to Edit your PDF files with Python. \nThis script uses the<b> PyPDF4 </b>module which is the upgrade version of<b> PyPDF2</b> and below I coded the common function like<b> Parse Text, Remove pages,</b> and many more.\nHandy script when you have a lot of PDFs to Edit or need a script in your Python Project programmatically.\n# PDF Editor\n# pip install PyPDf4\nimport PyPDF4\n# Parse the Text from PDF\ndef parse_text(pdf_file):\n reader = PyPDF4.PdfFileReader(pdf_file)\n for page in reader.pages:\n  print(page.extractText())\n# Remove Page from PDF\ndef remove_page(pdf_file, page_numbers):\n filer = PyPDF4.PdfReader(\'source.pdf\', \'rb\')\n out = PyPDF4.PdfWriter()\n for index in page_numbers:\n  page = filer.pages[index] \n  out.add_page(page)\nwith open(\'rm.pdf\', \'wb\') as f:\n  out.write(f)\n# Add Blank Page to PDF\ndef add_page(pdf_file, page_number):\n reader = PyPDF4.PdfFileReader(pdf_file)\n writer = PyPDF4.PdfWriter()\n writer.addPage()\n with open(\'add.pdf\', \'wb\') as f:\n  writer.write(f)\n# Rotate Pages\ndef rotate_page(pdf_file):\n reader = PyPDF4.PdfFileReader(pdf_file)\n writer = PyPDF4.PdfWriter()\n for page in reader.pages:\n  page.rotateClockwise(90)\n  writer.addPage(page)\n with open(\'rotate.pdf\', \'wb\') as f:\n  writer.write(f)\n# Merge PDFs\ndef merge_pdfs(pdf_file1, pdf_file2):\n pdf1 = PyPDF4.PdfFileReader(pdf_file1)\n pdf2 = PyPDF4.PdfFileReader(pdf_file2)\n writer = PyPDF4.PdfWriter()\n for page in pdf1.pages:\n  writer.addPage(page)\n for page in pdf2.pages:\n  writer.addPage(page)\n with open(\'merge.pdf\', \'wb\') as f:\n  writer.write(f)\n<h3 id="PythonScriptstopic-5">👉Mini Stackoverflow</h3>As a programmer I know we need<b> StackOverflow every day</b> but you no longer need to go and search on Google for it. \nNow get direct solutions in your CMD while you continue working on a project. \nBy using <b>Howdoi module</b> you can get the <b>StackOverflow </b>solution in your command prompt or terminal. \nBelow you can find some examples that you can try.\n# Automate Stackoverflow\n# pip install howdoi\n# Get Answers in CMD\n#example 1\n&gt; howdoi how do i install python3\n# example 2\n&gt; howdoi selenium Enter keys\n# example 3\n&gt; howdoi how to install modules\n# example 4\n&gt; howdoi Parse html with python\n# example 5\n&gt; howdoi int not iterable error\n# example 6\n&gt; howdoi how to parse pdf with python\n# example 7\n&gt; howdoi Sort list in python\n# example 8\n&gt; howdoi merge two lists in python\n# example 9\n&gt;howdoi get last element in list python\n# example 10\n&gt; howdoi fast way to sort list\n<h3 id="PythonScriptstopic-6">Automate Mobile Phone</h3>This automation script will help you to automate your <b>Smart Phone</b> by using the <b>Android debug bridge (ADB)</b> in Python. \nBelow I show how you can automate common tasks like swipe gestures, calling, sending Sms<b>, </b>and much more.\nYou can learn more about ADB and explore more exciting ways to automate your phones for making your life easier.\n# Automate Mobile Phones\n# pip install opencv-python\nimport subprocess\ndef main_adb(cm):\n p = subprocess.Popen(cm.split(\' \'), stdout=subprocess.PIPE, shell=True)\n (output, _) = p.communicate()\n return output.decode(\'utf-8\')\n# Swipe \ndef swipe(x1, y1, x2, y2, duration):\n cmd = \'adb shell input swipe {} {} {} {} {}\'.format(x1, y1, x2, y2, duration)\n return main_adb(cmd)\n# Tap or Clicking\ndef tap(x, y):\n cmd = \'adb shell input tap {} {}\'.format(x, y)\n return main_adb(cmd)\n# Make a Call\ndef make_call(number):\n cmd = f"adb shell am start -a android.intent.action.CALL -d tel:{number}"\n return main_adb(cmd)\n# Send SMS\ndef send_sms(number, message):\n cmd = \'adb shell am start -a android.intent.action.SENDTO -d  sms:{} --es sms_body "{}"\'.format(number, message)\n return main_adb(cmd)\n# Download File From Mobile to PC\ndef download_file(file_name):\n cmd = \'adb pull /sdcard/{}\'.format(file_name)\n return main_adb(cmd)\n# Take a screenshot\ndef screenshot():\n cmd = \'adb shell screencap -p\'\n return main_adb(cmd)\n# Power On and Off\ndef power_off():\n cmd = \'"adb shell input keyevent 26"\'\n return main_adb(cmd)\n<h3 id="PythonScriptstopic-7">Monitor CPU/GPU Temp</h3>You Probably use <b>CPU-Z </b>or any specs monitoring software to capture your Cpu and Gpu temperature but you know you can do that programmatically too. \nWell, this script uses the <b>Pythonnet </b>and<b> OpenhardwareMonitor </b>that help you to monitor your current Cpu and Gpu Temperature.\nYou can use it to notify yourself when a certain amount of temperature reaches or you can use it in your Python project to make your daily life easy.\n# Get CPU/GPU Temperature\n# pip install pythonnet\nimport clr\nclr.AddReference("OpenHardwareMonitorLib")\nfrom OpenHardwareMonitorLib import *\nspec = Computer()\nspec.GPUEnabled = True\nspec.CPUEnabled = True\nspec.Open()\n# Get CPU Temp\ndef Cpu_Temp():\n while True:\n  for cpu in range(0, len(spec.Hardware[0].Sensors)):\n   if "/temperature" in str(spec.Hardware[0].Sensors[cpu].Identifier):\n    print(str(spec.Hardware[0].Sensors[cpu].Value))\n# Get GPU Temp\ndef Gpu_Temp()\n while True:\n  for gpu in range(0, len(spec.Hardware[0].Sensors)):\n   if "/temperature" in str(spec.Hardware[0].Sensors[gpu].Identifier):\n    print(str(spec.Hardware[0].Sensors[gpu].Value))\n<h3 id="PythonScriptstopic-8">Instagram Uploader Bot</h3>Instagram is a well famous <b>social media platform</b> and you know you don’t need to upload your photos or video through your smartphone now. \nYou can do it programmatically by using the below script.\n# Upload Photos and Video on Insta\n# pip install instabot\nfrom instabot import Bot\ndef Upload_Photo(img):\n robot = Bot()\n robot.login(username="user", password="pass")\n robot.upload_photo(img, caption="Medium Article")\n print("Photo Uploaded")\ndef Upload_Video(video):\n robot = Bot()\n robot.login(username="user", password="pass")\n robot.upload_video(video, caption="Medium Article")\n print("Video Uploaded")\ndef Upload_Story(img):\n robot = Bot()\n robot.login(username="user", password="pass")\n robot.upload_story(img, caption="Medium Article")\n print("Story Photos Uploaded")\nUpload_Photo("img.jpg")\nUpload_Video("video.mp4")\n<h3 id="PythonScriptstopic-9">Video Watermarker</h3>Add watermark to your videos by using this automation script which uses <b>Moviepy</b> which is a handy module for video editing. \nIn the below script, you can see how you can watermark and you are free to use it.\n# Video Watermark with Python\n# pip install moviepy\nfrom moviepy.editor import *\nclip = VideoFileClip("myvideo.mp4", audio=True) \nwidth,height = clip.size  \ntext = TextClip("WaterMark", font=\'Arial\', color=\'white\', fontsize=28)\nset_color = text.on_color(size=(clip.w + text.w, text.h-10), color=(0,0,0), pos=(6,\'center\'), col_opacity=0.6)\nset_textPos = set_color.set_pos( lambda pos: (max(width/30,int(width-0.5* width* pos)),max(5*height/6,int(100* pos))) )\nOutput = CompositeVideoClip([clip, set_textPos])\nOutput.duration = clip.duration\nOutput.write_videofile("output.mp4", fps=30, codec=\'libx264\')\n',
'<h2>macro inside an Excel file using Python</h2>\nuse the xlwings library.\nxlwings allows you to interact with Excel files and access macros.\nInstall the xlwings library by running the following command in your Python environment:\npip install xlwings\nimport xlwings as xw\nUse the xw.Book() function to open the Excel file containing the macro:\nwb = xw.Book(\'path_to_your_excel_file.xlsx\')\nAccess the macro within the Excel file using the macro attribute of the Workbook object:\nmacro_code = wb.macro(\'macro_name\')\nReplace `\'macro_name\'` with the name of the macro you want to read.\nPrint or manipulate the macro_code as needed:\nprint(macro_code)\nYou can save it to a file or process it further, depending on your requirements.\nClose the workbook after you have finished reading the macro:\nwb.close()\nTo list out all macros\nAccess the macros attribute of the Workbook object to obtain a list of all macros:\nmacro_list = wb.macro_names\nPrint or process the macro_list as needed:\nfor macro_name in macro_list:\n print(macro_name)\n',
'<h2>Python 处理 Excel 的 14 个常用操作</h2>\n<div id="PythonExceltoc" class="toc"><a href="#PythonExceltopic-0" target="_self">关联公式:Vlookup</a><br><a href="#PythonExceltopic-1" target="_self">数据透视表</a><br><a href="#PythonExceltopic-2" target="_self">对比两列差异</a><br><a href="#PythonExceltopic-3" target="_self">去除重复值</a><br><a href="#PythonExceltopic-4" target="_self">缺失值处理</a><br><a href="#PythonExceltopic-5" target="_self">多条件筛选</a><br><a href="#PythonExceltopic-6" target="_self"> 模糊筛选数据</a><br><a href="#PythonExceltopic-7" target="_self">分类汇总</a><br><a href="#PythonExceltopic-8" target="_self">条件计算</a><br><a href="#PythonExceltopic-9" target="_self">删除数据间的空格</a><br><a href="#PythonExceltopic-10" target="_self">数据分列</a><br><a href="#PythonExceltopic-11" target="_self">异常值替换</a><br><a href="#PythonExceltopic-12" target="_self">分组</a><br><a href="#PythonExceltopic-13" target="_self">根据业务逻辑定义标签</a><br></div></center><br><br>\n<h3 id="PythonExceltopic-0">关联公式:Vlookup</h3>\nvlookup是excel几乎最常用的公式，一般用于两个表的关联查询等。\n所以我先把这张表分为两个表。\ndf1=sale[[\'订单明细号\',\'单据日期\',\'地区名称\', \'业务员名称\',\'客户分类\', \'存货编码\', \'客户名称\', \'业务员编码\', \'存货名称\', \'订单号\', \'客户编码\', \'部门名称\', \'部门编码\']]\ndf2=sale[[\'订单明细号\',\'存货分类\', \'税费\', \'不含税金额\', \'订单金额\', \'利润\', \'单价\',\'数量\']]\n需求：想知道df1的每一个订单对应的利润是多少。\n利润一列存在于df2的表格中，所以想知道df1的每一个订单对应的利润是多少。\n用excel的话首先确认订单明细号是唯一值，然后在df1新增一列写：=vlookup(a2,df2!a:h,6,0) ，然后往下拉就ok了。\n（剩下13个我就不写excel啦）\n那用python是如何实现的呢？\n#查看订单明细号是否重复，结果是没。\ndf1["订单明细号"].duplicated().value_counts()\ndf2["订单明细号"].duplicated().value_counts()\ndf_c=pd.merge(df1,df2,on="订单明细号",how="left")\n<h3 id="PythonExceltopic-1">数据透视表</h3>\n需求：想知道每个地区的业务员分别赚取的利润总和与利润平均数。\npd.pivot_table(sale,index="地区名称",columns="业务员名称",values="利润",aggfunc=[np.sum,np.mean])\n<h3 id="PythonExceltopic-2">对比两列差异</h3>\n因为这表每列数据维度都不一样，比较起来没啥意义，所以我先做了个订单明细号的差异再进行比较。\n需求：比较订单明细号与订单明细号2的差异并显示出来。\nsale["订单明细号2"]=sale["订单明细号"]\n#在订单明细号2里前10个都+1.\nsale["订单明细号2"][1:10]=sale["订单明细号2"][1:10]+1\n#差异输出\nresult=sale.loc[sale["订单明细号"].isin(sale["订单明细号2"])==False]\n<h3 id="PythonExceltopic-3">去除重复值</h3>\n需求：去除业务员编码的重复值\nsale.drop_duplicates("业务员编码",inplace=True)\n<h3 id="PythonExceltopic-4">缺失值处理</h3>\n先查看销售数据哪几列有缺失值。\n#列的行数小于index的行数的说明有缺失值，这里客户名称329&lt;335,说明有缺失值\nsale.info()\n需求：用0填充缺失值或则删除有客户编码缺失值的行。\n实际上缺失值处理的办法是很复杂的，这里只介绍简单的处理方法，若是数值变量，最常用平均数或中位数或众数处理，比较复杂的可以用随机森林模型根据其他维度去预测结果填充。\n若是分类变量，根据业务逻辑去填充准确性比较高。\n比如这里的需求填充客户名称缺失值：就可以根据存货分类出现频率最大的存货所对应的客户名称去填充。\n这里我们用简单的处理办法：用0填充缺失值或则删除有客户编码缺失值的行。\n#用0填充缺失值\nsale["客户名称"]=sale["客户名称"].fillna(0)\n#删除有客户编码缺失值的行\nsale.dropna(subset=["客户编码"])\n<h3 id="PythonExceltopic-5">多条件筛选</h3>\n需求：想知道业务员张爱，在北京区域卖的商品订单金额大于6000的信息。\nsale.loc[(sale["地区名称"]=="北京")&amp;(sale["业务员名称"]=="张爱")&amp;(sale["订单金额"]&gt;5000)]\n<h3 id="PythonExceltopic-6">模糊筛选数据</h3>\n需求:筛选存货名称含有"三星"或则含有"索尼"的信息。\nsale.loc[sale["存货名称"].str.contains("三星|索尼")]\n<h3 id="PythonExceltopic-7">分类汇总</h3>\n需求:北京区域各业务员的利润总额。\nsale.groupby(["地区名称","业务员名称"])["利润"].sum()\n<h3 id="PythonExceltopic-8">条件计算</h3>\n需求：存货名称含“三星字眼”并且税费高于1000的订单有几个？这些订单的利润总和和平均利润是多少？（或者最小值，最大值，四分位数，标注差）\nsale.loc[sale["存货名称"].str.contains("三星")&amp;(sale["税费"]&gt;=1000)][["订单明细号","利润"]].describe()\n<h3 id="PythonExceltopic-9">删除数据间的空格</h3>\n需求：删除存货名称两边的空格。\nsale["存货名称"].map(lambda s :s.strip(""))\n<h3 id="PythonExceltopic-10">数据分列</h3>\n需求：将日期与时间分列。\nsale=pd.merge(sale,pd.DataFrame(sale["单据日期"].str.split(" ",expand=True)),how="inner",left_index=True,right_index=True)\n<h3 id="PythonExceltopic-11">异常值替换</h3>\n首先用describe()函数简单查看一下数据有无异常值。\n#可看到销项税有负数，一般不会有这种情况，视它为异常值。\nsale.describe()\n需求：用0代替异常值。\nsale["订单金额"]=sale["订单金额"].replace(min(sale["订单金额"]),0)\n<h3 id="PythonExceltopic-12">分组</h3>\n需求：根据利润数据分布把地区分组为："较差","中等","较好","非常好"\n首先，当然是查看利润的数据分布呀，这里我们采用四分位数去判断。\nsale.groupby("地区名称")["利润"].sum().describe()\n根据四分位数把地区总利润为[-9,7091]区间的分组为“较差”，(7091,10952]区间的分组为"中等" (10952,17656]分组为较好，(17656,37556]分组为非常好。\n#先建立一个Dataframe\nsale_area=pd.DataFrame(sale.groupby("地区名称")["利润"].sum()).reset_index()\n#设置bins,和分组名称\nbins=[-10,7091,10952,17656,37556]\ngroups=["较差","中等","较好","非常好"]\n#使用cut分组\n#sale_area["分组"]=pd.cut(sale_area["利润"],bins,labels=groups)\n<h3 id="PythonExceltopic-13">根据业务逻辑定义标签</h3>\n需求：销售利润率（即利润/订单金额）大于30%的商品信息并标记它为优质商品，小于5%为一般商品。\nsale.loc[(sale["利润"]/sale["订单金额"])&gt;0.3,"label"]="优质商品"\nsale.loc[(sale["利润"]/sale["订单金额"])&lt;0.05,"label"]="一般商品"\n其实excel常用的操作还有很多，我就列举了14个自己比较常用的，若还想实现哪些操作可以评论一起交流讨论，另外我自身也知道我写python不够精简，惯性使用loc。\n（其实query会比较精简）。\n最后想说说，我觉得最好不要拿excel和python做对比，去研究哪个好用，其实都是工具，excel作为最为广泛的数据处理工具，垄断这么多年必定在数据处理方便也是相当优秀的，有些操作确实python会比较简单，但也有不少excel操作起来比python简单的。\n比如一个很简单的操作：对各列求和并在最下一行显示出来，excel就是对一列总一个sum()函数，然后往左一拉就解决，而python则要定义一个函数（因为python要判断格式，若非数值型数据直接报错。\n）\n总结一下就是：无论用哪个工具，能解决问题就是好数据分析师！\n',
'<h2>List Comprehension</h2>\n<div id="ListComprehensiontoc" class="toc"><a href="#ListComprehensiontopic-0" target="_self"><span class="brown">List Comprehension</span></a> <a href="#ListComprehensiontopic-1" target="_self"><br><span class="brown">The Syntax<br></span></a> <a href="#ListComprehensiontopic-2" target="_self">Condition</a> <a href="#ListComprehensiontopic-3" target="_self"><br>Example Only accept items that are not "apple":</a> <a href="#ListComprehensiontopic-4" target="_self"><br>Example With no if statement:</a> <a href="#ListComprehensiontopic-5" target="_self"><br>Iterable</a> <a href="#ListComprehensiontopic-6" target="_self"><br>Example You can use the range() function to create an iterable:</a> <a href="#ListComprehensiontopic-7" target="_self"><br>Example Accept only numbers lower than 5:</a> <a href="#ListComprehensiontopic-8" target="_self"><br>Expression</a> <a href="#ListComprehensiontopic-9" target="_self"><br>Example Set the values in the new list to upper case:</a> <a href="#ListComprehensiontopic-10" target="_self"><br>Example Set all values in the new list to \'hello\':</a> <a href="#ListComprehensiontopic-11" target="_self"><br>Example Return "orange" instead of "banana":</a> <a href="#ListComprehensiontopic-12" target="_self"><br>1、For 循环</a> <a href="#ListComprehensiontopic-13" target="_self">2、 While 循环</a> <a href="#ListComprehensiontopic-14" target="_self">3、IF Else 语句</a> <a href="#ListComprehensiontopic-15" target="_self">4、合并字典</a> <a href="#ListComprehensiontopic-16" target="_self">5、编写函数</a> <a href="#ListComprehensiontopic-17" target="_self">6、单行递归</a> <a href="#ListComprehensiontopic-18" target="_self">7、数组过滤</a> <a href="#ListComprehensiontopic-19" target="_self">8、异常处理</a> <a href="#ListComprehensiontopic-20" target="_self">9、列出字典</a> <a href="#ListComprehensiontopic-21" target="_self">10、多变量赋值</a> <a href="#ListComprehensiontopic-22" target="_self">11、交换</a> <a href="#ListComprehensiontopic-23" target="_self">12、排序</a> <a href="#ListComprehensiontopic-24" target="_self">13、读取文件</a> <a href="#ListComprehensiontopic-25" target="_self">14、类</a> <a href="#ListComprehensiontopic-26" target="_self">15、分号</a> <a href="#ListComprehensiontopic-27" target="_self">16、打印</a> <a href="#ListComprehensiontopic-28" target="_self">17、Map 函数</a> <a href="#ListComprehensiontopic-29" target="_self">18、删除列表中的 Mul 元素</a> <a href="#ListComprehensiontopic-30" target="_self">19、打印图案</a> <a href="#ListComprehensiontopic-31" target="_self">20、查找质数</a> </div></center><br><br>\n<h3>Python Comprehensions</h3>\n<a href="https://www.youtube.com/watch?v=twxE0dEp3qQ" class="whitebut ">Using Python Comprehensions</a>\n<br><a href="..\..\MyDocs\Python Documents\python exercise\python list comprehension exercise.TXT">python list comprehension exercise</a>\n<a href="https://www.geeksforgeeks.org/kth-non-repeating-character-python-using-list-comprehension-ordereddict/">K’th Non-repeating Character in Python using List Comprehension and OrderedDict</a>\n<h3 id="ListComprehensiontopic-0"><span class="brown">List Comprehension</span></h3>\nList comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.\nExample:\nBased on a list of fruits, you want a new list, containing only the fruits with the letter "a" in the name.\nWithout list comprehension you will have to write a for statement with a conditional test inside:\nExample fruits = ["apple", "banana", "cherry", "kiwi", "mango"]\nnewlist = []\nfor x in fruits:\nif "a" in x:\n  newlist.append(x)\nprint(newlist) \nWith list comprehension you can do all that with only one line of code:\nExample fruits = ["apple", "banana", "cherry", "kiwi", "mango"]\nnewlist = [x for x in fruits if "a" in x]\nprint(newlist) \n<h3 id="ListComprehensiontopic-1"><br><span class="brown">The Syntax<br></span></h3>\nnewlist = [<em>expression</em> for <em>item</em> in <em>iterable</em> if <em>condition</em> == True]\nThe return value is a new list, leaving the old list unchanged.\n<h3 id="ListComprehensiontopic-2">Condition</h3>\nThe <em>condition</em> is like a filter that only accepts the items that valuate to \nTrue.\n<h3 id="ListComprehensiontopic-3"><br>Example Only accept items that are not "apple":</h3>\nnewlist = [x for x in fruits if x != "apple"] \nThe condition\nif x != "apple" will return True for all elements other than "apple", making the new list contain all fruits except "apple".\nThe <em>condition</em> is optional and can be omitted:\n<h3 id="ListComprehensiontopic-4"><br>Example With no if statement:</h3>\nnewlist = [x for x in fruits] \n<h3 id="ListComprehensiontopic-5"><br>Iterable</h3>\nThe <em>iterable</em> can be any iterable object, like a list, tuple, set etc.\n<h3 id="ListComprehensiontopic-6"><br>Example You can use the range() function to create an iterable:</h3>\nnewlist = [x for x in range(10)] \nSame example, but with a condition:\n<h3 id="ListComprehensiontopic-7"><br>Example Accept only numbers lower than 5:</h3>\nnewlist = [x for x in range(10) if x &lt; 5] \n<h3 id="ListComprehensiontopic-8"><br>Expression</h3>\nThe <em>expression</em> is the current item in the iteration, but it is also the outcome, which you can manipulate before it ends up like a list item in the new list:\n<h3 id="ListComprehensiontopic-9"><br>Example Set the values in the new list to upper case:</h3>\nnewlist = [x.upper() for x in fruits] \nYou can set the outcome to whatever you like:\n<h3 id="ListComprehensiontopic-10"><br>Example Set all values in the new list to \'hello\':</h3>\nnewlist = [\'hello\' for x in fruits] \nThe <em>expression</em> can also contain conditions, not like a filter, but as a way to manipulate the outcome:\n<h3 id="ListComprehensiontopic-11"><br>Example Return "orange" instead of "banana":</h3>\nnewlist = [x if x != "banana" else "orange" for x in fruits] \nThe <em>expression</em> in the example above says:\n<em>"Return the item if it is not banana, if it is banana return orange".</em>\n<b id="ListComprehensiontopic-12"><br>1、For 循环</b>\nfor 循环是一个多行语句，但是在 Python 中，我们可以使用 List Comprehension 方法在一行中编写 for 循环。\n让我们以过滤小于 250 的值为例。\n示例代码如下：\n#For loop in One line\nmylist = [100, 200, 300, 400, 500]\n<b>#Orignal way</b>\nresult = []\nfor x in mylist:\n  if x &gt; 250:\n   result.append(x)\nprint(result) # [300, 400, 500]\n<b>#One Line Way</b>\nresult = [x for x in mylist if x &gt; 250]\nprint(result) # [300, 400, 500]\n<b id="ListComprehensiontopic-13">2、 While 循环</b>\n这个 One-Liner 片段将向您展示如何在 One Line 中使用 While 循环代码，在这里，我已经展示了两种方法。\n代码如下：\n#method 1 Single Statement\nwhile True: print(1)  # infinite 1\n<b>#method 2 Multiple Statement</b>\nx = 0\nwhile x &lt; 5: print(x); x= x + 1  # 0 1 2 3 4 5\n<b id="ListComprehensiontopic-14">3、IF Else 语句</b>\n好吧，要在 One Line 中编写 IF Else 语句，我们将使用三元运算符。\n三元的语法是“[on true] if [expression] else [on false]”。\n我在下面的示例代码中展示了 3 个示例，以使您清楚地了解如何将三元运算符用于一行 if-else 语句，要使用 Elif 语句，我们必须使用多个三元运算符。\n#if Else in One Line\n<b>#Example 1 if else</b>\nprint("Yes") if 8 &gt; 9 else print("No")  # No\n<b>#Example 2 if elif else</b>\nE = 2\nprint("High") if E == 5 else print("Meidum") if E == 2 else print("Low") # Medium\n<b>#Example 3 only if</b>\nif 3 &gt; 2: print("Exactly") # Exactly\n<b id="ListComprehensiontopic-15">4、合并字典</b>\n这个单行代码段将向您展示如何使用一行代码将两个字典合并为一个。\n下面我展示了两种合并字典的方法。\n# Merge Dictionary in One Line\nd1 = { \'A\': 1, \'B\': 2 }\nd2 = { \'C\': 3, \'D\': 4 }\n<b>#method 1</b>\nd1.update(d2)\nprint(d1) # {\'A\': 1, \'B\': 2, \'C\': 3, \'D\': 4}\n<b>#method 2</b>\nd3 = {**d1, **d2}\nprint(d3) # {\'A\': 1, \'B\': 2, \'C\': 3, \'D\': 4}\n<b id="ListComprehensiontopic-16">5、编写函数</b>\n我们有两种方法可以在一行中编写函数，在第一种方法中，我们将使用与三元运算符或单行循环方法相同的函数定义。\n第二种方法是用 lambda 定义函数，查看下面的示例代码以获得更清晰的理解。\n#Function in One Line\n<b>#method 1</b>\ndef fun(x): return True if x % 2 == 0 else False\nprint(fun(2)) # False\n<b>#method 2</b>\nfun = lambda x : x % 2 == 0 \nprint(fun(2)) # True\nprint(fun(3)) # False\n<b id="ListComprehensiontopic-17">6、单行递归</b>\n这个单行代码片段将展示如何在一行中使用递归，我们将使用一行函数定义和一行 if-else 语句，下面是查找斐波那契数的示例。\n# Recursion in One Line\n#Fibonaci example with one line Recursion\ndef Fib(x): return 1 if x in {0, 1} else Fib(x-1) + Fib(x-2)\nprint(Fib(5)) # 8\nprint(Fib(15)) # 987\n<b id="ListComprehensiontopic-18">7、数组过滤</b>\nPython 列表可以通过使用列表推导方法在一行代码中进行过滤，让我们以过滤偶数列表为例。\n# Array Filtering in One Line\nmylist = [2, 3, 5, 8, 9, 12, 13, 15]\n<b>#Normal Way</b>\nresult = []\nfor x in mylist:\n  if x % 2 == 0:\n   result.append(x)\nprint(result) # [2, 8, 12]\n<b>#One Line Way</b>\nresult = [x for x in mylist if x % 2 == 0]\nprint(result) # [2, 8, 12]\n<b id="ListComprehensiontopic-19">8、异常处理</b>\n我们使用异常处理来处理 Python 中的运行时错误，你知道我们可以在 One-Line 中编写这个 Try except 语句吗？通过使用 exec() 语句，我们可以做到这一点。\n# Exception Handling in One Line\n#Original Way\ntry:\n  print(x)\nexcept:\n  print("Error")\n<b>#One Line Way</b>\nexec(\'try:print(x) \nexcept:print("Error")\') # Error\n<b id="ListComprehensiontopic-20">9、列出字典</b>\n我们可以使用 Python enumerate() 函数将 List 转换为 Dictionary in One Line，在 enumerate() 中传递列表并使用 dict() 将最终输出转换为字典格式。\n# Dictionary in One line\nmydict = ["John", "Peter", "Mathew", "Tom"]\nmydict = dict(enumerate(mydict))\nprint(mydict) # {0: \'John\', 1: \'Peter\', 2: \'Mathew\', 3: \'Tom\'}\n<b id="ListComprehensiontopic-21">10、多变量赋值</b>\nPython 允许在一行中进行多个变量赋值，下面的示例代码将向您展示如何做到这一点。\n#Multi Line Variable\n<b>#Normal Way</b>\nx = 5\ny = 7 \nz = 10\nprint(x , y, z) # 5 7 10\n<b>#One Line way</b>\na, b, c = 5, 7, 10\nprint(a, b, c) # 5 7 10\n<b id="ListComprehensiontopic-22">11、交换</b>\n交换是编程中一项有趣的任务，并且总是需要第三个变量名称 temp 来保存交换值。\n这个单行代码段将向您展示如何在没有任何临时变量的情况下交换一行中的值。\n#Swap in One Line\n<b>#Normal way</b>\nv1 = 100\nv2 = 200\ntemp = v1\nv1 = v2 \nv2 = temp\nprint(v1, v2) # 200 100\n# One Line Swapping\nv1, v2 = v2, v1\nprint(v1, v2) # 200 100\n<b id="ListComprehensiontopic-23">12、排序</b>\n排序是编程中的一个普遍问题，Python 有许多内置的方法来解决这个排序问题，下面的代码示例将展示如何在一行中进行排序。\n# Sort in One Line\nmylist = [32, 22, 11, 4, 6, 8, 12]\n<b># method 1</b>\nmylist.sort()\nprint(mylist) # # [4, 6, 8, 11, 12, 22, 32]\nprint(sorted(mylist)) # [4, 6, 8, 11, 12, 22, 32]\n<b id="ListComprehensiontopic-24">13、读取文件</b>\n不使用语句或正常读取方法，也可以正确读取一行文件。\n#Read File in One Line\n<b>#Normal Way</b>\nwith open("data.txt", "r") as file:\n  data = file.readline()\n  print(data) # Hello world\n<b>#One Line Way</b>\ndata = [line.strip() for line in open("data.txt","r")]\nprint(data) # [\'hello world\', \'Hello Python\']\n<b id="ListComprehensiontopic-25">14、类</b>\n类总是多线工作，但是在 Python 中，有一些方法可以在一行代码中使用类特性。\n# Class in One Line\n<b>#Normal way </b>\nclass Emp:\n  def __init__(self, name, age):\n   self.name = name\n   self.age = age\nemp1 = Emp("Haider", 22)\nprint(emp1.name, emp1.age) # Haider 22\n<b>#One Line Way</b>\n<b>#method 1 Lambda with Dynamic Artibutes</b>\nEmp = lambda: None; Emp.name = "Haider"; Emp.age = 22\nprint(Emp.name, Emp.age) # Haider 22\n<b>#method 2</b>\nfrom collections import namedtuple\nEmp = namedtuple(\'Emp\', ["name", "age"]) ("Haider", 22)\nprint(Emp.name, Emp.age) # Haider 22\n<b id="ListComprehensiontopic-26">15、分号</b>\n一行代码片段中的分号将向您展示如何使用分号在一行中编写多行代码。\n# Semi colon in One Line\n<b>#example 1</b>\na = "Python"; b = "Programming"; c = "Language"; print(a, b, c)\n#output:\n# Python Programming Language\n<b id="ListComprehensiontopic-27">16、打印</b>\n这不是很重要的 Snippet，但有时当您不需要使用循环来执行任务时它很有用。\n# Print in One Line\n<b>#Normal Way</b>\nfor x in range(1, 5):\n  print(x) # 1 2 3 4\n<b>#One Line Way</b>\nprint(*range(1, 5)) # 1 2 3 4\nprint(*range(1, 6)) # 1 2 3 4 5\n<b id="ListComprehensiontopic-28">17、Map 函数</b>\nMap 函数是适用的高阶函数，这将函数应用于每个元素，下面是我们如何在一行代码中使用 map 函数的示例。\n#Map in One Line\nprint(list(map(lambda a: a + 2, [5, 6, 7, 8, 9, 10])))\n#output\n# [7, 8, 9, 10, 11, 12]\n<b id="ListComprehensiontopic-29">18、删除列表中的 Mul 元素</b>\n您现在可以使用 del 方法在一行代码中删除 List 中的多个元素，只需稍作修改。\n# Delete Mul Element in One Line\nmylist = [100, 200, 300, 400, 500]\ndel mylist[1::2]\nprint(mylist) # [100, 300, 500]\n<b id="ListComprehensiontopic-30">19、打印图案</b>\n现在您不再需要使用 Loop 来打印相同的图案，您可以使用 Print 语句和星号 (*) 在一行代码中执行相同的操作。\n# Print Pattern in One Line\n<b># Normal Way</b>\nfor x in range(3):\n  print(\'😀\')\n# output \n# 😀 😀 😀\n<b>#One Line way</b>\nprint(\'😀\' * 3) # 😀 😀 😀\nprint(\'😀\' * 2) # 😀 😀 \nprint(\'😀\' * 1) # 😀\n<b id="ListComprehensiontopic-31">20、查找质数</b>\n此代码段将向您展示如何编写单行代码来查找范围内的质数。\n# Find Prime Number\nprint(list(filter(lambda a: all(a % b != 0 for b in range(2, a)), range(2,20))))\n#Output\n# [2, 3, 5, 7, 11, 13, 17, 19]\n',
'<h2>student info management</h2>\n# 学生信息放在字典里面\nstudent_info = [\n {\'姓名\': \'婧琪\', \'语文\': 60, \'数学\': 60, \'英语\': 60, \'总分\': 180},\n {\'姓名\': \'巳月\', \'语文\': 60, \'数学\': 60, \'英语\': 60, \'总分\': 180},\n {\'姓名\': \'落落\', \'语文\': 60, \'数学\': 60, \'英语\': 60, \'总分\': 180},\n]\n \n# 死循环 while True\n# 源码自取君羊：708525271\nwhile True:\n print(msg)\n num = input(\'请输入你想要进行操作: \')\n # 进行判断, 判断输入内容是什么, 然后返回相应结果\n if num == \'1\':\n  name = input(\'请输入学生姓名: \')\n  chinese = int(input(\'请输入语文成绩: \'))\n  math = int(input(\'请输入数学成绩: \'))\n  english = int(input(\'请输入英语成绩: \'))\n  score = chinese + math + english  # 总分\n  student_dit = { # 把信息内容, 放入字典里面\n   \'姓名\': name,\n   \'语文\': chinese,\n   \'数学\': math,\n   \'英语\': english,\n   \'总分\': score,\n  }\n  student_info.append(student_dit) # 把学生信息 添加到列表里面\n \n elif num == \'2\':\n  print(\'姓名\t\t语文\t\t数学\t\t英语\t\t总分\')\n  for student in student_info:\n   print(\n    student[\'姓名\'], \'\t\t\',\n    student[\'语文\'], \'\t\t\',\n    student[\'数学\'], \'\t\t\',\n    student[\'英语\'], \'\t\t\',\n    student[\'总分\'],\n   )\n \n elif num == \'3\':\n  name = input(\'请输入查询学生姓名: \')\n  for student in student_info:\n   if name == student[\'姓名\']: # 判断 查询名字和学生名字 是否一致\n    print(\'姓名\t\t语文\t\t数学\t\t英语\t\t总分\')\n    print(\n     student[\'姓名\'], \'\t\t\',\n     student[\'语文\'], \'\t\t\',\n     student[\'数学\'], \'\t\t\',\n     student[\'英语\'], \'\t\t\',\n     student[\'总分\'],\n    )\n    break\n  else:\n   print(\'查无此人, 没有{}学生信息!\'.format(name))\n \n  elif num == \'4\':\n  name = input(\'请输入删除学生姓名: \')\n  for student in student_info:\n   if name == student[\'姓名\']:\n    print(\'姓名\t\t语文\t\t数学\t\t英语\t\t总分\')\n    print(\n     student[\'姓名\'], \'\t\t\',\n     student[\'语文\'], \'\t\t\',\n     student[\'数学\'], \'\t\t\',\n     student[\'英语\'], \'\t\t\',\n     student[\'总分\'],\n    )\n    choose = input(f\'是否确定要删除{name}信息(y/n)\')\n    if choose == \'y\' or choose == \'Y\':\n     student_info.remove(student)\n     print(f\'{name}信息已经被删除!\')\n     break\n    elif choose == \'n\' or choose == \'N\':\n     break\n  else:\n   print(\'查无此人, 没有{}学生信息!\'.format(name))\n elif num == \'5\':\n  print(\'修改学生信息\')\n  name = input(\'请输入删除学生姓名: \')\n  for student in student_info:\n   if name == student[\'姓名\']:\n    print(\'姓名\t\t语文\t\t数学\t\t英语\t\t总分\')\n    print(\n     student[\'姓名\'], \'\t\t\',\n     student[\'语文\'], \'\t\t\',\n     student[\'数学\'], \'\t\t\',\n     student[\'英语\'], \'\t\t\',\n     student[\'总分\'],\n    )\n    choose = input(f\'是否要修改{name}信息(y/n)\')\n    if choose == \'y\' or choose == \'Y\':\n     name = input(\'请输入学生姓名: \')\n     chinese = int(input(\'请输入语文成绩: \'))\n     math = int(input(\'请输入数学成绩: \'))\n     english = int(input(\'请输入英语成绩: \'))\n     score = chinese + math + english  # 总分\n     student[\'姓名\'] = name\n     student[\'语文\'] = chinese\n     student[\'数学\'] = math\n     student[\'英语\'] = english\n     student[\'总分\'] = score\n     print(f\'{name}信息已经修改了!\')\n     break\n    elif choose == \'n\' or choose == \'N\':\n     # 跳出循环\n     break\n  else:\n    print(\'查无此人, 没有{}学生信息!\'.format(name))\n',
'<h2>if else 升级新语法</h1>\nPython 从 <i>if else</i> 优化到 <i>match case</i>\n<i>Python 是一门非常重 if else 的语言</i>\n以前 Python 真的是把 if else 用到了极致，比如说 Python 里面没有三元运算符(<i> xx ? y : z </i>) 无所谓，它可以用 if else 整一个。\n<k>x = True if 100 &gt; 0 else False</k>离谱的事还没有完，if  else 这两老六还可以分别与其它语法结合，其中又数 else 玩的最野。\na: else 可以和 try 玩到一起，当 try 中没有引发异常的时候 else 块会得到执行。\n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>def main():\n try:\n  # ...\n  pass\n except Exception as err:\n  pass\n else:\n  print("this is else block")\n finally:\n  print("finally block")</k>\n<k>if __name__  == "__main__":\n main()</k>b: else 也可以配合循环语句使用，当循环体中没有执行 break 语句时 else 块能得到执行。\n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>def main():\n for i in range(3):\n  pass\n else:\n  print("this is else block")</k>\n<k> while False:\n  pass\n else:\n  print("this is else block")</k>\n<k>if __name__  == "__main__":\n main()</k>\nc: if 相对来说就没有 else 那么多的副业；常见的就是列表推导。\n以过滤出列表中的偶数为例，传统上我们的代码可能是这样的。\n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>def main():\n result = []</k>\n<k> numers = [1, 2, 3, 4, 5]\n for number in numers:\n  if number % 2 == 0:\n   result.append(number)\n \n print(result)\n </k>\n<k>if __name__  == "__main__":\n main()</k>使用列表推导可以一行解决。\n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>def main():\n numers = [1, 2, 3, 4, 5]\n print( [_ for _ in numers if _ % 2 == 0] )</k>\n<k>if __name__  == "__main__":\n main()</k>看起来这些增强都还可以，但是对于类似于 switch 的这些场景，就不理想了。\n<i>没有 switch 语句 if else 顶上</i>\n对于 Python 这种把 if else 在语法上用到极致的语言，没有 switch 语句没关系的，它可以用 if else ！！！ \n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>def fun(times):\n """这个函数不是我们测试的重点这里直接留白</k>\n<k> Parameter\n ---------\n times: int</k>\n<k> """\n pass</k>\n<k>def main(case_id: int):\n """由 case_id 到调用函数还有其它逻辑，这里为了简单统一处理在 100 * case_id</k>\n<k> Parameter\n ---------\n times: int</k>\n<k> """\n if case_id == 1:\n  fun(100 * 1)\n elif case_id == 2:\n  fun(100 * 2)\n elif case_id == 3:\n  fun(100 * 3)\n elif case_id == 4:\n  fun(100 * 4)</k>\n<k>if __name__  == "__main__":\n main(1)</k>这个代码写出来大家应该发现了，这样的代码像流水账一样<i>一点都不优雅</i>，用 Python 的话来说，这个叫一点都不 <i>Pythonic</i> ！<i>其它语言不好说，对于 Python 来讲不优雅就是有罪</i>。\n前面铺垫了这么多，终于快到重点了。\n社区提出了一个相对优雅的写法，新写法完全不用 if else 。\n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>def fun(times):\n pass</k>\n<k># 用字典以 case 为键，要执行的函数对象为值，这样做到按 case 路由\nrouters = {\n 1: fun,\n 2: fun,\n 3: fun,\n 4: fun\n}</k>\n<k>def main(case_id: int):\n   routers[case_id](100 * case_id)</k>\n<k>if __name__  == "__main__":\n main(1)</k>可以看到新的写法下，代码确实简洁了不少；从另一个角度来看社区也完成了一次进化，从之前抱着 if else 这个传家宝不放，到完全不用 if else 。\n也算是非常有意思吧。\n新写法也不是没有问题；性能！性能！还是他妈的性能不行！\n<i>if else 和宝典写法性能测试</i>\n在说测试结果之前，先介绍一下我的开发环境，腾讯云的虚拟机器，Python 版本是 Python-3.12.0a3 。\n测试代码会记录耗时和内存开销，耗时小的性能就好。\n详细的代码如下。\n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>import timeit\nimport tracemalloc</k>\n<k>tracemalloc.start()</k>\n<k>def fun(times):\n """这个函数不是我们测试的重点这里直接留白</k>\n<k> Parameter\n ---------\n times: int</k>\n<k> """\n pass</k>\n<k># 定义 case 到 操作的路由字典\nrouters = {\n 1: fun,\n 2: fun,\n 3: fun,\n 4: fun\n}</k>\n<k>def main(case_id: int):\n """用于测试 if else 写法的耗时情况</k>\n<k> Parametr\n --------\n case_id: int\n  不同 case 的唯一标识</k>\n<k> Return\n ------\n None\n """\n if case_id == 1:\n  fun(100 * 1)\n elif case_id == 2:\n  fun(100 * 2)\n elif case_id == 3:\n  fun(100 * 3)\n elif case_id == 4:\n  fun(100 * 4)</k>\n<k>def main(case_id: int):\n """测试字典定法的耗时情况</k>\n<k> Parametr\n --------\n case_id: int\n  不同 case 的唯一标识</k>\n<k> Return\n ------\n None\n """\n routers[case_id](100 * case_id)</k>\n<k>if __name__ == "__main__":\n # 1. 记录开始时间、内存\n # 2. 性能测试\n # 3. 记录结束时间和总的耗时情况</k>\n<k> start_current, start_peak = tracemalloc.get_traced_memory()\n start_at = timeit.default_timer()</k>\n<k> for i in range(10000000):\n  main((i % 4) + 1)\n end_at = timeit.timeit()</k>\n<k> cost = timeit.default_timer() - start_at\n end_current, end_peak = tracemalloc.get_traced_memory()\n \n print(f"time cost = {cost} .")\n print(f"memery cost = {end_current - start_current}, {end_peak - start_peak}")</k>下面直接上我在开发环境的测试结果。\n<img src="https://mmbiz.qpic.cn/mmbiz_png/dTYibpXKjh45mQxHVibZd2XGNKr8ydkCNUDWd46OpKEI494lGbj0xbqwNUUgc1HA2bVias8NMicK9Y1nibyZMNcafvw/640">\n文字版本。\n<img src="https://mmbiz.qpic.cn/mmbiz_png/dTYibpXKjh45mQxHVibZd2XGNKr8ydkCNU9gloW1KFntWU3Sx273IhiaaEX6ibvNbNFAuqAU1Pic5iat5KaTAIe2AzcQ/640">\n可以看到字典写法虽然优雅了一些，但是它在性能上是不行的。\n故事讲到这里，我们这次的主角要上场了。\n<i>match case 新语法</i>\n<i>Python-3.10</i> 版本引入了一个新的语法 <i>match case</i> ，这个新语法和其它语言的 <i>switch case</i> 差不多。\n在性能上比字典写法好一点，在代码的优雅程度上比 if else 好一点。\n大致语法像这样。\n<k> match xxx:\n  case aaa:\n   ...\n  case bbb:\n   ... \n  case ccc:\n   ...\n  case ddd:\n   ...</k>\n光说不练，假把式！改一下我们的测试代码然后比较一下三者的性能差异。\n<k>#!/usr/bin/env python3\n# -*- coding: utf8 -*-</k>\n<k>import timeit\nimport tracemalloc</k>\n<k>tracemalloc.start()</k>\n<k>def fun(times):\n """这个函数不是我们测试的重点这里直接留白</k>\n<k> Parameter\n ---------\n times: int</k>\n<k> """\n pass</k>\n<k># 定义 case 到 操作的路由字典\nrouters = {\n 1: fun,\n 2: fun,\n 3: fun,\n 4: fun\n}</k>\n<k>def main(case_id: int):\n """用于测试 if else 写法的耗时情况</k>\n<k> Parametr\n --------\n case_id: int\n  不同 case 的唯一标识</k>\n<k> Return\n ------\n None\n """\n if case_id == 1:\n  fun(100 * 1)\n elif case_id == 2:\n  fun(100 * 2)\n elif case_id == 3:\n  fun(100 * 3)\n elif case_id == 4:\n  fun(100 * 4)</k>\n<k>def main(case_id: int):\n """测试字典定法的耗时情况</k>\n<k> Parametr\n --------\n case_id: int\n  不同 case 的唯一标识</k>\n<k> Return\n ------\n None\n """\n routers[case_id](100 * case_id)</k>\n<k>def main(case_id: int):\n """测试 match case 写法的耗时情况</k>\n<k> Parametr\n --------\n case_id: int\n  不同 case 的唯一标识</k>\n<k> Return\n ------\n None\n """\n match case_id:\n  case 1:\n   fun(100 * 1)\n  case 2:\n   fun(100 * 2)\n  case 3:\n   fun(100 * 3)\n  case 4:\n   fun(100 * 4)</k>\n<k>if __name__ == "__main__":\n # 1. 记录开始时间、内存\n # 2. 性能测试\n # 3. 记录结束时间和总的耗时情况</k>\n<k> start_current, start_peak = tracemalloc.get_traced_memory()\n start_at = timeit.default_timer()</k>\n<k> for i in range(10000000):\n  main((i % 4) + 1)\n end_at = timeit.timeit()</k>\n<k> cost = timeit.default_timer() - start_at\n end_current, end_peak = tracemalloc.get_traced_memory()\n \n print(f"time cost = {cost} .")\n print(f"memery cost = {end_current - start_current}, {end_peak - start_peak}")\n </k>可以看到 match case 耗时还是比较理想的。\n<img src="https://mmbiz.qpic.cn/mmbiz_png/dTYibpXKjh45mQxHVibZd2XGNKr8ydkCNU5pHOgPBUYHd7ibEa0cbMuuozKynU3oSoumc2xg9rwhsdh6HPOhrumHw/640">\n详细的数据如下。\n<img src="https://mmbiz.qpic.cn/mmbiz_png/dTYibpXKjh45mQxHVibZd2XGNKr8ydkCNUv2WZCkM5J2ocIvrsh06g4gSk5T57GmpEFicRv8iaJ9IBYQpALCceWSdw/640">\n',
'<h2>20 Python libraries</h2>\n<a href="http://www.python-requests.org">Requests</a>.\nThe most famous http library written by Kenneth Reitz.\nIt\'s a must have for every python developer.\n<a href="http://www.scrapy.org">Scrapy</a>.\nIf you are involved in webscraping then this is a must have library for you.\nAfter using this library you won\'t use any other.\n<a href="http://wxpython.org/">wxPython</a>.\nA gui toolkit for python.\nI have primarily used it in place of tkinter.\nYou will really love it.\n<a href="https://github.com/python-imaging/Pillow">Pillow</a>.\nA friendly fork of PIL (Python Imaging Library).\nIt is more user friendly than PIL and is a must have for anyone who works with images.\n<a href="http://www.sqlalchemy.org/">SQLAlchemy</a>.\nA database library.\nMany love it and many hate it.\nThe choice is yours.\n<a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a>.\nI know it\'s slow but this xml and html parsing library is very useful for beginners.\n<a href="http://twistedmatrix.com/">Twisted</a>.\nThe most important tool for any network application developer.\nIt has a very beautiful api and is used by a lot of famous python developers.\n<a href="http://numpy.scipy.org//">NumPy</a>.\nHow can we leave this very important library ? It provides some advance math functionalities to python.\n<a href="http://www.scipy.org/">SciPy</a>.\nWhen we talk about NumPy then we have to talk about scipy.\nIt is a library of algorithms and mathematical tools for python and has caused many scientists to switch from ruby to python.\n<a href="http://matplotlib.sourceforge.net/">matplotlib</a>.\nA numerical plotting library.\nIt is very useful for any data scientist or any data analyzer.\n<a href="http://www.pygame.org/news.html">Pygame</a>.\nWhich developer does not like to play games and develop them ? This library will help you achieve your goal of 2d game development.\n<a href="http://www.pyglet.org/">Pyglet</a>.\nA 3d animation and game creation engine.\nThis is the engine in which the famous <a href="https://github.com/fogleman/Minecraft">python port</a> of minecraft was made\n<a href="http://www.riverbankcomputing.co.uk/pyqt/">pyQT</a>.\nA GUI toolkit for python.\nIt is my second choice after wxpython for developing GUI\'s for my python scripts.\n<a href="http://www.pygtk.org/">pyGtk</a>.\nAnother python GUI library.\nIt is the same library in which the famous Bittorrent client is created.\n<a href="http://www.secdev.org/projects/scapy/">Scapy</a>.\nA packet sniffer and analyzer for python made in python.\n<a href="http://sourceforge.net/projects/pywin32/">pywin32</a>.\nA python library which provides some useful methods and classes for interacting with windows.\n<a href="http://www.nltk.org/">nltk</a>.\nNatural Language Toolkit – I realize most people won’t be using this one, but it’s generic enough.\nIt is a very useful library if you want to manipulate strings.\nBut it\'s capacity is beyond that.\nDo check it out.\n<a href="http://code.google.com/p/python-nose/">nose</a>.\nA testing framework for python.\nIt is used by millions of python developers.\nIt is a must have if you do test driven development.\n<a href="http://code.google.com/p/sympy/">SymPy</a>.\nSymPy can do algebraic evaluation, differentiation, expansion, complex numbers, etc.\nIt is contained in a pure Python distribution.\n<a href="http://ipython.scipy.org/moin/">IPython</a>.\nI just can’t stress enough how useful this tool is.\nIt is a python prompt on steroids.\nIt has completion, history, shell capabilities, and a lot more.\nMake sure that you take a look at it.\n',
'<h2>Python实现文本自动播读</h2>\n<k>用Python代码实现文本自动播放功能，主要有5步。第一步：\n导入需要的依赖库。</k>这里面主要用到两个库：\n（1）requests库：\n作用是利用百度接口将文本解析为音频（2）os库：\n用于播放音频<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/9UfweOnhYHjPJiaM3YPkN3XuoA7gEAV3tBibMU1le7S0GINRpFaLic00WrB7S7tkk0L9YmyLjQMlh5IshiaGibsnTlg/640">\n<k>第二步：\n获取百度接口将文本解析的access_token。\n</k>主要是通过requests库的get方法获取<k>access_token</k>。\n备注：\nak和sk需要在百度云注册获取，请小伙伴们别忘了！\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/9UfweOnhYHjPJiaM3YPkN3XuoA7gEAV3tbAwb9XlOLhyt7PECd6bhtosWABs6pmqXduIffRSdneOg0koqPiahhSg/640">\n<k>第三步：将文本解析为音频流。</k>主要是通过requests库的get方法获取文本对应的音频流。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/9UfweOnhYHjPJiaM3YPkN3XuoA7gEAV3tcIhicrO7YN4jlpmJKlVy51jcjEFQPp2lOcYfx4teYGjpkplWiaWspoSw/640">\n<k>第四步：将解析的音频流保存。</k>主要是通过文件操作的write方法将文本对应的音频流写入保存。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/9UfweOnhYHjPJiaM3YPkN3XuoA7gEAV3txZ1H2L9YlwEmqLYiaQTSM3oLa0aPmT3sTevOpyRF2tgTYdZYMgls0SA/640">\n<k>第五步：\n播放保存的音频流文件。\n</k><img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/9UfweOnhYHjPJiaM3YPkN3XuoA7gEAV3t6ia0juKMSgS5Ib2vGEv8LI5nOeoCEjLALHdrfz96waYzR6zTEicPh1fg/640">\n具体的代码\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/9UfweOnhYHjPJiaM3YPkN3XuoA7gEAV3t59qDdxSyPcO4xNRXnl8htjry5LEwJVEev3jrkfe6DYAgOCcV3cRc5g/640">\n',
'<h2>Python速查表</h2>\n',
'<h2><k>基础</k></h2><h3>神经网络</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ce0HQTdz9fRLk3pLKcG6H9tI7RibGXxFkic2dicfWfd3IDgS4kfrPyiazcMA/640">\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ceFqpqZoAQoYJDwk20GMZmqooxEUebW05wC6u59GlibKyHcH3Xdianmslw/640">\n<h3>线性代数</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ceKnEEJfibGJkc8tPlqkTB6ibCbicsbk02G7xBrnMbmQb0AGzJnnowCiaRCA/640">\n<h3>python基础</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ceGhtobPSMvLKS8p28ZhAwrkhPDy3bXrDq9xhKvDLGHo4ecUYiaOyoHeQ/640">\n<h3>scipy科学计算</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ceGhtobPSMvLKS8p28ZhAwrkhPDy3bXrDq9xhKvDLGHo4ecUYiaOyoHeQ/640">\n<h3>spark</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/A7icgZ2Ooga3584lTfyw9LAVB330z91ce3fiaWBliazntZ6SdYp2W1px6ic8aps9Tu5XD78G7jgHrlguZuytKzJRcQ/640">\n',
'<h2><k>数据保存及可视化</k></h2><h3>numpy</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91cex6SibMxmXoZ3weeRiaobKIE2HldAuIPBXiawz7eA5PjcDicpFoPH6vCRhA/640">\n<h3>pandas</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ce35B45IOsg0uof7bCdWnkXStS8YOyrKMdQKHbIWQRY3A7krlL4KXFHA/640">\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/A7icgZ2Ooga3584lTfyw9LAVB330z91cexz5MtvyRokJXf3taicibLwk50sg44mJQ2unBo2bf8J9dgorKZDk74ibSA/640">\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/A7icgZ2Ooga3584lTfyw9LAVB330z91ceiclNY6Mbs6H4iaEP1DKLS13D23a2iasQfjYJtr0rCUsmkVACBtfhXJeog/640">\n<h3>bokeh</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91cexoyM8uJJjzGytNWmibURAmx2bEYDLwmUW3VttjwxRSo4xsuZdHT7MQw/640">\n',
'<h2><k>画图</k></h2><h3>matplotlib</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91cenSVkTkvsl7JuoKV2WGb914v83tyB3kT2MNUOnO8wlUwheX33Ma5YGA/640">\n<h3>ggplot</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/A7icgZ2Ooga3584lTfyw9LAVB330z91ce3RWZDSCMfOxo5VibQ1lbiaauhncWGdxibO1xT1ynL7jicoLRqoc4BR8QMg/640">\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/A7icgZ2Ooga3584lTfyw9LAVB330z91cevIF6ZuQmlQ043vIMfzH7DGPjgZPx99u5qbic7bGDTyra7osTS3R3ibmg/640">\n',
'<h2><k>机器学习</k></h2><h3>sklearn</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ceibE1H5X98iaTXk3Jww5JpSVr4DoN5rQ3XUsrX9epGZNWgLxLbycibXYFQ/640">\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91cen1vdr0SUiatjSXX9z6ngJPzDWywk1EncJiajQaypqwCwIibtq5Co3E8Nw/640">\n<h3>keras</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/A7icgZ2Ooga3584lTfyw9LAVB330z91ce1Jbdfgicq9UiaCL916OPP1v7PKMbGwJEuLF1WhibdJoQ4j8siaPjYwZ7KQ/640">\n<h3>tensorflow</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91cemfTOuBvgG1XwLLFfft77Oo48jFZvAe5lohMO109s86hqaswxobKmkQ/640">\n',
'<h2><k>算法</k></h2><h3>数据结构</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91cehwVCPLd5Vpg3OaqbLjoGDpY5HcMuRB3IRaZEbB4M86bK7b9Rf47dzA/640">\n<h3>复杂度</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ceKZ7EiaCcj6N7WZx9y0DzDR4PiczGicdYvDTJNaAcRSibyezlupqmEbLricA/640">\n<h3>排序算法</h3>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/A7icgZ2Ooga3584lTfyw9LAVB330z91ce99sQXUzu02kcsWkSDxq1uicIjNf7ibicsvs7hRZyib6NfibwJ7Me6Rkg5KQ/640">\n',
'<h2>欧拉定理和图论</h2>\n图式理论起源于18世纪，有一个有趣的故事。\n柯尼斯堡是历史上普鲁士（今俄罗斯）的一个城市，有7座桥梁横跨普雷格尔河。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMhdXDJR6nuPw0ia1maJXbEn4KmlvIsJSvkO14ibSJ6ibTWR8RL5avq3TX8oXWkvXMVIKWIlcTaj660rA/640">\n有人问：\n有没有可能绕着柯尼斯堡走一圈，正好穿过每座桥一次？\n请注意，我们正好在开始的地方完成，这并不重要。\n我们将在学习了一些术语后再来讨论这个问题。\n<k>图</k>Graph图是一种数学结构，由以下部分组成。\n顶点（也叫节点或点）(V)，它们通过以下方式相连边（也叫链接或线）（E）它被表示为G = (V, E)<k>Degree</k>一个特定顶点的边的数量被称为它的degree\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMhdXDJR6nuPw0ia1maJXbEn4HzXNTo1mOCSJvNhrfBpE3Pd9xBBFyjt3rbbXuRu7l8n1LuaFRzVmjA/640">\n一个有6个顶点和7条边的图图在计算机科学中通常用来描述不同对象之间的关系。\n例如，Facebook作为一个图表示不同的人（顶点）和他们的关系（边）。\n同样地，维基百科的编辑（边）在夏天的一个月里对不同的维基百科语言版本（顶点）做出了贡献，可以被描述为一个图，如下所示。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMhdXDJR6nuPw0ia1maJXbEn4Bibzm5OsGHMQwlJBn3KFVdOZibQnPoibraE2o0zXzgVvAKf18rA908dDQ/640">\n图片来自维基百科以上面的柯尼斯堡为例，这个城市与河流及其桥梁可以用图示来描述，如下所示。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMhdXDJR6nuPw0ia1maJXbEn49Pev4kz1kV44tNt1icuiagCeo5ic6C0SwfibdicXQH7ED9SFaob8kFF2ubw/640">\n欧拉首先用图形表示上述图表，如下图所示。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMhdXDJR6nuPw0ia1maJXbEn49HOzZyob8KFPLU46Gkib4QYnSfeh4lZrMpCwYfPPH3GeKT3HBg8TGYA/640">\n他用一个顶点或节点来描述每块土地，用一条边来描述每座桥。\n柯尼斯堡的普雷格尔河的图形表示（图片来自维基百科）欧拉提出了一个定理，指出：\n<k>如果除了最多两座桥之外，所有的桥都有一个 "偶数度"，那么一个城市的桥就可以准确地被穿越一次。\n</k>看一下代表柯尼斯堡的图，每个顶点都有一个奇数，因此不可能绕着城市走，准确地穿过每座桥一次。\n这个定理催生了现代图论，即对图的研究。\n<k>图和类型</k>\n有向图/二维图</k>一个边有方向性的图。\n这意味着，一条边只能在一个方向上穿过。\n例如，一个代表Medium通讯和其订阅者的图。\n<k>无向图</k>一个边没有方向的图。\n这意味着一条边可以双向穿越。\n例如，一个代表Facebook上朋友之间关系的图。\n<k>循环</k>循环是一个图形，它的一些顶点（至少3个）以封闭链的形式连接。\n循环图它是一个至少有一个周期的图。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMhdXDJR6nuPw0ia1maJXbEn4BK0n0qH5TJfKtMm7TrE8XiabUVQIwtWIx5sqB3icvMZG6pGoBPQGk05Q/640">\n一个有向循环图<k>非循环图</k>它是一个没有循环的图。\n<k>连接图</k>它是一个具有从任何顶点到另一个顶点的边的图形。\n它可以是：\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_gif/96iaDuCe2JMjUYdMWqYSa3aYcBZWTM4NIQricvVu1w9LHSr4hRm5wfhrty6weVof2blPPh0kk9BzXHpJ7HgNhbYw/640">\n<k>强连接</k>：\n如果所有顶点之间存在任何双向的边连接<k>弱连接</k>：\n如果所有顶点之间没有双向的连接 无连接的图形 一个没有连接顶点的图形被称为断开连接的图形。\n<k>中心性算法</k><em>中心性算法可用于分析整个图，以了解该图中的哪些节点对网络的影响最大。\n然而， 要用算法衡量网络中节点的影响力，我们必须首先定义“影响力”在图上的含义。\n这因算法而异，并且在尝试决定选择哪种中心性算法时是一个很好的起点。\n</em><k>度中心性</k>使用<k>节点的平均度</k>来衡量它对图的影响有多大Closeness Centrality使用 给定节点与所有其他节点之间的反距离距离来了解节点在图中的中心程度Betweenness Centrality使用最短路径来确定哪些节点充当图中的中心“桥梁”，以识别网络中的关键瓶颈<em>PageRank使用一组随机游走来衡量给定节点对网络的影响力。\n通过测量哪些节点更有可能在随机游走中被访问。\n请注意，PageRank 通过偶尔跳到图中的随机点而不是直接跳跃来解决随机游走面临的断开连接的图问题。\n这允许算法探索图中甚至断开连接的部分。\nPageRank 以谷歌创始人拉里佩奇的名字命名，被开发为谷歌搜索引擎的支柱，并使其在互联网的早期阶段超越了所有竞争对手的表现。\n度中心性使用节点的平均度来衡量它对图的影响有多大Closeness Centrality使用 给定节点与所有其他节点之间的反距离距离来了解节点在图中的中心程度。\n<k>寻路和搜索算法</k>\n另一个基础图算法家族是图最短路径算法。\n正如我们在关于图遍历算法（又名寻路算法）的文章中探讨的那样，最短路径算法通常有两种形式，具体取决于问题的性质以及您希望如何探索图以最终找到最短路径。\n深度优先搜索，首先尽可能深入地遍历图形，然后返回起点并进行另一次深度路径遍历广度优先搜索，使其遍历尽可能靠近起始节点，并且只有在耗尽最接近它的所有可能路径时才冒险深入到图中寻路被用在许多用例中，也许最著名的是谷歌地图。\n在 GPS 的早期，谷歌地图使用图表上的寻路来计算到达给定目的地的最快路线。\n这只是无数人使用图表解决日常问题的众多例子之一。\n图数据科学中的深度优先搜索和广度优先搜索示例</em><iframe class="lazy" data-src="https://mp.weixin.qq.com/mp/readtemplate?t=pages/video_player_tmpl&amp;action=mpvideo&amp;auto=0&amp;vid=wxv_2754278671447834625"></iframe><k>维基百科对Dijkstra 算法的说明\n深度优先搜索</k>深度优先搜索，首先尽可能深入地遍历图形，然后返回起点并进行另一次深度路径遍历广度优先搜索，使其遍历尽可能靠近起始节点，并且只有在耗尽最接近它的所有可能路径时才冒险深入到图中。\n寻路被用在许多用例中，也许最著名的是谷歌地图。\n在 GPS 的早期，谷歌地图使用图表上的寻路来计算到达给定目的地的最快路线。\n这只是无数人使用图表解决日常问题的众多例子之一。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_gif/96iaDuCe2JMjUYdMWqYSa3aYcBZWTM4NIcdpknTFnQmEP4CxSFxbKcNntBXPaMooPpjPt5ahvcoAeFbnrORiaaVA/640">\n<k>深度优先搜索（DFS）</k>是一种搜索图数据结构的算法。\n该算法从根节点开始，在回到起点之前尽可能地沿着每个分支进行探索。\n深度优先搜索可以在Python中定义如下。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_gif/96iaDuCe2JMjUYdMWqYSa3aYcBZWTM4NIp28LG3BCWiaYrFvodibRc810Zo7fOuCmBxiceAzVu6mk4bOuiazZnbh0pg/640">\n<k>这里我们定义了一个Node类，其构造函数定义了它的子节点（连接的顶点）和名称。\naddChild方法向节点添加新的子节点。\ndepthFirstSeach方法递归地实现了深度优先搜索算法。\n</k>\nclass Node:\n def __init__(self, name):\n  self.children = []\n  self.name = name\n def addChild(self, name):\n  self.children.append(Node(name))\n  return self\n def depthFirstSearch(self, array):\n  \n  array.append(self.name)\n  for child in self.children:\n   child.depthFirstSearch(array)\n  return array\n广度优先搜索\n广度优先搜索（BFS）是另一种搜索图数据结构的算法。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_gif/96iaDuCe2JMjUYdMWqYSa3aYcBZWTM4NI66IDiaibLBG1jH71EicRlU2cNRvHyZViausmp8fqcdzB3AvIbXiaiaT53Qow/640">\n<k>Breadth-first search\n它从根节点开始，在继续搜索其他分支的节点之前，探索目前分支的所有节点。\n该算法可以用Node类的breadthFirstSearch方法定义如下。\n</k>\nclass Node:\n def __init__(self, name):\n  self.children = []\n  self.name = name\n def addChild(self, name):\n  self.children.append(Node(name))\n  return self\n def breadthFirstSearch(self, array):\n  # Write your code here.\n  queue = [self]\n  while len(queue)> 0:\n   current = queue.pop(0)\n   array.append(current.name)\n   for child in current.children:\n    queue.append(child)\n    \n  return array\n<k>图算法：\n令人惊讶的用例多样性解释</k>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/96iaDuCe2JMjUYdMWqYSa3aYcBZWTM4NIxKT89qQjaTjKPE0YR7IQ6ibeeweFHQTLtp7AhPKTicmv0dicBuV3QpCQg/640">\n<k>荐书\n附文：\n图算法家谱补充</k><em>肖恩·罗宾逊 (Sean Robinson)，MS / 首席数据科学家作者：\nSean Robinson，MS / 首席数据科学家</em>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMjUYdMWqYSa3aYcBZWTM4NICSFvlCHmuNBhe8aewZqPsL9yMUrjlDjfCbjPrJrJ64ETgtFzHnAlew/640">\n<k>图算法家谱</k>\n社区检测算法社区检测是各种图形的常见用例。\n通常，它用于理解图中不同节点组为用例提供一些有形价值的任何情况。\n这可以是社交网络中的任何东西，从运送货物的卡车车队到相互交易的账户网络。\n但是，您选择哪种算法来发现这些社区将极大地影响它们的分组方式。\nTriangle Count简单地使用了三个完全相互连接的节点（如三角形）的原理，这是图中可以存在的最简单的社区动态。\n因此，它会找到图中三角形的每个组合，以确定这些节点如何组合在一起强连通分量和连通分量（又名弱连通分量）是确定图形形状的优秀算法。\n两者都旨在衡量有多少图表构成了全部数据。\n连通分量仅返回一组节点和边中完全断开连接的图的数量，而强连通分量返回那些通过许多链接牢固连接的子图。\n正因为如此，在首次分析图形数据时，它们通常被组合用作初始探索性数据分析的一种形式Louvain Modularity通过将节点和边的集群与网络的平均值进行比较来找到社区。\n如果发现一组节点通常大于图中看到的平均数，则这些节点可以被视为一个社区。\n结论在本文中，作为一种图算法备忘单，我们只是触及了数据科学中最常见的图算法（又名图算法）的皮毛，这些算法可用于利用图必须为数据提供的互连功能分析。\n例如，在未来的 artciels 中，我们还将更多地关注图搜索算法等。\n我们研究了最基本的图论算法，它们作为更复杂的图算法的构建块，并检查了那些可以解决许多用例的各种问题的复杂算法。\n无论是 Neo4j 图数据库算法还是任何其他图数据库，都是如此。\n',
'<h2>10个最难的 Python 概念</h2>\n了解 Python 中 OOP、装饰器、生成器、多线程、异常处理、正则表达式、异步/等待、函数式编程、元编程和网络编程的复杂性\n这些可以说是使用 Python 学习最困难的概念。\n当然，对某些人来说可能困难的事情对其他人来说可能更容易。\n面向对象编程 (OOP)：对于初学者来说，理解类、对象、继承和多态性的概念可能很困难，因为它们可能是抽象的。\nOOP 是一种强大的编程范式，允许组织和重用代码，并广泛用于许多 Python 库和框架中。\n例子：创造一个狗的类：\nclass Dog:\n def __init__(self, name, breed):\n  self.name = name\n  self.breed = breed\n def bark(self):\n  <k>print</k>(<b>"Woof!"</b>)\nmy_dog = Dog(<b>"Fido"</b>, <b>"Golden Retriever"</b>)\n<k>print</k>(my_dog.name) <i># "Fido"</i>\nmy_dog.bark() <i># "Woof!"：“汪！”</i>\n<k>装饰器：</k>\n装饰器可能很难理解，因为它们涉及函数对象和闭包的操作。\n装饰器是 Python 的一个强大特性，可用于为现有代码添加功能，常用于 Python 框架和库中。\n例子：\ndef my_decorator(func):\n def wrapper():\n  <k>print</k>(<b>"调用func之前."</b>)\n  func()\n  <k>print</k>(<b>"调用func之后."</b>)\n <k>return</k> wrapper\n@my_decorator\ndef say_whee():\n <k>print</k>(<b>"Whee!"</b>)\nsay_whee()\n<k>生成器表达式和 yield</k>：\n理解生成器函数和对象是处理大型数据集的一种强大且节省内存的方法，但可能很困难，因为它们涉及迭代器的使用和自定义可迭代对象的创建。\n例子：<k>生成器函数</k>\n<i># generator function</i>\ndef  my_gen (): \n n = 1 \n <k>print</k> ( <b>\'This is first printed\'</b> ) \n yield n \n n += 1 \n <k>print</k> ( <b>\'This is printed second\'</b> ) \n yield n \n n += 1 \n <k>print</k> ( <b>\'This is printed first \'</b> ) \n yield n <i>#在my_gen()中</i>\n<i>#使用 for 循环</i>\n<i>for</i> item : <k>print</k> (item)\n<k>多线程：</k>多线程可能很难理解，因为它涉及同时管理多个执行线程，这可能很难协调和同步。\n例子：\nimport threading \ndef  worker (): \n <b>""</b><b>"thread worker function"</b><b>""</b> \n <k>print</k> (threading.get_ident()) \nthreads = [] \n<i>for</i> i <i>in</i>  range ( 5 ): \n t = threading.Thread(target=worker) \n threads.append( t) \n t.start()\n<k>异常处理：</k>\n<i></i>异常处理可能难以理解，因为它涉及管理和响应代码中的错误和意外情况，这可能是复杂和微妙的。\n<i>例子：</i>\ntry:\n x = 1 / 0\nexcept ZeroDivisionError as e:\n <k>print</k>(<b>"Error Code:"</b>, e)\nCase 2nd：使用raise_for_status()，当你对API的调用不成功时，引发一个异常：\nimport requests\nresponse = requests.get(<i>"https://google.com"</i> \nresponse.raise_for_status() \n<i>print</i>(response.text)\n<i># &lt;!doctype html&gt;&lt;html itemscope=""itemtype="http://schema.org/WebPage" lang="en-IN"&gt;&lt;head&gt;&lt;meta content="text ...</i>\nresponse = requests.get(<i>"https://google.com/not-found"</i>) \nresponse.raise_for_status()\n<i># requests.exceptions.HTTPError:404 Client Error: Not Found for url: https://google.com/not-found</i>\n<k>正则表达式：</k>正则表达式可能难以理解，因为它们涉及用于模式匹配和文本操作的专门语法和语言，这可能很复杂且难以阅读。\n例子：\nimport re \nstring = <b>"The rain in Spain"</b>\n x = re.search( <b>"^The.*Spain$"</b> , string ) \n<i>if</i> x: \n  <k>print</k> ( <b>"YES! We have a match!"</b> ) \n<i>else</i> : \n  <k>print</k> ( <b>"No match"</b> )\n<k>异步/等待：</k>异步和等待可能很难理解，因为它们涉及非阻塞 I/O 和并发的使用，这可能很难协调和同步。\n<i>例子：</i>\nimport asyncio \nasync  def  my_coroutine (): \n <k>print</k> ( <b>"我的协程"</b> ) \nawait my_coroutine()\n<k>函数式编程：</k>函数式编程可能很难理解，因为它涉及一种不同的编程思维方式，使用不变性、一流函数和闭包等概念。\n例子：\nfrom functools import reduce\nmy_list = [1, 2, 3, 4, 5]\nresult = reduce(lambda x, y: x*y, my_list)\n<k>print</k>(result)\n<k>元编程：</k>元编程可能难以理解，因为它涉及在运行时对代码的操作，这可能是复杂和抽象造成的。\n例子：\nclass MyMeta(<k>type</k>):\n def __new__(cls, name, bases, dct):\n  x = super().__new__(cls, name, bases, dct)\n  x.attribute = <b>"example"</b>\n  <k>return</k> x\nclass MyClass(metaclass=MyMeta):\n pass\nobj = MyClass()\n<k>print</k>(obj.attribute)\n<k>网络编程：</k>\n网络编程可能很难理解，因为它涉及使用套接字和协议在网络上进行通信，这可能是复杂和抽象的。\n例子：\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((<b>"127.0.0.1"</b>, 3000))\ns.listen()\n',
'<h2>Python必备的常用命令行命令</h2>\n<b>一、python环境相关命令</b>\n<k>1、查看版本</k> python -V 或 python --version\n<k>2、查看安装目录</k> where python\n<b>二、pip命令</b>\n<k>requirements.txt 此文件保存python安装的一些第三方库的信息，保证团队使用一样的版本号</k>\n<k>升级pip</k> python -m pip install --upgrade pip\n<k>1、安装第三方库</k> pip install &lt;pacakage>   or pip install -r requirements.txt\n<k>改换源镜像</k> pip install &lt;package> -i https://pypi.tuna.tsinghua.edu.cn/simple\n<k>安装本地安装包（.whl包）</k> pip install &lt;目录>/&lt;文件名> 或 \npip install --use-wheel --no-index  --find-links=wheelhous/&lt;包名>  \n例如：pip install requests-2.21.0-py2.py3-none-any.whl\n（注意.whl包在C:\Users\Administrator中才能安装）\n<k>升级包</k> pip install -U &lt;包名> 或： pip install &lt;包名> --upgrade\n例如： pip install urllib3 --upgrade\n<k>2、卸载安装包</k> pip uninstall &lt;包名> 或 pip uninstall -r requirements.txt  \n例如： pip uninstall requests\n<k>3、查看已经安装的包及版本信息</k> pip freeze\npip freeze > requirements.txt \n<k>4、查询已经安装了的包</k> pip list\n<k>查询可升级的包</k> pip list -o\n<k>5、显示包所在目录及信息</k> pip show &lt;package>\n如 pip show requests\n<k>6、搜索包</k> pip search &lt;关键字> \n例如： pip search requests就会显示如下和requests相关的安装包\npip install pip-search\npip_search requests\n<k>7、打包</k> pip wheel &lt;包名>\n例如 pip wheel requests\n在以下文件夹中就能找到requests-2.21.0-py2.py3-none-any.whl文件了\n',
'<h2>Digital 时钟</h2>\nfrom tkinter import *\nfrom tkinter.ttk import *\nfrom time import strftime\nroot = Tk()\nroot.title(\'Clock\')\ndef time():\n string = strftime(\'%H:%M:%S %p\')\n lbl.config(text = string)\n lbl.after(1000, time)\nlbl = Label(root, font = (\'franklin gothic\', 40, \'bold\'),\n   background = \'black\',\n   foreground = \'white\')\nlbl.pack(anchor = \'center\')\ntime()\nmainloop()\n',
'<h2>进度条</h2>\n读取系统时间，展示今年的时间已经过去了多少个百分比\n#1 读取当前时间和当年的元月一日计算天数\ndef time_printer():\n current = datetime.datetime.now()\n start = datetime.datetime(current.year, 1, 1)\n daysCunt = (current - start).days\n return daysCunt  #start,current,\nprint(time_printer())\n#2 导入 tqdm 模块 \n参数 ncols是进度条长度 \ndesc：主题提示说明\nfrom tqdm import tqdm\ndef proccessingBar():\n for i in tqdm(range(0,365),ncols=100,desc="今年已经过去 % ",):\n  sleep(0.01)\n  if i == time_printer():\n   return\nproccessingBar()\n',
'<h2>顶级的python游戏库</h2>\nPygame \nPyglet \nPyopengl \nArcade \nPandas3D \nPyOpenGL\n',
'<h2>剖析 Python collections模块</h2>\n本文剖析 Python 的collections模块提供有用的数据类型，可以改进和缩短许多用例的代码。\n我们将介绍和讨论五种最常用的类型：\ndeque\nCounter\ndefaultdict\nOrderedDict\nnamedtuple\ncollections 模块就是其中之一，我和许多其他开发人员经常使用这个功能强大的包。\n我几乎每天都在工作中使用<k>defaultdict</k>和<k>Counter</k>，它们产生了许多优雅的单行代码。\n但<k>OrderedDict</k>没有。\n当我在做Leetcode<k> deque</k>挑战时遇到困难时，它提供了很大的帮助——并且通常对构建代码和提高可读性很有用。\n这种频繁的使用和强大的功能激发了我写这篇文章的灵感，我希望它也能在你的编码生活中变得有用——并且成为标准。\n事不宜迟，让我们开始吧。\n<b>1、双向队列  Deque</b>Deque代表“双端队列”，顾名思义，允许从任一端高效地输入/删除数据（与标准队列相比，标准队列使用 FIFO（先进先出）方法，即只允许插入结尾，并从开头删除）。\ndeque在 <k>O(1) </k>中从队列的任一侧提供插入/删除操作。\n这与在 Python 中使用本机列表形成对比，后者也可用于此目的。\n但是，列表仅支持在（摊销）<k>O(1)</k> 的末尾插入/移除，而在开头的插入/移除是 <k>O(n)</k>。\n此外，列表在底层实现为数组。\n这会产生一些空间开销，因为数组被预先分配给特定的大小和时间。\n因此，当空间用完时，必须将元素复制到不同的位置分摊<k>O(1)</k>。\n相比之下，deques 被实现为双向链表，从而产生上述属性。\nPython snippet->\nfrom collections import deque \n<i>### Native list: 在开头添加/删除元素时不要使用</i>\nstandard_list = [ 1 , 2 , 3 ] \n<i># 从结尾添加/删除：O(1)</i>\n standard_list.append( 4 ) \nlast_el = standard_list .pop() <i># 默认参数是 -1，最后一项</i>\n<b>print</b> ( f<i>"Removed last element: {last_el} "</i> ) \n<i># 从开头添加/删除：O(n)</i>\n standard_list.insert( 0 , 0 ) <i># 语法：插入(pos, val) </i>\n<b>print</b> ( f<i>"移除第一个元素：{standard_list.pop( 0 )} "</i> )\ndeque 更高效\n<i>Python snippet-></i>\n <i>### deque: 更高效</i>\nmy_deque = deque([ 1 , 2 , 3 ])\n <i># 添加/删除末尾：O(1)</i>\n my_deque.append( 4 )\nlast_el = my_deque. pop() <i># pop() 从右侧弹出 </i>\n<b>print</b> ( f<i>"Removed last element: {last_el} "</i> )\n <i># 从开头添加/删除：O(1)</i>\n my_deque.appendleft( 0 )\n <b>print</b> ( f<i>"Removed first element: { my_deque.popleft()} "</i> )\nCounters<k>Counters</k>本质上是dicts包含对象的快捷方式：元素的键映射到元素的计数。\n<k>Counter</k>您可以像这样初始化一个新的：\nfrom collections import Counterimport  Counter \nfruits  = Counter({ <i>\'apple\'</i> : 4 , <i>\'pear\'</i> : 2 , <i>\'orange\'</i> : 0 })\n然后我们可以更新我们的计数如下：\nfruits.update({ <i>\'orange\'</i> : 2 , <i>\'apple\'</i> : - 1 }) \n<b>print</b> ( f<i>"My fruit collection: {fruits} "</i> )\n在这里我们看到update()确实更新了计数（即，从我们的集合中减去一个苹果）而不是将元素数设置为给定值。\n另一个有用的函数是<k>most_common(n)</k>，它返回 n 个最频繁出现的元素：\n<b>print</b> ( f<i>"我最常吃的两个水果：{fruits.most_common( 2 )} "</i> )\n此外，Counter允许从任何合适的可迭代对象进行初始化，通常会产生紧凑的单行代码。\n例如，我们可以从“原始”数据初始化它，如下所示：\nfruits = Counter([ <i>"apple"</i> , <i>"apple"</i> , <i>"pear"</i> , <i>"apple"</i> , <i>"apple"</i> , <i>"pear"</i> ])\n这也经常用于字符串，特别是计算字符的出现次数：\nfrom collections import Counter \nchar_counts = Counter( <i>"Hello world!"</i> ) \n<b>print</b> ( f<i>"字符数：{char_counts} "</i> )\n<b>2、defaultdict </b>指令<k>defaultdict</k>是在向字典添加新键时删除烦人的初始化代码的好方法。\n它使用默认工厂进行初始化，每当发生这种情况时都会在内部调用它。\n考虑以下非常常见的示例：您想为每个键存储一个值列表，因此，无论何时添加一个新的、尚不存在的键，都必须初始化空列表。\n这就是它的样子：\nmy_dict = {} \nkey_value_pairs_to_insert = [( <i>"a"</i> , 0 ), ( <i>"b"</i> , 1 ), ( <i>"a"</i> , 2 )] \nfor key, val in key_value_pairs_to_insert: \n if key not  in my_dict: \n  my_dict[key] = [ ] \n my_dict[key].append(val) \n<b>print</b> ( f<i>"Resulting dict: {my_dict} ."</i> )\n我们可以缩短，特别是删除“key not in dict”检查，使用defaultdict：\nfrom collections import defaultdict \nmy_dict = defaultdict( list ) \nkey_value_pairs_to_insert = [( <i>"a"</i> , 0 ), ( <i>"b"</i> , 1 ), ( <i>"a"</i> , 2 )] \nfor key, val in key_value_pairs_to_insert: \n my_dict[key].append (val) \n<b>print</b> ( f<i>"结果字典：{my_dict}。"</i> )\n<b>3、有序字典</b>OrderedDict\n引用官方文档，是“一个能记住添加的顺序元素的字典”，因此，它提供了以下功能：\n<k>popitem(last=True)</k>, 它返回添加的最后一个或第一个项目\n<k>move_to_end()</k>, 将所选项目移动到字典的末尾\n让我们看一下 Python 代码：\nfrom collections import OrderedDict \n<i># 添加4个元素：</i>\n ordered_dict = OrderedDict() \n ordered_dict[ <i>"a"</i> ] = 0\n ordered_dict[ <i>"b"</i> ] = 1\n ordered_dict[ <i>"c"</i> ] = 2\n ordered_dict[ <i>"d"</i> ] = 3 \n弹出第一个和最后一个元素：\n<i># pop first and last item</i>\n<b>print</b> ( f<i>"Pop first element: {ordered_dict.popitem(last= False )} "</i> ) \n<b>print</b> ( f<i>"Pop last element: {ordered_dict.popitem()} "</i> ) \n交换 "b" / " 的插入顺序\n<i># 交换 "b" / " 的插入顺序</i>\nordered_dict.move_to_end( <i>"b"</i> ) \n<b>print</b> ( f<i>"弹出最后一个元素: {ordered_dict.popitem()} "</i> )\n题外话，请注意这个数据结构为Leetcode 著名的 LRU 缓存问题提供了一个简单的解决方案（当然，理解底层原理仍然很好，即在内部这个结构是作为一个指向双精度的字典实现的- 节点链表）。\n在此问题中，您的任务是实现“LRU（最近最少使用）缓存”，这意味着缓存仅保留最近使用的 N 个元素并在 O(1) 中提供插入/删除运算符。\n示例解决方案可以像这样简短：\nfrom collections import OrderedDict \nclass  LRUCache ( OrderedDict ): \n def  __init__ ( self, capacity: int ): \n  self.capacity = capacity \n def  get ( self, key: int ) -> int : \n  if key in self: \n   self.move_to_end(key)\n   <b>return</b> self[key] \n  else : \n   <b>return</b> - 1 \n def  put ( self, key: int , value: int ) ->None :\n  if key in self: \n   self.move_to_end(key) \n  self[key] = value \n  if  len (self) > self.capacity: \n   self.popitem(last= False )\n<b>4、命名元组 </b>namedtuple\n元组<k>tuple</k>是 Python 中重要的数据结构，并且是list的不可变等价物。\n由于这个属性，它们为开发人员提供了辨识内部元素不可变的特性（指示const性），使用起来更快，内存效率更高。\n因此，建议尽可能在列表上使用它们。\n请注意，return x, y, z实际上已经返回了一个元组，而不是列表——可能是这个原因，也许是函数以元组形式返回若干个值不易被误修改？使用它们的一个缺点（然而，这也适用于列表）是数据访问的匿名性和相应的容易出错。\n例如<k>t[n]</k>访问第 n 个元素，问题通过 <i>namedtuple</i>来缓解，顾名思义，它允许命名元素的数据类。\nnamedtuple可以按如下方式使用：\nfrom collections import namedtuple \nPoint = namedtuple( <i>\'Point\'</i> , [ <i>\'x\'</i> , <i>\'y\'</i> ]) \np = Point( 0 , y= 1 )\n<b>print</b>( f<i>"x: {px} , {p[ 1 ]} "</i> )\n正如我们所见，我们首先声明了一个新的类型<k>namedtuple</k>named<k> Point</k>，其属性为x和y。\n链接👇介绍运用例子：\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649455921&amp;idx=1&amp;sn=9a53136fa0fdec3f064217cb849025a4&amp;chksm=f3fcee01c48b67177add2a42ebb348bc9b99f71de28c986ef0124bb05a1c69b80694bacb704b&amp;scene=21#wechat_redirect" textvalue="数据结构：namedtuple应用场景" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">数据结构：namedtuple应用场景</a>\n<i><b>引入适用场景</b></i>\n测量两个点的距离，一个点描述为两个数字x,y，作为单独的对象来处理。\n点经常被写在括号里，用逗号隔开方向。\n例如，(0, 0)是起始点，(x, y)是向右移动x个单位，从起始点向上移动y个单位的指南。\n正常任务可能是确定一个点与起点的距离，或与另一个点的距离，或发现两个点的中点，或询问一个点是否落在一个给定的方形或圆形内。\n我们会在眨眼间察觉到答案。\n如何运用数学描述将这些与信息协调起来？在Python中解决一个点的一个特征方法，简单的安排是利用一个元组，对于某些应用来说，这可能是个不错的决定。\n另一个选择是描述另一个类。\n这种方法包括更多的努力，然而，它的好处很快就会显现出来。\n我们需要我们的焦点有一个x和一个y的特性，所以我们的顶层定义类似于这样。\n<b>有3个任务场景 </b>代码见链接 👇<ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 8px;margin-right: 8px;"><li style="font-size: 15px;">\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649454423&amp;idx=1&amp;sn=fb0c8b2bb9d1bc1bbb509e1d2e9914e6&amp;chksm=f3fce467c48b6d71adf3b8730d057ef6db85ad966510352286dc973fb7c0c95898138ef6613e&amp;scene=21#wechat_redirect" textvalue="面向对象引入类表达点坐标" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" style="font-size: 15px;">面向对象引入类表达点坐标</a>\n</li><li style="font-size: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649451579&amp;idx=2&amp;sn=8b392ad7ea10722a7a3a92e4efbe16c2&amp;chksm=f3fcff0bc48b761dbad2bc9b3fb53ccb887f1d42d23a10b7269acb78b58d6d4d37c6c12938f4&amp;scene=21#wechat_redirect" textvalue="Tuple元组的一点体会" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" style="letter-spacing: 0px;font-size: 15px;">Tuple元组的一点体会</a></li><li style="font-size: 15px;">\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649453454&amp;idx=1&amp;sn=5fb0ec061ae5d6db3c4b6f7ecdf1cf1f&amp;chksm=f3fce0bec48b69a8858f40496989ef266e0db1d9de94bc61df0f356d957318463fc74fdc9a43&amp;scene=21#wechat_redirect" textvalue="起步班第十节 判断三角形的类型和面积计算" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">起步班第十节 判断三角形的类型和面积计算</a>\n</li></ul>然后我们实例化该类型的一个新实例，并可以在构造函数中使用位置参数或命名参数。\n此外，为了访问属性，我们可以使用属性的名称或简单的索引，类似于普通元组。\n',
'<h2>30+ snippet</h2>\n<div id="snippettoc" class="toc"><a href="#snippettopic-0" target="_self">使用虚拟环境</a><br><a href="#snippettopic-1" target="_self">使用变量的类型提示</a><br><a href="#snippettopic-2" target="_self">正确的异常处理</a><br><a href="#snippettopic-3" target="_self">使用上下文管理器</a><br><a href="#snippettopic-4" target="_self">使用if __name__ == "main"</a><br><a href="#snippettopic-5" target="_self">使用理解推导式</a><br><a href="#snippettopic-6" target="_self">枚举</a><br><a href="#snippettopic-7" target="_self">使用</a><br><a href="#snippettopic-8" target="_self">正确缩进</a><br><a href="#snippettopic-9" target="_self">for ... else ...</a><br><a href="#snippettopic-10" target="_self">使用in关键字</a><br><a href="#snippettopic-11" target="_self">运算is符检查</a><br><a href="#snippettopic-12" target="_self">使用布尔值关键字：</a><br><a href="#snippettopic-13" target="_self">使用生成器</a><br><a href="#snippettopic-14" target="_self">使用函数式编程 ***** </a><br><a href="#snippettopic-15" target="_self">使用装饰器</a><br><a href="#snippettopic-16" target="_self">使用正确的内置库</a><br><a href="#snippettopic-17" target="_self">使用正确的包</a><br><a href="#snippettopic-18" target="_self">使用正确的命名约定</a><br><a href="#snippettopic-19" target="_self">坚持风格</a><br><a href="#snippettopic-20" target="_self">拆包</a><br><a href="#snippettopic-21" target="_self">使用日志而不是打印</a><br><a href="#snippettopic-22" target="_self">比较运算符</a><br><a href="#snippettopic-23" target="_self">使用 Fstring 进行格式化：</a><br><a href="#snippettopic-24" target="_self">通过实现 __repr__ 方法定义对象的写打印表示</a><br><a href="#snippettopic-25" target="_self">使用专门的子类</a><br><a href="#snippettopic-26" target="_self">使用深拷贝</a><br><a href="#snippettopic-27" target="_self">Python内置的中值函数 </a><br><a href="#snippettopic-28" target="_self">Python 内置分数 </a><br><a href="#snippettopic-29" target="_self">locals() 和 globals() 内置</a><br></div></center><br><br>\n补充上一期任务中用到set()的时间复杂度问题。\n具体问题见下面的链接👇\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649473696&amp;idx=2&amp;sn=9ca8c8d2c53679231ab7d2160d2a6555&amp;chksm=f3fc5190c48bd8861a6d8e80fa7b056733aecd6145c49d4c0448a36c9e6de7c91a4df0420409&amp;scene=21#wechat_redirect">计算思维第25篇 无处不在的启发</a>\nset()它是一个哈希表，实现方式与Python的dict非常相似，有一些优化，利用了值总是空的事实，在一个集合中，我们只关心键。\n有同学问到集合操作确实需要对至少一个操作数表进行迭代 ，在union的情况下都是如此。\n迭代时间复杂度O(n)，成员测试平均是O(1)\n所以对于两个大小为m和n的集合，操作的平均成本为。\n合并：O(m+n)\n交集：O(min(m,n))\n差集：O(m)\n子集：O(m)\n<b id="snippettopic-0">使用虚拟环境</b>：这表明您隔离环境以避免依赖项和包版本出现问题。\n此外，如果我们坚持要求和约束文件，这表明我们关心应用程序应该如何在另一个地方运行：\npip install -r requirements.txt -c constraints.txt\n<b id="snippettopic-1">使用变量的类型提示</b>：类型提示使我们的代码更具可读性。\n这有助于简化维护和调试。\ndef demo(x: type_x, y: type_y, z: type_z= 100)\n-&gt; type_return :\n<b id="snippettopic-2">正确的异常处理</b>：\n捕获特定的异常可以很容易地理解我们的代码中出了什么问题。\nBareexcept子句捕获所有异常，包括SystemExit和KeyboardInterrupt。\n但两者并不相同，应区别对待。\nTry 和 Except\nPython 中异常处理的高级技术\n作为 Python 开发人员，您可能熟悉使用 try 和 except 语句处理异常的基本方法。\n但是您是否知道可以使用其他技术来使您的异常处理更加强大？\n在本文中，我们将超越基础知识，探索一些在 Python 中处理异常的高级技术。\n首先，让我们看一下finally声明。\n此语句允许您指定无论是否引发异常都将执行的代码块。\n例如，假设您有一个文件，您需要在使用完它后将其关闭。\n您可以使用 try-except 块来捕获在处理文件时可能发生的任何错误，但如果文件未正确关闭怎么办？这就是 finally 语句出现的地方。\n这是一个例子：\ntry:\n my_file = open("my_file.txt", "r")\n # do some file operations\nexcept FileNotFoundError:\n print("File not found.")\nfinally:\n my_file.close()\n在此示例中，无论如何都会关闭文件，无论是否引发异常。\n这在处理需要清理的资源（如文件、数据库连接和网络套接字）时特别有用。\n另一种高级技术是使用多个except 块来处理不同类型的异常。\n例如，您可能希望以不同于PermissionError的方式处理FileNotFoundError。\n这是一个例子：\ntry:\n my_file = open("my_file.txt", "r")\n # do some file operations\nexcept FileNotFoundError:\n print("File not found.")\nexcept PermissionError:\n print("Permission denied.")\n在此示例中，如果引发 FileNotFoundError，将执行第一个 except 块，如果引发 PermissionError，将执行第二个 except 块。\n这允许您以更具体和更有针对性的方式处理不同类型的异常。\n最后，您还可以使用该语句引发您自己的异常raise。\n例如，您可能希望在未满足特定条件时引发异常。\n这是一个例子：\ndef divide(a, b):\n if b == 0:\n  raise ZeroDivisionError("Cannot divide by zero.")\n return a / b\ntry:\n result = divide(5, 0)\n print(result)\nexcept ZeroDivisionError as e:\n print(e)\n在此示例中，如果除数为零，则会引发 ZeroDivisionError 并显示消息“不能被零除”。\n这对于发出未满足特定条件并且程序无法继续的信号很有用。\n总之，除了基本的 try 和 except 语句之外，Python 中还有许多用于异常处理的高级技术。\n通过使用finally语句、多个 except 块和 raise 语句，您可以使您的异常处理更加强大和具体，并且您的代码更加健壮和可维护。\n除了基本的 try 和 except 语句之外，还有一些更高级的 Python 异常处理技术\n使用else子句：else子句可以与 try-except 块结合使用，它允许您指定只有在 try 块中没有引发异常时才会执行的代码块。\n使用assert语句：assert语句可用于检查代码中的某些条件，如果不满足条件则引发异常。\n这对于在代码中尽早发现错误很有用，以免它们导致更严重的问题。\n使用with语句：with语句可用于自动处理资源的设置和清理，例如文件和网络连接。\n这可以使您的异常处理更加简洁和易于阅读。\ndebug 变量\n可能是我们不能在 Python 中重新分配的唯一变量\n该__debug__变量是一个布尔值，当我们正常运行 Python 脚本时通常为 True。\n但是，如果我们使用-O标志运行我们的 Python 脚本，__debug__则设置为 False。\npython3 -O yourscript.py\n当__debug__为 False 时，assert 语句将被忽略。\nassert 1==2\n^ 如果我们正常运行上面的代码，我们会得到一个 AssertionError。\n但是，如果我们使用-O标志运行它，__debug__设置为 False，并且 assert 语句将被忽略。\n使用自定义异常类：您可以通过对内置Exception类进行子类化来创建自己的自定义异常类。\n这允许您创建可以在代码中以不同方式处理的更具体的异常。\n记录异常：您可以使用日志记录来跟踪和记录代码中发生的异常。\n这对于调试和故障排除以及监控应用程序的运行状况很有用。\n使用装饰器进行异常处理：您可以使用装饰器将函数与 try-except 块包装起来，以更优雅的方式处理异常，而不是为每个函数单独添加 try-except 块。\n使用 contextlib 库：Python 的 contextlib 库提供了几个上下文管理实用程序，包括 contextmanager 装饰器，它可用于为需要设置和拆除的资源定义上下文管理器。\n<b id="snippettopic-3">使用上下文管理器</b>：这有助于资源管理并避免悬空连接或文件句柄。\nwith open("demo.txt", mode="w") as file:\n<b id="snippettopic-4">使用if __name__ == "main"</b>\nif __name__ == "main"：\n这可以避免在导入脚本时使用不必要的对象。\n<b id="snippettopic-5">使用理解推导式</b>：理解使代码不那么冗长和高效。\nanother_list = [ x for item in iterable]\n<b id="snippettopic-6">枚举</b>enumerate：\n当我们不需要有条件地跳过枚举元素时手动处理索引很容易工作并且速度更快。\nfor idx, num in enumerate(nums)\n"".join(Iterable)字符串连接高频用法，用到烂熟！\n<b id="snippettopic-7">使用</b> zip：在使用多个列表 zip 方法时，可以简化迭代，并且项目可以直接开箱即用。\nfor item1, item2 in zip(list1, list2)\n<b id="snippettopic-8">正确缩进</b>：遵循一致的缩进（四个空格）有助于提高可读性。\n此外，如果脚本是从文本编辑器或文件 io 流中读取的，它会使用更轻松。\n<b id="snippettopic-9">for ... else ...</b>\n将else与 for &amp; while 一起使用：这是告诉所有项目都在其自然过程中处理的pythonic方式。\n实际运用例子的链接见👇\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649453431&amp;idx=1&amp;sn=8fa7dc6393094f42544c1eca74d3d10c&amp;chksm=f3fce047c48b695150234ae49bb91cd9189613eb6bfb999aae8d7ab4000d2c9246d9efdf9767&amp;scene=21#wechat_redirect">自学编程24：For else循环判断，Switch-Case Statements Coming</a>\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649472060&amp;idx=2&amp;sn=f0d39b18b935b726e9cde5bfa13db5b7&amp;chksm=f3fc2f0cc48ba61aec0f982044c2d541fb15dbc59986d9d77febea08bab4d30157505e5b2c05&amp;scene=21#wechat_redirect">新手上路 for ... else ... 运用中的细微差别</a>\n<b id="snippettopic-10">使用in关键字</b>检查字典键中的成员资格。\nif key in my_dict:\nitems在处理字典时使用该方法：这是一种更 pythonic 的访问键和项目的方式，而不是循环访问键，然后使用get或下标访问值。\nfor key, val in my_dict.items()\n使用dict.get()方法：这避免了键不存在时的错误，并且还允许我们在键不存在时返回默认值。\nisinstance在进行对象类型相等时使用关键字：在继承对象的情况下，比较对象类型将给出错误的结果。\n<b id="snippettopic-11">运算is符检查</b>这两个项目是否引用相同的对象（即存在于相同的内存位置）。\n运算==符检查值 是否相等。\n<em>using is for equality 与 singleton: Using is to check None, True &amp; False.</em>\n<b id="snippettopic-12">使用布尔值关键字：</b>\n这有助于简捷定义正确的操作流程\n“or”、“and”、“not”\n使用OR中检查不满足if判断条件时，会继续检查下一个，直到有满足时返回，否则检查所有的值：在运用AND 时，只要遇到第一个不满足即布尔值为False的时候，就不再检查其余条件。\n优先考虑 and会比or缩短执行时间；\n<b id="snippettopic-13">使用生成器</b>：生成器节省内存并提高性能。\n(expression for item in iterable)\n<b id="snippettopic-14">使用函数式编程 ***** </b>\n如 map、reduce 和 filter：这可以提高代码效率。\nsquared = map(lambda x : x*x, [1, 2, 3])\n这比运行 for 循环更快！\nmap也一个一个地加载每个项目，不像 for 循环将所有项目加载到内存中，这使得map的内存效率更高，尽可能地选择生成器。\n👉<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649450352&amp;idx=1&amp;sn=92c8b0bb2aa661eeade1b25d01ed7dab&amp;chksm=f3fcf440c48b7d5615e6b45de633b335d659b0c0844864a02ea8088e33d69107f8de17704283&amp;scene=21#wechat_redirect">10个python初学者技巧(6) map filter zip</a>\nPython 提供了许多预定义的内置函数，终端用户只需调用这些函数就可以使用。\n在本教程中，你将学习Python的三个最强大的函数：map()、filter()和reduce()。\nMap() Map 对输入列表中的所有项目应用一个函数。\n语法：map(function, iterable)\n例子：让我们看看下面的例子\nitems = [1, 2, 3, 4, 5]\nadd = []\nfor i in items:\n add.append(i+i)\n \nprint(add)\nOutput:\n[2, 4, 6, 8, 10]\n我们可以使用map()，就像流水线操作一样\nitems = [1, 2, 3, 4, 5]\nadd = list(map(lambda x: x+x, items))\nprint(add)\nOutput:\n[2, 4, 6, 8, 10]\nreduce()\n Reduce()函数将提供的函数应用于\'iterables\'，并返回一个单一的值，正如其名称所暗示的那样。\n语法：reduce(function, iterables)\n例子：让我们看看下面的例子\nadd=0\nlist = [1, 2, 3, 4]\nfor num in list:\n add = add + num\n \nprint(add)\nOutput:\n10\n我们可以使用reduce()\nfrom functools import reduce\nadd = reduce((lambda x, y: x + y), [1, 2, 3, 4])\nprint(add)\n输出 10\nfilter() : \nfilter()函数用于生成一个输出值列表，当该函数被调用时返回真值。\n它的语法如下。\n语法：filter (function, iterables)\n让我们看看下面的例子\nnumber_list =[1,2,3,4,5,6,7,8,9,10]\nless_than_5 = list(filter(lambda x: x &lt; 5, number_list))\nprint(less_than_5)\nOutput:\n[1, 2, 3, 4]\nPython Pro\n<b id="snippettopic-15">使用装饰器</b>：这有助于编写可重用的代码。\netc等装饰器@retry @properties @lru_cache有助于扩展代码的功能。\n有像 Flask 这样的框架，它有@route装饰器。\nAirflow有@task运算符。\n<b id="snippettopic-16">使用正确的内置库</b>：使用正确的内置包可以减少大量样板代码。\n此外，由于特定的包在执行特定任务时效率很高。\n<b id="snippettopic-17">使用正确的包</b>是有意义的。\n例如os vs pathlib&amp; os.system vs subprocess。\n<b id="snippettopic-18">使用正确的命名约定</b>：PEP-8是 Python 程序员中流行的指南，它告诉我们如何正确命名变量、类和函数。\n<b id="snippettopic-19">坚持风格</b>：坚持你选择的规则让重构变得轻而易举，并且以后更容易理解。\n使用 Docstring 和注释：Docstring有助于让用户理解函数/模块打算做什么。\n它的输入、输出，以及它们的类型、样本值。\n此外，如果我们在前面加上单行注释并表达它的含义，这也会有所帮助。\n<b id="snippettopic-20">拆包</b>也是高频用法：\nfirst, second, third = [ ‘first’, ‘second’ , ‘third’]\n<b id="snippettopic-21">使用日志而不是打印</b>：日志允许我们拥有一致的消息，它还允许我们通过设置正确的日志级别来抑制/过滤消息。\n一些不错的补充：\n<b id="snippettopic-22">比较运算符</b>链接—\nif a &lt; b &lt; c\nif a &lt;b and b &lt; c\n<b id="snippettopic-23">使用 Fstring 进行格式化：</b>\n使用 F-Strings 更简单的调试方法\n名字=“洛基”\n年龄= 4\n品种=“德国牧羊犬”\nname = "rocky"\nage = 4\nbreed = "german shepherd"\nprint(f"{name=} {age=} {breed=}")\n输出：\nname=\'rocky\' age=4 breed=\'德国牧羊犬\'\n这让我们在调试时输入更少的东西。\n详细见2个链接👇\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649457273&amp;idx=1&amp;sn=c2ba0ede4c9b95716e9ffb876ecf4656&amp;chksm=f3fc1149c48b985f21731717cd8352219a8261f9bfecbbdd455b4a1208d3f0c3fe283c620fdd&amp;scene=21#wechat_redirect">Python基础 fstring"{}”内部双引号和单引号的区别</a>\n<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzI4NjAyNTMxMQ==&amp;mid=2649473892&amp;idx=2&amp;sn=5e7b09e25eb493b3fd1808a277a7d36c&amp;chksm=f3fc5054c48bd9422f5d5ee803a1b0505a9fcee6fce50181791bde0b523d1980536ccceba71e&amp;scene=21#wechat_redirect">Python官方文档总结输出命令 f\'string 用法</a>\n<b id="snippettopic-24">通过实现 __repr__ 方法定义对象的写打印表示</b>\n<b id="snippettopic-25">使用专门的子类</b>，如：\ndefaultdict、\nCounter、\nfrozenset，\nfrom collections import defaultdict, Counter\n<b id="snippettopic-26">使用深拷贝</b>—\nfrom copy import deepcopy\n27、使用单独的文件进行配置任何INI、TOML、YAML、ENV\n28、 webbrowser模块\nPython 以编程方式打开我们的浏览器 导入网络浏览器\nwebbrowser.open_new("https://bing.com")注意 webbrowser模块是预安装的，所以我们不必使用 Pip 安装它。\n运行上面的代码会在我们使用的任何浏览器上打开 bing.com 的新选项卡。\n<b id="snippettopic-27">Python内置的中值函数 </b>\n和其他统计相关的函数，从统计数据导入中位数\nfrom statistics import median\nlis = [1, 5, 3, 4, 2]\nprint(median(lis))   # 3该statistics模块是我们不必使用 Pip 安装的内置模块，它包含许多其他与统计相关的功能。\n我不知道这一点，并且一直在使用np.median Numpy\n<b id="snippettopic-28">Python 内置分数 </b>\nPython 标准库的一部分，我们不需要使用 Pip 安装它.\nfrom fractions import Fraction\nx = Fraction(1/2)\nprint(x**2)   # 1/4\nPython不返回fractions模块中浮点数的内置分数。\n<b id="snippettopic-29">locals() 和 globals() 内置</b>\nglobals()函数允许我们检查我们有哪些全局变量，内置locals()函数允许我们检查我们在函数范围内有哪些局部变量。\nx = 1\ny = 2\ndef test():\n z = 3\n print(globals())\n print(locals())\ntest()\n输出：\n# globals() \n{\'__name__\': \'__main__\', \'__doc__\': None, \n\'__package__\': None, \'__loader__\': &lt;_frozen_importlib_external.SourceFileLoader object at 0x108a30dc0&gt;,\n\'__spec__\': None, \'__annotations__\': {} ，\n\'__builtins__\'：&lt;模块\'builtins\'（内置）&gt;，\n\'__file__\'：\'/Users/lzl/Documents/repos/test/aa.py\'，\'__cached__\'：无，\n\'x\'：1， \'y\': 2, \'test\': &lt;0x10896beb0 处的功能测试&gt;}\n# locals() \n{\'z\': 3}\n我们甚至可以使用globals()和分配全局/局部变量locals()。\n但我建议你不要因为潜在的副作用。\nx = 1\ndef test():\n globals()["x"] = 5\ntest()\nprint(x)   # 5\n',
'<h2>17 个短代码</h2>\n<div id="shortsnippettoc" class="toc"><a href="#shortsnippettopic-0" target="_self">交换变量值</a><br><a href="#shortsnippettopic-1" target="_self">将列表中的所有元素组合成字符串</a><br><a href="#shortsnippettopic-2" target="_self">查找列表中频率最高的值</a><br><a href="#shortsnippettopic-3" target="_self">检查两个字符串是不是由相同字母不同顺序组成</a><br><a href="#shortsnippettopic-4" target="_self">反转字符串</a><br><a href="#shortsnippettopic-5" target="_self">反转列表</a><br><a href="#shortsnippettopic-6" target="_self">转置二维数组</a><br><a href="#shortsnippettopic-7" target="_self">链式比较</a><br><a href="#shortsnippettopic-8" target="_self">链式函数调用</a><br><a href="#shortsnippettopic-9" target="_self">复制列表</a><br><a href="#shortsnippettopic-10" target="_self">字典 get 方法</a><br><a href="#shortsnippettopic-11" target="_self">通过「键」排序字典元素</a><br><a href="#shortsnippettopic-12" target="_self">For Else</a><br><a href="#shortsnippettopic-13" target="_self">转换列表为逗号分割符格式</a><br><a href="#shortsnippettopic-14" target="_self">合并字典</a><br><a href="#shortsnippettopic-15" target="_self">列表中最小和最大值的索引</a><br><a href="#shortsnippettopic-16" target="_self">移除列表中的重复元素</a><br></div></center><br><br>\n<pre>\n<b id="shortsnippettopic-0">交换变量值</b>\n<img class="lazy" data-src="https://pic3.zhimg.com/v2-3080d3a0a889f514ac5f5740d28b2f8a_b.jpg">\n<b id="shortsnippettopic-1">将列表中的所有元素组合成字符串</b>\n<img class="lazy" data-src="https://pic1.zhimg.com/v2-0e444f118f469ecb19551063db938218_b.jpg">\n<b id="shortsnippettopic-2">查找列表中频率最高的值</b>\n<img class="lazy" data-src="https://pic3.zhimg.com/v2-baaa6a0dfee796fc7bcef6c070deea1e_b.jpg">\n<b id="shortsnippettopic-3">检查两个字符串是不是由相同字母不同顺序组成</b>\n<img class="lazy" data-src="https://pic4.zhimg.com/v2-7e10faebe58019bebbd633c4d5881da3_b.jpg">\n<b id="shortsnippettopic-4">反转字符串</b>\n<img class="lazy" data-src="https://pic1.zhimg.com/v2-f61971e68f641493e33e09a03ab9b72c_b.jpg">\n<b id="shortsnippettopic-5">反转列表</b>\n<img class="lazy" data-src="https://pic4.zhimg.com/v2-4ba5c5add22fd2c4dba0fa2e1dc9b30b_b.jpg">\n<b id="shortsnippettopic-6">转置二维数组</b>\n<img class="lazy" data-src="https://pic4.zhimg.com/v2-97a9f616d862be3ee37b9ba6fb823e5f_b.jpg">\n<b id="shortsnippettopic-7">链式比较</b>\n<img class="lazy" data-src="https://pic2.zhimg.com/v2-4f3e3420019d03eb37e49593a0c05a41_b.jpg">\n<b id="shortsnippettopic-8">链式函数调用</b>\n<img class="lazy" data-src="https://pic2.zhimg.com/v2-bf1d07438cc5df2c57bdb0ac5c7f8461_b.jpg">\n<b id="shortsnippettopic-9">复制列表</b>\n<img class="lazy" data-src="https://pic4.zhimg.com/v2-76ae3c8fad17fc8e0151102f5acee153_b.jpg">\n<b id="shortsnippettopic-10">字典 get 方法</b>\n<img class="lazy" data-src="https://pic2.zhimg.com/v2-1f53c425ce5447ec8917a8d36feb599d_b.jpg">\n<b id="shortsnippettopic-11">通过「键」排序字典元素</b>\n<img class="lazy" data-src="https://pic3.zhimg.com/v2-921739469d714a7f78adfa686592c24e_b.jpg">\n<b id="shortsnippettopic-12">For Else</b>\n<img class="lazy" data-src="https://pic3.zhimg.com/v2-4725994e0cc5d4a41d2d09b61981fe2e_b.jpg">\n<b id="shortsnippettopic-13">转换列表为逗号分割符格式</b>\n<img class="lazy" data-src="https://pic2.zhimg.com/v2-042ae278de1cb4f2344fc0f9ae312d51_b.jpg">\n<b id="shortsnippettopic-14">合并字典</b>\n<img class="lazy" data-src="https://pic1.zhimg.com/v2-8974aa3fe9bd49818e9806494761b7bc_b.jpg">\n<b id="shortsnippettopic-15">列表中最小和最大值的索引</b>\n<img class="lazy" data-src="https://pic2.zhimg.com/v2-f3dd00e0d6b383da701b4ee2c7a2b1a9_b.jpg">\n<b id="shortsnippettopic-16">移除列表中的重复元素</b>\n<img class="lazy" data-src="https://pic4.zhimg.com/v2-73335e49eb5d5581de43c5062d36b5a7_b.jpg">\n',
'<h2>Python 自动化脚本案列</h2>\n<div id="automatetoc" class="toc"><a href="#automatetopic-0" target="_self">网络连通性</a><br><a href="#automatetopic-1" target="_self">端口状态测试</a><br><a href="#automatetopic-2" target="_self">上传下载速率</a><br><a href="#automatetopic-3" target="_self">paramiko交互</a><br><a href="#automatetopic-4" target="_self">linux ssh测试</a><br><a href="#automatetopic-5" target="_self">内存使用率</a><br><a href="#automatetopic-6" target="_self">CPU使用率</a><br><a href="#automatetopic-7" target="_self">获取nginx访问量前十IP</a><br><a href="#automatetopic-8" target="_self">操作MySQL</a><br><a href="#automatetopic-9" target="_self">xonsh python和shell交互</a><br><a href="#automatetopic-10" target="_self">cpu内存使用率展示</a><br></div></center><br><br>\n<b id="automatetopic-0">网络连通性</b>\nimport platform,os,traceback\n#判断系统\ndef get_os():\nos = platform.system()\nif os == "Windows":\nreturn "n"\nelse:\nreturn "c"\n#ping判断，成功返回OK,否则Down\ndef ping_ip2(ip_str):\ntry:\ncmd = ["ping", "-{op}".format(op=get_os()), "1", ip_str]\n# print(cmd)\noutput = os.popen(" ".join(cmd)).readlines()\n# print(output)\nflag = False\nfor line in list(output):\nif not line:\ncontinue\nif str(line).upper().find("TTL") &gt;= 0:\nflag = True\nbreak\nif flag:\n# print("%s OK\n"%(ip_str))\nreturn "OK"\nelse:\n# print("%s Down\n"%(ip_str))\nreturn "Down"\nexcept Exception as e:\nprint(traceback.format_exc())\n<b id="automatetopic-1">端口状态测试</b>\n#给定IP,给出端口，默认为22端口，可进行相应的传参。\nimport sys,os,socket\ndef telnet_port_fun2(ip,port=22):\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\nres=s.connect_ex((ip,port))\ns.close()\nif res==0:\nreturn \'OPEN\'\nelse:\nreturn \'CLOSE\'\n<b id="automatetopic-2">上传下载速率</b>\nfrom speedtest import Speedtest\ndef Testing_Speed(net):\ndownload = net.download()\nupload = net.upload()\nprint(f\'下载速度: {download/(1024*1024)} Mbps\')\nprint(f\'上传速度: {upload/(1024*1024)} Mbps\')\nprint("开始网速的测试 ...")\n#进行调用\nnet = Speedtest()\nTesting_Speed(net)\n<b id="automatetopic-3">paramiko交互</b>\n#paramiko是ansible重要模板之一，支持SSH2远程安全连接，支持认证及密钥方式。可以实现远程命\n令执行、文件传输、中间SSH代理等功能\nimport paramiko\ncmd = "ls"\ntask_info = "ps -aux"\n# 创建客户端对象\nssh = paramiko.SSHClient()\n# 接收并保存新的主机名，此外还有RejectPolicy()拒绝未知的主机名\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n# hostname:目标主机地址，port:端口号，username:登录用户名，password:密码\nssh.connect(hostname="hostname", username="root", password="password",\nport=22)\n# 执行命令，timeout为此次会话的超时时间，返回的是(stdin, stdout, stderr)的三元组\nstdin, stdout, stderr = ssh.exec_command(cmd, timeout=20)\n# 需要解码才能把返回的内容转换为正常的字符串形式\nprint(stdout.read().decode())\n<b id="automatetopic-4">linux ssh测试</b>\nimport subprocess\ndef scan_port(ip, user, passwd):\ncmd = "id"\n# try:\'{CMD}\'\nCOMMAND = "timeout 10 sshpass -p \'{PASSWD}\' ssh -o\nStrictHostKeyChecking=no {USER}@{IP} \'{CMD}\' ".format(\nPASSWD=passwd, USER=user, IP=ip, CMD=cmd)\noutput = subprocess.Popen(COMMAND, shell=True, stderr=subprocess.PIPE,\nstdout=subprocess.PIPE)\noerr = output.stderr.readlines()\noout = output.stdout.readlines()\noinfo = oerr + oout\nif len(oinfo) != 0:\noinfo = oinfo[0].decode()\nelse:\noinfo = \'未知异常.\'\nif user in oinfo:\nres = "{USER}登录正常".format(USER=user)\nelif "reset" in oinfo:\nres = "没加入白名单"\nelif "Permission" in oinfo:\nres = "{USER}密码错误".format(USER=user)\nelif \'No route to host\' in oinfo or \' port 22: Connection refused\' in\noinfo:\nres = \'22端口不通\'\nelse:\nres = oinfo\n# print(res,\'============\',oinfo)\nreturn res\n<b id="automatetopic-5">内存使用率</b>\nimport psutil\ndef mem_use():\nprint(\'内存信息:\')\nmem=psutil.virtual_memory()\n#换算为MB\nmemtotal=mem.total/1024/1024\nmemused=mem.used/1024/1024\nmem_percent=str(mem.used/mem.total*100)+\'%\'\nprint(\'%.3fMB\'%memused)\nprint(\'%.3fMB\'%memtotal)\nprint(mem_percent)\n<b id="automatetopic-6">CPU使用率</b>\nimport psutil\nimport os\ndef get_cpu_mem():\npid = os.getpid()\np=psutil.Process(pid)\ncpu_percent = p.cpu_percent()\nmem_percent = p.memory_percent()\nprint("cpu:{:.2f}%,mem:{:.2f}%".format(cpu_percent,mem_percent))\n<b id="automatetopic-7">获取nginx访问量前十IP</b>\nimport matplotlib.pyplot as plt\nnginx_file = \'file_path\'\nip = {}\n# 筛选nginx日志文件中的IP。\nwith open(nginx_file) as f:\nfor i in f.readlines():\ns = i.strip().split()[0]\nlengh = len(ip.keys())\nif s in ip.keys():\nip[s] = ip[s] + 1\nelse:\nip[s] = 1\nip = sorted(ip.items(), key=lambda e: e[1], reverse=True)\n# 取前十：\nnewip = ip[0:10:1]\ntu = dict(newip)\nx = []\ny = []\nfor k in tu:\nx.append(k)\ny.append(tu[k])\nplt.title(\'ip access\')\nplt.xlabel(\'ip address\')\nplt.ylabel(\'pv\')\n# X 轴项的翻转角度：\nplt.xticks(rotation=70)\n# 显示每个柱状图的值\nfor a, b in zip(x, y):\nplt.text(a, b, \'%.0f\' % b, ha=\'center\', va=\'bottom\', fontsize=6)\nplt.bar(x, y)\nplt.legend()\nplt.show()\n<b id="automatetopic-8">操作MySQL</b>\n方法1：查询\nimport pymysql\n# 创建连接\nconn = pymysql.connect(host="127.0.0.1", port=3306, user=\'user\',\npasswd=\'passwd\', db=\'db_name\', charset=\'utf8mb4\')\n# 创建游标\ncursor = conn.cursor()\n# 存在sql注入情况(不要用格式化字符串的方式拼接SQL)\nsql = "insert into USER (NAME) values(\'%s\')" % (\'zhangsan\',)\neffect_row = cursor.execute(sql)\n# 正确方式一\n# execute函数接受一个元组/列表作为SQL参数,元素个数只能有1个\nsql = "insert into USER (NAME) values(%s)"\neffect_row1 = cursor.execute(sql, [\'value1\'])\neffect_row2 = cursor.execute(sql, (\'value2\',))\n# 正确方式二\nsql = "insert into USER (NAME) values(%(name)s)"\neffect_row1 = cursor.execute(sql, {\'name\': \'value3\'})\n# 写入插入多行数据\neffect_row2 = cursor.executemany("insert into USER (NAME) values(%s)",\n[(\'value4\'), (\'value5\')])\n# 提交\nconn.commit()\n# 关闭游标\ncursor.close()\n方法2：增删查改\n# coding=utf-8\nimport pymysql\nfrom loguru import logger\nfrom urllib import parse\nfrom dbutils.pooled_db import PooledDB\nfrom sqlalchemy import create_engine\nclass SqlHelper2(object):\nglobal host, user, passwd, port\nhost = \'ip\'\nuser = \'root\'\npasswd = \'passwd\'\nport = 3306\ndef __init__(self,db_name):\nself.connect(db_name)\ndef connect(self,db_name):\nself.conn = pymysql.connect(host=host, user=user,\npasswd=passwd,port=port, db=db_name, charset=\'utf8mb4\')\nself.conn.ping(reconnect=True)\n# self.cursor = self.conn.cursor(cursor=pymysql.cursors.DictCursor)\nself.cursor = self.conn.cursor()\ndef get_list(self,sql):\ntry:\nself.conn.ping(reconnect=True)#解决超时问题\nself.cursor.execute(sql)\nresult = self.cursor.fetchall()\nself.cursor.close()\nexcept Exception as e:\nself.conn.ping(reconnect=True)\nself.cursor = self.conn.cursor()\nself.cursor.execute(sql)\nresult = self.cursor.fetchall()\nreturn result\ndef get_one(self, sql):\nself.cursor.execute(sql)\nresult = self.cursor.fetchone()\nreturn result\n#提交数据\ndef modify(self,sql,args=[]):\ntry:\nself.cursor.execute(sql,args)\nself.conn.commit()\nqk = "存入MySQL 成功"\nexcept Exception as e:\n# # 如果发生错误则回滚\nqk = "存入MySQL 失败:"+str(e)\nself.conn.rollback()\nreturn qk\ndef multiple(self,sql,args=[]):\n# executemany支持下面的操作，即一次添加多条数据\n# self.cursor.executemany(\'sinsert into class(id,name)\nvalues(%s,%s)\', [(1,\'wang\'),(2,\'li\')])\ntry:\nself.cursor.executemany(sql,args)\nself.conn.commit()\nqk = "存入MySQL 成功"\nexcept Exception as e:\nqk = "存入MySQL 失败:"+str(e)\nself.conn.rollback()\nreturn qk\ndef create(self,sql,args=[]):\nself.cursor.execute(sql,args)\nself.conn.commit()\nreturn self.cursor.lastrowid\ndef close(self):\nself.cursor.close()\nself.conn.close()\n<b id="automatetopic-9">xonsh python和shell交互</b>\n#Xonsh shell，为喜爱 Python 的 Linux 用户而打造。\n#Xonsh 是一个使用 Python 编写的跨平台 shell 语言和命令提示符。\n#它结合了 Python 和 Bash shell，因此你可以在这个 shell 中直接运行 Python 命令#（语句）。你甚至可以把 Python 命令和 shell 命令混合起来使用。\n#pip install xonsh\nxonsh #启动\n#shell 部分\n&gt;&gt;&gt;$GOAL = \'Become the Lord of the Files\'\n&gt;&gt;&gt;print($GOAL)\nBecome the Lord of the Files\n&gt;&gt;&gt;del $GOAL\n#python 部分\nd = {\'xonsh\': True}\nd.get(\'bash\', False)\n&gt;&gt;&gt;False\n#\n<b id="automatetopic-10">cpu内存使用率展示</b>\n#pyecharts是百度开源软件echarts的python集成包，可根据需求绘制各类图形。\n#折线图 Line\nfrom pyecharts.charts import Line\nimport pandas as pd\nfrom pyecharts import options as opts\nimport random\n#模拟数据，生成cpu使用率的折线图\nx =list(pd.date_range(\'20220701\',\'20220830\'))\ny=[random.randint(10,30) for i in range(len(x))]\nz=[random.randint(5,20) for i in range(len(x))]\nline = Line(init_opts = opts.InitOpts(width =\'800px\',height =\'600px\'))\nline.add_xaxis(xaxis_data =x)\nline.add_yaxis(series_name = \'cpu使用率\',y_axis = y,is_smooth=True)\nline.add_yaxis(series_name = \'内存使用率\',y_axis = z,is_smooth=True)\n#添加参数，title_opts设置图的标题\nline.set_global_opts(title_opts = opts.TitleOpts(title =\'CPU和内存使用率折线\n图\'))\nline.render()#生成一个render.html浏览器打开\n#可根据上述脚本对linux主机采集的数据，存入到MySQL，最后通过python Django、flask、fastapi等web框架进行展示。\n执行前需安装相应的依赖包：pip install xxx\n',
'<h2>10 个杀手级自动化Python 脚本</h2>\n“自动化不是人类工人的敌人，而是盟友。\n自动化将工人从苦差事中解放出来，让他有机会做更有创造力和更有价值的工作。\n1、文件传输脚本\nPython 中的文件传输脚本是一组用 Python 编程语言编写的指令或程序，用于自动执行通过网络或在计算机之间传输文件的过程。\nPython 提供了几个可用于创建文件传输脚本的库和模块，例如套接字ftplib、smtplib 和paramiko 等。\n下面是 Python 中一个简单的文件传输脚本示例，该脚本使用套接字模块通过网络传输文件：\nimport socket\n# create socket\ns = socket.socket()\n# bind socket to a address and port\ns.bind((\'localhost\', 12345))\n# put the socket into listening mode\ns.listen(5)\nprint(\'Server listening...\')\n# forever loop to keep server running\nwhile True:\n # establish connection with client\n client, addr = s.accept()\n print(f\'Got connection from {addr}\')\n # receive the file name\n file_name = client.recv(1024).decode()\n try:\n  # open the file for reading in binary\n  with open(file_name, \'rb\') as file:\n   # read the file in chunks\n   while True:\n    chunk = file.read(1024)\n    if not chunk:\n     break\n    # send the chunk to the client\n    client.sendall(chunk)\n  print(f\'File {file_name} sent successfully\')\n except FileNotFoundError:\n  # if file not found, send appropriate message\n  client.sendall(b\'File not found\')\n  print(f\'File {file_name} not found\')\n # close the client connection\n client.close()\n此脚本运行一个服务器，该服务器侦听地址 localhost 和端口 12345 上的传入连接。\n当客户端连接时，服务器从客户端接收文件名，然后读取文件的内容并将其以块的形式发送到客户端。\n如果未找到该文件，服务器将向客户端发送相应的消息。\n如上所述，还有其他库和模块可用于在python中创建文件传输脚本，例如使用ftp协议连接和传输文件的ftplib和用于SFTP/SSH文件传输协议传输的paramiko。\n可以定制脚本以匹配特定要求或方案。\n2、系统监控脚本\n系统监视脚本是一种 Python 脚本用于监视计算机或网络的性能和状态。\n该脚本可用于跟踪各种指标，例如 CPU 使用率、内存使用率、磁盘空间、网络流量和系统正常运行时间。\n该脚本还可用于监视某些事件或条件，例如错误的发生或特定服务的可用性。\n例如：\nimport psutil\n# Get the current CPU usage\ncpu_usage = psutil.cpu_percent()\n# Get the current memory usage\nmemory_usage = psutil.virtual_memory().percent\n# Get the current disk usage\ndisk_usage = psutil.disk_usage("/").percent\n# Get the network activity\n# Get the current input/output data rates for each network interface\nio_counters = psutil.net_io_counters(pernic=True)\nfor interface, counters in io_counters.items():\n print(f"Interface {interface}:")\n print(f"  bytes sent: {counters.bytes_sent}")\n print(f"  bytes received: {counters.bytes_recv}")\n# Get a list of active connections\nconnections = psutil.net_connections()\nfor connection in connections:\n print(f"{connection.laddr} &lt;-> {connection.raddr} ({connection.status})")\n# Print the collected data\nprint(f"CPU usage: {cpu_usage}%")\nprint(f"Memory usage: {memory_usage}%")\nprint(f"Disk usage: {disk_usage}%")\n此脚本使用psutil模块中的\ncpu_percent: CPU 使用率\nvirtual_memory:内存使用率\ndisk_usage: 磁盘使用率。\n函数分别检索当前:\nvirtual_memory 函数返回具有各种属性的对象，例如内存总量以及已用内存量和可用内存量。\ndisk_usage 函数将路径作为参数，并返回具有磁盘上总空间量以及已用空间量和可用空间量等属性的对象。\n3、网页抓取脚本最常用\n此脚本可用于从网站中提取数据并以结构化格式，如电子表格或数据库存储数据。\n这对于收集数据进行分析或跟踪网站上的更改非常有用。\n例如：\nimport requests\nfrom bs4 import BeautifulSoup\n# Fetch a web page\npage = requests.get("http://www.example.com")\n# Parse the HTML content\nsoup = BeautifulSoup(page.content, "html.parser")\n# Find all the links on the page\nlinks = soup.find_all("a")\n# Print the links\nfor link in links:\n print(link.get("href"))\n可以看到BeautiulSoup的强大功能。\n您可以使用此包找到任何类型的 dom 对象，因为我已经展示了如何找到页面上的所有链接。\n您可以修改脚本以抓取其他类型的数据，或导航到站点的不同页面。\n还可以使用 find 方法查找特定元素，或使用带有其他参数的 find_all 方法来筛选结果。\n4、电子邮件自动化脚本\n此脚本可用于根据特定条件自动发送电子邮件。\n例如，您可以使用此脚本向团队发送每日报告，或者在重要截止日期临近时向自己发送提醒。\n下面是如何使用 Python 发送电子邮件的示例：\nimport smtplib\nfrom email.mime.text import MIMEText\n# Set the SMTP server and login credentials\nsmtp_server = "smtp.gmail.com"\nsmtp_port = 587\nusername = "your@email.com"\npassword = "yourpassword"\n# Set the email parameters\nrecipient = "recipient@email.com"\nsubject = "Test email from Python"\nbody = "This is a test email sent from Python."\n# Create the email message\nmsg = MIMEText(body)\nmsg["Subject"] = subject\nmsg["To"] = recipient\nmsg["From"] = username\n# Send the email\nserver = smtplib.SMTP(smtp_server, smtp_port)\nserver.starttls()\nserver.login(username, password)\nserver.send_message(msg)\nserver.quit()\n此脚本使用 smtplib 和电子邮件模块通过简单邮件传输协议 SMTP 发送电子邮件。\n来自smtplib模块的SMTP类用于创建SMTP客户端，starttls和登录方法用于建立安全连接，电子邮件模块中的MIMEText类用于创建多用途Internet邮件扩展MIME格式的电子邮件。\nMIMEText 构造函数将电子邮件的正文作为参数，您可以使用 setitem 方法来设置电子邮件的主题、收件人和发件人。\n创建电子邮件后，SMTP 对象的send_message方法将用于发送电子邮件。\n然后调用 quit 方法以关闭与 SMTP 服务器的连接。\n5、密码管理器脚本：\n密码管理器脚本是一种用于安全存储和管理密码的 Python 脚本。\n该脚本通常包括用于生成随机密码、将哈希密码存储在安全位置如数据库或文件以及在需要时检索密码的函数。\nimport secrets\nimport string\n# Generate a random password\ndef generate_password(length=16):\n characters = string.ascii_letters + string.digits + string.punctuation\n password = "".join(secrets.choice(characters) for i in range(length))\n return password\n# Store a password in a secure way\ndef store_password(service, username, password):\n # Use a secure hashing function to store the password\n hashed_password = hash_function(password)\n # Store the hashed password in a database or file\n with open("password_database.txt", "a") as f:\n  f.write(f"{service},{username},{hashed_password}\n")\n# Retrieve a password\ndef get_password(service, username):\n # Look up the hashed password in the database or file\n with open("password_database.txt") as f:\n  for line in f:\n   service_, username_, hashed_password_ = line.strip().split(",")\n   if service == service_ and username == username_:\n    # Use a secure hashing function to compare the stored password with the provided password\n    if hash_function(password) == hashed_password_:\n     return password\n  return None\n上述示例脚本中的generate_password 函数使用字母、数字和标点字符的组合生成指定长度的随机密码。\nstore_password函数将服务，如网站或应用程序、用户名和密码作为输入，并将散列密码存储在安全位置。\nget_password函数将服务和用户名作为输入，如果在安全存储位置找到相应的密码，则检索相应的密码。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/96iaDuCe2JMiaZ4Xx2zib3RWpYw14TwO7ErJVMU7xJZMre4GcmCNtxLY8p9UlX3c3Npfm2PX4Tib9dqic3kxkd3Bw8Q/640?wx_fmt=png">\n自动化的 Python 脚本的第 2 部分\n欢迎回来！\n在上一篇文章中，我们深入研究了 Python 脚本的世界，我们还没有揭开Python脚本的所有奥秘。\n在本期中，我们将发现其余五种类型的脚本，这些脚本将让您立即像专业人士一样编码。\n6、自动化数据分析：\nPython的pandas是数据分析和操作的强大工具。\n以下脚本演示如何使用它自动执行清理、转换和分析数据集的过程。\nimport pandas as pd\n# Reading a CSV file\ndf = pd.read_csv("data.csv")\n# Cleaning data\ndf.dropna(inplace=True) # Dropping missing values\ndf = df[df["column_name"] != "some_value"] # Removing specific rows\n# Transforming data\ndf["column_name"] = df["column_name"].str.lower() # Changing string to lowercase\ndf["column_name"] = df["column_name"].astype(int) # Changing column datatype\n# Analyzing data\nprint(df["column_name"].value_counts()) # Prints the frequency of unique values in the column\n# Saving the cleaned and transformed data to a new CSV file\ndf.to_csv("cleaned_data.csv", index=False)\n上面脚本中的注释对于具有 python 基础知识的人来说非常简单。\n该脚本是一个简单的示例，用于演示 pandas 库的强大功能以及如何使用它来自动执行数据清理、转换和分析任务。\n但是，脚本是有限的，在实际方案中，数据集可能要大得多，清理、转换和分析操作可能会更复杂。\n7、自动化计算机视觉任务：\n自动化计算机视觉任务是指使用 Python 及其库自动执行各种图像处理和计算机视觉操作。\nPython 中最受欢迎的计算机视觉任务库之一是opencv\nOpenCV是一个主要针对实时计算机视觉的编程函数库。\n它提供了广泛的功能，包括图像和视频 I/O、图像处理、视频分析、对象检测和识别等等。\n例如：\nimport cv2\n# Load the cascade classifier for face detection\nface_cascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")\n# Load the image\nimg = cv2.imread("image.jpg")\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n# Detect faces\nfaces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)\n# Draw rectangles around the faces\nfor (x, y, w, h) in faces:\n cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\n# Show the image\ncv2.imshow("Faces", img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n上面的脚本检测图像中的人脸。\n它首先加载一个级联分类器用于人脸检测，这个分类器是一个预先训练的模型，可以识别图像中的人脸。\n然后它加载图像并使用 cv2.cvtColor()方法将其转换为灰度。\n然后将图像传递给分类器的 detectMultiScale()方法，该方法检测图像中的人脸。\n该方法返回检测到的人脸的坐标列表。\n然后，该脚本循环遍历坐标列表，并使用 cv2.rectangle()方法在检测到的人脸周围绘制矩形。\n最后，使用 cv2.imshow()方法在屏幕上显示图像。\n这只是OpenCV可以实现的目标的一个基本示例，还有更多可以自动化的功能，例如对象检测，图像处理和视频分析。\nOpenCV 是一个非常强大的库，可用于自动执行各种计算机视觉任务，例如面部识别、对象跟踪和图像稳定。\n8、自动化数据加密：\n自动化数据加密是指使用 Python 及其库自动加密和解密数据和文件。\nPython 中最受欢迎的数据加密库之一是密码学。\n“密码学”是一个提供加密配方和原语的库。\n它包括高级配方和常见加密算法（如对称密码、消息摘要和密钥派生函数）的低级接口。\n以下示例演示了如何使用加密库加密文件：\nimport os\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\npassword = b"super_secret_password"\nsalt = os.urandom(16)\nkdf = PBKDF2HMAC(\n algorithm=hashes.SHA256,\n iterations=100000,\n length=32,\n salt=salt,\n backend=default_backend()\n)\nkey = base64.urlsafe_b64encode(kdf.derive(password))\ncipher = Fernet(key)\n# Encrypt the file\nwith open("file.txt", "rb") as f:\n data = f.read()\ncipher_text = cipher.encrypt(data)\nwith open("file.txt", "wb") as f:\n f.write(cipher_text)\n它首先使用 PBKDF2HMAC 密钥派生函数生成密钥，这是一个基于密码的密钥派生函数，使用安全哈希算法 SHA-256 和salt值。\nsalt 值是使用os.urandom()函数生成的，该函数生成加密安全的随机字节。\n然后，它创建一个 Fernet 对象，该对象是对称（也称为“密钥”）身份验证加密的实现。\n然后，它读取明文文件，并使用 Fernet 对象的encrypt()方法对其进行加密。\n最后，它将加密数据写入文件。\n请务必注意，用于加密文件的密钥必须保密并安全存储。\n如果密钥丢失或泄露，加密的数据将无法读取。\n9、自动化测试和调试：\n自动化测试和调试是指使用 Python 及其库自动运行测试和调试代码。\n在 Python 中，有几个流行的库用于自动化测试和调试，例如 unittest、pytest、nose 和 doctest。\n下面是使用unittest 库自动测试在给定字符串中查找最长回文子字符串的 Python 函数的示例：\ndef longest_palindrome(s):\n n = len(s)\n ans = ""\n for i in range(n):\n  for j in range(i+1, n+1):\n   substring = s[i:j]\n   if substring == substring[::-1] and len(substring) &gt; len(ans):\n    ans = substring\n return ans\nclass TestLongestPalindrome(unittest.TestCase):\n def test_longest_palindrome(self):\n  self.assertEqual(longest_palindrome("babad"), "bab")\n  self.assertEqual(longest_palindrome("cbbd"), "bb")\n  self.assertEqual(longest_palindrome("a"), "a")\n  self.assertEqual(longest_palindrome(""), "")\nif __name__ == \'__main__\':\n unittest.main()\n此脚本使用 unittest 库自动测试在给定字符串中查找最长回文子字符串的 Python 函数。\n\'longest_palindrome\' 函数将字符串作为输入，并通过遍历所有可能的子字符串并检查它是否是回文并且它的长度大于前一个来返回最长的回文子字符串。\n该脚本还定义了一个从 unittest 继承的“TestLongestPalindrome”类。\n测试用例，并包含多种测试方法。\n每个测试方法都使用 assertEqual()方法来检查 longest_palindrome() 函数的输出是否等于预期的输出。\n当脚本运行时，将调用unittest.main()函数，该函数运行TestLongestPalindrome类中的所有测试方法。\n如果任何测试失败,即longest_palindrome()函数的输出不等于预期输出，则会打印一条错误消息，指示哪个测试失败以及预期和实际输出是什么。\n此脚本是如何使用 unittest 库自动测试 Python 函数的示例。\n它允许您在将代码部署到生产环境之前轻松测试代码并捕获任何错误或错误。\n10、自动化时间序列预测：\n自动化时间序列预测是指使用 Python 及其库自动预测时间序列数据的未来值。\n在Python中，有几个流行的库可以自动化时间序列预测，例如statsmodels和prophet。\n“prophet”是由Facebook开发的开源库，它提供了一种简单快捷的方式来执行时间序列预测。\n它基于加法模型，其中非线性趋势与每年、每周和每天的季节性以及假日效应相吻合。\n它最适合具有强烈季节性影响的时间序列和多个季节的历史数据。\n下面是使用 prophet 库对每日销售数据执行时间序列预测的示例：\nimport pandas as pd\nfrom fbprophet import Prophet\n# Read in data\ndf = pd.read_csv("sales_data.csv")\n# Create prophet model\nmodel = Prophet()\n# Fit model to data\nmodel.fit(df)\n# Create future dataframe\nfuture_data = model.make_future_dataframe(periods=365)\n# Make predictions\nforecast = model.predict(future_data)\n# Print forecast dataframe\nprint(forecast[[\'ds\', \'yhat\', \'yhat_lower\', \'yhat_upper\']])\n正如Mr.所说：一张图片胜过千言万语\n还可以通过在上面添加以下代码行来包含预测销售额的视觉对象：\n# Import visualization library\nimport matplotlib.pyplot as plt\n# Plot predicted values\nmodel.plot(forecast)\nplt.show()\n# Plot predicted values with uncertainty intervals\nmodel.plot(forecast)\nplt.fill_between(forecast[\'ds\'], forecast[\'yhat_lower\'], forecast[\'yhat_upper\'], color=\'pink\')\nplt.show()\n# Plot component of the forecast\nmodel.plot_components(forecast)\nplt.show()\n第一个可视化效果\nmodel.plot(forecast)\n显示预测值和历史数据，它可以让您大致了解模型拟合数据的程度。\n第二个可视化效果:\nplt.fill_between（预测[\'ds\']，预测[\'yhat_lower\']，预测[\'yhat_upper\']，color=\'pink\'）\n显示具有不确定性区间的预测值，这使您可以查看预测中有多少不确定性。\n第三个可视化效果\nmodel.plot_components(forecast)\n显示预测的组成部分，例如趋势、季节性和节假日。\n',
'<h2>双冒号“::”</h2>\n双冒号“::”在 Python 中的起什么什么作用，下面两段代码是什么意思？\nstr1[::-1]\nlist1[3::4]\n双冒号是 Python 序列切片功能中的一个特例。\n序列的切片使用三个参数 ，如果省略部分参数，则会出现双冒号。\n<k>「序列切片的语法格式：」\n</k>sequence[start:end:step]<k>\n「参数：」</k>\nstart：切片的起始索引。\n如果省略，切片将从序列的开头（即索引 0）开始。\nend：切片的结束索引。\n如果省略，切片将在序列的最后一个元素处结束。\nstep：切片中每个元素之间的增量。\n如果省略，则默认步长值为 1。\n',
'<h2>序列切片示例</h2>\nlist1=[1,2,3,4,5,6]\nprint(list1[0:5])#输出：[1, 2, 3, 4, 5]\nprint(list1[0:5:1])#输出：[1, 2, 3, 4, 5]\nprint(list1[1:3])#输出：[2, 3]\nprint(list1[0:5:2])#输出：[1, 3, 5]序列切片中的参数 start，end，step 可以省略，如果省略 start，end，形成两个连续的冒号。\nlist1=[1,2,3,4,5,6]\nprint(list1[::1])#输出：\n[1, 2, 3, 4, 5, 6]\nprint(list1[::2])#输出：[1, 3, 5]\nprint(list1[::-1])#输出：[6, 5, 4, 3, 2, 1]\nlist1[::1]：切片从第一个元素到最后一个元素，变化量是 1。\nlist1[::2]：切片从第一个元素到最后一个元素，变化量是 2。\nlist1[::-1]：切片从第一个元素到最后一个元素，变化量是-1，实现反转序列的功能。\n如果只省略 end，也形成两个连续的冒号。\nlist1=[1,2,3,4,5,6]\nprint(list1[2::1])#输出：[3, 4, 5, 6]\nprint(list1[2::2])#输出：[3, 5]\nprint(list1[1::-1])#输出：[2, 1]\nlist1[2::1]：切片从索引号为 2 的元素到最后一个元素，变化量是 1。\nlist1[2::2]：切片从索引号为 2 的元素到最后一个元素，变化量是 2。\nlist1[1::-1]：切片从索引号为 1 的元素反向到最后一个元素，变化量是-1。\n如果省略所有三个参数list1[::]，直接输出整个序列。\n序列的切片操作是 Python 中一项重要的技能，可以操作字符串、列表等序列。\n理解这种语法对于任何 Python 程序员来说都是必不可少的，可以使用此技巧有效地编写代码。\n',
'<h2>Selenium 选择元素的方法之css表达式</h2>\n前面我们介绍了通过CSS selector 语法根据ID、class属性、href属性，以及tag名来选择元素。今天来介绍CSS selector的另一个选择元素的强大之处： 选择语法联合使用\n<k>案例1：</k>在网页中有如下一段html代码:\n&lt;li>\n  &lt;ul class="clearfix">\n   &lt;li class="tag_title">\n    文学\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/小说" class="tag">小说&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/随笔" class="tag">随笔&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/日本文学" class="tag">日本文学&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/散文" class="tag">散文&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/诗歌" class="tag">诗歌&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/童话" class="tag">童话&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/名著" class="tag">名著&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/港台" class="tag">港台&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/?view=type&amp;amp;icn=index-sorttags-hot#文学" class="tag more_tag">更多»&lt;/a>\n   &lt;/li>\n  &lt;/ul>\n &lt;/li>\n如果我们要选择网页 html 中的 &lt;li class="tag_title">文学&lt;/li>元素。\nCSS selector 表达式可以有这几种写法：\n<k>写法1：选择ul节点class属性值为clearfix的子节点中，li节点class属性值为tag_title的元素</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'ul.clearfix > li.tag_title\')\n<k>写法2：选择class属性值为clearfix的子节点中，class属性值为tag_title的元素（不限制节点类型），中间用大于号隔开</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'.clearfix > .tag_title\')\n<k></k>\n<k>写法3：选择class属性值为clearfix的子节点中，class属性值为tag_title的元素（不限制节点类型），中间用空格隔开</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'.clearfix  .tag_title\')\n<k>示例代码1：</k>\n"""CSS Selector语法选择元素的方法：选择语法联合使用"""\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.common.by import By\n# 创建Webdriver对象wdtd,并将webdriver.Chrome()赋值给wdtd\nwdtd = webdriver.Chrome()\n# 调用WebDriver对象的get方法，让浏览器打开指定网址(豆瓣网)\nwdtd.get(\'https://book.douban.com/\')\n# 选择元素方法：选择语法联合使用\n# 写法1：\nelement = wdtd.find_element(By.CSS_SELECTOR,\'ul.clearfix > li.tag_title\')\n# 写法2：\n# element = wdtd.find_element(By.CSS_SELECTOR,\'.clearfix > .tag_title\')\n# 写法3：\n# element = wdtd.find_element(By.CSS_SELECTOR,\'.clearfix  .tag_title\')\n# 打印出元素对应的html\nprint(element.get_attribute(\'outerHTML\'))\n# input()\n<k>运行结果：</k>分别运行示例中的3种写法的代码，结果都为如下：<k></k>\n&lt;li class="tag_title">\n文学\n&lt;/li>\n<k>结果验证：分别验证3种表达式写法的正确性</k>\n<k>写法1：</k>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/e8QhZIE4V1gdibL7LgoOERI1frLULjDAYCspFtibL8FXpBZ8mMwrFhMjNH7ZuFQAOtcbjn1EjrYI7Dw8E1zCCvpw/640">\n<k>写法2：</k>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/e8QhZIE4V1gdibL7LgoOERI1frLULjDAYsmTnTQpsHAn2Wq2JdyGeibbOZjkt9ZibhmWzCxsD3W7AnvUSa6lHsycw/640">\n<k>写法3：</k>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/e8QhZIE4V1gdibL7LgoOERI1frLULjDAYcxygiclr8beyaaniayrI7ibDWaQ0HvLzguTphFBfXe2Z4Hn0fCLbDyyMw/640">\n<k>选择元素的方法：CSS表达式，选择语法组选择</k>前面我们介绍了CSS selector的选择元素的强大功能：选择语法联合使用。接下来我们介绍CSS selector的选择元素的另一强大功能：组选择。\n<k>案例2：</k>在网页中有如下一段html代码:\n&lt;ul class="hot-tags-col5 s" data-dstat-areaid="54" data-dstat-mode="click,expose">\n &lt;li>\n  &lt;ul class="clearfix">\n   &lt;li class="tag_title">\n    文学\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/小说" class="tag">小说&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/随笔" class="tag">随笔&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/日本文学" class="tag">日本文学&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/散文" class="tag">散文&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/诗歌" class="tag">诗歌&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/童话" class="tag">童话&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/名著" class="tag">名著&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/港台" class="tag">港台&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/?view=type&amp;amp;icn=index-sorttags-hot#文学" class="tag more_tag">更多»&lt;/a>\n   &lt;/li>\n  &lt;/ul>\n &lt;/li>\n &lt;li>\n  &lt;ul class="clearfix">\n   &lt;li class="tag_title">\n    流行\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/漫画" class="tag">漫画&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/推理" class="tag">推理&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/绘本" class="tag">绘本&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/科幻" class="tag">科幻&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/青春" class="tag">青春&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/言情" class="tag">言情&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/奇幻" class="tag">奇幻&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/武侠" class="tag">武侠&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/?view=type&amp;amp;icn=index-sorttags-hot#流行" class="tag more_tag">更多»&lt;/a>\n   &lt;/li>\n  &lt;/ul>\n &lt;/li>\n &lt;li>\n  &lt;ul class="clearfix">\n   &lt;li class="tag_title">\n    文化\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/历史" class="tag">历史&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/哲学" class="tag">哲学&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/传记" class="tag">传记&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/设计" class="tag">设计&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/电影" class="tag">电影&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/建筑" class="tag">建筑&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/回忆录" class="tag">回忆录&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/音乐" class="tag">音乐&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/?view=type&amp;amp;icn=index-sorttags-hot#文化" class="tag more_tag">更多»&lt;/a>\n   &lt;/li>\n  &lt;/ul>\n &lt;/li>\n    &lt;li>\n  &lt;ul class="clearfix">\n   &lt;li class="tag_title">\n    生活\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/旅行" class="tag">旅行&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/励志" class="tag">励志&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/教育" class="tag">教育&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/职场" class="tag">职场&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/美食" class="tag">美食&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/灵修" class="tag">灵修&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/健康" class="tag">健康&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/家居" class="tag">家居&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/?view=type&amp;amp;icn=index-sorttags-hot#生活" class="tag more_tag">更多»&lt;/a>\n   &lt;/li>\n  &lt;/ul>\n &lt;/li>\n &lt;li>\n  &lt;ul class="clearfix">\n   &lt;li class="tag_title">\n    经管\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/经济学" class="tag">经济学&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/管理" class="tag">管理&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/商业" class="tag">商业&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/金融" class="tag">金融&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/营销" class="tag">营销&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/理财" class="tag">理财&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/股票" class="tag">股票&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/企业史" class="tag">企业史&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/?view=type&amp;amp;icn=index-sorttags-hot#经管" class="tag more_tag">更多»&lt;/a>\n   &lt;/li>\n  &lt;/ul>\n &lt;/li>\n  \n \n &lt;li>\n  &lt;ul class="clearfix">\n   &lt;li class="tag_title">\n    科技\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/科普" class="tag">科普&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/互联网" class="tag">互联网&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/编程" class="tag">编程&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/交互设计" class="tag">交互设计&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/算法" class="tag">算法&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/通信" class="tag">通信&lt;/a>\n   &lt;/li>\n   &lt;li>\n    &lt;a href="/tag/神经网络" class="tag">神经网络&lt;/a>\n   &lt;/li>\n   &lt;li class="last">\n      &lt;a href="/tag/?view=type&amp;amp;icn=index-sorttags-hot#科技" class="tag more_tag">更多»&lt;/a>\n   &lt;/li>\n  &lt;/ul>\n &lt;/li>\n &lt;/ul>\n如果我们要同时选择网页html 中所有的 li标签下class名为tag_title和class名为last的元素。这时css选择器使用<k>逗号(,)</k>分隔，称之为<k>[组选择]</k>，组选择的CSS selector 表达式的写法是：\n<k>写法1：</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'li.tag_title , li.last\')\n<k>示例代码1：</k>\n"""CSS Selector语法选择元素的方法：选择语法组选择"""\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.common.by import By\n# 创建Webdriver对象wdtd,并将webdriver.Chrome()赋值给wdtd\nwdtd = webdriver.Chrome()\n# 调用WebDriver对象的get方法，让浏览器打开指定网址(豆瓣网)\nwdtd.get(\'https://book.douban.com/\')\n# 选择元素方法：组选择\n# 写法1：同时选择网页html中所有的li标签下class名为tag_title和class名为last的元素，这时css选择器使用逗号,称之为[组选择]\nelements = wdtd.find_elements(By.CSS_SELECTOR,\'li.tag_title,li.last\')\nfor element in elements:\n   print(element.text)\n<k>运行结果：</k>运行示例中的写法1的代码，结果为如下：<k></k>\n文学\n散文\n港台\n更多»\n流行\n科幻\n武侠\n更多»\n文化\n设计\n音乐\n更多»\n生活\n职场\n家居\n更多»\n经管\n金融\n企业史\n更多»\n科技\n交互设计\n更多»\n<img class="lazy" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/e8QhZIE4V1gdibL7LgoOERI1frLULjDAYocUgKlOH40JDuvkN0LYDwwWmkA5FNxfqPsFj7umBdI5HoHxP4Xz5xw/640">\n<k>结果验证：</k>用浏览器打开被测系统页面，按键盘上的F12键打开调试控制台窗口，点击 Elements 标签后， 按Ctrl+F键，在搜索栏输入任何 CSS Selector 表达式 ，本例中为：ul.clearfix > li.tag_title\n如果能选择到元素，搜索栏的方框结尾处就会显示出类似<k> 1 of 6 </k>这样的内容（如下图序号①）。同时，html中被选择的元素那行就会呈现高亮显示（如下图序号②和③）。<k></k>\n<k>写法1：验证写法1表达式写法的正确性</k>\n<img class="lazy" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/e8QhZIE4V1gdibL7LgoOERI1frLULjDAYJ5DicibRTUbORSibQyH61nnU6GBxE8HQZggftLq79ST2vpiaicxqKBBmPYQ/640">\n前面我们介绍了通过CSS selector 语法根据ID、class属性、href属性，以及tag名来选择元素。CSS selector的另两个选择元素的强大之处： 选择语法联合使用和组选择：\n（1）通过CSS Selector语法：选择语法联合使用时，表达式<k>中间用大于号或者空格隔开，</k>CSS selector 表达式可以有这几种写法：\n<k>写法1：选择ul节点class属性值为clearfix的子节点中，li节点class属性值为tag_title的元素</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'ul.clearfix > li.tag_title\')\n<k>写法2：选择class属性值为clearfix的子节点中，class属性值为tag_title的元素（不限制节点类型），中间用大于号隔开</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'.clearfix > .tag_title\')\n<k>写法3：选择class属性值为clearfix的子节点中，class属性值为tag_title的元素（不限制节点类型），中间用空格隔开</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'.clearfix  .tag_title\')\n（2）通过CSS Selector语法：组选择时，表达式<k>中间用逗号(,)隔开</k>CSS selector 表达式可以有这几种写法：\n<k>写法1：</k>\nelement = wdtd.find_element(By.CSS_SELECTOR,\'li.tag_title , li.last\')\n',
'<h2>Selenium 做任何你想做的事情</h2>\n<div id="Seleniumtoc" class="toc"><a href="#Seleniumdotopic-0" target="_self" onclick="jumpto(0)">Chrome DevTools 简介 </a><br><a href="#Seleniumdotopic-1" target="_self" onclick="jumpto(1)">Selenium 4 Chrome DevTools API </a><br><a href="#Seleniumdotopic-2" target="_self" onclick="jumpto(2)">模拟设备模式 </a><br><a href="#Seleniumdotopic-3" target="_self" onclick="jumpto(3)">模拟地理位置 </a><br><a href="#Seleniumdotopic-4" target="_self" onclick="jumpto(4)">捕获HTTP请求 </a><br><a href="#Seleniumdotopic-5" target="_self" onclick="jumpto(5)">拦截HTTP响应 </a><br><a href="#Seleniumdotopic-6" target="_self" onclick="jumpto(6)">捕获性能指标 </a><br><a href="#Seleniumdotopic-7" target="_self" onclick="jumpto(7)">基本身份验证 </a><br><a href="#Seleniumdotopic-8" target="_self" onclick="jumpto(8)">总结 </a><br></div></center>\n“getDevTools() 方法返回新的 Chrome DevTools 对象，允许您使用 send() 方法发送针对 CDP 的内置 Selenium 命令。\n这些命令是包装方法，使调用 CDP 函数更加清晰和简便。”\n<k>——SHAMA UGALE</k>\n首先，什么是 Chrome DevTools？\n<h3 id="Seleniumdotopic-0">Chrome DevTools 简介 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nChrome DevTools 是一组直接内置在基于 Chromium 的浏览器（如 Chrome、Opera 和 Microsoft Edge）中的工具，用于帮助开发人员调试和研究网站。\n借助 Chrome DevTools，开发人员可以更深入地访问网站，并能够：\n检查 DOM 中的元素\n即时编辑元素和 CSS\n检查和监控网站的性能\n模拟用户的地理位置\n模拟更快/更慢的网络速度\n执行和调试 JavaScript\n查看控制台日志\n等等\n<h3 id="Seleniumdotopic-1">Selenium 4 Chrome DevTools API </h3> <a href="#top" target="_self"><b>⇧</b></a><br>Selenium 是支持 web 浏览器自动化的一系列工具和库的综合项目。\nSelenium 4 添加了对 Chrome DevTools API 的原生支持。\n借助这些新的 API，我们的测试现在可以：\n捕获和监控网络流量和性能\n模拟地理位置，用于位置感知测试、本地化和国际化测试\n更改设备模式并测试应用的响应性\n这只是冰山一角！\nSelenium 4 引入了新的 ChromiumDriver 类，其中包括两个方法用于访问 Chrome DevTools：getDevTools() 和 executeCdpCommand()。\ngetDevTools() 方法返回新的 DevTools 对象，允许您使用 send() 方法发送针对 CDP 的内置 Selenium 命令。\n这些命令是包装方法，使调用 CDP 函数更加清晰和简便。\nexecuteCdpCommand() 方法也允许您执行 CDP 方法，但更加原始。\n它不使用包装的 API，而是允许您直接传入 Chrome DevTools 命令和该命令的参数。\n如果某个 CDP 命令没有 Selenium 包装 API，或者您希望以与 Selenium API 不同的方式进行调用，则可以使用 executeCdpCommand()。\n像 ChromeDriver 和 EdgeDriver 这样的基于 Chromium 的驱动程序现在继承自 ChromiumDriver，因此您也可以从这些驱动程序中访问 Selenium CDP API。\n让我们探索如何利用这些新的 Selenium 4 API 来解决各种使用案例。\n<h3 id="Seleniumdotopic-2">模拟设备模式 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>我们今天构建的大多数应用都是响应式的，以满足来自各种平台、设备（如手机、平板、可穿戴设备、桌面）和屏幕方向的终端用户的需求。\n作为测试人员，我们可能希望将我们的应用程序放置在不同的尺寸中，以触发应用程序的响应性。\n我们如何使用 Selenium 的新 CDP 功能来实现这一点呢？\n用于修改设备度量的 CDP 命令是 Emulation.setDeviceMetricsOverride，并且此命令需要输入宽度、高度、移动设备标志和设备缩放因子。\n这四个键在此场景中是必需的，但还有一些可选的键。\n在我们的 Selenium 测试中，我们可以使用 DevTools::send() 方法并使用内置的 setDeviceMetricsOverride() 命令，但是这个 Selenium API 接受 12 个参数 - 除了 4 个必需的参数外，还有 8 个可选的参数。\n对于我们不需要发送的这 8 个可选参数中的任何一个，我们可以传递 Optional.empty()。\n然而，为了简化这个过程，只传递所需的参数，我将使用下面代码中的原始 executeCdpCommand() 方法。\npackage com.devtools;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.devtools.DevTools;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class SetDeviceMode {\n final static String PROJECT_PATH = System.getProperty("user.dir");\n public static void main(String[] args){\n  System.setProperty("webdriver.chrome.driver", PROJECT_PATH + "/src/main/resources/chromedriver");\n  ChromeDriver driver;\n  driver = new ChromeDriver();\n  DevTools devTools = driver.getDevTools();\n  devTools.createSession();\n  Map deviceMetrics = new HashMap()\n  {{\n   put("width", 600);\n   put("height", 1000);\n   put("mobile", true);\n   put("deviceScaleFactor", 50);\n  }};\n  driver.executeCdpCommand("Emulation.setDeviceMetricsOverride", deviceMetrics);\n  driver.get("https://www.google.com");\n }\n}\n在第19行，我创建了一个包含此命令所需键的映射。\n然后在第26行，我调用 executeCdpCommand() 方法，并传递两个参数：命令名称为 "Emulation.setDeviceMetricsOverride"，以及包含参数的设备度量映射。\n在第27行，我打开了渲染了我提供的规格的 "Google" 首页，如下图所示。\n<img class="lazy" data-src="https://mmbiz.qpic.cn/sz_mmbiz_png/KN0Z2XZibPdYicBr7ib7zhplesB51ITAAygPW1wbayH8ehgHXldWqc3LHV1VEjvp46ceGVhyPia4jr4bGXJWuvDySw/640">\n借助像 Applitools Eyes 这样的解决方案，我们不仅可以使用这些新的 Selenium 命令在不同的视口上快速进行测试，还可以在规模上保持任何不一致性。\nEyes 足够智能，不会对由于不同的浏览器和视口导致的 UI 中微小且难以察觉的变化报告错误的结果。\n<h3 id="Seleniumdotopic-3">模拟地理位置 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>在许多情况下，我们需要测试特定的基于位置的功能，例如优惠、基于位置的价格等。\n为此，我们可以使用DevTools API来模拟位置。\n  @Test\n public void mockLocation(){\n  devTools.send(Emulation.setGeolocationOverride(\n    Optional.of(48.8584),\n    Optional.of(2.2945),\n    Optional.of(100)));\n  driver.get("https://mycurrentlocation.net/");\n  try {\n   Thread.sleep(30000);\n  } catch (InterruptedException e) {\n   e.printStackTrace();\n  }\n }\n模拟网络速度 许多用户通过连接到 Wi-Fi 或蜂窝网络的手持设备访问 Web 应用程序。\n遇到信号弱的网络信号，因此互联网连接速度较慢是很常见的。\n在互联网连接速度较慢（2G）或间歇性断网的情况下，测试应用程序在这种条件下的行为可能很重要。\n伪造网络连接的 CDP 命令是 Network.emulateNetworkConditions。\n关于此命令的必需和可选参数的信息可以在文档中找到。\n通过访问 Chrome DevTools，就可以模拟这些场景。\n让我们看看如何做到这一点。\npackage com.devtools;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.devtools.DevTools;\nimport org.openqa.selenium.devtools.network.Network;\nimport org.openqa.selenium.devtools.network.model.ConnectionType;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\npublic class SetNetwork {\n final static String PROJECT_PATH = System.getProperty("user.dir");\n public static void main(String[] args){\n  System.setProperty("webdriver.chrome.driver", PROJECT_PATH + "/src/main/resources/chromedriver");\n  ChromeDriver driver;\n  driver = new ChromeDriver();\n  \n  DevTools devTools = driver.getDevTools();\n  devTools.createSession();\n  devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\n  devTools.send(Network.emulateNetworkConditions(\n    false,\n    20,\n    20,\n    50,\n    Optional.of(ConnectionType.CELLULAR2G)\n  ));\n  driver.get("https://www.google.com");\n }\n}\n在第21行，我们通过调用 getDevTools() 方法获取 DevTools 对象。\n然后，我们调用 send() 方法来启用 Network，并再次调用 send() 方法来传递内置命令 Network.emulateNetworkConditions() 和我们希望与此命令一起发送的参数。\n最后，我们使用模拟的网络条件打开 Google 首页。\n<h3 id="Seleniumdotopic-4">捕获HTTP请求 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>使用 DevTools，我们可以捕获应用程序发起的 HTTP 请求，并访问方法、数据、头信息等等。\n让我们看看如何使用示例代码捕获 HTTP 请求、URI 和请求方法。\npackage com.devtools;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.devtools.DevTools;\nimport org.openqa.selenium.devtools.network.Network;\nimport java.util.Optional;\npublic class CaptureNetworkTraffic {\n private static ChromeDriver driver;\n private static DevTools chromeDevTools;\n final static String PROJECT_PATH = System.getProperty("user.dir");\n public static void main(String[] args){\n  System.setProperty("webdriver.chrome.driver", PROJECT_PATH + "/src/main/resources/chromedriver");\n  driver = new ChromeDriver();\n  chromeDevTools = driver.getDevTools();\n  chromeDevTools.createSession();\n  chromeDevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\n  chromeDevTools.addListener(Network.requestWillBeSent(),\n    entry -> {\n     System.out.println("Request URI : " + entry.getRequest().getUrl()+"\n"\n     + " With method : "+entry.getRequest().getMethod() + "\n");\n     entry.getRequest().getMethod();\n    });\n  driver.get("https://www.google.com");\n  chromeDevTools.send(Network.disable());\n }\n}\n开始捕获网络流量的 CDP 命令是 Network.enable。\n关于此命令的必需和可选参数的信息可以在文档中找到。\n在我们的代码中，第22行使用 DevTools::send() 方法发送 Network.enable CDP 命令以启用网络流量捕获。\n第23行添加了一个监听器，用于监听应用程序发送的所有请求。\n对于应用程序捕获的每个请求，我们使用 getRequest().getUrl() 提取 URL，并使用 getRequest().getMethod() 提取 HTTP 方法。\n第29行，我们打开了 Google 的首页，并在控制台上打印了此页面发出的所有请求的 URI 和 HTTP 方法。\n一旦我们完成了请求的捕获，我们可以发送 Network.disable 的 CDP 命令以停止捕获网络流量，如第30行所示。\n<h3 id="Seleniumdotopic-5">拦截HTTP响应 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>为了拦截响应，我们将使用Network.responseReceived事件。\n当HTTP响应可用时触发此事件，我们可以监听URL、响应头、响应代码等。\n要获取响应正文，请使用Network.getResponseBody方法。\n @Test\n public void validateResponse() {\n  final RequestId[] requestIds = new RequestId[1];\n  devTools.send(Network.enable(Optional.of(100000000), Optional.empty(), Optional.empty()));\n  devTools.addListener(Network.responseReceived(), responseReceived -> {\n   if (responseReceived.getResponse().getUrl().contains("api.zoomcar.com")) {\n    System.out.println("URL: " + responseReceived.getResponse().getUrl());\n    System.out.println("Status: " + responseReceived.getResponse().getStatus());\n    System.out.println("Type: " + responseReceived.getType().toJson());\n    responseReceived.getResponse().getHeaders().toJson().forEach((k, v) -> System.out.println((k + ":" + v)));\n    requestIds[0] = responseReceived.getRequestId();\n    System.out.println("Response Body: \n" + devTools.send(Network.getResponseBody(requestIds[0])).getBody() + "\n");\n   }\n  });\n  driver.get("https://www.zoomcar.com/bangalore");\n  driver.findElement(By.className("search")).click();\n }\n访问控制台日志\n我们都依赖日志来进行调试和分析故障。\n在测试和处理具有特定数据或特定条件的应用程序时，日志可以帮助我们调试和捕获错误消息，提供更多在 Chrome DevTools 的控制台选项卡中发布的见解。\n我们可以通过调用 CDP 日志命令来通过我们的 Selenium 脚本捕获控制台日志，如下所示。\npackage com.devtools;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.devtools.DevTools;\nimport org.openqa.selenium.devtools.log.Log;\npublic class CaptureConsoleLogs {\n \n private static ChromeDriver driver;\n private static DevTools chromeDevTools;\n final static String PROJECT_PATH = System.getProperty("user.dir");\n public static void main(String[] args){\n  System.setProperty("webdriver.chrome.driver", PROJECT_PATH + "/src/main/resources/chromedriver");\n  driver = new ChromeDriver();\n  chromeDevTools = driver.getDevTools();\n  chromeDevTools.createSession();\n  chromeDevTools.send(Log.enable());\n  chromeDevTools.addListener(Log.entryAdded(),\n    logEntry -> {\n     System.out.println("log: "+logEntry.getText());\n     System.out.println("level: "+logEntry.getLevel());\n    });\n  driver.get("https://testersplayground.herokuapp.com/console-5d63b2b2-3822-4a01-8197-acd8aa7e1343.php");\n }\n}\n在我们的代码中，第19行使用 DevTools::send() 来启用控制台日志捕获。\n然后，我们添加一个监听器来捕获应用程序记录的所有控制台日志。\n对于应用程序捕获的每个日志，我们使用 getText() 方法提取日志文本，并使用 getLevel() 方法提取日志级别。\n最后，打开应用程序并捕获应用程序发布的控制台错误日志。\n<h3 id="Seleniumdotopic-6">捕获性能指标 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>在当今快节奏的世界中，我们以如此快的速度迭代构建软件，我们也应该迭代性地检测性能瓶颈。\n性能较差的网站和加载较慢的页面会让客户感到不满。\n我们能够在每次构建时验证这些指标吗？是的，我们可以！\n捕获性能指标的 CDP 命令是 Performance.enable。\n关于这个命令的信息可以在文档中找到。\n让我们看看如何在 Selenium 4 和 Chrome DevTools API 中完成这个过程。\npackage com.devtools;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.devtools.DevTools;\nimport org.openqa.selenium.devtools.performance.Performance;\nimport org.openqa.selenium.devtools.performance.model.Metric;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class GetMetrics {\n final static String PROJECT_PATH = System.getProperty("user.dir");\n public static void main(String[] args){\n  System.setProperty("webdriver.chrome.driver", PROJECT_PATH + "/src/main/resources/chromedriver");\n  ChromeDriver driver = new ChromeDriver();\n  DevTools devTools = driver.getDevTools();\n  devTools.createSession();\n  devTools.send(Performance.enable());\n  driver.get("https://www.google.org");\n  List&lt;Metric> metrics = devTools.send(Performance.getMetrics());\n  List&lt;String> metricNames = metrics.stream()\n    .map(o -> o.getName())\n    .collect(Collectors.toList());\n  devTools.send(Performance.disable());\n  List&lt;String> metricsToCheck = Arrays.asList(\n    "Timestamp", "Documents", "Frames", "JSEventListeners",\n    "LayoutObjects", "MediaKeySessions", "Nodes",\n    "Resources", "DomContentLoaded", "NavigationStart");\n  metricsToCheck.forEach( metric -> System.out.println(metric +\n    " is : " + metrics.get(metricNames.indexOf(metric)).getValue()));\n }\n}\n首先，我们通过调用 DevTools 的 createSession() 方法创建一个会话，如第19行所示。\n接下来，我们通过将 Performance.enable() 命令发送给 send() 来启用 DevTools 来捕获性能指标，如第20行所示。\n一旦启用了性能捕获，我们可以打开应用程序，然后将 Performance.getMetrics() 命令发送给 send()。\n这将返回一个 Metric 对象的列表，我们可以通过流式处理来获取捕获的所有指标的名称，如第25行所示。\n然后，我们通过将 Performance.disable() 命令发送给 send() 来禁用性能捕获，如第29行所示。\n为了查看我们感兴趣的指标，我们定义了一个名为 metricsToCheck 的列表，然后通过循环遍历该列表来打印指标的值。\n<h3 id="Seleniumdotopic-7">基本身份验证 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>在 Selenium 中，无法与浏览器弹出窗口进行交互，因为它只能与 DOM 元素进行交互。\n这对于身份验证对话框等弹出窗口构成了挑战。\n我们可以通过使用 CDP API 直接与 DevTools 处理身份验证来绕过此问题。\n设置请求的附加标头的 CDP 命令是 Network.setExtraHTTPHeaders。\n以下是在 Selenium 4 中调用此命令的方法。\npackage com.devtools;\nimport org.apache.commons.codec.binary.Base64;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.devtools.DevTools;\nimport org.openqa.selenium.devtools.network.Network;\nimport org.openqa.selenium.devtools.network.model.Headers;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\npublic class SetAuthHeader {\n  private static final String USERNAME = "guest";\n  private static final String PASSWORD = "guest";\n  final static String PROJECT_PATH = System.getProperty("user.dir");\n  public static void main(String[] args){\n System.setProperty("webdriver.chrome.driver", PROJECT_PATH + "/src/main/resources/chromedriver");\n ChromeDriver driver = new ChromeDriver();\n //Create DevTools session and enable Network\n DevTools chromeDevTools = driver.getDevTools();\n chromeDevTools.createSession();\n chromeDevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\n //Open website\n driver.get("https://jigsaw.w3.org/HTTP/");\n //Send authorization header\n Map<String, Object> headers = new HashMap<>();\n String basicAuth ="Basic " + new String(new Base64().encode(String.format("%s:%s", USERNAME, PASSWORD).getBytes()));\n headers.put("Authorization", basicAuth);\n chromeDevTools.send(Network.setExtraHTTPHeaders(new Headers(headers)));\n //Click authentication test - this normally invokes a browser popup if unauthenticated\n driver.findElement(By.linkText("Basic Authentication test")).click();\n String loginSuccessMsg = driver.findElement(By.tagName("html")).getText();\n if(loginSuccessMsg.contains("Your browser made it!")){\n   System.out.println("Login successful");\n }else{\n   System.out.println("Login failed");\n }\n driver.quit();\n  }\n}\n我们首先使用 DevTools 对象创建一个会话，并启用 Network。\n这在第25-26行中展示。\n接下来，我们打开我们的网站，然后创建用于发送的身份验证标头。\n在第35行，我们将 setExtraHTTPHeaders 命令发送到 send()，同时发送标头的数据。\n这部分将对我们进行身份验证并允许我们绕过浏览器弹出窗口。\n为了测试这个功能，我们点击了基本身份验证测试链接。\n如果您手动尝试这个操作，您会看到浏览器弹出窗口要求您进行登录。\n但由于我们发送了身份验证标头，所以我们的脚本中不会出现这个弹出窗口。\n相反，我们会收到消息“您的浏览器登录成功！”。\n<h3 id="Seleniumdotopic-8">总结 </h3> <a href="#top" target="_self"><b>⇧</b></a><br>通过添加 CDP API，Selenium 已经变得更加强大。\n现在，我们可以增强我们的测试，捕获 HTTP 网络流量，收集性能指标，处理身份验证，并模拟地理位置、时区和设备模式。\n以及在 Chrome DevTools 中可能出现的任何其他功能！\n参考：\nSelenium官方网站：https://www.selenium.dev/\nSelenium文档：https://www.selenium.dev/documentation/en/\nSelenium教程：https://www.selenium.dev/documentation/en/getting_started/\nSelenium API文档：https://www.selenium.dev/selenium/docs/api/py/index.html\n',
'<h2>使用 Python 进行 Windows GUI 自动化</h2>\n<div id="PythonGUItoc" class="toc"><a href="#PythonGUItopic-0" target="_self" onclick="jumpto(0)">pyautogui</a><br><a href="#PythonGUItopic-1" target="_self" onclick="jumpto(1)">pyautogui 的使用场景</a><br><a href="#PythonGUItopic-2" target="_self" onclick="jumpto(2)">如何安装 pyautogui？</a><br><a href="#PythonGUItopic-3" target="_self" onclick="jumpto(3)">用 pyautogui 打开记事本，输入文本保存</a><br><a href="#PythonGUItopic-4" target="_self" onclick="jumpto(4)">pywinauto</a><br><a href="#PythonGUItopic-5" target="_self" onclick="jumpto(5)">pywinauto 的使用场景</a><br><a href="#PythonGUItopic-6" target="_self" onclick="jumpto(6)">用 pywinauto 来自动化 Windows 计算器</a><br><a href="#PythonGUItopic-7" target="_self" onclick="jumpto(7)">用 pywinauto 来自动化 Windows 记事本</a><br><a href="#PythonGUItopic-8" target="_self" onclick="jumpto(8)">最后的话</a><br></div></center>\n我们将探讨如何使用 Python 进行 Windows GUI 自动化。GUI 自动化可以帮助我们自动执行许多与操作系统交互的任务，比如移动鼠标、点击按钮、输入文本、移动窗口等。Python 提供了两个强大的库：pyautogui 和 pywinauto，使得 GUI 自动化变得简单。接下来我们详细介绍。\n<h3 class="orange" id="PythonGUItopic-0">pyautogui</h3>\npyautogui 是一个纯 Python 的 GUI 自动化库，它可以模拟键盘输入、鼠标点击和移动、在屏幕上查找图像等操作。它对 Windows、macOS、和 Linux 都有良好的支持，可以帮助我们编写跨平台的自动化脚本。\n<h3 id="PythonGUItopic-1">pyautogui 的使用场景</h3>\npyautogui 的使用场景非常广泛。以下是一些常见的例子：\n** 测试 **：自动化脚本可以帮助我们自动执行一些复杂的测试用例，比如 UI 测试、功能测试等。\n** 数据录入 **：如果我们需要在多个表单或应用程序中输入相同的数据，自动化脚本可以帮助我们节省大量的时间和精力。\n** 批量操作 **：如果我们需要对大量的文件或数据进行相同的操作，自动化脚本也可以派上用场。\n<h3 id="PythonGUItopic-2">如何安装 pyautogui？</h3>\n在开始使用 pyautogui 之前，我们需要先在我们的 Python 环境中安装它。在命令行中输入以下命令即可：\npip install pyautogui\n<h3 id="PythonGUItopic-3">用 pyautogui 打开记事本，输入文本保存</h3>\n接下来，我们通过一个简单的例子来展示如何使用 pyautogui。在这个例子中，我们将使用 pyautogui 来自动打开一个记事本，输入一些文字，然后保存并关闭它。\n首先，我们导入 pyautogui 库，并设置失败安全特性，当我们将鼠标移动到屏幕的左上角时，自动化会立即停止：\nimport pyautogui\npyautogui.FAILSAFE = True\n然后，我们使用 pyautogui 的 hotkey 函数来模拟按下 Win+R 组合键，打开运行对话框：\npyautogui.hotkey(\'win\', \'r\')\n接着，我们使用 typewrite 函数来输入 "notepad"，并按下回车键：\npyautogui.typewrite(\'notepad\', interval=0.25)\npyautogui.press(\'enter\')\n然后，我们等待一下，让记事本完全打开，然后再输入一些文字：\nimport time\ntime.sleep(2)  # wait for Notepad to open\npyautogui.typewrite(\'Hello, world!\', interval=0.25)\ntypewrite 函数可以模拟键盘输入，interval 参数可以设置每个字符之间的间隔，以模拟人类的打字速度。\n接下来，我们用 hotkey 函数来模拟按下 Ctrl+S 组合键，保存这个文件：\npyautogui.hotkey(\'ctrl\', \'s\')  # press the Save hotkey combination\ntime.sleep(1)  # wait for the Save dialog to appear\n然后我们输入文件名，并按下回车键保存文件：\npyautogui.typewrite(\'hello_world.txt\', interval=0.25)\npyautogui.press(\'enter\')  # press the Enter key\n最后，我们用 hotkey 函数来模拟按下 Alt+F4 组合键，关闭记事本：\npyautogui.hotkey(\'alt\', \'f4\')  # close Notepad\n以上就是用 pyautogui 编写的一个简单的自动化脚本。通过这个脚本，我们可以看到，pyautogui 提供了一套非常直观和易用的接口，让我们可以轻松地编写出复杂的自动化脚本。\n<h3 class="orange" id="PythonGUItopic-4">pywinauto</h3>\npywinauto 的主要用途是自动化 Windows GUI 应用程序的测试和自动化。\n<h3 id="PythonGUItopic-5">pywinauto 的使用场景</h3>\n<k>回归测试</k>：定期运行相同的测试，确保软件在进行更改或更新后仍然可以正常工作。\n<k>质量保证</k>：确保软件的新版本或功能与预期的用户体验一致。\n<k>持续集成 / 持续部署 (CI/CD) 流程</k>：在自动化的构建和部署过程中，进行软件测试。\n<k>任务自动化</k>：自动执行一些重复性的 GUI 操作，如文件管理，软件安装等。\n<h3 id="PythonGUItopic-6">用 pywinauto 来自动化 Windows 计算器</h3>\n下面是一个简单的 pywinauto 教程，我们将演示如何用 pywinauto 来自动化 Windows 计算器的操作。\n首先，你需要确保你的环境已经安装了 Python 和 pywinauto。你可以使用 pip 来安装 pywinauto：\npip install pywinauto\n然后，我们可以编写一个简单的脚本来启动计算器应用并执行一些操作：\nfrom pywinauto.application import Application\n# 启动 Windows 计算器\napp = Application().start("calc.exe")\n# 选择计算器窗口\ndlg = app.window(title=\' 计算器 \')\n# 在计算器中输入 2+2\ndlg.type_keys(\'2+2=\')\n# 打印结果\nprint(" 结果是：", dlg.Static2.window_text())\n这段代码首先启动了 Windows 计算器，然后在计算器中执行了 2+2 的操作，并打印出结果。\n** 请注意：这个示例假设你的计算器应用具有类似于 Windows 10 计算器的布局。不同的 Windows 版本可能需要适当调整代码。**\n<h3 id="PythonGUItopic-7">用 pywinauto 来自动化 Windows 记事本</h3> <br><h4>导入模块</h4>\n在 Python 脚本中，我们需要导入 pywinauto 库。同时，我们还会导入 time 库，因为在执行某些操作时，我们可能需要暂停一下。\n启动应用程序\n使用 pywinauto 的 Application 对象，我们可以启动和控制应用程序。例如，如果我们要打开记事本，我们可以这样做：\napp = Application().start(操作窗口\n在打开应用程序后，我们通常需要与其窗口进行交互。我们可以使用 app 对象的 window_ 方法来获取窗口。然后，我们可以调用窗口的方法来执行各种操作，如点击按钮或输入文本。\n例如，我们可以在记事本中输入一些文本：\napp.Notepad.Edit.type_keys("Hello, World!", with_spaces = True)\ntype_keys 方法会模拟键盘按键。with_spaces = True 参数表示我们希望在每次按键之间添加短暂的延迟，以模拟人类的打字速度。\n<h4>保存和关闭</h4>\n最后，我们可以模拟点击菜单选项来保存我们的文件，然后关闭记事本：\napp.Notepad.menu_select("File -&gt; Save As")\napp.SaveAs.Edit.set_edit_text("example.txt")\napp.SaveAs.Save.click()\ntime.sleep(1)\napp.Notepad.menu_select("File -&gt; Exit")\n在这个例子中，menu_select 方法用于模拟点击菜单选项，set_edit_text 方法用于在文本框中输入文本，click 方法用于点击按钮。\n** 请注意：这个示例假设你的记事本的菜单是英文，如果是中文，则需要调整代码为中文。**\n以上就是一个基本的例子，展示了如何使用 Python 和 pywinauto 进行 Windows GUI 自动化。当然，pywinauto 还有更多的功能等待您去探索，包括处理复杂的窗口结构、模拟鼠标操作等。\n<h3 class="orange" id="PythonGUItopic-8">最后的话</h3>\npywinauto 和 pyautogui 都是强大的 GUI 自动化工具，可以帮助你自动化 Windows 应用程序的许多任务，你可以选择合适的工具进行自动化。希望这篇文章和教程能帮你提高工作效率，有问题也可以添加微信[somenzz-enjoy\n]交流学习。\n',
'<h2>Python 双冒号“::”是什么运算符</h2>\n双冒号“::”在 Python 中是 sequence[start:end:step]\nstr1[::-1]\nlist1[3::4]\n双冒号是 Python 序列切片功能中的一个特例。\n序列的切片使用三个参数 ，如果省略部分参数，则会出现双冒号。\n序列切片的语法格式： sequence[start:end:step]\n参数：\nstart：切片的起始索引。\n如果省略，切片将从序列的开头（即索引 0）开始。\nend：切片的结束索引。\n如果省略，切片将在序列的最后一个元素处结束。\nstep：切片中每个元素之间的增量。\n如果省略，则默认步长值为 1。\n<r>序列切片示例</r>\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(list1[0:5]) # 输出：[1, 2, 3, 4, 5]\nprint(list1[0:5:1]) # 输出：[1, 2, 3, 4, 5]\nprint(list1[1:3]) # 输出：[2, 3]\nprint(list1[0:5:2]) # 输出：[1, 3, 5]\n序列切片中的参数 start，end，step 可以省略，如果省略 start，end，形成两个连续的冒号。\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(list1[::1]) # 输出：[1, 2, 3, 4, 5, 6]\nprint(list1[::2]) # 输出：[1, 3, 5]\nprint(list1[::-1]) # 输出：[6, 5, 4, 3, 2, 1]\nlist1[::1] ：切片从第一个元素到最后一个元素，变化量是 1。\nlist1[::2] ：切片从第一个元素到最后一个元素，变化量是 2。\nlist1[::-1] ：切片从第一个元素到最后一个元素，变化量是-1，实现反转序列的功能。\n如果只省略 end，也形成两个连续的冒号。\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(list1[2::1]) # 输出：[3, 4, 5, 6]\nprint(list1[2::2]) # 输出：[3, 5]\nprint(list1[1::-1]) # 输出：[2, 1]\nlist1[2::1]：切片从索引号为 2 的元素到最后一个元素，变化量是 1。\nlist1[2::2]：切片从索引号为 2 的元素到最后一个元素，变化量是 2。\nlist1[1::-1]：切片从索引号为 1 的元素反向到最后一个元素，变化量是-1。\n如果省略所有三个参数list1[::] ，直接输出整个序列。\n序列的切片操作是 Python 中一项重要的技能，可以操作字符串、列表等序列。\n理解这种语法对于任何 Python 程序员来说都是必不可少的，可以使用此技巧有效地编写代码。\n',
'<h2>Print to File in Python</h2>\nOpen file in append mode using open() built-in function.\nCall print statement.\nf = open(\'my_log.txt\', \'a\')\nprint("Hello World", file=f)\nThe syntax to print a list to the file is\nprint([\'apple\', \'banana\'], file=f)\nSimilarly we can print other data types to a file as well.\ntext = "Hello World! Welcome to new world."\nprint(text, file=f)\n# Print tuple to file\nprint((\'apple\', 25), file=f)\n# Print set to file\nprint({\'a\', \'e\', \'i\', \'o\', \'u\'}, file=f)\n# Print dictionary to file\nprint({\'mac\' : 25, \'sony\' : 22}, file=f)\n<a href="https://softhints.com/how-search-replace-excel-file-using-python/">Search and Replace in Excel File using Python</a><br>\n',
'<h2>get url and save file</h2>\n<a href="https://scrapfly.io/blog/web-scraping-with-selenium-and-python/">Web Scraping with Selenium and Python</a>\n<br>\nimport requests\nurl = "https://www.geeksforgeeks.org/sql-using-python/"\n#just a random link of a dummy file\nr = requests.get(url)\n#retrieving data from the URL using get method\nwith open("test.html", \'wb\') as f:\n#giving a name and saving it in any required format\n#opening the file in write mode\n f.write(r.content) \n#writes the URL contents from the server\nprint("test.html file created: ")\n',
'<h2>How to set up a local HTTP server</h2>\nRun the following commands to start a local HTTP server:\n# If python -V returned 2.X.X\npython -m SimpleHTTPServer\n# If python -V returned 3.X.X\npython3 -m http.server\n# Note that on Windows you may need to run python -m http.server instead of python3 -m http.server\nYou\'ll notice that both commands look very different – one calls SimpleHTTPServer and the other http.server.\nThis is just because the SimpleHTTPServer module was rolled into Python\'s http.server in Python 3.\nThey both work the same way.\nNow when you go to <a href="http://localhost:8000/">http://localhost:8000/</a> you should see a list of all the files in your directory.\nThen you can just click on the HTML file you want to view.\nJust keep in mind that SimpleHTTPServer and http.server are only for testing things locally.\nThey only do very basic security checks and shouldn\'t be used in production.\n<h3>How to send files locally</h3>\nTo set up a sort of quick and dirty NAS (Network Attached Storage) system:\nMake sure both computers are connected through same network via LAN or WiFi\nOpen your command prompt or terminal and run python -V to make sure Python is installed\nGo to the directory whose file you want to share by using cd (change directory) command.\nGo to the directory with the file you want to share using cd on *nix or MacOS systems or CD for Windows\nStart your HTTP server with either python -m SimpleHTTPServer or python3 -m http.server\nOpen new terminal and type ifconfig on *nix or MacOS or ipconfig on Windows to find your IP address\nNow on the second computer or device:\nOpen browser and type in the IP address of the first machine, along with port 8000: http://[ip address]:8000\nA page will open showing all the files in the directory being shared from the first computer.\nIf the page is taking too long to load, you may need to adjust the firewall settings on the first computer.\n',
'<h2>Python Sends And Receives Message</h2>\n<a href="https://techinima.com/python/get-url-in-python/">To Get Url In Python</a>\n<br>\n<a href="https://docs.python.org/3/howto/urllib2.html">Fetch Internet Resources Using The urllib</a>\n<br>\n<a href="https://www.geeksforgeeks.org/python-program-that-sends-and-recieves-message-from-client/">Sends And Receives Message from Client</a>\n<br>\n<a href="https://www.coderedcorp.com/blog/building-a-python-agent-with-cli-and-web-api/">Building a Python Agent with CLI and Web API</a>\n<br>\n',
'<h2>Command Line Arguments in Python</h2>\nPython provides various ways of dealing with types of arguments. The three most common are:\nimport sys\n# total arguments\nn = len(sys.argv)\nprint("Total arguments passed:", n)\n# Arguments passed\nprint("\nName of Python script:", sys.argv[0])\nprint("\nArguments passed:", end = " ")\nfor i in range(1, n):\nimport requests\nfrom bs4 import BeautifulSoup\nURL = "http://www.guancha.cn/"\nr = requests.get(URL)\nsoup = BeautifulSoup(r.content, \'html5lib\')\nfilename = \'temp.html\'\nf = open(filename, "a", encoding = "utf-8")\nf.write(str(soup.prettify())) # write() argument must be str\nf.close()\nimport sys\n# total arguments\nn = len(sys.argv)\nprint("\n\n\nTotal arguments passed:", n)\n# Arguments passed\nprint("Name of Python script:", sys.argv[0])\nprint("\nArguments passed:", end = "\n")\nfor i in range(0, n):\n  print("Arguments ", i , " ", sys.argv[i])\n# Addition of numbers\nSum = 0\n# Using argparse module\nfor i in range(1, n):\n Sum += int(sys.argv[i])\nprint("\n\nResult:", Sum)\n',
'<h2>python read xls</h2>\nimport xlrd\nwb = xlrd.open_workbook(\'2023年岀库表.xls\')\nsheet = wb[\'岀库登记\']  #\'岀库\'\nfor row in range(2, 10):\n cell = sheet.cell(row, 3)\n print("row: ", row, " - ",cell.value)\nprint("一共有 {0} 页".format(wb.nsheets))\nprint("Worksheet 名称(s): {0}".format(wb.sheet_names()))\nsh = wb.sheet_by_index(0)\nprint("工资表名称 {0}， 行数{1}， 列数{2}".format(sh.name, sh.nrows, sh.ncols))\nprint("Cell D10 is {0}".format(sh.cell_value(rowx=9, colx=3)))\nprint("行数 sh.nrows: ",sh.nrows)\n#for rx in range(sh.nrows):\n# print(sh.row(rx))\n',
'<h2>openpyxl, Python to read xlsx/xlsm files</h2>\nfrom openpyxl import Workbook\nwb = Workbook()\n# grab the active worksheet\nws = wb.active\n# Data can be assigned directly to cells\nws[\'A1\'] = 42\n# Rows can also be appended\nws.append([1, 2, 3])\n# Python types will automatically be converted\nimport datetime\nws[\'A2\'] = datetime.datetime.now()\n# Save the file\nwb.save("sample.xlsx")\n<h3>Read XLSM File</h3>\n# Import the Pandas libraray as pd\nimport pandas as pd\n# Read xlsm file\ndf = pd.read_excel("score.xlsm",sheet_name=\'Sheet1\',index_col=0)\n# Display the Data\nprint(df)\n<h3>Read data from the Excel file</h3>\nimport pandas as pd\nexcel_file = \'movies.xls\'\nmovies = pd.read_excel(excel_file)\nmovies.head()\nmovies_sheet1 = pd.read_excel(excel_file, sheetname=0, index_col=0)\nmovies_sheet1.head()\nmovies_sheet2 = pd.read_excel(excel_file, sheetname=1, index_col=0)\nmovies_sheet2.head()\nmovies_sheet3 = pd.read_excel(excel_file, sheetname=2, index_col=0)\nmovies_sheet3.head()\nmovies = pd.concat([movies_sheet1, movies_sheet2, movies_sheet3])\nmovies.shape\nxlsx = pd.ExcelFile(excel_file)\nmovies_sheets = []\nfor sheet in xlsx.sheet_names:\n   movies_sheets.append(xlsx.parse(sheet))\nmovies = pd.concat(movies_sheets)\n',
'<h2>Automate Excel in Python</h2>\nimport openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\nwb = xl.load_workbook(\'python-spreadsheet.xlsx\')\nsheet = wb[\'Sheet1\']\n  \nfor row in range(2, sheet.max_row + 1):\n cell = sheet.cell(row, 3)\n corrected_price = float(cell.value.replace(\'$\',\'\')) * 0.9\n corrected_price_cell = sheet.cell(row, 4)\n corrected_price_cell.value = corrected_price\n  \nvalues = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\nchart = BarChart()\nchart.add_data(values)\nsheet.add_chart(chart, \'e2\')\n  \nwb.save(\'python-spreadsheet2.xls\')\n# Make it work for several spreadsheets, move the code inside a function\ndef process_workbook(filename):\n wb = xl.load_workbook(filename)\n sheet = wb[\'Sheet1\']\n  \n for row in range(2, sheet.max_row + 1):\n  cell = sheet.cell(row, 3)\n  corrected_price = float(cell.value.replace(\'$\', \'\')) * 0.9\n  corrected_price_cell = sheet.cell(row, 4)\n  corrected_price_cell.value = corrected_price\n  \n values = Reference(sheet, min_row=2, max_row=sheet.max_row, min_col=4, max_col=4)\n chart = BarChart()\n chart.add_data(values)\n sheet.add_chart(chart, \'e2\')\n wb.save(filename)\n',
'<h2>OpenPyXL</h2>\n<div id="OpenPyXLtoc" class="OpenPyXL"><a href="#OpenPyXLtopic-0" target="_self">Getting Sheets from a Workbook</a><br><a href="#OpenPyXLtopic-1" target="_self">Reading Cell Data</a><br><a href="#OpenPyXLtopic-2" target="_self">Iterating Over Rows and Columns</a><br><a href="#OpenPyXLtopic-3" target="_self">Writing Excel Spreadsheets</a><br><a href="#OpenPyXLtopic-4" target="_self">Adding and Removing Sheets</a><br><a href="#OpenPyXLtopic-5" target="_self">Adding and Deleting Rows and Columns</a><br></div></center>\n<a href="https://openpyxl.readthedocs.io/en/stable/" rel="nofollow">https://openpyxl.readthedocs.io/en/stable/</a>\nOpenPyXL is not your only choice.\nThere are several other packages that support Microsoft Excel:\nxlrd – For reading older Excel (.xls) documents\nxlwt – For writing older Excel (.xls) documents\nxlwings – Works with new Excel formats and has macro capabilities\nA couple years ago, the first two used to be the most popular libraries to use with Excel documents.\nHowever, the author of those packages has stopped supporting them.\nThe xlwings package has lots of promise, but does not work on all platforms and requires that Microsoft Excel is installed.\nYou will be using OpenPyXL in this article because it is actively developed and supported.\nOpenPyXL doesn’t require Microsoft Excel to be installed, and it works on all platforms.\nYou can install OpenPyXL using pip:\n$ python -m pip install openpyxl\nAfter the installation has completed, let’s find out how to use OpenPyXL to read an Excel spreadsheet!\n<h3 id="OpenPyXLtopic-0">Getting Sheets from a Workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nThe first step is to find an Excel file to use with OpenPyXL.\nThere is a books.xlsx file that is provided for you in this book’s Github repository.\nYou can download it by going to this URL:\n<a href="https://github.com/driscollis/python101code/tree/master/chapter38_excel">https://github.com/driscollis/python101code/tree/master/chapter38_excel</a>\nFeel free to use your own file, although the output from your own file won’t match the sample output in this book.\nThe next step is to write some code to open the spreadsheet.\nTo do that, create a new file named open_workbook.py and add this code to it:\n# open_workbook.py\nfrom  openpyxl  import\ndef open_workbook()\nload_workbook()\nprint(\'Worksheet names: {workbook.sheetnames}\')\nprint()\nprint(\'The title of the Worksheet is: {sheet.title}\')\nif __name__ \'__main__\'\nopen_workbook( \'books.xlsx\')\n# open_workbook.py\nfrom openpyxl import load_workbook\ndef open_workbook(path):\n workbook = load_workbook(filename=path)\n print(f\'Worksheet names: {workbook.sheetnames}\')\n sheet = workbook.active\n print(sheet)\n print(f\'The title of the Worksheet is: {sheet.title}\')\nif __name__ == \'__main__\':\n open_workbook(\'books.xlsx\')\n# open_workbook.py\nfrom openpyxl import load_workbook\ndef open_workbook(path):\n workbook = load_workbook(filename=path)\n print(f\'Worksheet names: {workbook.sheetnames}\')\n sheet = workbook.active\n print(sheet)\n print(f\'The title of the Worksheet is: {sheet.title}\')\nif __name__ == \'__main__\':\n open_workbook(\'books.xlsx\')\nIn this example, you import load_workbook() from openpyxl and then create open_workbook() which takes in the path to your Excel spreadsheet.\nNext, you use load_workbook() to create an openpyxl.workbook.workbook.Workbook object.\nThis object allows you to access the sheets and cells in your spreadsheet.\nAnd yes, it really does have the double workbook in its name.\nThat’s not a typo!\nThe rest of the open_workbook() function demonstrates how to print out all the currently defined sheets in your spreadsheet, get the currently active sheet and print out the title of that sheet.\nWhen you run this code, you will see the following output:\n[ \'Sheet 1 - Books\' ]\n&lt; "Sheet 1 - Books" &gt;\nof 1\nWorksheet names: [\'Sheet 1 - Books\']\n&lt;Worksheet "Sheet 1 - Books"&gt;\nThe title of the Worksheet is: Sheet 1 - Books\nWorksheet names: [\'Sheet 1 - Books\']\n&lt;Worksheet "Sheet 1 - Books"&gt;\nThe title of the Worksheet is: Sheet 1 - Books\nNow that you know how to access the sheets in the spreadsheet, you are ready to move on to accessing cell data!\n<h3 id="OpenPyXLtopic-1">Reading Cell Data</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nWhen you are working with Microsoft Excel, the data is stored in cells.\nYou need a way to access those cells from Python to be able to extract that data.\nOpenPyXL makes this process straight-forward.\nCreate a new file named workbook_cells.py and add this code to it:\n# workbook_cells.py\nfrom  openpyxl  import\ndef get_cell_info ()\nload_workbook()\nprint()\nprint(\'The title of the Worksheet is: {sheet.title}\')\nprint(\'The value of {sheet["A2"].value=}\')\nprint(\'The value of {sheet["A3"].value=}\')\n[ \'B3\' ]\nprint(\'{cell.value=}\')\nif __name__ \'__main__\'\nget_cell_info ( \'books.xlsx\')\n# workbook_cells.py\nfrom openpyxl import load_workbook\ndef get_cell_info(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n print(sheet)\n print(f\'The title of the Worksheet is: {sheet.title}\')\n print(f\'The value of {sheet["A2"].value=}\')\n print(f\'The value of {sheet["A3"].value=}\')\n cell = sheet[\'B3\']\n print(f\'{cell.value=}\')\nif __name__ == \'__main__\':\n get_cell_info(\'books.xlsx\')\n# workbook_cells.py\nfrom openpyxl import load_workbook\ndef get_cell_info(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n print(sheet)\n print(f\'The title of the Worksheet is: {sheet.title}\')\n print(f\'The value of {sheet["A2"].value=}\')\n print(f\'The value of {sheet["A3"].value=}\')\n cell = sheet[\'B3\']\n print(f\'{cell.value=}\')\nif __name__ == \'__main__\':\n get_cell_info(\'books.xlsx\')\nThis code will load up the Excel file in an OpenPyXL workbook.\nYou will grab the active sheet and then print out its title and a couple of different cell values.\nYou can access a cell by using the sheet object followed by square brackets with the column name and row number inside of it.\nFor example, sheet["A2"] will get you the cell at column “A”, row 2.\nTo get the value of that cell, you use the value attribute.\n<k>Note:</k> This code is using a new feature that was added to f-strings in Python 3.8.\nIf you run this with an earlier version, you will receive an error.\nWhen you run this code, you will get this output:\n&lt; "Sheet 1 - Books" &gt;\nof 1\nof [ "A2" ] value \'Title\'\nof [ "A3" ] value \'Python 101\'\nvalue \'Mike Driscoll\'\n&lt;Worksheet "Sheet 1 - Books"&gt;\nThe title of the Worksheet is: Sheet 1 - Books\nThe value of sheet["A2"].value=\'Title\'\nThe value of sheet["A3"].value=\'Python 101\'\ncell.value=\'Mike Driscoll\'\n&lt;Worksheet "Sheet 1 - Books"&gt;\nThe title of the Worksheet is: Sheet 1 - Books\nThe value of sheet["A2"].value=\'Title\'\nThe value of sheet["A3"].value=\'Python 101\'\ncell.value=\'Mike Driscoll\'\nYou can get additional information about a cell using some of its other attributes.\nAdd the following function to your file and update the conditional statement at the end to run it:\ndef get_info_by_coord ()\nload_workbook()\n[ \'A2\' ]\nprint(\'Row {cell.row}, Col {cell.column} = {cell.value}\')\nprint(\'{cell.value=} is at {cell.coordinate=}\')\nif __name__ \'__main__\'\nget_info_by_coord ( \'books.xlsx\')\ndef get_info_by_coord(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n cell = sheet[\'A2\']\n print(f\'Row {cell.row}, Col {cell.column} = {cell.value}\')\n print(f\'{cell.value=} is at {cell.coordinate=}\')\nif __name__ == \'__main__\':\n get_info_by_coord(\'books.xlsx\')\ndef get_info_by_coord(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n cell = sheet[\'A2\']\n print(f\'Row {cell.row}, Col {cell.column} = {cell.value}\')\n print(f\'{cell.value=} is at {cell.coordinate=}\')\nif __name__ == \'__main__\':\n get_info_by_coord(\'books.xlsx\')\nIn this example, you use the row and column attributes of the cell object to get the row and column information.\nNote that column “A” maps to “1”, “B” to “2”, etcetera.\nIf you were to iterate over the Excel document, you could use the coordinate attribute to get the cell name.\nWhen you run this code, the output will look like this:\n2 1\nvalue \'Title\' coordinate \'A2\'\nRow 2, Col 1 = Title\ncell.value=\'Title\' is at cell.coordinate=\'A2\'\nRow 2, Col 1 = Title\ncell.value=\'Title\' is at cell.coordinate=\'A2\'\nSpeaking of iterating, let’s find out how to do that next!\n<h3 id="OpenPyXLtopic-2">Iterating Over Rows and Columns</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nSometimes you will need to iterate over the entire Excel spreadsheet or portions of the spreadsheet.\nOpenPyXL allows you to do that in a few different ways.\nCreate a new file named iterating_over_cells.py and add the following code to it:\n# iterating_over_cells.py\nfrom  openpyxl  import\ndef iterating_range ()\nload_workbook()\nfor in [ \'A\' ]\nprint()\nif __name__ \'__main__\'\niterating_range ( \'books.xlsx\')\n# iterating_over_cells.py\nfrom openpyxl import load_workbook\ndef iterating_range(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n for cell in sheet[\'A\']:\n  print(cell)\nif __name__ == \'__main__\':\n iterating_range(\'books.xlsx\')\n# iterating_over_cells.py\nfrom openpyxl import load_workbook\ndef iterating_range(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n for cell in sheet[\'A\']:\n  print(cell)\nif __name__ == \'__main__\':\n iterating_range(\'books.xlsx\')\nHere you load up the spreadsheet and then loop over all the cells in column “A”.\nFor each cell, you print out the cell object.\nYou could use some of the cell attributes you learned about in the previous section if you wanted to format the output more granularly.\nThis what you get from running this code:\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n&lt; \'Sheet 1 - Books\' &gt;\n# output truncated for brevity\n&lt;Cell \'Sheet 1 - Books\'.A1&gt;\n&lt;Cell \'Sheet 1 - Books\'.A2&gt;\n&lt;Cell \'Sheet 1 - Books\'.A3&gt;\n&lt;Cell \'Sheet 1 - Books\'.A4&gt;\n&lt;Cell \'Sheet 1 - Books\'.A5&gt;\n&lt;Cell \'Sheet 1 - Books\'.A6&gt;\n&lt;Cell \'Sheet 1 - Books\'.A7&gt;\n&lt;Cell \'Sheet 1 - Books\'.A8&gt;\n&lt;Cell \'Sheet 1 - Books\'.A9&gt;\n&lt;Cell \'Sheet 1 - Books\'.A10&gt;\n# output truncated for brevity\n&lt;Cell \'Sheet 1 - Books\'.A1&gt;\n&lt;Cell \'Sheet 1 - Books\'.A2&gt;\n&lt;Cell \'Sheet 1 - Books\'.A3&gt;\n&lt;Cell \'Sheet 1 - Books\'.A4&gt;\n&lt;Cell \'Sheet 1 - Books\'.A5&gt;\n&lt;Cell \'Sheet 1 - Books\'.A6&gt;\n&lt;Cell \'Sheet 1 - Books\'.A7&gt;\n&lt;Cell \'Sheet 1 - Books\'.A8&gt;\n&lt;Cell \'Sheet 1 - Books\'.A9&gt;\n&lt;Cell \'Sheet 1 - Books\'.A10&gt;\n# output truncated for brevity\nThe output is truncated as it will print out quite a few cells by default.\nOpenPyXL provides other ways to iterate over rows and columns by using the iter_rows() and iter_cols() functions.\nThese methods accept several arguments:\n<ul>\nmin_row\nmax_row\nmin_col\nmax_col\n</ul>\nYou can also add on a values_only argument that tells OpenPyXL to return the value of the cell instead of the cell object.\nGo ahead and create a new file named iterating_over_cell_values.py and add this code to it:\n# iterating_over_cell_values.py\nfrom  openpyxl  import\ndef iterating_over_values ()\nload_workbook()\nfor in iter_rows (\n1 3\n1 3\nTrue\n)\nprint()\nif __name__ \'__main__\'\niterating_over_values ( \'books.xlsx\')\n# iterating_over_cell_values.py\nfrom openpyxl import load_workbook\ndef iterating_over_values(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n for value in sheet.iter_rows(\n   min_row=1, max_row=3,\n   min_col=1, max_col=3,\n   values_only=True,\n  ):\n  print(value)\nif __name__ == \'__main__\':\n iterating_over_values(\'books.xlsx\')\n# iterating_over_cell_values.py\nfrom openpyxl import load_workbook\ndef iterating_over_values(path):\n workbook = load_workbook(filename=path)\n sheet = workbook.active\n for value in sheet.iter_rows(\n   min_row=1, max_row=3,\n   min_col=1, max_col=3,\n   values_only=True,\n  ):\n  print(value)\nif __name__ == \'__main__\':\n iterating_over_values(\'books.xlsx\')\nThis code demonstrates how you can use the iter_rows() to iterate over the rows in the Excel spreadsheet and print out the values of those rows.\nWhen you run this code, you will get the following output:\n( \'Books\')\n( \'Title\' \'Author\' \'Publisher\')\n( \'Python 101\' \'Mike Driscoll\' \'Mouse vs Python\')\n(\'Books\', None, None)\n(\'Title\', \'Author\', \'Publisher\')\n(\'Python 101\', \'Mike Driscoll\', \'Mouse vs Python\')\n(\'Books\', None, None)\n(\'Title\', \'Author\', \'Publisher\')\n(\'Python 101\', \'Mike Driscoll\', \'Mouse vs Python\')\nThe output is a Python tuple that contains the data within each column.\nAt this point you have learned how to open spreadsheets and read data — both from specific cells, as well as through iteration.\nYou are now ready to learn how to use OpenPyXL to <k>create</k> Excel spreadsheets!\n<h3 id="OpenPyXLtopic-3">Writing Excel Spreadsheets</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nCreating an Excel spreadsheet using OpenPyXL doesn’t take a lot of code.\nYou can create a spreadsheet by using the Workbook() class.\nGo ahead and create a new file named writing_hello.py and add this code to it:\n# writing_hello.py\nfrom  openpyxl  import\ndef create_workbook()\nWorkbook()\n[ \'A1\' ] \'Hello\'\n[ \'A2\' ] \'from\'\n[ \'A3\' ] \'OpenPyXL\'\nsave ()\nif __name__ \'__main__\'\ncreate_workbook( \'hello.xlsx\')\n# writing_hello.py\nfrom openpyxl import Workbook\ndef create_workbook(path):\n workbook = Workbook()\n sheet = workbook.active\n sheet[\'A1\'] = \'Hello\'\n sheet[\'A2\'] = \'from\'\n sheet[\'A3\'] = \'OpenPyXL\'\n workbook.save(path)\nif __name__ == \'__main__\':\n create_workbook(\'hello.xlsx\')\n# writing_hello.py\nfrom openpyxl import Workbook\ndef create_workbook(path):\n workbook = Workbook()\n sheet = workbook.active\n sheet[\'A1\'] = \'Hello\'\n sheet[\'A2\'] = \'from\'\n sheet[\'A3\'] = \'OpenPyXL\'\n workbook.save(path)\nif __name__ == \'__main__\':\n create_workbook(\'hello.xlsx\')\nHere you instantiate Workbook() and get the active sheet.\nThen you set the first three rows in column “A” to different strings.\nFinally, you call save() and pass it the path to save the new document to.\nCongratulations! You have just created an Excel spreadsheet with Python.\nLet’s discover how to add and remove sheets in your Workbook next!\n<h3 id="OpenPyXLtopic-4">Adding and Removing Sheets</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nMany people like to organize their data across multiple Worksheets within the Workbook.\nOpenPyXL supports the ability to add new sheets to a Workbook() object via its create_sheet() method.\nCreate a new file named creating_sheets.py and add this code to it:\n# creating_sheets.py\nimport\ndef create_worksheets ()\nWorkbook()\nprint()\n# Add a new worksheet\ncreate_sheet ()\nprint()\n# Insert a worksheet\ncreate_sheet ( 1\n\'Second sheet\')\nprint()\nsave ()\nif __name__ \'__main__\'\ncreate_worksheets ( \'sheets.xlsx\')\n# creating_sheets.py\nimport openpyxl\ndef create_worksheets(path):\n workbook = openpyxl.Workbook()\n print(workbook.sheetnames)\n # Add a new worksheet\n workbook.create_sheet()\n print(workbook.sheetnames)\n # Insert a worksheet\n workbook.create_sheet(index=1,\n        title=\'Second sheet\')\n print(workbook.sheetnames)\n workbook.save(path)\nif __name__ == \'__main__\':\n create_worksheets(\'sheets.xlsx\')\n# creating_sheets.py\nimport openpyxl\ndef create_worksheets(path):\n workbook = openpyxl.Workbook()\n print(workbook.sheetnames)\n # Add a new worksheet\n workbook.create_sheet()\n print(workbook.sheetnames)\n # Insert a worksheet\n workbook.create_sheet(index=1,\n        title=\'Second sheet\')\n print(workbook.sheetnames)\n workbook.save(path)\nif __name__ == \'__main__\':\n create_worksheets(\'sheets.xlsx\')\nHere you use create_sheet() twice to add two new Worksheets to the Workbook.\nThe second example shows you how to set the title of a sheet and at which index to insert the sheet.\nThe argument index=1 means that the worksheet will be added after the first existing worksheet, since they are indexed starting at 0.\nWhen you run this code, you will see the following output:\n[ \'Sheet\' ]\n[ \'Sheet\' \'Sheet1\' ]\n[ \'Sheet\' \'Second sheet\' \'Sheet1\' ]\n[\'Sheet\']\n[\'Sheet\', \'Sheet1\']\n[\'Sheet\', \'Second sheet\', \'Sheet1\']\n[\'Sheet\']\n[\'Sheet\', \'Sheet1\']\n[\'Sheet\', \'Second sheet\', \'Sheet1\']\nYou can see that the new sheets have been added step-by-step to your Workbook.\nAfter saving the file, you can verify that there are multiple Worksheets by opening Excel or another Excel-compatible application.\nAfter this automated worksheet-creation process, you’ve suddenly got too many sheets, so let’s get rid of some.\nThere are two ways to remove a sheet.\nGo ahead and create delete_sheets.py to see how to use Python’s del keyword for removing worksheets:\n# delete_sheets.py\nimport\ndef create_worksheets ()\nWorkbook()\ncreate_sheet ()\n# Insert a worksheet\ncreate_sheet ( 1\n\'Second sheet\')\nprint()\ndel [ \'Second sheet\' ]\nprint()\nsave ()\nif __name__ \'__main__\'\ncreate_worksheets ( \'del_sheets.xlsx\')\n# delete_sheets.py\nimport openpyxl\ndef create_worksheets(path):\n workbook = openpyxl.Workbook()\n workbook.create_sheet()\n # Insert a worksheet\n workbook.create_sheet(index=1,\n        title=\'Second sheet\')\n print(workbook.sheetnames)\n del workbook[\'Second sheet\']\n print(workbook.sheetnames)\n workbook.save(path)\nif __name__ == \'__main__\':\n create_worksheets(\'del_sheets.xlsx\')\n# delete_sheets.py\nimport openpyxl\ndef create_worksheets(path):\n workbook = openpyxl.Workbook()\n workbook.create_sheet()\n # Insert a worksheet\n workbook.create_sheet(index=1,\n        title=\'Second sheet\')\n print(workbook.sheetnames)\n del workbook[\'Second sheet\']\n print(workbook.sheetnames)\n workbook.save(path)\nif __name__ == \'__main__\':\n create_worksheets(\'del_sheets.xlsx\')\nThis code will create a new Workbook and then add two new Worksheets to it.\nThen it uses Python’s del keyword to delete workbook[\'Second sheet\'].\nYou can verify that it worked as expected by looking at the print-out of the sheet list before and after the del command:\n[ \'Sheet\' \'Second sheet\' \'Sheet1\' ]\n[ \'Sheet\' \'Sheet1\' ]\n[\'Sheet\', \'Second sheet\', \'Sheet1\']\n[\'Sheet\', \'Sheet1\']\n[\'Sheet\', \'Second sheet\', \'Sheet1\']\n[\'Sheet\', \'Sheet1\']\nThe other way to delete a sheet from a Workbook is to use the remove() method.\nCreate a new file called remove_sheets.py and enter this code to learn how that works:\n# remove_sheets.py\ndef remove_worksheets ()\nWorkbook()\ncreate_sheet ()\n# Insert a worksheet\ncreate_sheet ( 1\n\'Second sheet\')\nprint(sheetnames)\nremove ()\nprint(sheetnames)\nsave ()\nif \'__main__\'\nremove_worksheets ( \'remove_sheets.xlsx\')\n# remove_sheets.py\nimport openpyxl\ndef remove_worksheets(path):\n workbook = openpyxl.Workbook()\n sheet1 = workbook.create_sheet()\n # Insert a worksheet\n workbook.create_sheet(index=1,\n        title=\'Second sheet\')\n print(workbook.sheetnames)\n workbook.remove(sheet1)\n print(workbook.sheetnames)\n workbook.save(path)\nif __name__ == \'__main__\':\n remove_worksheets(\'remove_sheets.xlsx\')\n# remove_sheets.py\nimport openpyxl\ndef remove_worksheets(path):\n workbook = openpyxl.Workbook()\n sheet1 = workbook.create_sheet()\n # Insert a worksheet\n workbook.create_sheet(index=1,\n        title=\'Second sheet\')\n print(workbook.sheetnames)\n workbook.remove(sheet1)\n print(workbook.sheetnames)\n workbook.save(path)\nif __name__ == \'__main__\':\n remove_worksheets(\'remove_sheets.xlsx\')\nThis time around, you hold onto a reference to the first Worksheet that you create by assigning the result to sheet1.\nThen you remove it later on in the code.\nAlternatively, you could also remove that sheet by using the same syntax as before, like this:\nremove ( [ \'Sheet1\' ])\nworkbook.remove(workbook[\'Sheet1\'])\nworkbook.remove(workbook[\'Sheet1\'])\nNo matter which method you choose for removing the Worksheet, the output will be the same:\n[ \'Sheet\' \'Second sheet\' \'Sheet1\' ]\n[ \'Sheet\' \'Second sheet\' ]\n[\'Sheet\', \'Second sheet\', \'Sheet1\']\n[\'Sheet\', \'Second sheet\']\n[\'Sheet\', \'Second sheet\', \'Sheet1\']\n[\'Sheet\', \'Second sheet\']\nNow let’s move on and learn how you can add and remove rows and columns.\n<h3 id="OpenPyXLtopic-5">Adding and Deleting Rows and Columns</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nOpenPyXL has several useful methods that you can use for adding and removing rows and columns in your spreadsheet.\nHere is a list of the four methods you will learn about in this section:\n<ul>\n.insert_rows()\n.delete_rows()\n.insert_cols()\n.delete_cols()\n</ul>\nEach of these methods can take two arguments:\n<ul>\nidx – The index to insert the row or column\namount – The number of rows or columns to add\n</ul>\nTo see how this works, create a file named insert_demo.py and add the following code to it:\n# insert_demo.py\nfrom  openpyxl  import\ndef inserting_cols_rows ()\nWorkbook()\n[ \'A1\' ] \'Hello\'\n[ \'A2\' ] \'from\'\n[ \'A3\' ] \'OpenPyXL\'\n# insert a column before A\ninsert_cols ( 1)\n# insert 2 rows starting on the second row\ninsert_rows ( 2 2)\nsave ()\nif __name__ \'__main__\'\ninserting_cols_rows ( \'inserting.xlsx\')\n# insert_demo.py\nfrom openpyxl import Workbook\ndef inserting_cols_rows(path):\n workbook = Workbook()\n sheet = workbook.active\n sheet[\'A1\'] = \'Hello\'\n sheet[\'A2\'] = \'from\'\n sheet[\'A3\'] = \'OpenPyXL\'\n # insert a column before A\n sheet.insert_cols(idx=1)\n # insert 2 rows starting on the second row\n sheet.insert_rows(idx=2, amount=2)\n workbook.save(path)\nif __name__ == \'__main__\':\n inserting_cols_rows(\'inserting.xlsx\')\n# insert_demo.py\nfrom openpyxl import Workbook\ndef inserting_cols_rows(path):\n workbook = Workbook()\n sheet = workbook.active\n sheet[\'A1\'] = \'Hello\'\n sheet[\'A2\'] = \'from\'\n sheet[\'A3\'] = \'OpenPyXL\'\n # insert a column before A\n sheet.insert_cols(idx=1)\n # insert 2 rows starting on the second row\n sheet.insert_rows(idx=2, amount=2)\n workbook.save(path)\nif __name__ == \'__main__\':\n inserting_cols_rows(\'inserting.xlsx\')\nHere you create a Worksheet and insert a new column before column “A”.\nColumns are indexed started at 1 while in contrast, worksheets start at 0.\nThis effectively moves all the cells in column A to column B.\nThen you insert two new rows starting on row 2.\nNow that you know how to insert columns and rows, it is time for you to discover how to remove them.\nTo find out how to remove columns or rows, create a new file named delete_demo.py and add this code:\n# delete_demo.py\nfrom  openpyxl  import\ndef deleting_cols_rows ()\nWorkbook()\n[ \'A1\' ] \'Hello\'\n[ \'B1\' ] \'from\'\n[ \'C1\' ] \'OpenPyXL\'\n[ \'A2\' ] \'row 2\'\n[ \'A3\' ] \'row 3\'\n[ \'A4\' ] \'row 4\'\n# Delete column A\ndelete_cols ( 1)\n# delete 2 rows starting on the second row\ndelete_rows ( 2 2)\nsave ()\nif __name__ \'__main__\'\ndeleting_cols_rows ( \'deleting.xlsx\')\n# delete_demo.py\nfrom openpyxl import Workbook\ndef deleting_cols_rows(path):\n workbook = Workbook()\n sheet = workbook.active\n sheet[\'A1\'] = \'Hello\'\n sheet[\'B1\'] = \'from\'\n sheet[\'C1\'] = \'OpenPyXL\'\n sheet[\'A2\'] = \'row 2\'\n sheet[\'A3\'] = \'row 3\'\n sheet[\'A4\'] = \'row 4\'\n # Delete column A\n sheet.delete_cols(idx=1)\n # delete 2 rows starting on the second row\n sheet.delete_rows(idx=2, amount=2)\n workbook.save(path)\nif __name__ == \'__main__\':\n deleting_cols_rows(\'deleting.xlsx\')\n# delete_demo.py\nfrom openpyxl import Workbook\ndef deleting_cols_rows(path):\n workbook = Workbook()\n sheet = workbook.active\n sheet[\'A1\'] = \'Hello\'\n sheet[\'B1\'] = \'from\'\n sheet[\'C1\'] = \'OpenPyXL\'\n sheet[\'A2\'] = \'row 2\'\n sheet[\'A3\'] = \'row 3\'\n sheet[\'A4\'] = \'row 4\'\n # Delete column A\n sheet.delete_cols(idx=1)\n # delete 2 rows starting on the second row\n sheet.delete_rows(idx=2, amount=2)\n workbook.save(path)\nif __name__ == \'__main__\':\n deleting_cols_rows(\'deleting.xlsx\')\nThis code creates text in several cells and then removes column A using delete_cols().\nIt also removes two rows starting on the 2nd row via delete_rows().\nBeing able to add and remove columns and rows can be quite useful when it comes to organizing your data.\n',
'<h2>run Python script in HTML</h2>\nrun a Python file using HTML using PHP.\nAdd a PHP file as index.php:\n&lt;html>\n&lt;head>\n&lt;title>Run my Python files&lt;/title>\n&lt;?PHP\necho shell_exec("python test.py \'parameter1\'");\n?>\n&lt;/head>\nPassing the parameter to Python\nCreate a Python file as test.py:\nimport sys\ninput=sys.argv[1]\nprint(input)\nPrint the parameter passed by PHP.\n',
'<h2>OHLC Charts in Python</h2>\nimport plotly.graph_objects as go\nimport pandas as pd\ndf = pd.read_csv(\'https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\')\nfig = go.Figure(data=go.Ohlc(x=df[\'Date\'],\n     open=df[\'AAPL.Open\'],\n     high=df[\'AAPL.High\'],\n     low=df[\'AAPL.Low\'],\n     close=df[\'AAPL.Close\']))\nfig.show()\n',
'<h2>execute a script within the Python interpreter</h2>\nexec(open("test.py").read())\n',
'<h2>PaddleOCR</h2>\n<k>1.先决条件</k>\n确保您的计算机上安装了以下必要先决条件：\nPython（3.6 或更高版本）\nPaddleOCR 库\n其他必要的依赖项（例如 NumPy、pandas 等）\n您可以使用以下 pip 命令安装 PaddleOCR：\npip install paddleocr\n<k>2.设置 PaddleOCR</k>一旦您安装了 Python 和所需的库，我们来设置 PaddleOCR。\n您可以使用 PaddleOCR 的预训练模型，这些模型可用于文本检测和识别。\n<k>代码概览</k>使用 PaddleOCR 进行文本检测和识别的代码片段包括以下主要组件：\n<k>图像预处理：\n</k>加载输入图像并执行必要的预处理步骤，例如调整大小或归一化。\n<k>文本检测：\n</k>使用 PaddleOCR 文本检测模型来定位输入图像中文本区域的边界框。\n<k>文本识别：\n</k>对于每个检测到的边界框，使用 PaddleOCR 文本识别模型来提取相应的文本。\n<k>后处理：\n</k>整理检测到的文本和识别结果以进行进一步分析或显示。\n<k>3.逐步实现</k>让我们分解代码片段，详细解释每个步骤：\n<k>文本检测</k>该代码是一个名为 DecMain 的类的一部分，该类专为使用真实数据进行光学字符识别（OCR）评估而设计。\n它使用 PaddleOCR 从图像中提取文本，然后计算指标（如准确率、召回率和字符错误率 [CER]）来评估 OCR 系统的性能。\nclass DecMain:\n def __init__(self, image_folder_path, label_file_path, output_file):\n  self.image_folder_path = image_folder_path\n  self.label_file_path = label_file_path\n  self.output_file = output_file\n def run_dec(self):\n  # Check and update the ground truth file\n  CheckAndUpdateGroundTruth(self.label_file_path).check_and_update_ground_truth_file()\n  df = OcrToDf(image_folder=self.image_folder_path, label_file=self.label_file_path, det=True, rec=True, cls=False).ocr_to_df()\n  ground_truth_data = ReadGroundTruthFile(self.label_file_path).read_ground_truth_file()\n  # Get the extracted text as a list of dictionaries (representing the OCR results)\n  ocr_results = df.to_dict(orient="records")\n  # Calculate precision, recall, and CER\n  precision, recall, total_samples = CalculateMetrics(ground_truth_data, ocr_results).calculate_precision_recall()\n  CreateSheet(dataframe=df, precision=precision, recall=recall, total_samples=total_samples, file_name=self.output_file).create_sheet()\n让我们分解代码并解释每个部分：\nclass DecMain:\ndef __init__(self, image_folder_path, label_file_path, output_file):\nself.image_folder_path = image_folder_path\nself.label_file_path = label_file_path\nself.output_file = output_file\nDecMain 类有一个 __init__方法，用以下参数初始化对象：\nimage_folder_path：\n用于 OCR 的输入图像所在文件夹的路径。\nlabel_file_path：\n包含图像的实际文本内容的真实标签文件的路径。\noutput_file：\n评估结果将保存在的输出文件的文件名。\ndef run_dec(self):\n    # Check and update the ground truth file\n    CheckAndUpdateGroundTruth(self.label_file_path).check_and_update_ground_truth_file()\nrun_dec方法负责运行 OCR 评估过程。\n首先，它使用 CheckAndUpdateGroundTruth 类来检查并更新真实标签文件。\ndf = OcrToDf(image_folder=self.image_folder_path, label_file=self.label_file_path, det=True, rec=True, cls=False).ocr_to_df()\nOcrToDf 类用于将 OCR 结果转换为 pandas DataFrame（`df`）。\n它接受以下参数：\nimage_folder：\n包含 OCR 输入图像的文件夹的路径。\nlabel_file：\n真实标签文件的路径。\ndet=True和 rec=True参数表示 DataFrame 将包含文本检测和识别结果。\nground_truth_data = ReadGroundTruthFile(self.label_file_path).read_ground_truth_file()\nReadGroundTruthFile 类用于读取真实标签文件并将其内容加载到 ground_truth_data变量中。\n# Get the extracted text as a list of dictionaries (representing the OCR results)\n  ocr_results = df.to_dict(orient="records")\n从 DataFrame df 中获取的 OCR 结果转换为字典列表（ocr_results），每个字典代表单个图像的 OCR 结果。\n# Calculate precision, recall, and CER\n  precision, recall, total_samples = CalculateMetrics(ground_truth_data, ocr_results).calculate_precision_recall()\nCalculateMetrics 类用于计算 OCR 评估指标：\n准确率、召回率和评估的总样本数。\n该类将真实数据和 OCR 结果作为输入。\nCreateSheet(dataframe=df, precision=precision, recall=recall, total_samples=total_samples, file_name=self.output_file).create_sheet()\nCreateSheet 类负责创建输出表格（例如 Excel 或 CSV），其中包含评估指标和 OCR 结果。\n它接受 DataFrame `df`、准确率、召回率、总样本数和输出文件名作为输入。\n总的来说，DecMain 类提供了一种有条理的方式，使用真实数据和 PaddleOCR 的文本检测和识别功能来评估 OCR 模型的性能。\n它计算重要的评估指标，并将结果存储在指定的输出文件中，以供进一步分析。\n<k>注意：\n真实标签文件的格式</k>要使用 DecMain 类和提供的代码进行 OCR 评估，必须正确格式化真实标签文件。\n真实标签文件应采用 JSON 格式，其结构如下所示：\n<em>image_name.jpg [{"transcription": "215mm 18", "points": [[199, 6], [357, 6], [357, 33], [199, 33]], "difficult": False, "key_cls": "digits"}, {"transcription": "XZE SA", "points": [[15, 6], [140, 6], [140, 36], [15, 36]], "difficult": False, "key_cls": "text"}]</em>真实标签文件应为 JSON 格式。\n文件的每一行代表图像的 OCR 真实标签。\n每一行包含图像的文件名，后跟 JSON 对象形式的该图像的 OCR 结果。\nJSON 对象应具有以下几点：\n"transcription"：\n图像的真实文本转录。\n"points"：\n表示图像中文本区域边界框坐标的四个点的列表。\n"difficult"：\n一个布尔值，指示文本区域是否难以识别。\n"key_cls"：\nOCR 结果的类别标签，例如 "digits" 或 "text"。\n在创建用于准确评估 OCR 模型性能的真实标签文件时，请确保遵循此格式。\n<k>文本识别</k>代码定义了一个名为 RecMain 的类，该类旨在使用预训练的 OCR 模型在图像文件夹上运行文本识别（OCR）并生成一个评估 Excel 表格。\nclass RecMain:\n def __init__(self, image_folder, rec_file, output_file):\n  self.image_folder = image_folder\n  self.rec_file = rec_file\n  self.output_file = output_file\n def run_rec(self):\n  image_paths = GetImagePathsFromFolder(self.image_folder, self.rec_file).\get_image_paths_from_folder()\n  ocr_model = LoadRecModel().load_model()\n  results = ProcessImages(ocr=ocr_model, image_paths=image_paths).process_images()\n  ground_truth_data = ConvertTextToDict(self.rec_file).convert_txt_to_dict()\n  model_predictions, ground_truth_texts, image_names, precision, recall, \\n   overall_model_precision, overall_model_recall, cer_data_list = EvaluateRecModel(results, ground_truth_data).evaluate_model()\n  # Create Excel sheet\n  CreateMetricExcel(image_names, model_predictions, ground_truth_texts, precision, recall, cer_data_list, overall_model_precision, overall_model_recall, self.output_file).create_excel_sheet()\n让我们分解代码并解释每个部分：\nclass RecMain:\n def __init__(self, image_folder, rec_file, output_file):\n  self.image_folder = image_folder\n  self.rec_file = rec_file\n  self.output_file = output_file\nRecMain类有一个__init__方法，用以下参数初始化对象：\nimage_folder: 包含用于文本识别的输入图像的文件夹路径。\nrec_file: 包含图像实际文本内容的地面真实标签文件的路径。\noutput_file: 保存评估结果的输出Excel表格的文件名。\ndef run_rec(self):\n  image_paths = GetImagePathsFromFolder(self.image_folder, self.rec_file).get_image_paths_from_folder()\nrun_rec方法负责运行文本识别过程。\n它首先使用GetImagePathsFromFolder类来获取指定image_folder内所有图像的图像路径列表。\n这一步确保OCR模型将处理给定目录内的所有图像。\nocr_model = LoadRecModel().load_model()\nLoadRecModel类用于加载用于文本识别的预训练OCR模型。\n它可能使用PaddleOCR或其他OCR库来加载模型。\nresults = ProcessImages(ocr=ocr_model, image_paths=image_paths).process_images()\nProcessImages类负责使用加载的OCR模型来处理图像。\n它以OCR模型（ocr_model）和图像路径列表（image_paths）作为输入。\nground_truth_data = ConvertTextToDict(self.rec_file).convert_txt_to_dict()\nConvertTextToDict类用于读取地面实况标签文件并将其转换为字典格式（ground_truth_data）。\n这一转换准备了地面实况数据，以便与OCR模型的预测进行比较。\nmodel_predictions, ground_truth_texts, image_names, precision, recall, \\n   overall_model_precision, overall_model_recall, cer_data_list = EvaluateRecModel(results, ground_truth_data).evaluate_model()\nEvaluateRecModel类负责将OCR模型的预测与地面实况数据进行比较，并计算评估指标，如精度、召回率和字符错误率（CER）。\n它以OCR模型的预测（results）和地面实况数据（ground_truth_data）作为输入。\n# Create Excel sheet\n  CreateMetricExcel(image_names, model_predictions, ground_truth_texts, precision, recall, cer_data_list, overall_model_precision, overall_model_recall, self.output_file).create_excel_sheet()\nCreateMetricExcel类负责创建包含评估指标和OCR结果的输出Excel表。\n它接受各种输入数据，包括图像名称、模型预测、地面实况文本、评估指标和输出文件名（self.output_file）。\n总之，RecMain类组织了整个文本识别过程，从加载OCR模型到生成包含详细指标的评估Excel表。\n它提供了一种有组织和可重复使用的方法，用于评估OCR模型在给定一组图像上的性能。\n注：\n地面实况文本文件格式使用RecMain类和提供的代码进行OCR评估时，正确格式化地面实况（GT）文本文件至关重要。\nGT文本文件应采用以下格式：\n<em>image_name.jpg text</em>文件的每一行表示一个图像的GT文本。\n每一行包含图像的文件名，后跟一个制表符（\t），然后是该图像的GT文本。\n确保GT文本文件包含图像文件夹中指定的所有图像的GT文本条目。\nGT文本应与图像中实际文本内容相匹配。\n这种格式对于准确评估OCR模型的性能是必需的。\n您可以在这里找到源代码：\nhttps://github.com/vinodbaste/paddleOCR_rec_dec?source=post_page<k>结论</k>我们探讨了如何使用基于深度学习的PaddleOCR进行文本检测和识别的过程。\n我们逐步演示了文本检测和识别的实现。\n有了PaddleOCR强大的预训练模型和易于使用的API，对图像执行OCR变得更加容易。\n',
'<h2>微信爬虫Wechat_Articles_Spider</h2>\nwechat_articles_spider是一个用于爬取微信公众号文章的开源Python工具。\nwechat_articles_spider具有以下特点：\n自动化爬取：\n它能够自动化地从指定的微信公众号中抓取文章数据，省去了手动复制粘贴的繁琐过程。\n多线程支持：\n该工具支持多线程操作，可以同时处理多个公众号，提高了爬取效率。\n高度可定制化：\n用户可以根据自己的需求，配置爬取的范围、时间间隔、存储格式等参数，以满足不同的应用场景。\n数据持久化：\n爬取的文章数据可以方便地保存到本地或数据库中，供后续分析和使用。\n安装和使用方法\n步骤 1：确保您的系统已安装Python环境，并且具备pip包管理工具。\n步骤 2：打开终端或命令提示符，并执行以下命令安装wechat_articles_spider：\npip install wechatarticles\n步骤 3：安装完成后，您可以通过导入wechat_articles_spider模块来使用该工具：\nimport wechat_articles_spider\n示例代码\n下面是一个简单的示例代码，演示如何使用wechat_articles_spider来爬取微信公众号文章：\nimport wechat_articles_spider\n# 创建一个爬虫实例\nspider = wechat_articles_spider.WechatSpider()\n# 设置要爬取的公众号名称\nspider.set_official_account("公众号名称")\n# 设置爬取的文章数量\nspider.set_article_count(10)\n# 开始爬取文章\nspider.start()\n# 获取爬取结果\narticles = spider.get_articles()\n# 打印文章标题和链接\nfor article in articles:\n print("标题：", article[\'title\'])\n print("链接：", article[\'url\'])\n应用场景\nwechat_articles_spider可以应用于多种场景，包括但不限于：\n数据分析和挖掘：通过爬取微信公众号文章，可以获取大量的文本数据，用于进行数据分析、情感分析、关键词提取等任务。\n新闻媒体监测：可以用于监测特定公众号的文章更新情况，及时获取相关新闻信息。\n优缺点\n优点：\n简单易用，提供了丰富的功能和配置选项。\n高效快速，支持多线程操作，提高了爬取效率。\n可定制化，用户可以根据需求自定义爬取范围和参数设置。\n缺点：\n依赖于微信公众号的网页结构，如果微信公众号的页面结构发生变化，可能需要对代码进行适配。\n使用该工具需要遵守相关法律法规和网站的使用规则，避免滥用和侵犯他人权益。\n',
'<h2>two independent programs to communicate with each other</h2>\nThe best way for two independent programs to communicate with each other depends on the specific use case and requirements of the programs. \nBoth reading and writing to a file and using a local TCP connection are common methods for inter-process communication.\nReading and writing to a file can be a simple and effective way to share data between programs. \nHowever, it may not be the best option for real-time communication or when large amounts of data need to be exchanged frequently.\nUsing a local TCP connection can provide more real-time communication and can handle larger amounts of data. \nHowever, it requires more setup and configuration, and may not be necessary for simpler communication needs.\nBoth methods are commonly used in inter-process communication.\nTo use a local TCP connection for communication between two independent programs, you need to follow these general steps:\nEstablish a TCP server in one program:\nChoose one of the programs to act as the server that will listen for incoming connections.\nCreate a TCP socket in the server program and bind it to a specific port.\nThe port number can be any available port that is not already in use.\nHere\'s an example of how to set up a TCP server in Python:\npython\nimport socket\n# Create a TCP socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Bind the socket to a specific address and port\nserver_address = (\'localhost\', 5000)  # Replace \'localhost\' with the server\'s IP address if needed\nserver_socket.bind(server_address)\n# Listen for incoming connections\nserver_socket.listen(1)\n# Accept a client connection\nclient_socket, client_address = server_socket.accept()\n# Now the server is ready to communicate with the client\nConnect the TCP client to the server:\nIn the other program, create a TCP socket and connect it to the server\'s IP address and port.\nOnce the connection is established, the client program can send and receive data to/from the server.\nHere\'s an example of how the <k>client program</k> can send and receive data to/from the server using the local TCP connection:\npython\nimport socket\n# Create a TCP socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Connect to the server\nserver_address = (\'localhost\', 5000)  # Replace \'localhost\' with the server\'s IP address if needed\nclient_socket.connect(server_address)\n# Send data to the server\ndata_to_send = "Hello, server!"\nclient_socket.sendall(data_to_send.encode())\n# Receive data from the server\nreceived_data = client_socket.recv(1024).decode()\nprint("Received data from server:", received_data)\n# Close the connection\nclient_socket.close()\nIn this example, the client program creates a TCP socket, connects to the server\'s IP address and port, and sends data to the server using the sendall() method after encoding the data as bytes.\nIt then waits to receive a response from the server using the recv() method, specifying the maximum number of bytes to receive (1024 in this case).\nThe received data is decoded from bytes to a string and printed.\nOn the server side, you can use a similar approach to receive data from the client and send a response back.\nRemember to replace \'localhost\' with the appropriate IP address if the server is running on a different machine.\nAdditionally, you can add exception handling to gracefully handle errors during the connection and communication process.\nHere\'s an example of how the <k>server</k> can receive data from the client and send a response back using the local TCP connection:\npython\nimport socket\n# Create a TCP socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Bind the socket to a specific address and port\nserver_address = (\'localhost\', 5000)  # Replace \'localhost\' with the server\'s IP address if needed\nserver_socket.bind(server_address)\n# Listen for incoming connections\nserver_socket.listen(1)\n# Accept a client connection\nclient_socket, client_address = server_socket.accept()\n# Receive data from the client\nreceived_data = client_socket.recv(1024).decode()\nprint("Received data from client:", received_data)\n# Process the received data (e.g., perform calculations, generate a response)\n# Send a response back to the client\nresponse_data = "Hello, client!"\nclient_socket.sendall(response_data.encode())\n# Close the connection\nclient_socket.close()\nserver_socket.close()\nIn this example, after accepting the client connection, the server program waits to receive data from the client using the recv() method, specifying the maximum number of bytes to receive (1024 in this case).\nThe received data is then decoded from bytes to a string and processed as needed. In this case, we simply generate a response message.\nAfter processing the data and generating a response, the server uses the sendall() method to send the response back to the client.\nThe response data is encoded as bytes before sending.\nFinally, the server and client sockets are closed to release the resources and terminate the connection.\nRemember to replace \'localhost\' with the appropriate IP address if the server is running on a different machine. Similarly, you can add exception handling to handle errors gracefully during the connection and communication process.\n使用Python读取日期和时间\n可以使用内置的文件操作功能和日期时间处理模块。\nimport datetime\n# 读取闹钟日期和时间的文本文件路径\nfile_path = "path/to/alarms.txt"\n# 存储闹钟日期和时间的列表\nalarms = []\n# 打开文本文件并读取闹钟日期和时间\nwith open(file_path, "r") as file:\n for line in file:\n  alarm = line.strip()\n  alarms.append(alarm)\n# 处理每个闹钟\nfor alarm in alarms:\n # 获取当前日期和时间\n current_datetime = datetime.datetime.now()\n alarm_datetime = datetime.datetime.strptime(alarm, "%Y-%m-%d %H:%M:%S")\n # 计算下一个闹钟日期和时间\n if alarm_datetime < current_datetime:\n  next_alarm = alarm_datetime + datetime.timedelta(days=1)\n else:\n  next_alarm = alarm_datetime\n # 计算闹钟触发时间间隔（秒）\n interval = (next_alarm - current_datetime).total_seconds()\n # 等待时间间隔并触发闹钟\n import time\n time.sleep(interval)\n print("闹钟日期和时间：", alarm)\n print("闹钟响铃！")\n在这个示例代码中，您需要将 file_path 变量设置为包含闹钟日期和时间的文本文件的路径。\n代码将打开文件并逐行读取闹钟的日期和时间，然后将其存储在 alarms 列表中。\n每个闹钟的日期和时间应以 "YYYY-MM-DD HH:MM:SS" 的格式存储在文本文件中，每行一个闹钟。\n代码处理每个闹钟，计算下一个闹钟日期和时间，并使用 time.sleep 函数等待时间间隔，然后触发闹钟。\n在示例代码中，我使用 print 语句来显示闹钟日期和时间以及响铃提醒，您可以根据需要进行调整。\n',
'<h2>Python内置数据库：SQLite</h2>\nimport sqlite3\n# 连接到数据库\nconn = sqlite3.connect(\'example.db\')\n# 创建一个游标对象\ncursor = conn.cursor()\n# 执行一个查询\ncursor.execute(\'SELECT SQLITE_VERSION()\')\n# 打印查询结果\ndata = cursor.fetchone()\nprint("SQLite version:", data)\n# SQLite version: (\'3.40.1\',)\n# 创建表格\n# 创建一个名为students的表，包含id、name和age三个字段\ncursor.execute(\'\'\'CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\'\'\')\n# cursor.execute(\'\'\'CREATE TABLE stocks\n#       (date text, trans text, symbol text, qty real, price real)\'\'\')\n# 插入数据\n# 向students表中插入一条数据\ncursor.execute("INSERT INTO students (name, age) VALUES (\'张三\', 20)")\n# cursor.execute("INSERT INTO stocks VALUES (\'2022-10-28\', \'BUY\', \'GOOG\', 100, 490.1)")\n# 保存更改\nconn.commit()\n# 查询users表中的所有数据\ncursor.execute("SELECT * FROM students")\nrows = cursor.fetchall()\n# 打印查询结果\nfor row in rows:\n print(row)\n# 更新users表中id为1的数据的name字段为\'李四\'\ncursor.execute("UPDATE students SET name=? WHERE id=?", (\'李四\', 1))\n# 查询users表中的所有数据\ncursor.execute("SELECT * FROM students")\nrows = cursor.fetchall()\n# 打印查询结果\nfor row in rows:\n print(row)\n# 删除users表中id为1的数据\ncursor.execute("DELETE FROM students WHERE id=?", (1,))\n# 提交更改并关闭连接\nconn.commit()\n# 关闭连接\nconn.close()\n',
'<h2>Python SQLite</h2>\n<div id="SQLitetoc" class="toc"><a href="#SQLitetopic-0" target="_self" onclick="jumpto(0)">Python sqlite3 module APIs</a><br><a href="#SQLitetopic-1" target="_self" onclick="jumpto(1)">Connect To Database</a><br><a href="#SQLitetopic-2" target="_self" onclick="jumpto(2)">Create a Table</a><br><a href="#SQLitetopic-3" target="_self" onclick="jumpto(3)">INSERT Operation</a><br><a href="#SQLitetopic-4" target="_self" onclick="jumpto(4)">SELECT Operation</a><br><a href="#SQLitetopic-5" target="_self" onclick="jumpto(5)">UPDATE Operation</a><br><a href="#SQLitetopic-6" target="_self" onclick="jumpto(6)">DELETE Operation</a><br></div></center>\nTo use sqlite3 module, you must first create a connection object that represents the database and then optionally you can create a cursor object, which will help you in executing all the SQL statements.\n<h3 id="SQLitetopic-0">Python sqlite3 module APIs</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFollowing are important sqlite3 module routines, which can suffice your requirement to work with SQLite database from your Python program.\nIf you are looking for a more sophisticated application, then you can look into Python sqlite3 module\'s official documentation.\n<table>\n<tbody><tr><th>Sr.No.</th><th>API &amp; Description</th></tr>\n<tr><td>1</td><td><b>sqlite3.connect(database [,timeout ,other optional arguments])</b>\n<pre>\nThis API opens a connection to the SQLite database file.\nYou can use ":memory:" to open a database connection to a database that resides in RAM instead of on disk.\nIf database is opened successfully, it returns a connection object.\nWhen a database is accessed by multiple connections, and one of the processes modifies the database, the SQLite database is locked until that transaction is committed.\nThe timeout parameter specifies how long the connection should wait for the lock to go away until raising an exception.\nThe default for the timeout parameter is 5.0 (five seconds).\nIf the given database name does not exist then this call will create the database.\nYou can specify filename with the required path as well if you want to create a database anywhere else except in the current directory.</pre></td></tr>\n<tr><td>2</td><td><pre><b>connection.cursor([cursorClass])</b>\nThis routine creates a <b>cursor</b> which will be used throughout of your database programming with Python.\nThis method accepts a single optional parameter cursorClass.\nIf supplied, this must be a custom cursor class that extends sqlite3.Cursor.</pre></td></tr>\n<tr><td>3</td><td><pre><b>cursor.execute(sql [, optional parameters])</b>\nThis routine executes an SQL statement.\nThe SQL statement may be parameterized (i.e. placeholders instead of SQL literals).\nThe sqlite3 module supports two kinds of placeholders: question marks and named placeholders (named style).\n<b>For example</b> − cursor.execute("insert into people values (?, ?)", (who, age))</pre></td></tr>\n<tr><td>4</td><td><pre><b>connection.execute(sql [, optional parameters])</b>\nThis routine is a shortcut of the above execute method provided by the cursor object and it creates an intermediate cursor object by calling the cursor method, then calls the cursor\'s execute method with the parameters given.</pre></td></tr>\n<tr><td>5</td><td><pre><b>cursor.executemany(sql, seq_of_parameters)</b>\nThis routine executes an SQL command against all parameter sequences or mappings found in the sequence sql.</pre></td></tr>\n<tr><td>6</td><td><pre><b>connection.executemany(sql[, parameters])</b>\nThis routine is a shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor.s executemany method with the parameters given.</pre></td></tr>\n<tr><td>7</td><td><pre><b>cursor.executescript(sql_script)</b>\nThis routine executes multiple SQL statements at once provided in the form of script.\nIt issues a COMMIT statement first, then executes the SQL script it gets as a parameter.\nAll the SQL statements should be separated by a semi colon (;).</pre></td></tr>\n<tr><td>8</td><td><pre><b>connection.executescript(sql_script)</b>\nThis routine is a shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor\'s executescript method with the parameters given.</pre></td></tr>\n<tr><td>9</td><td><pre><b>connection.total_changes()</b>\nThis routine returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened.</td></pre></tr>\n<tr><td>10</td><td><pre><b>connection.commit()</b>\nThis method commits the current transaction.\nIf you don\'t call this method, anything you did since the last call to commit() is not visible from other database connections.</pre></td></tr>\n<tr><td>11</td><td><pre><b>connection.rollback()</b>\nThis method rolls back any changes to the database since the last call to commit().</pre></td></tr>\n<tr><td>12</td><td><pre><b>connection.close()</b>\nThis method closes the database connection.\nNote that this does not automatically call commit().\nIf you just close your database connection without calling commit() first, your changes will be lost!</pre></td></tr>\n<tr><td>13</td><td><pre><b>cursor.fetchone()</b>\nThis method fetches the next row of a query result set, returning a single sequence, or None when no more data is available.</pre></td></tr>\n<tr><td>14</td><td><pre><b>cursor.fetchmany([size = cursor.arraysize])</b>This routine fetches the next set of rows of a query result, returning a list.\nAn empty list is returned when no more rows are available.\nThe method tries to fetch as many rows as indicated by the size parameter.</pre></td></tr>\n<tr><td>15</td><td><pre><b>cursor.fetchall()</b>\nThis routine fetches all (remaining) rows of a query result, returning a list.\nAn empty list is returned when no rows are available.</pre></td></tr>\n</tbody></table>\n<h3 id="SQLitetopic-1">Connect To Database</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFollowing Python code shows how to connect to an existing database.\nIf the database does not exist, then it will be created and finally a database object will be returned.\n#!/usr/bin/python\nimport sqlite3\nconn = sqlite3.connect(\'test.db\')\nprint "Opened database successfully";\nHere, you can also supply database name as the special name <b>:memory:</b> to create a database in RAM.\nNow, let\'s run the above program to create our database <b>test.db</b> in the current directory.\nYou can change your path as per your requirement.\nKeep the above code in sqlite.py file and execute it as shown below.\nIf the database is successfully created, then it will display the following message.\n$chmod +x sqlite.py\n$./sqlite.py\nOpen database successfully\n<h3 id="SQLitetopic-2">Create a Table</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFollowing Python program will be used to create a table in the previously created database.\n#!/usr/bin/python\nimport sqlite3\nconn = sqlite3.connect(\'test.db\')\nprint "Opened database successfully";\nconn.execute(\'\'\'CREATE TABLE COMPANY\n   (ID INT PRIMARY KEY  NOT NULL,\n   NAME     TEXT NOT NULL,\n   AGE   INT  NOT NULL,\n   ADDRESS  CHAR(50),\n   SALARY   REAL);\'\'\')\nprint "Table created successfully";\nconn.close()\nWhen the above program is executed, it will create the COMPANY table in your <b>test.db</b> and it will display the following messages −\nOpened database successfully\nTable created successfully\n<h3 id="SQLitetopic-3">INSERT Operation</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFollowing Python program shows how to create records in the COMPANY table created in the above example.\n#!/usr/bin/python\nimport sqlite3\nconn = sqlite3.connect(\'test.db\')\nprint "Opened database successfully";\nconn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \\n   VALUES (1, \'Paul\', 32, \'California\', 20000.00 )");\nconn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \\n   VALUES (2, \'Allen\', 25, \'Texas\', 15000.00 )");\nconn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \\n   VALUES (3, \'Teddy\', 23, \'Norway\', 20000.00 )");\nconn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \\n   VALUES (4, \'Mark\', 25, \'Rich-Mond \', 65000.00 )");\nconn.commit()\nprint "Records created successfully";\nconn.close()\nWhen the above program is executed, it will create the given records in the COMPANY table and it will display the following two lines −\nOpened database successfully\nRecords created successfully\n<h3 id="SQLitetopic-4">SELECT Operation</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFollowing Python program shows how to fetch and display records from the COMPANY table created in the above example.\n#!/usr/bin/python\nimport sqlite3\nconn = sqlite3.connect(\'test.db\')\nprint "Opened database successfully";\ncursor = conn.execute("SELECT id, name, address, salary from COMPANY")\nfor row in cursor:\n   print "ID = ", row[0]\n   print "NAME = ", row[1]\n   print "ADDRESS = ", row[2]\n   print "SALARY = ", row[3], "\n"\nprint "Operation done successfully";\nconn.close()\nWhen the above program is executed, it will produce the following result.\nOpened database successfully\nID = 1\nNAME = Paul\nADDRESS = California\nSALARY = 20000.0\nID = 2\nNAME = Allen\nADDRESS = Texas\nSALARY = 15000.0\nID = 3\nNAME = Teddy\nADDRESS = Norway\nSALARY = 20000.0\nID = 4\nNAME = Mark\nADDRESS = Rich-Mond\nSALARY = 65000.0\nOperation done successfully\n<h3 id="SQLitetopic-5">UPDATE Operation</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFollowing Python code shows how to use UPDATE statement to update any record and then fetch and display the updated records from the COMPANY table.\n#!/usr/bin/python\nimport sqlite3\nconn = sqlite3.connect(\'test.db\')\nprint "Opened database successfully";\nconn.execute("UPDATE COMPANY set SALARY = 25000.00 where ID = 1")\nconn.commit()\nprint "Total number of rows updated :", conn.total_changes\ncursor = conn.execute("SELECT id, name, address, salary from COMPANY")\nfor row in cursor:\n   print "ID = ", row[0]\n   print "NAME = ", row[1]\n   print "ADDRESS = ", row[2]\n   print "SALARY = ", row[3], "\n"\nprint "Operation done successfully";\nconn.close()\nWhen the above program is executed, it will produce the following result.\nOpened database successfully\nTotal number of rows updated : 1\nID = 1\nNAME = Paul\nADDRESS = California\nSALARY = 25000.0\nID = 2\nNAME = Allen\nADDRESS = Texas\nSALARY = 15000.0\nID = 3\nNAME = Teddy\nADDRESS = Norway\nSALARY = 20000.0\nID = 4\nNAME = Mark\nADDRESS = Rich-Mond\nSALARY = 65000.0\nOperation done successfully\n<h3 id="SQLitetopic-6">DELETE Operation</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nFollowing Python code shows how to use DELETE statement to delete any record and then fetch and display the remaining records from the COMPANY table.\n#!/usr/bin/python\nimport sqlite3\nconn = sqlite3.connect(\'test.db\')\nprint "Opened database successfully";\nconn.execute("DELETE from COMPANY where ID = 2;")\nconn.commit()\nprint "Total number of rows deleted :", conn.total_changes\ncursor = conn.execute("SELECT id, name, address, salary from COMPANY")\nfor row in cursor:\n   print "ID = ", row[0]\n   print "NAME = ", row[1]\n   print "ADDRESS = ", row[2]\n   print "SALARY = ", row[3], "\n"\nprint "Operation done successfully";\nconn.close()\nWhen the above program is executed, it will produce the following result.\nOpened database successfully\nTotal number of rows deleted : 1\nID = 1\nNAME = Paul\nADDRESS = California\nSALARY = 20000.0\nID = 3\nNAME = Teddy\nADDRESS = Norway\nSALARY = 20000.0\nID = 4\nNAME = Mark\nADDRESS = Rich-Mond\nSALARY = 65000.0\nOperation done successfully\n',
'<h2>AI can provide valuable assistance in learning programming</h2>\nspecifically Python, in the following ways:\nInteractive Learning Platforms: AI-powered platforms can offer interactive lessons and tutorials for learning Python.\nThese platforms can provide step-by-step instructions, coding challenges, and interactive coding environments where learners can practice writing and executing Python code.\nAI algorithms can analyze learners\' code and provide immediate feedback, helping them identify and correct errors.\nIntelligent Code Autocompletion: AI-based code editors and integrated development environments (IDEs) can offer intelligent code autocompletion suggestions while programming in Python.\nThese suggestions are based on context, syntax, and common programming patterns.\nAI-powered autocompletion can help learners explore different options, reduce syntax errors, and improve coding efficiency.\nError Detection and Debugging: AI can assist in detecting and debugging errors in Python code.\nBy analyzing code syntax, structure, and runtime behavior, AI algorithms can identify potential errors, offer suggestions for correction, and provide explanations for common mistakes.\nThis helps learners understand and resolve coding issues more effectively.\nCode Generation and Examples: AI can generate Python code snippets or complete functions based on specified requirements or desired outcomes.\nThis can be particularly helpful for beginners who are learning the language and need assistance with writing correct and functional code.\nAI can also provide real-life examples of Python code usage in various applications and domains.\nNatural Language Processing (NLP): AI-powered NLP capabilities can aid in understanding Python documentation, tutorials, and forums.\nNLP algorithms can analyze and interpret text-based resources, extract relevant information, and provide explanations in a more accessible and understandable format.\nThis can assist learners in comprehending complex programming concepts and syntax.\nIntelligent Recommendations: AI algorithms can recommend relevant learning resources, tutorials, and projects based on learners\' proficiency level, interests, and areas of improvement.\nThese recommendations can help learners discover additional learning materials, practice Python in different contexts, and explore advanced topics at their own pace.\nCollaborative Learning and Coding Communities: AI can facilitate collaborative learning and coding communities by connecting learners with peers, mentors, and experts in Python programming.\nAI-powered platforms can match learners with similar interests or skill levels for group projects, coding challenges, and code reviews.\nThis fosters an environment of peer support, knowledge sharing, and collective learning.\nAI-based Python Libraries and Frameworks: AI libraries and frameworks like TensorFlow, PyTorch, and scikit-learn provide powerful tools for developing AI and machine learning applications in Python.\nLearning these libraries and frameworks can open up opportunities to explore and apply AI techniques within Python programming.\nIt\'s important to note that while AI can assist in learning Python, hands-on practice, active problem-solving, and engagement with programming exercises and projects remain crucial for developing programming skills.\nAI serves as a supportive tool to enhance the learning experience, but it should not replace practical coding experience and conceptual understanding.\nHere are a few interactive learning platforms that can help you learn Python programming:\n<k>Codecademy (www.codecademy.com):</k> Codecademy offers interactive Python courses that guide learners through coding exercises, projects, and quizzes.\nThe platform provides a hands-on learning experience and covers topics ranging from Python basics to advanced concepts.\n<k>Coursera (www.coursera.org):</k> Coursera hosts a variety of Python programming courses offered by universities and institutions worldwide.\nThese courses often include interactive coding exercises, video lectures, and assignments to reinforce learning.\n<k>DataCamp (www.datacamp.com):</k> DataCamp specializes in data science and offers interactive Python courses focused on data analysis, visualization, and machine learning.\nThe platform provides a learn-by-doing approach with coding exercises and real-world projects.\n<k>edX (www.edx.org):</k> edX offers Python courses from renowned universities and institutions.\nThese courses cover Python fundamentals, web development, data science, and more.\nThe platform provides interactive coding exercises and assessments to test your knowledge.\n<k>SoloLearn (www.sololearn.com):</k> SoloLearn offers a mobile app and web platform with interactive Python courses.\nThe courses are designed in a gamified format, allowing learners to earn points, compete with peers, and practice coding challenges.\n<k>Codewars (www.codewars.com):</k> Codewars provides a platform for users to solve coding challenges in various programming languages, including Python.\nYou can choose Python-specific challenges of different difficulty levels and learn from community solutions.\n<k>JetBrains Academy (www.jetbrains.com/academy):</k> JetBrains Academy offers an interactive learning platform with Python courses and projects.\nThe platform provides an integrated development environment (IDE) and offers step-by-step guidance for learning Python and building real-world applications.\nRemember, while these platforms provide interactive learning experiences, it\'s important to practice coding regularly, work on projects, and engage in problem-solving to solidify your Python programming skills.\n',
'<h2>create new project process</h2>\ncreate dir\ncd dir\ngit init\ngit remote add origin git@github.com:$USERNAME/$1.git\ntouch README.md\ngit add .\ngit commit -m "Initial commit"\ngit push -u origin master\ncode .\n',
'<h2>Build Android Apps with Flet in Python</h2>\n<a href="https://www.youtube.com/watch?v=Hj09tFCdjSw" class="whitebut ">Build Android Apps with Flet in Python (APKs)</a>\n',
'<h2>Pygubu: 快速开发Python tkinter用户界面</h2>\npip install pygubu-designer\nPygubu is a RAD tool to enable quick and easy development of user interfaces for the Python\'s tkinter module.\nThe user interfaces designed are saved as XML files, and, by using the pygubu builder, these can be loaded by applications dynamically as needed.\nhttps://github.com/alejandroautalan/pygubu-designer\nUsage\nType on the terminal the following commands.\nC:\Python3\Scripts\pygubu-designer.exe\nWhere C:\Python3 is the path to your Python installation directory.\n',
'<h2>wechat</h2>\n<a href="https://mp.weixin.qq.com/s/iMyp_p75j5tq8xPj2w1j_Q" class="whitebut ">Python 微信自动化操作</a>\n<a href="https://mp.weixin.qq.com/s/HKun5dt_8nNDfk7fVXK5Fw" class="whitebut ">用 Python 发送通知到微信</a>\n<a href="https://mp.weixin.qq.com/s/Jl53wMk0zG6s9YHZA5Vytg" class="whitebut ">用python控制微信</a>\n<a href="https://mp.weixin.qq.com/s/7JIqiy1gDFriy8YCdZCwpw" class="whitebut ">Python操作微信</a>\n',
'<h2>Could not install packages due to an OSError:</h2>\n[WinError 2] No such file or directory\nThe system cannot find the file specified: \'C:\\Python311\\Scripts\\chardetect.exe\' -> \'C:\\Python311\\Scripts\\chardetect.exe.deleteme\'\nTry running the command as administrator:\nor\npip install numpy --user to install numpy without any special previlages\n',
'<h2>数据分析-主成分分析 (PCA)</h2>\n<div id="pypcatoc" class="toc"><a href="#pypcatopic-0" target="_self">PCA 的具体步骤</a><br><a href="#pypcatopic-1" target="_self">PCA 适用于以下场景</a><br><a href="#pypcatopic-2" target="_self"><k>优点</k></a><br><a href="#pypcatopic-3" target="_self"><k>缺点</k></a><br><a href="#pypcatopic-4" target="_self"><k>注意事项</k></a><br><a href="#pypcatopic-5" target="_self"><k>如何找到最优值</k></a><br><a href="#pypcatopic-6" target="_self"><k>实际数据演示</k></a><br></div></center><br><br>\n<br><br>\n主成分分析（Principal Component Analysis, PCA）是一种用于数据降维的统计技术。\n它的目的是通过将原始数据转化为一组新的不相关的变量（称为主成分），来减少数据的维度，同时保留数据中最重要的信息。\n<h3 id="pypcatopic-0">PCA 的具体步骤</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<k>标准化数据</k>：\n由于不同特征可能具有不同的单位和量级，因此在进行PCA之前，需要对数据进行标准化处理（通常是零均值和单位方差）。\n<k>计算协方差矩阵</k>：\n协方差矩阵用于测量数据集中的特征之间的线性相关性。\n<k>计算特征值和特征向量</k>：\n协方差矩阵的特征值和特征向量用于确定主成分。\n特征值表示主成分解释的数据方差的大小，特征向量则表示主成分的方向。\n<k>选择主成分</k>：\n根据特征值的大小排序，选择前k个特征值对应的特征向量作为主成分。\n<k>变换数据</k>：\n将原始数据投影到选择的主成分上，得到降维后的数据集。\n<h3 id="pypcatopic-1">PCA 适用于以下场景</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<k>降维</k>：在高维数据集中减少维度，同时保留数据中最重要的信息。\n<k>去除噪音</k>：通过去除解释较少方差的次要成分，减少数据中的噪音。\n<k>数据可视化</k>：将高维数据投影到二维或三维空间中，以便可视化。\n<k>特征选择</k>：识别和选择对数据变异贡献最大的特征。\n<h3 id="pypcatopic-2"><k>优点</k></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<k>降维有效</k>：能够有效地减少数据的维度，保留主要信息。\n<k>去除冗余</k>：去除特征间的多重共线性，简化模型。\n<k>提高计算效率</k>：降低数据维度，提高后续算法的计算效率。\n<h3 id="pypcatopic-3"><k>缺点</k></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<k>解释性差</k>：主成分是线性组合，不容易解释原始特征的实际意义。\n<k>信息丢失</k>：降维过程中可能会丢失一些信息，尤其是当保留的主成分数量较少时。\n<k>线性假设</k>：假设特征间的关系是线性的，对于非线性关系效果较差。\n<h3 id="pypcatopic-4"><k>注意事项</k></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<k>数据标准化</k>：在进行 PCA 之前，一定要对数据进行标准化处理。\n<k>特征选择</k>：选择合适的主成分数量，通常通过累计解释方差来确定。\n<k>异常值</k>：注意数据中的异常值，因为它们可能会对 PCA 结果产生较大影响。\n<h3 id="pypcatopic-5"><k>如何找到最优值</k></h3> <a href="#top" target="_self"><b>⇧</b></a><br>确定最优主成分数量通常通过累计解释方差的方法来进行。\n具体步骤如下：\n<k>计算每个主成分的解释方差</k>。\n<k>计算累计解释方差</k>，并绘制累计解释方差图（即 Scree Plot）。\n<k>选择拐点</k>：通常选择累计解释方差达到 90% 或解释方差显著下降的拐点对应的主成分数量。\n<h3 id="pypcatopic-6"><k>实际数据演示</k></h3> <a href="#top" target="_self"><b>⇧</b></a><br>我们将使用Python模拟一个电商数据集，包含多个维度的数据，然后通过 PCA 进行降维处理，并找出最优解。\n首先，我们生成模拟的电商数据，并对其进行标准化处理↓\n<gr>import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nnp.random.seed(0)\ndata = {\n \'customer_id\': np.arange(1, 101),\n \'age\': np.random.randint(18, 70, size=100),\n \'annual_income\': np.random.randint(20000, 150000, size=100),\n \'spending_score\': np.random.randint(1, 100, size=100),\n \'years_as_customer\': np.random.randint(1, 10, size=100),\n \'total_purchases\': np.random.randint(1, 50, size=100),\n \'average_purchase_value\': np.random.randint(10, 1000, size=100),\n \'purchase_frequency\': np.random.randint(1, 12, size=100)\n}\ndf = pd.DataFrame(data)\nfeatures = df.drop(\'customer_id\', axis=1)\nscaler = StandardScaler()\nscaled_features = scaler.fit_transform(features)</gr>\n<img src="https://mmbiz.qpic.cn/mmbiz_png/1AQokuKOz2zZwL6ys3MTcZoDsuicgNsZ6w1qmkzgA0bbichib6W2cld45srK6nM1dCDlgUxeiaFR5wI3AjZQnDHhNQ/640">\n接下来，我们对标准化后的数据进行 PCA 分析，并计算累计解释方差。\n<gr>from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\npca = PCA()\npca_features = pca.fit_transform(scaled_features)\n# 计算累计解释方差\nexplained_variance = np.cumsum(pca.explained_variance_ratio_)\n# 绘制 Scree Plot\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, len(explained_variance) + 1), explained_variance, marker=\'o\', linestyle=\'--\')\nplt.title(\'Scree Plot\')\nplt.xlabel(\'Number of Components\')\nplt.ylabel(\'Cumulative Explained Variance\')\nplt.axhline(y=0.9, color=\'r\', linestyle=\'--\')\nplt.text(1, 0.85, \'90% cut-off threshold\', color=\'red\', fontsize=12)\nplt.show()\nprint("Explained Variance Ratios:", pca.explained_variance_ratio_)\nprint("Cumulative Explained Variance:", explained_variance)</gr>\n<img src="https://mmbiz.qpic.cn/mmbiz_png/1AQokuKOz2zZwL6ys3MTcZoDsuicgNsZ6DA1oPe8XMykGkrj26ppDouR9JqgARz5sia5ccmIMWg2SRwm3TYeNAbQ/640">\n根据累计解释方差图，我们选择前3个主成分作为最终的降维结果↓\n<gr># 选择前3个主成分\npca = PCA(n_components=3)\npca_features = pca.fit_transform(scaled_features)\n# 打印每个主成分的解释方差\nprint("Explained Variance Ratios for 3 Components:", pca.explained_variance_ratio_)</gr>\n我们可以通过散点图来可视化前两个主成分。\n<gr># 可视化前两个主成分\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x=pca_features[:, 0], y=pca_features[:, 1], hue=df[\'spending_score\'], palette=\'viridis\')\nplt.title(\'PCA - 可视化前两个主成分\')\nplt.xlabel(\'主成分-1\')\nplt.ylabel(\'主成分-2\')\nplt.colorbar(label=\'Spending Score\')\nplt.show()</gr>\n<img src="https://mmbiz.qpic.cn/mmbiz_png/1AQokuKOz2zZwL6ys3MTcZoDsuicgNsZ6dMFgwTxicqrHWuCftVWz2s32Rtg0YOYaoU60wdcrwSw7j8Zv4wG6y2Q/640">\n最后，我们对新数据进行标准化处理，并通过 PCA 转换进行降维。\n<gr># 新数据预测\nnew_data = np.array([[25, 45000, 75, 3, 20, 250, 6]])\nnew_data_scaled = scaler.transform(new_data)\nnew_data_pca = pca.transform(new_data_scaled)\nprint(f"New data PCA transformation: {new_data_pca}")</gr>\n通过上述步骤，我们使用 PCA 对高维电商数据进行了降维处理。\n我们详细解释了每一步的过程，并通过累计解释方差图确定了最佳的主成分数量，最后对降维后的数据进行了可视化处理。\n同时，我们演示了如何对新数据进行 PCA 转换，以便进行预测。\n',
'<h2>Download Video in MP3 format using PyTube</h2>\nPytube is a lightweight, Python-written library.\nPytube provides a command-line feature that allows you to stream videos directly from the terminal easily.\nTo import pytube, we can use the commands according to the python version.\nFor Python2 : pip install pytube\nFor Python3 : pip3 install pytube\nFor pyube3 : pip install pytube3\nTo save the audio file, we are using the os module:\npip install os_sys\n<k>Procedure:</k>\nFirst, we need to import the required (pytube and os) module.\n<k>Implementation: Python3</k>\n# importing packages \nfrom pytube import YouTube \nimport os \n# url input from user \nyt = YouTube( \n str(input("Enter the URL of the video you want to download: \n>> "))) \n# extract only audio \nvideo = yt.streams.filter(only_audio=True).first() \n# check for destination to save file \nprint("Enter the destination (leave blank for current directory)") \ndestination = str(input(">> ")) or \'.\'\n# download the file \nout_file = video.download(output_path=destination) \n# save the file \nbase, ext = os.path.splitext(out_file) \nnew_file = base + \'.mp3\'\nos.rename(out_file, new_file) \n# result of success \nprint(yt.title + " has been successfully downloaded.")\n',
'<h2>Cut MP3 file</h2>\nBefore we go forward, we need to install FFmpeg in your system as it is required to deal with mp3 files to download you can visit this site: https://phoenixnap.com/kb/ffmpeg-windows.\nAlso, we will use pydub library to perform this task.\npip install pydub\nStep 1: Open an mp3 file using pydub.\nfrom pydub import AudioSegment \nsong = AudioSegment.from_mp3("test.mp3") \nStep 2: Slice audio\n# pydub does things in milliseconds \nten_seconds = 10 * 1000\n  \nfirst_10_seconds = song[:ten_seconds] \nlast_5_seconds = song[-5000:] \nStep 3: Save the results as a new file in mp3 audio format.\nfirst_10_seconds.export("new.mp3", format="mp3") \nExample:\nfrom pydub import AudioSegment \n  \n# Open an mp3 file \nsong = AudioSegment.from_file("testing.mp3", \n         format="mp3") \n  \n# pydub does things in milliseconds \nten_seconds = 10 * 1000\n  \n# song clip of 10 seconds from starting \nfirst_10_seconds = song[:ten_seconds] \n  \n# save file \nfirst_10_seconds.export("first_10_seconds.mp3", \n      format="mp3") \nprint("New Audio file is created and saved") \n',
'<h2>用Python开发音乐爬虫</h2>\n<div id="pythonScrapingtoc" class="toc"><a href="#pythonScrapingtopic-0" target="_self">首先准备</a><br><a href="#pythonScrapingtopic-1" target="_self">爬虫实现基本流程</a><br><a href="#pythonScrapingtopic-2" target="_self">一、数据来源分析</a><br><a href="#pythonScrapingtopic-3" target="_self"> 1、明确需求</a><br><a href="#pythonScrapingtopic-4" target="_self"> 2.抓包分析</a><br><a href="#pythonScrapingtopic-5" target="_self">二、代码实现步骤</a><br><a href="#pythonScrapingtopic-6" target="_self"> 1.发送请求</a><br><a href="#pythonScrapingtopic-7" target="_self"> 2.获取数据</a><br><a href="#pythonScrapingtopic-8" target="_self"> 3.解析数据</a><br><a href="#pythonScrapingtopic-9" target="_self"> 4.保存数据</a><br><a href="#pythonScrapingtopic-10" target="_self"> 5.搜索下载</a><br><a href="#pythonScrapingtopic-11" target="_self"> 6.打包EXE</a><br></div></center><br><br>\n<h3 id="pythonScrapingtopic-0">首先准备</h3>\n<k>环境</k>\nPython 3.10\nPycharm\n<k>模块</k>\nimport requests &gt;&gt;&gt; pip install requests \nimport parsel &gt;&gt;&gt; pip install parsel\nimport prettytable &gt;&gt;&gt; pip install prettytable \nimport os\n打包exe程序:\npyinstaller &gt; pip install pyinstaller \n文章看的不理解，我还录制了详细的视频讲解，和源码一起打包好了，私信小编，发送关键字【学习】自动掉落\n<h3 id="pythonScrapingtopic-1">爬虫实现基本流程</h3>\n案例分为三部分:\n单首歌曲采集\n搜索下载功能 (单个/批量)\n把py程序打包成exe软件\n<h3 id="pythonScrapingtopic-2">一、数据来源分析</h3>\n<h5 id="pythonScrapingtopic-3"> 1、明确需求</h5>\n明确采集的网站以及数据内容\n网址: https://www.gequbao.com/music/402856\n数据: 歌曲链接\n<h5 id="pythonScrapingtopic-4"> 2.抓包分析</h5>\n通过浏览器开发者工具分析对应的数据位置\n打开开发者工具\nF12 / 右键点击检查选择network 网络\n刷新网页\n通过关键字搜索找到对应数据位置\n先找歌曲链接地址(播放地址): 开发者工具 &gt; 网络 &gt; 媒体 &gt; 查看对应歌曲链接\n再根据链接中一段参数进行搜索\n关键字: 需要什么数据就搜什么数据\n数据包地址: https://www.gequbao.com/api/play_url?id=402856&amp;json=1\n<h3 id="pythonScrapingtopic-5">二、代码实现步骤</h3>\n<h5 id="pythonScrapingtopic-6"> 1.发送请求</h5>\n模拟浏览器对于url地址发送请求\n# 导入数据请求模块 import requests """发送请求"""\n# 模拟浏览器 (请求头)\nheaders = {\n# User-Agent 用户代理, 表示浏览器基本身份信息\n\'User-Agent\':\'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36\'\n}\n# 请求网址\nurl = \'https://www.gequbao.com/api/play_url?id=402856&amp;json=1\' # 发送请求\nresponse = requests.get(url=url, headers=headers)\n<h5 id="pythonScrapingtopic-7"> 2.获取数据</h5>\n获取服务器返回响应数据\n# 获取响应json数据\njson_data = response.json()\n<h5 id="pythonScrapingtopic-8"> 3.解析数据</h5>\n提取我们需要的数据内容\ncss选择器简单使用\n根据标签属性提取数据内容\n查看数据对应标签位置\n<h5 id="pythonScrapingtopic-9"> 4.保存数据</h5>\n获取歌曲内容, 保存到本地文件夹\n# 对于歌曲链接发送请求, 获取歌曲内容\nmusic_content = requests.get(url=play_url, headers=headers).content\n# 数据保存\nwith open(f\'music\\{download_title}-{download_singer}.mp3\', mode=\'wb\') as f:\n # 写入数据\n f.write(music_content)\nprint(f\'{download_title}歌曲下载完成!\')\n<h5 id="pythonScrapingtopic-10"> 5.搜索下载</h5>\n找搜索接口\n歌名\n歌曲ID\n分析不同歌曲, 数据包有什么变化\n歌曲变化 &gt; ID\n只要过去所有歌曲ID你就可以采集所有歌曲内容\n效果展示\n<h5 id="pythonScrapingtopic-11"> 6.打包EXE</h5>\npyinstaller -F xx.py\n打包成功后，就能分享给其它不会py的小伙伴，愉快的使用了\n',
'<h2>自动化地完成各种任务 Python Scripts</h2>\n项目地址：https://github.com/DhanushNehru/Python-Scripts\n部分脚本介绍\n•<k>Arrange It:</k>根据文件扩展名自动将文件移动到相应的文件夹。\n•<k>Auto WiFi Check:</k>监控 WiFi 连接是否正常。\n•<k>AutoCert:</k>批量生成电子证书。\n•<k>Automated Emails:</k>读取 CSV 文件，发送个性化的邮件。\n•<k>Black Hat Python:</k>来自《黑帽子 Python》一书的源代码。\n•<k>Blackjack:</k>一个二十一点游戏。\n•<k>Chessboard:</k>使用 matplotlib 创建一个棋盘。\n•<k>Compound Interest Calculator:</k>一个计算复利的 Python 脚本。\n•<k>Countdown Timer:</k>当输入的时间过去时显示一条消息。\n•<k>Convert Temperature:</k>一个 Python 脚本，用于在华氏度、摄氏度和开氏度之间转换温度。\n•<k>Crop Images:</k>一个 Python 脚本，用于裁剪给定的图像。\n•<k>CSV to Excel:</k>一个 Python 脚本，用于将 CSV 文件转换为 Excel 文件。\n•<k>Currency Script:</k>一个 Python 脚本，用于将一个国家的货币转换为另一个国家的货币。\n•<k>Digital Clock:</k>一个 Python 脚本，用于在终端中显示一个数字时钟。\n•<k>Display Popup Window:</k>一个 Python 脚本，用于向用户预览一个 GUI 界面。\n•<k>Duplicate Finder:</k>该脚本通过 MD5 哈希识别重复文件，并允许删除或重新定位文件。\n•<k>Emoji in PDF:</k>一个 Python 脚本，用于在 PDF 中查看 Emoji。\n•<k>Expense Tracker:</k>一个 Python 脚本，可以跟踪开支。\n•<k>Face Reaction:</k>一个试图检测面部表情的脚本。\n•<k>Fake Profiles:</k>创建虚假配置文件。\n•<k>File Encryption Decryption:</k>使用 AES 算法对文件进行加密和解密，以确保安全性。\n•<k>Font Art:</k>使用 Python 显示字体艺术。\n•<k>Freelance Helper Program:</k>从包含工作时间的 Excel 文件中获取数据，并计算报酬。\n•<k>Get Hexcodes From Websites:</k>从网站生成包含十六进制代码的 Python 列表。\n•<k>Hand_Volume:</k>检测和跟踪手部动作，以控制音量。\n•<k>Harvest Predictor:</k>接收一些必要的输入参数，并根据这些参数预测收成。\n•<k>Html-to-images:</k>将 HTML 文档转换为图像文件。\n•<k>Image Capture:</k>从网络摄像头捕捉图像并将其保存到本地设备。\n•<k>Image Compress:</k>压缩图像。\n•<k>Image Manipulation without libraries:</k>在不使用任何外部库的情况下，操作图像。\n•<k>Image Text:</k>从图像中提取文本。\n•<k>Image Text to PDF:</k>将图像和文本添加到 PDF 文件中。\n•<k>Image Watermarker:</k>给图像添加水印。\n•<k>Image to ASCII:</k>将图像转换为 ASCII 艺术。\n•<k>Image to Gif:</k>从图像生成 GIF 文件。\n•<k>IP Geolocator:</k>使用 IP 地址在地球上定位位置。\n•<k>Jokes Generator:</k>生成笑话。\n•<k>JSON to CSV 1:</k>将 JSON 转换为 CSV 文件。\n•<k>JSON to CSV 2:</k>将 JSON 文件转换为 CSV 文件。\n•<k>JSON to CSV converter:</k>将 JSON 文件转换为 CSV 文件。它还可以转换嵌套的 JSON 文件。示例 JSON 用于测试。\n•<k>JSON to YAML converter:</k>将 JSON 文件转换为 YAML 文件。示例 JSON 用于测试。\n•<k>Keylogger:</k>一个可以跟踪你的击键、剪贴板文本、定期截屏，并录制音频的键盘记录器。\n•<k>Keyword - Retweeting:</k>查找包含给定关键字的最新推文，然后转发它们。\n•<k>LinkedIn Bot:</k>自动搜索 LinkedIn 上的公开资料，并将数据导出到 Excel 表格。\n•<k>Mail Sender:</k>发送电子邮件。\n•<k>Merge Two Images:</k>水平或垂直合并两个图像。\n•<k>Mouse mover:</k>每 15 秒移动一次鼠标。\n•<k>No Screensaver:</k>防止屏幕保护程序开启。\n•<k>OTP Verification:</k>一个 OTP 验证检查器。\n•<k>Password Generator:</k>生成随机密码。\n•<k>Password Manager:</k>生成和管理密码管理器。\n•<k>PDF to Audio:</k>将 PDF 转换为音频。\n•<k>Planet Simulation:</k>模拟多个行星绕太阳旋转。\n•<k>Playlist Exchange:</k>一个 Python 脚本，用于在 Spotify 和 Python 之间交换歌曲和播放列表。\n•<k>PNG TO JPG CONVERTOR:</k>一个 PNG 到 JPG 图片转换器。\n•<k>QR Code Generator:</k>从提供的链接生成二维码。\n•<k>Random Color Generator:</k>一个随机颜色生成器，会显示颜色和值！\n•<k>Remove Background:</k>删除图像的背景。\n•<k>Rock Paper Scissor 1:</k>一个石头剪刀布游戏。\n•<k>Rock Paper Scissor 2:</k>一个新的石头剪刀布游戏。\n•<k>Run Then Notify:</k>运行一个缓慢的命令，并在执行完成后发送电子邮件通知。\n•<k>Selfie with Python:</k>用 Python 拍照。\n•<k>Simple TCP Chat Server:</k>在你的 LAN 上创建一个本地服务器，用于接收和发送消息！\n•<k>Snake Water Gun:</k>一个类似石头剪刀布的游戏。\n•<k>Sorting:</k>冒泡排序算法。\n•<k>Star Pattern:</k>创建一个星形图案金字塔。\n•<k>Take a break:</k>在长时间工作时休息的 Python 代码。\n•<k>Text Recognition:</k>一个图像文本识别 ML 模型，用于从图像中提取文本。\n•<k>Text to Image:</k>一个 Python 脚本，它将你的文本转换为 JPEG 图片。\n•<k>Tic Tac Toe 1:</k>一个井字棋游戏。\n•<k>Tik Tac Toe 2:</k>一个井字棋游戏。\n•<k>Turtle Art &amp; Patterns:</k>用于查看海龟艺术的脚本，也有一些基于提示的脚本。\n•<k>Turtle Graphics:</k>使用海龟图形的代码。\n•<k>Twitter Selenium Bot:</k>一个可以与 Twitter 以多种方式交互的机器人。\n•<k>Umbrella Reminder:</k>雨伞提醒。\n•<k>URL Shortener:</k>一个 URL 缩短代码，将长 URL 压缩为更短、更容易管理的链接。\n•<k>Video Downloader:</k>从 YouTube 下载视频到你的本地系统。\n•<k>Video Watermarker:</k>给任何你选择的视频添加水印。\n•<k>Virtual Painter:</k>虚拟绘画应用程序。\n•<k>Wallpaper Changer:</k>自动更改主屏幕壁纸，并在上面添加随机引语和股票行情。\n•<k>Weather GUI:</k>显示天气信息。\n•<k>Website Blocker:</k>下载网站并在你的本地 IP 上的首页加载它。\n•<k>Website Cloner:</k>克隆任何网站并在你的本地 IP 上打开它。\n•<k>Weight Converter:</k>一个简单的 GUI 脚本，用于将重量转换为不同的计量单位。\n•<k>Wikipedia Data Extractor:</k>一个简单的维基百科数据提取脚本，可以在你的 IDE 中获得输出。\n•<k>Word to PDF:</k>一个 Python 脚本，用于将 MS Word 文件转换为 PDF 文件。\n•<k>Youtube Downloader:</k>从 YouTube 下载任何视频，可以是视频格式或音频格式！\n•<k>Pigeonhole Sort:</k>算法，使用鸽巢排序算法来有效地排序数组！\n•<k>Youtube Playlist Info Scraper:</k>这个 python 模块使用播放列表链接检索 YouTube 播放列表的 JSON 格式信息。\n•<k>Gitpod:</k>使用云端免费开发环境，可以直接开始编码。\n',
'<h2>Python CheatSheet</h2>\n<div id="PythonCheatSheettoc" class="toc"><a href="#PythonCheatSheettopic-0" target="_self"><br><pk>Basics</pk></a>, <a href="#PythonCheatSheettopic-1" target="_self"> Showing Output To User</a>, <a href="#PythonCheatSheettopic-2" target="_self"> Taking Input From the User</a>, <a href="#PythonCheatSheettopic-3" target="_self"> range Function</a>, <a href="#PythonCheatSheettopic-4" target="_self"><br><pk>Comments</pk></a>, <a href="#PythonCheatSheettopic-5" target="_self"> Single line comment</a>, <a href="#PythonCheatSheettopic-6" target="_self"> Multi-line comment</a>, <a href="#PythonCheatSheettopic-7" target="_self"><br><pk>Escape Sequence</pk></a>, <a href="#PythonCheatSheettopic-8" target="_self"> Newline</a>, <a href="#PythonCheatSheettopic-9" target="_self"> Backslash</a>, <a href="#PythonCheatSheettopic-10" target="_self"> Single Quote</a>, <a href="#PythonCheatSheettopic-11" target="_self"> Tab</a>, <a href="#PythonCheatSheettopic-12" target="_self"> Backspace</a>, <a href="#PythonCheatSheettopic-13" target="_self"> Octal value</a>, <a href="#PythonCheatSheettopic-14" target="_self"> Hex value</a>, <a href="#PythonCheatSheettopic-15" target="_self"> Carriage Return</a>, <a href="#PythonCheatSheettopic-16" target="_self"><br><pk>Strings</pk></a>, <a href="#PythonCheatSheettopic-17" target="_self"> String</a>, <a href="#PythonCheatSheettopic-18" target="_self"> Indexing</a>, <a href="#PythonCheatSheettopic-19" target="_self"> Slicing</a>, <a href="#PythonCheatSheettopic-20" target="_self"> isalnum() method</a>, <a href="#PythonCheatSheettopic-21" target="_self"> isalpha() method</a>, <a href="#PythonCheatSheettopic-22" target="_self"> isdecimal() method</a>, <a href="#PythonCheatSheettopic-23" target="_self"> isdigit() method</a>, <a href="#PythonCheatSheettopic-24" target="_self"> islower() method</a>, <a href="#PythonCheatSheettopic-25" target="_self"> isspace() method</a>, <a href="#PythonCheatSheettopic-26" target="_self"> isupper() method</a>, <a href="#PythonCheatSheettopic-27" target="_self"> lower() method</a>, <a href="#PythonCheatSheettopic-28" target="_self"> upper() method</a>, <a href="#PythonCheatSheettopic-29" target="_self"> strip() method</a>, <a href="#PythonCheatSheettopic-30" target="_self"><br><pk>List</pk></a>, <a href="#PythonCheatSheettopic-31" target="_self"> Indexing</a>, <a href="#PythonCheatSheettopic-32" target="_self"> Empty List</a>, <a href="#PythonCheatSheettopic-33" target="_self"> index method</a>, <a href="#PythonCheatSheettopic-34" target="_self"> append method</a>, <a href="#PythonCheatSheettopic-35" target="_self"> extend method</a>, <a href="#PythonCheatSheettopic-36" target="_self"> insert method</a>, <a href="#PythonCheatSheettopic-37" target="_self"> pop method</a>, <a href="#PythonCheatSheettopic-38" target="_self"> remove method</a>, <a href="#PythonCheatSheettopic-39" target="_self"> clear method</a>, <a href="#PythonCheatSheettopic-40" target="_self"> count method</a>, <a href="#PythonCheatSheettopic-41" target="_self"> reverse method</a>, <a href="#PythonCheatSheettopic-42" target="_self"> sort method</a>, <a href="#PythonCheatSheettopic-43" target="_self"><br><pk>Tuples</pk></a>, <a href="#PythonCheatSheettopic-44" target="_self"> Tuple Creation</a>, <a href="#PythonCheatSheettopic-45" target="_self"> Indexing</a>, <a href="#PythonCheatSheettopic-46" target="_self"> count method</a>, <a href="#PythonCheatSheettopic-47" target="_self"> index method</a>, <a href="#PythonCheatSheettopic-48" target="_self"><br><pk>Sets</pk></a>, <a href="#PythonCheatSheettopic-49" target="_self"> Set Creation: Way 1</a>, <a href="#PythonCheatSheettopic-50" target="_self"> Set Creation: Way 2</a>, <a href="#PythonCheatSheettopic-51" target="_self"> Set Methods</a>, <a href="#PythonCheatSheettopic-52" target="_self"> add() method</a>, <a href="#PythonCheatSheettopic-53" target="_self"> clear() method</a>, <a href="#PythonCheatSheettopic-54" target="_self"> discard() method</a>, <a href="#PythonCheatSheettopic-55" target="_self"> intersection() method</a>, <a href="#PythonCheatSheettopic-56" target="_self"> issubset() method</a>, <a href="#PythonCheatSheettopic-57" target="_self"> pop() method</a>, <a href="#PythonCheatSheettopic-58" target="_self"> remove() method</a>, <a href="#PythonCheatSheettopic-59" target="_self"> union() method</a>, <a href="#PythonCheatSheettopic-60" target="_self"><br><pk>Dictionaries</pk></a>, <a href="#PythonCheatSheettopic-61" target="_self"> Dictionary</a>, <a href="#PythonCheatSheettopic-62" target="_self"> Empty Dictionary</a>, <a href="#PythonCheatSheettopic-63" target="_self"> Adding Element to a dictionary</a>, <a href="#PythonCheatSheettopic-64" target="_self"> Updating Element in a dictionary</a>, <a href="#PythonCheatSheettopic-65" target="_self"> Deleting an element from a dictionary</a>, <a href="#PythonCheatSheettopic-66" target="_self"> Dictionary Functions &amp; Methods</a>, <a href="#PythonCheatSheettopic-67" target="_self"> len() method</a>, <a href="#PythonCheatSheettopic-68" target="_self"> clear() method</a>, <a href="#PythonCheatSheettopic-69" target="_self"> get() method</a>, <a href="#PythonCheatSheettopic-70" target="_self"> items() method</a>, <a href="#PythonCheatSheettopic-71" target="_self"> keys() method</a>, <a href="#PythonCheatSheettopic-72" target="_self"> values() method</a>, <a href="#PythonCheatSheettopic-73" target="_self"> update() method</a>, <a href="#PythonCheatSheettopic-74" target="_self"><br><pk>Indentation</pk></a>, <a href="#PythonCheatSheettopic-75" target="_self"><br><pk>Conditional Statements</pk></a>, <a href="#PythonCheatSheettopic-76" target="_self"> if Statement</a>, <a href="#PythonCheatSheettopic-77" target="_self"> if-else Statement</a>, <a href="#PythonCheatSheettopic-78" target="_self"> if-elif Statement</a>, <a href="#PythonCheatSheettopic-79" target="_self"> Nested if-else Statement</a>, <a href="#PythonCheatSheettopic-80" target="_self"><br><pk>Loops in Python</pk></a>, <a href="#PythonCheatSheettopic-81" target="_self"> For Loop</a>, <a href="#PythonCheatSheettopic-82" target="_self"> While Loop</a>, <a href="#PythonCheatSheettopic-83" target="_self"> Break Statement</a>, <a href="#PythonCheatSheettopic-84" target="_self"> Continue Statement</a>, <a href="#PythonCheatSheettopic-85" target="_self"><br><pk>Functions</pk></a>, <a href="#PythonCheatSheettopic-86" target="_self"> Function Definition</a>, <a href="#PythonCheatSheettopic-87" target="_self"> Function Call</a>, <a href="#PythonCheatSheettopic-88" target="_self"> Return statement in Python function</a>, <a href="#PythonCheatSheettopic-89" target="_self"> Arguments in python function</a>, <a href="#PythonCheatSheettopic-90" target="_self"><br><pk>File Handling</pk></a>, <a href="#PythonCheatSheettopic-91" target="_self"> open() function</a>, <a href="#PythonCheatSheettopic-92" target="_self"> modes-</a>, <a href="#PythonCheatSheettopic-93" target="_self"> close() function</a>, <a href="#PythonCheatSheettopic-94" target="_self"> read () function</a>, <a href="#PythonCheatSheettopic-95" target="_self"> write function</a>, <a href="#PythonCheatSheettopic-96" target="_self"><br><pk>Exception Handling</pk></a>, <a href="#PythonCheatSheettopic-97" target="_self"> try and except</a>, <a href="#PythonCheatSheettopic-98" target="_self"> else</a>, <a href="#PythonCheatSheettopic-99" target="_self"><br><pk>finally</pk></a>, <a href="#PythonCheatSheettopic-100" target="_self"><br><pk>Object Oriented Programming (OOPS)</pk></a>, <a href="#PythonCheatSheettopic-101" target="_self"> class</a>, <a href="#PythonCheatSheettopic-102" target="_self"> Creating an object</a>, <a href="#PythonCheatSheettopic-103" target="_self"> self parameter</a>, <a href="#PythonCheatSheettopic-104" target="_self"> class with a constructor</a>, <a href="#PythonCheatSheettopic-105" target="_self"> Inheritance in python</a>, <a href="#PythonCheatSheettopic-106" target="_self"> Types of inheritance-</a>, <a href="#PythonCheatSheettopic-107" target="_self"> filter function</a>, <a href="#PythonCheatSheettopic-108" target="_self"> issubclass function</a>, <a href="#PythonCheatSheettopic-109" target="_self"><br><pk>Iterators and Generators</pk></a>, <a href="#PythonCheatSheettopic-110" target="_self"> Iterator</a>, <a href="#PythonCheatSheettopic-111" target="_self"> Generator</a>, <a href="#PythonCheatSheettopic-112" target="_self"><br><pk>Decorators</pk></a>, <a href="#PythonCheatSheettopic-113" target="_self"> property Decorator (getter)</a>, <a href="#PythonCheatSheettopic-114" target="_self"> setter Decorator</a>, <a href="#PythonCheatSheettopic-115" target="_self"> deleter Decorator</a>, </div>\n<h3 id="PythonCheatSheettopic-0"><br><pk>Basics</pk></h3>\nBasic syntax from the python programming language\n<h3 id="PythonCheatSheettopic-1"> Showing Output To User</h3>\nprint("Content that you wanna print on screen")\nvar1 = "Shruti"\nprint("Hi my name is: ",var1)\n<h3 id="PythonCheatSheettopic-2"> Taking Input From the User</h3>\nvar1 = input("Enter your name: ")\nprint("My name is: ", var1)\nTo take input as an integer:\nvar1=int(input("enter the integer value"))\nprint(var1)\nTo take input as an float:\nvar1=float(input("enter the float value"))\nprint(var1)\n<h3 id="PythonCheatSheettopic-3"> range Function</h3>\nrange function returns a sequence of numbers, eg, numbers starting from 0 to n-1 for range(0, n)\nrange(int_start_value,int_stop_value,int_step_value)\nHere the start value and step value are by default 1 if not mentioned by the programmer. but int_stop_value is the compulsory parameter in range function\nexample\nDisplay all even numbers between 1 to 100\nfor i in range(0,101,2):\n    print(i)\n<h3 id="PythonCheatSheettopic-4"><br><pk>Comments</pk></h3>\nComments are used to make the code more understandable for programmers, and they are not executed by compiler or interpreter.\n<h3 id="PythonCheatSheettopic-5"> Single line comment</h3>\n# This is a single line comment\n<h3 id="PythonCheatSheettopic-6"> Multi-line comment</h3>\n\'\'\'This is a\nmulti-line\ncomment\'\'\'\n<h3 id="PythonCheatSheettopic-7"><br><pk>Escape Sequence</pk></h3>\nAn escape sequence is a sequence of characters; it doesn\'t represent itself (but is translated into another character) when used inside string literal or character. Some of the escape sequence characters are as follows:\n<h3 id="PythonCheatSheettopic-8"> Newline</h3>\nNewline Character\nprint("\n")\n<h3 id="PythonCheatSheettopic-9"> Backslash</h3>\nIt adds a backslash\nprint("\\")\n<h3 id="PythonCheatSheettopic-10"> Single Quote</h3>\nIt adds a single quotation mark\nprint("\'")\n<h3 id="PythonCheatSheettopic-11"> Tab</h3>\nIt gives a tab space\nprint("\t")\n<h3 id="PythonCheatSheettopic-12"> Backspace</h3>\nIt adds a backspace\nprint("\b")\n<h3 id="PythonCheatSheettopic-13"> Octal value</h3>\nIt represents the value of an octal number\nprint("\ooo")\n<h3 id="PythonCheatSheettopic-14"> Hex value</h3>\nIt represents the value of a hex number\nprint("xh")\n<h3 id="PythonCheatSheettopic-15"> Carriage Return</h3>\nCarriage return or \r will just work as you have shifted your cursor to the beginning of the string or line.\npint("\r")\n<h3 id="PythonCheatSheettopic-16"><br><pk>Strings</pk></h3>\nPython string is a sequence of characters, and each character can be individually accessed using its index.\n<h3 id="PythonCheatSheettopic-17"> String</h3>\nYou can create Strings by enclosing text in both forms of quotes - single quotes or double quotes.\nvariable_name = "String Data"\nexample\nstr="Shruti"\nprint("string is ",str)\n<h3 id="PythonCheatSheettopic-18"> Indexing</h3>\nThe position of every character placed in the string starts from 0th position ans step by step it ends at length-1 position\n<h3 id="PythonCheatSheettopic-19"> Slicing</h3>\nSlicing refers to obtaining a sub-string from the given string. The following code will include index 1, 2, 3, and 4 for the variable named <k>var_name</k>\nSlicing of the string can be obtained by the following syntax\nstring_var[int_start_value:int_stop_value:int_step_value]\nvar_name[1 : 5]\nhere start and step value are considered 0 and 1 respectively if not mentioned by the programmmer\n<h3 id="PythonCheatSheettopic-20"> isalnum() method</h3>\nReturns True if all the characters in the string are alphanumeric, else False\nstring_variable.isalnum()\n<h3 id="PythonCheatSheettopic-21"> isalpha() method</h3>\nReturns True if all the characters in the string are alphabets\nstring_variable.isalpha()\n<h3 id="PythonCheatSheettopic-22"> isdecimal() method</h3>\nReturns True if all the characters in the string are decimals\nstring_variable.isdecimal()\n<h3 id="PythonCheatSheettopic-23"> isdigit() method</h3>\nReturns True if all the characters in the string are digits\nstring_variable.isdigit()\n<h3 id="PythonCheatSheettopic-24"> islower() method</h3>\nReturns True if all characters in the string are lower case\nstring_variable.islower()\n<h3 id="PythonCheatSheettopic-25"> isspace() method</h3>\nReturns True if all characters in the string are whitespaces\nstring_variable.isspace()\n<h3 id="PythonCheatSheettopic-26"> isupper() method</h3>\nReturns True if all characters in the string are upper case\nstring_variable.isupper()\n<h3 id="PythonCheatSheettopic-27"> lower() method</h3>\nConverts a string into lower case equivalent\nstring_variable.lower()\n<h3 id="PythonCheatSheettopic-28"> upper() method</h3>\nConverts a string into upper case equivalent\nstring_variable.upper()\n<h3 id="PythonCheatSheettopic-29"> strip() method</h3>\nIt removes leading and trailing spaces in the string\nstring_variable.strip()\n<h3 id="PythonCheatSheettopic-30"><br><pk>List</pk></h3>\nA List in Python represents a list of comma-separated values of any data type between square brackets.\nvar_name = [element1, element2, ...]\nThese elements can be of different datatypes\n<h3 id="PythonCheatSheettopic-31"> Indexing</h3>\nThe position of every elements placed in the string starts from 0th position ans step by step it ends at length-1 position\nList is ordered,indexed,mutable and most flexible and dynamic collection of elements in python.\n<h3 id="PythonCheatSheettopic-32"> Empty List</h3>\nThis method allows you to create an empty list\nmy_list = []\n<h3 id="PythonCheatSheettopic-33"> index method</h3>\nReturns the index of the first element with the specified value\nlist.index(element)\n<h3 id="PythonCheatSheettopic-34"> append method</h3>\nAdds an element at the end of the list\nlist.append(element)\n<h3 id="PythonCheatSheettopic-35"> extend method</h3>\nAdd the elements of a given list (or any iterable) to the end of the current list\nlist.extend(iterable)\n<h3 id="PythonCheatSheettopic-36"> insert method</h3>\nAdds an element at the specified position\nlist.insert(position, element)\n<h3 id="PythonCheatSheettopic-37"> pop method</h3>\nRemoves the element at the specified position and returns it\nlist.pop(position)\n<h3 id="PythonCheatSheettopic-38"> remove method</h3>\nThe remove() method removes the first occurrence of a given item from the list\nlist.remove(element)\n<h3 id="PythonCheatSheettopic-39"> clear method</h3>\nRemoves all the elements from the list\nlist.clear()\n<h3 id="PythonCheatSheettopic-40"> count method</h3>\nReturns the number of elements with the specified value\nlist.count(value)\n<h3 id="PythonCheatSheettopic-41"> reverse method</h3>\nReverses the order of the list\nlist.reverse()\n<h3 id="PythonCheatSheettopic-42"> sort method</h3>\nSorts the list\nlist.sort(reverse=True|False)\n<h3 id="PythonCheatSheettopic-43"><br><pk>Tuples</pk></h3>\nTuples are represented as comma-separated values of any data type within parentheses.\n<h3 id="PythonCheatSheettopic-44"> Tuple Creation</h3>\nvariable_name = (element1, element2, ...)\nThese elements can be of different datatypes\n<h3 id="PythonCheatSheettopic-45"> Indexing</h3>\nThe position of every elements placed in the string starts from 0th position ans step by step it ends at length-1 position\nTuples are ordered,indexing,immutable and most secured collection of elements\nLets talk about some of the tuple methods:\n<h3 id="PythonCheatSheettopic-46"> count method</h3>\nIt returns the number of times a specified value occurs in a tuple\ntuple.count(value)\n<h3 id="PythonCheatSheettopic-47"> index method</h3>\nIt searches the tuple for a specified value and returns the position.\ntuple.index(value)\n<h3 id="PythonCheatSheettopic-48"><br><pk>Sets</pk></h3>\nA set is a collection of multiple values which is both unordered and unindexed. It is written in curly brackets.\n<h3 id="PythonCheatSheettopic-49"> Set Creation: Way 1</h3>\nvar_name = {element1, element2, ...}\n<h3 id="PythonCheatSheettopic-50"> Set Creation: Way 2</h3>\nvar_name = set([element1, element2, ...])\nSet is unordered,immutable,non-indexed type of collection.Duplicate elements are not allowed in sets.\n<h3 id="PythonCheatSheettopic-51"> Set Methods</h3>\nLets talk about some of the methods of sets:\n<h3 id="PythonCheatSheettopic-52"> add() method</h3>\nAdds an element to a set\nset.add(element)\n<h3 id="PythonCheatSheettopic-53"> clear() method</h3>\nRemove all elements from a set\nset.clear()\n<h3 id="PythonCheatSheettopic-54"> discard() method</h3>\nRemoves the specified item from the set\nset.discard(value)\n<h3 id="PythonCheatSheettopic-55"> intersection() method</h3>\nReturns intersection of two or more sets\nset.intersection(set1, set2 ... etc)\n<h3 id="PythonCheatSheettopic-56"> issubset() method</h3>\nChecks if a set is a subset of another set\nset.issubset(set)\n<h3 id="PythonCheatSheettopic-57"> pop() method</h3>\nRemoves an element from the set\nset.pop()\n<h3 id="PythonCheatSheettopic-58"> remove() method</h3>\nRemoves the specified element from the set\nset.remove(item)\n<h3 id="PythonCheatSheettopic-59"> union() method</h3>\nReturns the union of two or more sets\nset.union(set1, set2...)\n<h3 id="PythonCheatSheettopic-60"><br><pk>Dictionaries</pk></h3>\nThe dictionary is an unordered set of comma-separated key:value pairs, within {}, with the requirement that within a dictionary, no two keys can be the same.\n<h3 id="PythonCheatSheettopic-61"> Dictionary</h3>\n&lt;dictionary-name&gt; = {&lt;key&gt;: value, &lt;key&gt;: value ...}\nDictionary is ordered and mutable collection of elements.Dictionary allows duplicate values but not duplicate keys.\n<h3 id="PythonCheatSheettopic-62"> Empty Dictionary</h3>\nBy putting two curly braces, you can create a blank dictionary\nmydict={}\n<h3 id="PythonCheatSheettopic-63"> Adding Element to a dictionary</h3>\nBy this method, one can add new elements to the dictionary\n&lt;dictionary&gt;[&lt;key&gt;] = &lt;value&gt;\n<h3 id="PythonCheatSheettopic-64"> Updating Element in a dictionary</h3>\nIf a specified key already exists, then its value will get updated\n&lt;dictionary&gt;[&lt;key&gt;] = &lt;value&gt;\n<h3 id="PythonCheatSheettopic-65"> Deleting an element from a dictionary</h3>\ndel keyword is used to delete a specified key:value pair from the dictionary as follows:\ndel &lt;dictionary&gt;[&lt;key&gt;]\n<h3 id="PythonCheatSheettopic-66"> Dictionary Functions &amp; Methods</h3>\nBelow are some of the methods of dictionaries\n<h3 id="PythonCheatSheettopic-67"> len() method</h3>\nIt returns the length of the dictionary, i.e., the count of elements (key: value pairs) in the dictionary\nlen(dictionary)\n<h3 id="PythonCheatSheettopic-68"> clear() method</h3>\nRemoves all the elements from the dictionary\ndictionary.clear()\n<h3 id="PythonCheatSheettopic-69"> get() method</h3>\nReturns the value of the specified key\ndictionary.get(keyname)\n<h3 id="PythonCheatSheettopic-70"> items() method</h3>\nReturns a list containing a tuple for each key-value pair\ndictionary.items()\n<h3 id="PythonCheatSheettopic-71"> keys() method</h3>\nReturns a list containing the dictionary\'s keys\ndictionary.keys()\n<h3 id="PythonCheatSheettopic-72"> values() method</h3>\nReturns a list of all the values in the dictionary\ndictionary.values()\n<h3 id="PythonCheatSheettopic-73"> update() method</h3>\nUpdates the dictionary with the specified key-value pairs\ndictionary.update(iterable)\n<h3 id="PythonCheatSheettopic-74"><br><pk>Indentation</pk></h3>\nIn Python, indentation means the code is written with some spaces or tabs into many different blocks of code to indent it so that the interpreter can easily execute the Python code.\nIndentation is applied on conditional statements and loop control statements. Indent specifies the block of code that is to be executed depending on the conditions.\n<h3 id="PythonCheatSheettopic-75"><br><pk>Conditional Statements</pk></h3>\nThe if, elif and else statements are the conditional statements in Python, and these implement selection constructs (decision constructs).\n<h3 id="PythonCheatSheettopic-76"> if Statement</h3>\nif(conditional expression):\n statements\n<h3 id="PythonCheatSheettopic-77"> if-else Statement</h3>\nif(conditional expression):\n statements\nelse:\n statements\n<h3 id="PythonCheatSheettopic-78"> if-elif Statement</h3>\nif (conditional expression):\n statements\nelif (conditional expression):\n statements\nelse:\n statements\n<h3 id="PythonCheatSheettopic-79"> Nested if-else Statement</h3>\nif (conditional expression):\n if (conditional expression):\n  statements\n else:\n  statements\nelse:\n statements\nexample\na=15\nb=20\nc=12\nif(a&gt;b and a&gt;c):\n   print(a,"is greatest")\nelif(b&gt;c and b&gt;a):\n   print(b," is greatest")\nelse:\n print(c,"is greatest")\n<h3 id="PythonCheatSheettopic-80"><br><pk>Loops in Python</pk></h3>\nA loop or iteration statement repeatedly executes a statement, known as the loop body, until the controlling expression is false (0).\n<h3 id="PythonCheatSheettopic-81"> For Loop</h3>\nThe for loop of Python is designed to process the items of any sequence, such as a list or a string, one by one.\nfor &lt;variable&gt; in &lt;sequence&gt;:\n statements_to_repeat\nexample\nfor i in range(1,101,1):\n     print(i)\n<h3 id="PythonCheatSheettopic-82"> While Loop</h3>\nA while loop is a conditional loop that will repeat the instructions within itself as long as a conditional remains true.\nwhile &lt;logical-expression&gt;:\n loop-body\nexample\ni=1\nwhile(i&lt;=100):\n  print(i)\n  i=i+1\n<h3 id="PythonCheatSheettopic-83"> Break Statement</h3>\nThe break statement enables a program to skip over a part of the code. A break statement terminates the very loop it lies within.\nfor &lt;var&gt; in &lt;sequence&gt;:\n statement1\n if &lt;condition&gt;:\n  break\n statement2\nstatement_after_loop\nexample\nfor i in range(1,101,1):\n print(i ,end=" ")\n if(i==50):\n  break\n else:\n  print("Mississippi")\nprint("Thank you")\n   \n<h3 id="PythonCheatSheettopic-84"> Continue Statement</h3>\nThe continue statement skips the rest of the loop statements and causes the next iteration to occur.\nfor &lt;var&gt; in &lt;sequence&gt;:\n statement1\n if &lt;condition&gt; :\n  continue\n statement2\n statement3\n statement4\nexample\nfor i in [2,3,4,6,8,0]:\n if (i%2!=0):\n  continue\n print(i)\n<h3 id="PythonCheatSheettopic-85"><br><pk>Functions</pk></h3>\nA function is a block of code that performs a specific task. You can pass parameters into a function. It helps us to make our code more organized and manageable.\n<h3 id="PythonCheatSheettopic-86"> Function Definition</h3>\ndef my_function():\n    #statements\ndef keyword is used before defining the function.&nbsp;\n<h3 id="PythonCheatSheettopic-87"> Function Call</h3>\nmy_function()\nWhenever we need that block of code in our program simply call that function name whenever neeeded. If parameters are passed during defing the function we have to pass the parameters while calling that function\nexample\ndef add():    #function defination\n  a=10\n  b=20\n    print(a+b)\nadd()   #function call\n<h3 id="PythonCheatSheettopic-88"> Return statement in Python function</h3>\nThe function return statement return the specified value or data item to the caller.&nbsp;\nreturn [value/expression]\n<h3 id="PythonCheatSheettopic-89"> Arguments in python function</h3>\nArguments are the values passed inside the parenthesis of the function while defining as well as while calling.\ndef my_function(arg1,arg2,arg3....argn):\n    #statements\nmy_function(arg1,arg2,arg3....argn)\nexample\ndef add(a,b):\n   return a+b\nx=add(7,8)\nprint(x)\n<h3 id="PythonCheatSheettopic-90"><br><pk>File Handling</pk></h3>\nFile handling refers to reading or writing data from files. Python provides some functions that allow us to manipulate data in the files.\n<h3 id="PythonCheatSheettopic-91"> open() function</h3>\nvar_name = open("file name", " mode")\n<h3 id="PythonCheatSheettopic-92"> modes-</h3>\n<ol>\n<li><k>r</k>&nbsp;- to read the content from file</li>\n<li><k>w</k>&nbsp;- to write the content into file</li>\n<li><k>a</k>&nbsp;- to append the existing content into file</li>\n<li><k>r+:</k>&nbsp;&nbsp;To read and write data into the file. The previous data in the file will be overridden.</li>\n<li><k>w+:</k>&nbsp;To write and read data. It will override existing data.</li>\n<li><k>a+:</k>&nbsp;To append and read data from the file. It won’t override existing data.</li>\n</ol>\n<h3 id="PythonCheatSheettopic-93"> close() function</h3>\nvar_name.close()\n<h3 id="PythonCheatSheettopic-94"> read () function</h3>\nThe read functions contains different methods, read(),readline() and readlines()\nread() #return one big string\nIt returns a list of lines\nreadlines() #returns a list\nIt returns one line at a time\nreadline #returns one line at a time\n<h3 id="PythonCheatSheettopic-95"> write function</h3>\nThis function writes a sequence of strings to the file.\nwrite() #Used to write a fixed sequence of characters to a file\nIt is used to write a list of strings\nwritelines()\n<h3 id="PythonCheatSheettopic-96"><br><pk>Exception Handling</pk></h3>\nAn exception is an unusual condition that results in an interruption in the flow of a program.\n<h3 id="PythonCheatSheettopic-97"> try and except</h3>\nA basic try-catch block in python. When the try block throws an error, the control goes to the except block.\ntry:\n [Statement body block]\n raise Exception()\nexcept Exceptionname:\n [Error processing block]\n<h3 id="PythonCheatSheettopic-98"> else</h3>\nThe else block is executed if the try block have not raise any exception and code had been running successfully\ntry:\n  #statements\nexcept:\n  #statements\nelse:\n   #statements\n<h3 id="PythonCheatSheettopic-99"><br><pk>finally</pk></h3>\nFinally block will be executed even if try block of code has been running successsfully or except block of code is been executed. finally block of code will be executed compulsory\n<h3 id="PythonCheatSheettopic-100"><br><pk>Object Oriented Programming (OOPS)</pk></h3>\nIt is a programming approach that primarily focuses on using objects and classes. The objects can be any real-world entities.\n<h3 id="PythonCheatSheettopic-101"> class</h3>\nThe syntax for writing a class in python\nclass class_name:\n pass #statements\n<h3 id="PythonCheatSheettopic-102"> Creating an object</h3>\nInstantiating an object can be done as follows:\n&lt;object-name&gt; = &lt;class-name&gt;(&lt;arguments&gt;)\n<h3 id="PythonCheatSheettopic-103"> self parameter</h3>\nThe self parameter is the first parameter of any function present in the class. It can be of different name but this parameter is must while defining any function into class as it is used to access other data members of the class\n<h3 id="PythonCheatSheettopic-104"> class with a constructor</h3>\nConstructor is the special function of the class which is used to initialize the objects. The syntax for writing a class with the constructor in python\nclass CodeWithHarry:\n # Default constructor\n def __init__(self):\n  self.name = "CodeWithHarry"\n # A method for printing data members\n def print_me(self):\n  print(self.name)\n<h3 id="PythonCheatSheettopic-105"> Inheritance in python</h3>\nBy using inheritance, we can create a class which uses all the properties and behavior of another class. The new class is known as a derived class or child class, and the one whose properties are acquired is known as a base class or parent class.\nIt provides the re-usability of the code.\nclass Base_class:\n    pass\nclass derived_class(Base_class):\n  pass\n<h3 id="PythonCheatSheettopic-106"> Types of inheritance-</h3>\n<li>Single inheritance</li>\n<li>Multiple inheritance</li>\n<li>Multilevel inheritance</li>\n<li>Hierarchical inheritance</li>\n<h3 id="PythonCheatSheettopic-107"> filter function</h3>\nThe filter function allows you to process an iterable and extract those items that satisfy a given condition\nfilter(function, iterable)\n<h3 id="PythonCheatSheettopic-108"> issubclass function</h3>\nUsed to find whether a class is a subclass of a given class or not as follows\nissubclass(obj, classinfo) # returns true if obj is a subclass of classinfo\n<h3 id="PythonCheatSheettopic-109"><br><pk>Iterators and Generators</pk></h3>\nHere are some of the advanced PythonCheatSheettopics of the Python programming language like iterators and generators\n<h3 id="PythonCheatSheettopic-110"> Iterator</h3>\nUsed to create an iterator over an iterable\niter_list = iter([\'Harry\', \'Aakash\', \'Rohan\']) \nprint(next(iter_list)) \nprint(next(iter_list)) \nprint(next(iter_list))\n<h3 id="PythonCheatSheettopic-111"> Generator</h3>\nUsed to generate values on the fly\n# A simple generator function\ndef my_gen():\n n = 1\n print(\'This is printed first\')\n # Generator function contains yield statements\n yield n\n n += 1\n print(\'This is printed second\')\n yield n\n n += 1\n print(\'This is printed at last\')\n yield n\n<h3 id="PythonCheatSheettopic-112"><br><pk>Decorators</pk></h3>\nDecorators are used to modifying the behavior of a function or a class. They are usually called before the definition of a function you want to decorate.\n<h3 id="PythonCheatSheettopic-113"> property Decorator (getter)</h3>\n@property\ndef name(self):\n return self.__name\n<h3 id="PythonCheatSheettopic-114"> setter Decorator</h3>\nIt is used to set the property \'name\'\n@name.setter\ndef name(self, value):\n self.__name=value\n<h3 id="PythonCheatSheettopic-115"> deleter Decorator</h3>\nIt is used to delete the property \'name\'\n@name.deleter #property-name.deleter decorator\ndef name(self, value):\n print(\'Deleting..\')\n del self.__name\n',
'<h2>杀手级的自动化脚本</h2>\n<div id="killerapptoc" class="toc"><a href="#killerapptopic-0" target="_self">1. 图片优化器</a><br><a href="#killerapptopic-1" target="_self">2. 视频优化器</a><br><a href="#killerapptopic-2" target="_self">3. PDF转图片</a><br><a href="#killerapptopic-3" target="_self">4. 获取API数据</a><br><a href="#killerapptopic-4" target="_self">5. 电池指示灯</a><br><a href="#killerapptopic-5" target="_self">6. 语法固定器</a><br><a href="#killerapptopic-6" target="_self">7. 拼写修正</a><br><a href="#killerapptopic-7" target="_self">8. 互联网下载器</a><br><a href="#killerapptopic-8" target="_self">9. 获取世界新闻</a><br><a href="#killerapptopic-9" target="_self">10. PySide2 GUI</a><br></div></center><br><br>\n<h3 id="killerapptopic-0">1. 图片优化器</h3>\n# 图片优化器\n# 首先安装Pillow库\n# pip install Pillow\nfrom PIL import Image, ImageEnhance, ImageFilter, ImageOps\n# 打开一张图片\nim = Image.open("Image1.jpg")\n# 裁剪\nim_cropped = im.crop((34, 23, 100, 100))\n# 调整大小\nim_resized = im.resize((50, 50))\n# 翻转\nim_flipped = im.transpose(Image.FLIP_LEFT_RIGHT)\n# 模糊\nim_blurred = im.filter(ImageFilter.BLUR)\n# 锐化\nim_sharpened = im.filter(ImageFilter.SHARPEN)\n# 设置亮度\nenhancer = ImageEnhance.Brightness(im)\nim_brightened = enhancer.enhance(1.5)  # 增加亮度50%\n# 保存处理后的图片\nim_cropped.save("image_cropped.jpg")\nim_resized.save("image_resized.jpg")\n这个脚本使用Pillow库来处理图像，包括裁剪、调整大小、翻转和调整亮度等操作。这些功能允许用户快速编辑照片，而不是依赖复杂的软件工具。\n假设你刚刚从旅行中回来，有很多照片需要整理。你想把某些照片裁剪成合适的尺寸并提升亮度，以便分享给朋友。这个脚本可以帮助你快速完成这些任务，让你的照片看起来更加专业。\n<h3 id="killerapptopic-1">2. 视频优化器</h3>\n# 视频优化器\n# 首先安装MoviePy库\n# pip install moviepy\nimport moviepy.editor as pyedit\n# 加载视频\nvideo = pyedit.VideoFileClip("vid.mp4")\n# 修剪视频\nvid1 = video.subclip(0, 10)\nvid2 = video.subclip(20, 40)\nfinal_vid = pyedit.concatenate_videoclips([vid1, vid2])\n# 加速视频\nfinal_vid = final_vid.speedx(2)\n# 添加音频到视频\naud = pyedit.AudioFileClip("bg.mp3")\nfinal_vid = final_vid.set_audio(aud)\n# 保存视频\nfinal_vid.write_videofile("final_video.mp4")\n上面的代码利用MoviePy库处理视频，能够修剪、添加音频和加速视频等。这种方式使得视频编辑变得简单高效，无需复杂的界面操作。\n想象一下，你拍了一段很长的旅行视频，但只想分享其中的一小部分。使用这个脚本，你可以轻松剪辑出精彩片段，并为其添加背景音乐，制作出一个令人印象深刻的短视频与家人和朋友分享。\n<h3 id="killerapptopic-2">3. PDF转图片</h3>\n# PDF转图片\n# 首先安装PyMuPDF库\n# pip install PyMuPDF\nimport fitz\ndef pdf_to_images(pdf_file):\n doc = fitz.open(pdf_file)\n for p in doc:\n  pix = p.get_pixmap()\n  output = f"page{p.number}.png"\n  pix.writePNG(output)\n# 转换PDF文件\npdf_to_images("test.pdf")\n此脚本使用PyMuPDF库将PDF文件的每一页转换为PNG格式的图片。这对于需要从PDF中提取图像或文本内容的情况非常有用。\n如果你收到了一份包含多张图片的PDF文档，并希望将它们单独保存以便查看，可以使用这个脚本快速提取所有页面，避免手动截屏的麻烦。\n<h3 id="killerapptopic-3">4. 获取API数据</h3>\n# 获取API数据\n# 首先安装requests库\n# pip install requests\nimport requests\n# 设置API URL\nurl = "https://api.github.com/users/psf/repos"\n# 发送GET请求\nresponse = requests.get(url)\n# 检查请求是否成功\nif response.status_code == 200:\n repos = response.json()  # 将返回的JSON数据解析为Python对象\n for repo in repos:\n  print(f"Repository Name: {repo[\'name\']}, Stars: {repo[\'stargazers_count\']}")\nelse:\n print(f"请求失败，状态码: {response.status_code}")\n该脚本使用requests库从GitHub API获取用户的仓库信息，检查请求状态，并提取相关数据。API交互是现代Web应用程序开发的重要组成部分。\n假设你正在评估一款开源项目的受欢迎程度。通过这个脚本，你可以轻松获取仓库名称和星标数量，从而快速判断该项目的活跃度和社区支持。\n<h3 id="killerapptopic-4">5. 电池指示灯</h3>\n# 电池指示灯\n# 首先安装plyer和psutil库\n# pip install plyer psutil\nfrom plyer import notification\nimport psutil\nfrom time import sleep\nwhile True:\n battery = psutil.sensors_battery()\n life = battery.percent\n if life &lt; 20:\n  notification.notify(\n   title="电池低",\n   message="请连接电源!",\n   timeout=10\n  )\n sleep(60)  # 每60秒检查一次\n此脚本使用psutil库监测电池状态，并通过plyer库发送通知。当电量低于20%时，它会提醒用户充电，这是一项非常实用的系统监控功能。\n你正在进行在线会议，突然发现电池电量不足。这个脚本能够及时提醒你充电，确保不会因为电量耗尽而影响工作进度。\n<h3 id="killerapptopic-5">6. 语法固定器</h3>\n# 语法固定器\n# 首先安装happytransformer库\n# pip install happytransformer\nfrom happytransformer import HappyTextToText as HappyTTT\nfrom happytransformer import TTSettings\ndef grammar_fixer(text):\n grammar_model = HappyTTT("T5", "prithivida/grammar_error_correcter_v1")\n config = TTSettings(do_sample=True, top_k=10, max_length=100)\n corrected = grammar_model.generate_text(text, args=config)\n print("Corrected Text:", corrected.text)\ntext_to_fix = "This is smple tet we how know this"\ngrammar_fixer(text_to_fix)\n这个脚本使用HappyTransformer模型检查并修正文本中的语法错误。它利用机器学习算法来识别并纠正错误，使写作更加流畅。\n如果你在撰写一篇文章但对语法不太自信，这个脚本可以帮助你快速检查并修正错误，确保你的文本更加专业。\n<h3 id="killerapptopic-6">7. 拼写修正</h3>\n# 拼写修正\n# 首先安装textblob库\n# pip install textblob\nfrom textblob import TextBlob\n# 修正段落拼写\ndef fix_paragraph(paragraph):\n sentence = TextBlob(paragraph)\n correction = sentence.correct()\n print(correction)\n# 修正单词拼写\ndef fix_word(word):\n from textblob import Word\n corrected_word = Word(word).correct()\n print(corrected_word)\nfix_paragraph("This is sammple tet!!")\nfix_word("maangoo")\n该脚本利用TextBlob库修正文本中的拼写错误。不仅可以处理整段文字，还能逐个单词进行修正，提高书写质量。\n当你在撰写社交媒体帖子时，如果担心拼写错误可能影响阅读体验，可以使用这个脚本来检查和修正文本，提高你的表达效果。\n<h3 id="killerapptopic-7">8. 互联网下载器</h3>\n# 互联网下载器\n# 首先安装internetdownloadmanager库\n# pip install internetdownloadmanager\nimport internetdownloadmanager as idm\ndef downloader(url, output):\n pydownloader = idm.Downloader(worker=20,\n           part_size=1024*1024*10,\n           resumable=True,)\n pydownloader.download(url, output)\ndownloader("http://example.com/image.jpg", "image.jpg")\ndownloader("http://example.com/video.mp4", "video.mp4")\n这个脚本创建了一个简单的下载管理器，使用internetdownloadmanager库实现大文件下载。它支持多线程，能够提高下载速度。\n在下载大文件或多个文件时，使用这个脚本可以快速且高效地完成下载任务，尤其是在网络不稳定的情况下，能够保证下载的完整性和效率。\n<h3 id="killerapptopic-8">9. 获取世界新闻</h3>\n# 获取世界新闻\n# 首先安装requests库\n# pip install requests\nimport requests\nApiKey = "YOUR_API_KEY"\nurl = f"https://api.worldnewsapi.com/search-news?text=hurricane&amp;api-key={ApiKey}"\nheaders = {\n \'Accept\': \'application/json\'\n}\nresponse = requests.get(url, headers=headers)\nprint("News:", response.json())\n该脚本使用requests库从新闻API中获取实时新闻数据。通过设置HTTP请求参数，可以灵活获取特定主题的新闻信息。\n如果你对当前事件感兴趣，使用这个脚本可以快速获取最新的新闻报道，从而让你更好地了解世界动态，不必手动搜索各大新闻网站。\n<h3 id="killerapptopic-9">10. PySide2 GUI</h3>\n# PySide2 GUI\n# 首先安装PySide2库\n# pip install PySide2\nfrom PySide6.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QLineEdit, QRadioButton, QCheckBox, QSlider, QProgressBar\nimport sys\napp = QApplication(sys.argv)\nwindow = QWidget()\n# 调整窗口大小\nwindow.resize(500, 500)\n# 设置窗口标题\nwindow.setWindowTitle("PySide2 Window")\n# 添加按钮\nbutton = QPushButton("Click Me", window)\nbutton.move(200, 200)\n# 添加标签\nlabel = QLabel("Hello Medium", window)\nlabel.move(200, 150)\n# 添加输入框\ninput_box = QLineEdit(window)\ninput_box.move(200, 250)\n# 添加单选按钮\nradio_button = QRadioButton("Radio Button", window)\nradio_button.move(200, 300)\n# 添加复选框\ncheckbox = QCheckBox("Checkbox", window)\ncheckbox.move(200, 350)\n# 添加滑块\nslider = QSlider(window)\nslider.move(200, 400)\n# 添加进度条\nprogress_bar = QProgressBar(window)\nprogress_bar.move(200, 450)\n# 显示窗口\nwindow.show()\nsys.exit(app.exec())\n这个脚本使用PySide2库创建了一个简单的图形用户界面（GUI）应用程序。它演示了如何添加各种GUI组件，如按钮、标签、输入框等。\n如果你想为你的项目或日常工具创建一个用户友好的界面，使用这个脚本可以快速搭建起一个界面，让用户可以方便地进行交互。\n',
'<h2>Python Stock Trend Turning Point Detection</h2>\n<center><div id="TurningPointtoc" class="toc"><a href="#TurningPointtopic-0" target="_self">fetch_day_klines</a><br><a href="#TurningPointtopic-1" target="_self">calculate_wma</a><br><a href="#TurningPointtopic-2" target="_self">calculate_bollinger_bands</a><br><a href="#TurningPointtopic-3" target="_self">detect_turning_points</a><br><a href="#TurningPointtopic-4" target="_self">plot_signals</a><br><a href="#TurningPointtopic-5" target="_self">Example usage</a><br><a href="#TurningPointtopic-6" target="_self">Key Functions Explanation:</a><br></div></center><br><br>\n\nusing Bollinger Bands and Weighted Moving Average\n\nimport requests\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n<o id="TurningPointtopic-0">fetch_day_klines</o>\ndef fetch_day_klines(stock_code, count=100):\n """\n Fetch day klines data from the given URL\n :param stock_code: stock code (e.g., \'hk00060\')\n :param count: number of data points to fetch\n :return: pandas DataFrame with stock data\n """\n url = f"http://web.ifzq.gtimg.cn/appstock/app/hkfqkline/get?_var=kline_dayqfq¶m={stock_code},day,,,{count},qfq"\n response = requests.get(url)\n data = response.json()\n \n # Parse the JSON data (structure might need adjustment based on actual response)\n klines = data[\'data\'][stock_code][\'day\']\n df = pd.DataFrame(klines, columns=[\'date\', \'open\', \'close\', \'high\', \'low\', \'volume\'])\n \n # Convert columns to numeric\n for col in [\'open\', \'close\', \'high\', \'low\', \'volume\']:\n  df[col] = pd.to_numeric(df[col])\n \n df[\'date\'] = pd.to_datetime(df[\'date\'])\n df.set_index(\'date\', inplace=True)\n return df\n<o id="TurningPointtopic-1">calculate_wma</o>\ndef calculate_wma(data, window=20):\n """\n Calculate Weighted Moving Average\n :param data: pandas Series with price data\n :param window: window size for WMA\n :return: pandas Series with WMA values\n """\n weights = np.arange(1, window + 1)\n wma = data.rolling(window).apply(lambda x: np.dot(x, weights) / weights.sum(), raw=True)\n return wma\n<o id="TurningPointtopic-2">calculate_bollinger_bands</o>\ndef calculate_bollinger_bands(data, window=20, num_std=2):\n """\n Calculate Bollinger Bands\n :param data: pandas Series with price data\n :param window: window size for calculations\n :param num_std: number of standard deviations for bands\n :return: tuple (middle_band, upper_band, lower_band)\n """\n middle_band = data.rolling(window).mean()\n std = data.rolling(window).std()\n upper_band = middle_band + (std * num_std)\n lower_band = middle_band - (std * num_std)\n return middle_band, upper_band, lower_band\n<o id="TurningPointtopic-3">detect_turning_points</o>\ndef detect_turning_points(df, window=20, num_std=2):\n """\n Detect potential trend turning points using Bollinger Bands and WMA\n :param df: pandas DataFrame with stock data\n :param window: window size for indicators\n :param num_std: number of standard deviations for Bollinger Bands\n :return: DataFrame with signals\n """\n close = df[\'close\']\n \n # Calculate indicators\n wma = calculate_wma(close, window)\n middle_band, upper_band, lower_band = calculate_bollinger_bands(close, window, num_std)\n \n # Initialize signals\n signals = pd.DataFrame(index=df.index)\n signals[\'price\'] = close\n signals[\'wma\'] = wma\n signals[\'middle_band\'] = middle_band\n signals[\'upper_band\'] = upper_band\n signals[\'lower_band\'] = lower_band\n \n # Generate signals\n signals[\'price_cross_wma\'] = np.where(close &gt; wma, 1, -1)\n signals[\'price_upper_band\'] = np.where(close &gt;= upper_band, 1, 0)\n signals[\'price_lower_band\'] = np.where(close &lt;= lower_band, -1, 0)\n \n # Combined signal (1 for potential downward turn, -1 for potential upward turn)\n signals[\'signal\'] = 0\n signals.loc[(signals[\'price_cross_wma\'] == -1) &amp; (signals[\'price_upper_band\'] == 1), \'signal\'] = 1\n signals.loc[(signals[\'price_cross_wma\'] == 1) &amp; (signals[\'price_lower_band\'] == -1), \'signal\'] = -1\n \n return signals\n<o id="TurningPointtopic-4">plot_signals</o>\ndef plot_signals(df, signals):\n """\n Plot the stock price with indicators and signals\n :param df: original DataFrame\n :param signals: DataFrame with signals\n """\n plt.figure(figsize=(14, 7))\n \n # Plot price and indicators\n plt.plot(df.index, df[\'close\'], label=\'Close Price\', color=\'blue\', alpha=0.5)\n plt.plot(signals.index, signals[\'wma\'], label=f\'WMA {20}\', color=\'green\')\n plt.plot(signals.index, signals[\'upper_band\'], label=f\'Upper Band\', color=\'red\', linestyle=\'--\')\n plt.plot(signals.index, signals[\'lower_band\'], label=f\'Lower Band\', color=\'red\', linestyle=\'--\')\n \n # Plot signals\n plt.scatter(signals[signals[\'signal\'] == 1].index, \n    df.loc[signals[signals[\'signal\'] == 1].index, \'close\'], \n    label=\'Potential Down Turn\', marker=\'v\', color=\'red\', s=100)\n plt.scatter(signals[signals[\'signal\'] == -1].index, \n    df.loc[signals[signals[\'signal\'] == -1].index, \'close\'], \n    label=\'Potential Up Turn\', marker=\'^\', color=\'green\', s=100)\n \n plt.title(\'Stock Price with Turning Point Signals\')\n plt.xlabel(\'Date\')\n plt.ylabel(\'Price\')\n plt.legend()\n plt.grid()\n plt.show()\n\n<o id="TurningPointtopic-5">Example usage</o>\nif __name__ == "__main__":\n stock_code = \'hk00060\'\n df = fetch_day_klines(stock_code)\n signals = detect_turning_points(df)\n plot_signals(df, signals)\n \n # Print detected signals\n print("Detected Turning Points:")\n print(signals[signals[\'signal\'] != 0][[\'price\', \'signal\']])\n\n<o id="TurningPointtopic-6">Key Functions Explanation:</o>\n1. <y>fetch_day_klines()</y>:\n- Fetches historical stock data from the provided URL\n- Returns a pandas DataFrame with date, open, close, high, low, and volume\n\n2. <y>calculate_wma()</y>:\n- Computes the Weighted Moving Average where more recent prices have greater weight\n- Helps identify the trend direction with less lag than SMA\n\n3. <y>calculate_bollinger_bands()</y>:\n- Calculates the middle band (SMA), upper band (SMA + std dev), and lower band (SMA - std dev)\n- Helps identify overbought and oversold conditions\n\n4. <y>detect_turning_points()</y>:\n- Combines WMA and Bollinger Bands to generate signals\n- Potential downward turn when:\n - Price crosses below WMA\n - Price is at or above upper Bollinger Band\n- Potential upward turn when:\n - Price crosses above WMA\n - Price is at or below lower Bollinger Band\n\n5. <y>plot_signals()</y>:\n- Visualizes the price, indicators, and detected signals\n\n## How to Interpret the Signals:\n- <y>Potential Down Turn (red downward triangle)</y>: Consider taking profits or preparing for a possible trend reversal downward\n- <y>Potential Up Turn (green upward triangle)</y>: Consider looking for buying opportunities or preparing for a possible trend reversal upward\n\nNote: This is a technical analysis tool and should be used in conjunction with other indicators and fundamental analysis for better results. Always backtest any strategy before applying it to live trading.\n',
]
