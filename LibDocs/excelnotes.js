var excelnotes = [
'<h2>some excel notes</h2>\n<a href="https://www.youtube.com/watch?v=Y3dLNYOfFDA" class="whitebut ">Excel VBA</a>\n<a href="https://www.youtube.com/watch?v=wg3R5LdQ56k&list=PL7enJ2-v6SPm-EHMuRMCG7R7C-vXQugNM" class="whitebut ">Excel 入門</a>\n<a href="https://www.youtube.com/watch?v=Y3dLNYOfFDA" class="whitebut ">解決 Excel 任何疑難雜症</a>\n<a href="https://www.youtube.com/watch?v=pwwL80q2txg" class="whitebut ">庫存出入管理 + 條碼合併列印 + 動態商品圖片</a>\n<a href="https://www.youtube.com/watch?v=wIHuccuMD50" class="whitebut ">EXCEL進銷存+生管系統</a>\n<a href="https://www.youtube.com/watch?v=Mzddp3-SDhw" class="whitebut ">用 Excel 打造一套簡易訂單系統</a>\n\n',
'<h2>some functions</h2>\n<a href="https://corporatefinanceinstitute.com/resources/excel/functions/">Excel Functions</a>\n<pre>\n\n=MATCH(B115,C$1:C$128,0)\n\n=COUNTIF(D1:D128,"#N/A")\n\n',
'<h2>pivot table and Contingency table</h2>\n<a href="https://www.youtube.com/watch?v=PdJzy956wo4" class="whitebut ">Youtube Pivot Table in Excel</a>\n<k>Pivot tables</k> are one of Excel\'s most powerful features.\n\nA pivot table is a table of values which are aggregations of groups of individual values from a more extensive table within one or more discrete categories.\n\nA pivot table allows you to extract the significance from a large, detailed data set.\nIt is an interactive way to quickly summarize large amounts of data.\n\nPivot: 最重要的 中心 核心\n重要数据分析表 (数据透视表 樞紐表 语无伦次翻译)\n汇总和分析数据的表格。\n匯總其它表的數據。\n可以对数据进行排序、计数、求和等操作，帮助用户快速找到数据的关键信息。\n\n<img src="https://cdn.ablebits.com/_img-blog/pivot-tables/pivot-table-excel.png">\n<br>\n<k>Contingency table</k>\nA contingency table is a data table that compares two variables.\nIn the contingency table, one data set is populated in rows, while the other data set is populated in columns.\nValues of the cells where the rows and columns intersect can suggest whether or not the two sets are correlated.\n(In plain words, it is just a simple table.)\n\n<img src="https://www.researchgate.net/profile/Chris-Lam-3/publication/273118770/figure/tbl8/AS:668366645768201@1536362434440/SAMPLE-CONTINGENCY-TABLE-FOR-CA.png">\n\n透視表與列聯表 Contingency table\n也稱作交叉列表 cross tabulation 交叉表 crosstab\n\n透視表被認為更為動態，可以在其上執行某些動作；\n而列聯表是靜態顯示數據。\n\nContingency table\n列联表 可能性：\n用于显示两个或多个分类变量之间关系的表格，通常用于统计分析和概率论。\n\nContingency\n可能发生的事，不测事件；应急措施，应急储备；应急开支；可能性，意外\n意外事故\n同义词： possibility\n\n=COUNTA(D1:D128)\n\n',
'<h2>Shortcuts to quickly lock or unlock cells in Excel</h2>\nTo lock a cell, simply select the cell and press the Ctrl + 1 keys. \nTo unlock a cell, select the cell and press the Ctrl + 2 keys. \nYou can also lock or unlock multiple cells at once by selecting them all and then pressing the appropriate shortcut key.\n\n',
'<h2>Excel Shortcuts</h2>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-excel-delete-row">How to Quickly Delete a Row in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-autosum-in-excel">25 time-saving Excel shortcuts</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-to-get-to-bottom-of-data">The Best Excel Shortcut to Quickly Get to the Bottom of Your Data</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-match-destination-formatting-shortcut">The 5 Best Excel Match Destination Formatting Shortcuts</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-add-a-comment-in-excel">Shortcut to Add a Comment in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/date-shortcut-in-excel">"The Top 5 Date Shortcuts in Excel That Will Save You Time"</a>\n<a href="https://www.causal.app/excel-shortcuts/column-width-shortcut-excel">25 column width shortcuts in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-keyboard-shortcut-filter">How to Use the Filter Keyboard Shortcut in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-highlight-excel">Shortcut to Highlight All Cells in an Excel Worksheet</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-for-absolute-reference-excel">5 Time-Saving Shortcuts for Absolute Cell References in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-strike-through-shortcut">The Excel Strike Through Shortcut You Need to Know</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-keyboard-shortcut-for-insert-row">The Best Excel Keyboard Shortcuts for Inserting Rows</a>\n<a href="https://www.causal.app/excel-shortcuts/group-cells-shortcut-excel">10 Grouping Shortcuts in Excel You Need to Know</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-go-to-tab-shortcut">How to Use the Excel Go To Tab Shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-enter-cell">The Top 10 Excel Shortcuts for Entering Data Into Cells</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-show-all-formulas-in-excel">5 Easy Ways to Show Formulas in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/lower-case-excel-shortcut">15 Lower Case Excel Shortcuts That Will Make Your Life Easier</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-key-to-highlight-in-excel">The Shortcut Key to Highlighting Data in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-bottom-of-data">Excel Shortcut to Quickly Navigate to the Bottom of Your Data</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-cheat-sheet-pdf">The Top 25 Excel Shortcuts You Need to Know</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-create-excel-shortcut-on-desktop">How to Create a Desktop Shortcut for Microsoft Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-capitalize-in-excel-shortcut">The Best Way to Capitalize in Excel: A Shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-hide-cells-in-excel">15 Excel Shortcuts for Hiding Cells, Rows, and Columns</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-hide-in-excel">The Best Shortcut to Hiding Data in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-transpose">Excel Shortcut: How to Transpose Data</a>\n<a href="https://www.causal.app/excel-shortcuts/find-shortcut-in-excel">15 shortcuts to help you find your way around Microsoft Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/search-shortcut-excel">How to Use Search Shortcuts in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/keyboard-shortcut-to-edit-a-cell-in-excel">48 Keyboard Shortcuts for Editing Cells in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-excel">The best shortcut keys for Excel revealed</a>\n<a href="https://www.causal.app/excel-shortcuts/show-formulas-in-excel-shortcut-key-mac">The Best Shortcut Keys to Show Formulas in Excel (Mac)</a>\n<a href="https://www.causal.app/excel-shortcuts/merge-shortcut-in-excel">How to Merge Cells in Excel: The Ultimate Guide</a>\n<a href="https://www.causal.app/excel-shortcuts/select-range-in-excel-shortcut">15 Select Range in Excel Shortcuts You Need to Know</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-switch-worksheet-shortcut">7 Excel Shortcuts for Switching Worksheets</a>\n<a href="https://www.causal.app/excel-shortcuts/keyboard-shortcut-to-zoom-in-excel">Zoom In on Your Data: 5 Keyboard Shortcuts for Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-to-make-all-cells-fit-text">How to Use the Excel Autofit Column Width Shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/keyboard-shortcut-to-add-filter-in-excel">25 Keyboard Shortcuts for Filtering Data in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/pivot-table-shortcut-excel">Pivot Table Shortcut Cheat Sheet for Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/hide-columns-excel-shortcut">15 Excel Shortcuts for the Busy Professional</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-lock-cells-in-excel-keyboard-shortcut">How to Lock Cells in Excel: Keyboard Shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-add-filter-shortcut">The Best Excel Shortcut for Adding a Filter</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-zoom-keyboard-shortcut">The Best Excel Zoom Keyboard Shortcuts</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-autofill-shortcut">Master the Excel Autofill Shortcut to Save Time on Data Entry</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-for-dollar-sign">15 Excel Shortcuts for the Dollar Sign</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-remove-filter-in-excel">How to Remove Filters in Excel: A Quick Guide</a>\n<a href="https://www.causal.app/excel-shortcuts/unfilter-excel-shortcut">The Unfilter Excel Shortcut You Need to Know</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-search-in-excel-sheet-shortcut">How to search in excel sheet shortcut - The definitive guide</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-size-excel">Get a shortcut to the size function in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-open-macro-in-excel">How to create a shortcut to open a macro in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-to-hide">The Excel Shortcut to Hiding Your Data</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-key-for-strikethrough">15 Excel Shortcut Keys for Strikethrough</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-keyboard-shortcut-to-fill-color">19 Excel Keyboard Shortcuts for Formatting Cells &amp; Data</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-merge-across-shortcut">How to Use the Excel Merge Across Shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/hide-column-excel-shortcut">15 Excel Shortcuts for the Busy Professional</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-unhide-cells-in-excel-shortcut">How to Unhide Cells in Excel Shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/save-shortcut-excel">How to Save a Shortcut to Excel on Your Desktop</a>\n<a href="https://www.causal.app/excel-shortcuts/mac-excel-shortcut-f4">20+ Mac Excel Shortcuts That Will Save You Time</a>\n<a href="https://www.causal.app/excel-shortcuts/switch-tab-excel-shortcut">15+ Excel Tab Shortcuts for Fast Navigation</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-to-center-text">19 Excel Shortcuts for the Busy Professional</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-color-a-cell-in-excel">The Top 5 Ways to Quickly Color a Cell in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-chart-shortcut">The Top 10 Excel Chart Shortcuts You Need to Know</a>\n<a href="https://www.causal.app/excel-shortcuts/thick-outside-borders-excel-shortcut">3 easy steps to creating thick outside borders in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-select-a-column-in-excel-shortcut">How to Select a Column in Excel: The Ultimate Guide</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-for-hiding-columns-in-excel">The Best Shortcut for Hiding Columns in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-to-strikethrough-text">Excel Shortcut to Strike Through Text</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-create-table-shortcut">Top 5 Excel Shortcuts for Creating Tables</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-redo-last-action">Excel Shortcut: Redo Last Action</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-select-a-row-in-excel-shortcut">How to Select a Row in Excel Shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-indent-in-excel">How to indent in Excel: The shortcut you need to know</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-lock-formula-in-excel">A Shortcut to Locking Formulas in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/replace-shortcut-excel">15 Tips to Replace a Shortcut in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/todays-date-shortcut-excel">How to create a shortcut to today\'s date in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/paste-values-shortcut-excel-mac">Paste values shortcut excel mac: How to use it to save time</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-lock-cells-in-excel-mac-shortcut">How to lock cells in excel mac shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/switch-tabs-excel-shortcut">15 Keyboard Shortcuts for Switching Tabs in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/cell-lock-shortcut-excel">25 Cell Lock Shortcuts in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/clear-filters-excel-shortcut">The Best Clear Filters Excel Shortcut for Your Workflow</a>\n<a href="https://www.causal.app/excel-shortcuts/delete-columns-in-excel-shortcut">15 Keyboard Shortcuts for Deleting Rows and Columns in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-key-for-hide-in-excel">10 Shortcut Keys for Hiding in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-to-expand-all-columns">15 essential Excel shortcuts for expanding columns</a>\n<a href="https://www.causal.app/excel-shortcuts/keyboard-shortcut-excel-edit-cell">15 Keyboard Shortcuts for Editing Cells in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/keyboard-shortcut-to-strikethrough-text-in-excel">How to Use the Strikethrough Keyboard Shortcut in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-keys-cheat-sheet">Excel Shortcut Keys Cheat Sheet: The Ultimate Guide</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-for-merge-in-excel">The Best Shortcut for Merging Data in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-insert-keyboard-shortcut">Excel Keyboard Shortcuts: The Complete Guide</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-for-drop-down-list-in-excel">The best shortcut for drop down list in excel</a>\n<a href="https://www.causal.app/excel-shortcuts/new-sheet-excel-shortcut">15 essential Excel shortcuts for sheets and tabs</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-autosum-shortcut-mac">How to Use the AutoSum Shortcut on a Mac in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/keyboard-shortcut-fill-color-excel">How to Use Keyboard Shortcuts to Fill Colors in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/absolute-reference-excel-mac-shortcut">The Absolute Reference Excel Mac Shortcut That Every User Needs to Know</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-for-replace">7 Excel Shortcuts for Replace You Didn\'t Know</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-help-shortcut">15 Excel Shortcuts That Will Help You Get Your Work Done Faster</a>\n<a href="https://www.causal.app/excel-shortcuts/excel-shortcut-for-color-fill">Excel Shortcut for Color Fill: How to Use the Paint Bucket Tool in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-merge-and-center-excel">The best shortcut to merge and center data in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/what-is-the-excel-shortcut-for-insert-row">The Excel Shortcut for Inserting a Row</a>\n<a href="https://www.causal.app/excel-shortcuts/how-to-delete-only-filtered-rows-in-excel-shortcut">How to delete only filtered rows in excel shortcut</a>\n<a href="https://www.causal.app/excel-shortcuts/group-shortcut-in-excel">How to create a group shortcut in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-for-editing-cell-in-excel">How to Quickly Edit a Cell in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/strikethrough-text-in-excel-shortcut">The best strikethrough text shortcut in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/freeze-top-row-excel-shortcut">The Best Shortcut to Freeze the Top Row in Excel</a>\n<a href="https://www.causal.app/excel-shortcuts/shortcut-to-anchor-cells-in-excel">The ultimate shortcut to quickly anchor cells in Excel</a>\n\n',
'<h2>papaya tutorials</h2>\n<a href="https://www.youtube.com/watch?v=wg3R5LdQ56k">01：Excel 入門</a>\n<a href="https://www.youtube.com/watch?v=uTfjh3P9suk">02: Table Design & Automatic Sum</a>\n<a href="https://www.youtube.com/watch?v=fhIwXnZBth0">03：凍結窗格 & 分割視窗</a>\n<a href="https://www.youtube.com/watch?v=HNjZdVJ845Q">04：資料排序</a>\n<a href="https://www.youtube.com/watch?v=4izfNPmZGiY">05：資料篩選</a>\n<a href="https://www.youtube.com/watch?v=44ldMvpEEGo">06：格式化為表格 & 交叉分析篩選器</a>\n<a href="https://www.youtube.com/watch?v=yM0MqqiTyhU">07：設定格式化的條件</a>\n<a href="https://www.youtube.com/watch?v=KMEwqTYlEiY">08：工作表設定 & 合併彙算</a>\n<a href="https://www.youtube.com/watch?v=PVcp5kmwuCs">09：圖表製作 (上)</a>\n<a href="https://www.youtube.com/watch?v=g66Zm1iIqd0">10：圖表製作 (下)</a>\n<a href="https://www.youtube.com/watch?v=Fz8T_5V2hUc">11：樞紐分析表</a>\n<a href="https://www.youtube.com/watch?v=Uit-np2yxfY">12：列印分頁設定</a>\n<a href="https://www.youtube.com/watch?v=WG60luuBYMo">13：頁首、頁尾設計 & 浮水印製作</a>\n<a href="https://www.youtube.com/watch?v=RTPlzLyB-ik">14：基礎函數概念</a>\n<a href="https://www.youtube.com/watch?v=mBAcmhK-NRg">15：邏輯函數 IF</a>\n<a href="https://www.youtube.com/watch?v=gOASqU7wHkQ">16：VLOOKUP 函數 & 絕對參照設定</a>\n<a href="https://www.youtube.com/watch?v=gee-truceaQ">17：IFERROR 函數 & 資料驗證</a>\n<a href="https://www.youtube.com/watch?v=QVIIiTMvj1w">18：COUNTIF & SUMIF 函數</a>\n<a href="https://www.youtube.com/watch?v=Pd1Loi96ZX0">19：下拉選單製作 & INDIRECT 函數</a>\n<a href="https://www.youtube.com/watch?v=kUZJ-HxXsK4">20：讓你事半功倍的 12 個小技巧</a>\n<a href="https://www.youtube.com/watch?v=rR2dKiw9mNo">21：自訂數值格式</a>\n<a href="https://www.youtube.com/watch?v=hJLurVi_VQA">日期函數 & 年資與工時計算</a>\n<a href="https://www.youtube.com/watch?v=7cW49UstbeI">如何使用 Rank 函數進行排名？</a>\n<a href="https://www.youtube.com/watch?v=Gk8ejH3avGk">如何用 LEFT / MID / RIGHT 函數擷取儲存格的文字資料？</a>\n<a href="https://www.youtube.com/watch?v=OM2cSVEJuB4">INDEX & MATCH </a>\n<a href="https://www.youtube.com/watch?v=nc3T6CNKzr4">保護表格</a>\n<a href="https://www.youtube.com/watch?v=7drQ-y4OUhg">我的表格有重複資料該怎麼辦？簡單三招讓它們現出原形，從此不再出現</a>\n<a href="https://www.youtube.com/watch?v=aY3eKfGLI0E">RAND / RANDBETWEEN 隨機函數</a>\n<a href="https://www.youtube.com/watch?v=6Sjjm_XX-VQ">進度追蹤表開始</a>\n<a href="https://www.youtube.com/watch?v=NiFs4GPGWYg">如何製作一個讓老闆眼睛為之一亮的甘特圖？</a>\n<a href="https://www.youtube.com/watch?v=WEe7jG0k4hg">如同多功能瑞士刀的強悍函數 SUMPRODUCT </a>\n<a href="https://www.youtube.com/watch?v=g835ZXDLTi0">「動態陣列」讓寫公式從此變得宇宙無敵簡單！</a>\n<a href="https://www.youtube.com/watch?v=N-2YKrPoJ6o">柏拉圖 (Pareto) - 來自於 80/20 法則的神奇圖表</a>\n<a href="https://www.youtube.com/watch?v=_BJrCPfamSc">XLOOKUP</a>\n<a href="https://www.youtube.com/watch?v=b14NBFv6-wI">擷取網頁上的資料？ </a>\n<a href="https://www.youtube.com/watch?v=FbqJp_CFSn8">設計線上問卷 + 資料分析？</a>\n<a href="https://www.youtube.com/watch?v=YBsY4zyG73I">巨集錄製教學</a>\n<a href="https://www.youtube.com/watch?v=QdDtn7DAh_U">如何使用 LET 函數來簡化複雜的公式？</a>\n<a href="https://www.youtube.com/watch?v=c4ZXLLExG_w">Power Query</a>\n<a href="https://www.youtube.com/watch?v=TToihGCy4Xg">Excel 的模擬分析功能找出公司的競爭力</a>\n<a href="https://www.youtube.com/watch?v=RK5jCM6o-PY">用 LAMBDA 自創函數</a>\n<a href="https://www.youtube.com/watch?v=JPoJs3Q9lV4">如何使用 Lambda 函數的遞迴 (Recursion) 功能</a>\n<a href="https://www.youtube.com/watch?v=6xXdlpmZwHI">16 個面試最常被問到的 Excel 問題和答題攻略</a>\n<a href="https://www.youtube.com/watch?v=eNn6mbJsIHE">戰棋函數 OFFSET</a>\n<a href="https://www.youtube.com/watch?v=OkUAr1IcSSg">「互動式專案管理儀表板」| Excel 教學 45</a>\n<a href="https://www.youtube.com/watch?v=j6VLcFoQguk">員工排班表 (上)</a>\n<a href="https://www.youtube.com/watch?v=ziga9B5Hr_o">員工排班表 (下)</a>\n<a href="https://www.youtube.com/watch?v=nPJB1aw3zTQ">VLOOKUP 和「樞紐分析表」同時查詢多個工作表的資料</a>\n<a href="https://www.youtube.com/watch?v=pwwL80q2txg">庫存出入管理 + 條碼合併列印 + 動態商品圖片</a>\n<a href="https://www.youtube.com/watch?v=Y3dLNYOfFDA">快速上手 VBA</a>\n<a href="https://www.youtube.com/watch?v=aO_B2xj_rhc">VLOOKUP</a>\n<a href="https://www.youtube.com/watch?v=JM87BiY_tls">DSUM、DGET 教學</a>\n<a href="https://www.youtube.com/watch?v=b5HAeTz5lFc">用 AI 人工智慧幫你寫好函數</a>\n<a href="https://www.youtube.com/watch?v=cxtmw3WnlwM">Outlook VBA 自動寄送包含附件的 Email 給不同收件者</a>\n<a href="https://www.youtube.com/watch?v=nOKIeGQcnXk">打造一個簡易會計系統 + 三大財務報表  (上)</a>\n<a href="https://www.youtube.com/watch?v=06-FUUEbNvM">打造一個簡易會計系統 + 三大財務報表  (下)</a>\n<a href="https://www.youtube.com/watch?v=Mzddp3-SDhw">打造一套簡易訂單系統 (上) (報價單、銷貨明細表等皆適用)</a>\n<a href="https://www.youtube.com/watch?v=zbuAjuBv_RI">打造一套簡易訂單系統 (下) (報價單、銷貨明細表等皆適用)</a>\n<a href="https://www.youtube.com/watch?v=DKjTHWB0jZE">財務幫手上集</a>\n<a href="https://www.youtube.com/watch?v=B7UWyqgVzEA">財務小幫手下集</a>\n<a href="https://www.youtube.com/watch?v=F4ntA-RIS10">用 VBA 把 Excel 改造成自己專屬的 POS 零售/點餐系統！</a>\n\n',
'<h2>Excel Enabling the Shared Workbook feature</h2>\n<ol><li>\nShared Workbooks have limitations, and one in particular is the inability to edit using Excel for the web. \nTherefore we highly recommend <a href="https://support.microsoft.com/en-us/office/collaborate-on-excel-workbooks-at-the-same-time-with-co-authoring-7152aa8b-b791-414c-a3bb-3024e46fb104">co-authoring</a>, which is the replacement for Shared Workbooks.\n</li><li>\nCreate a new workbook or open an existing workbook. \nThen place it on a network location. \nFor example, put it on a location like <i>\\server_name\folder_name.</i> Don\'t put the file on OneDrive or SharePoint. \n\nIf you prefer those locations for the file, <a href="https://support.microsoft.com/en-us/office/collaborate-on-excel-workbooks-at-the-same-time-with-co-authoring-7152aa8b-b791-414c-a3bb-3024e46fb104">co-author the workbook instead</a>.\n</li><li>\nClick <b>Review</b> &gt; <b>Share Workbook</b>.\nNote that in newer versions of Excel, the Share Workbook button has been hidden. \n\n<a href="https://support.microsoft.com/en-us/office/what-happened-to-shared-workbooks-150fc205-990a-4763-82f1-6c259303fe05">Here\'s how to unhide it</a>.\n<h3>Add Shared Workbook buttons to the Quick Access Toolbar</h3>\n<ol><li>Click <b>File</b> &gt; <b>Options</b> &gt; <b>Quick Access Toolbar</b>.</li>\n<li>Open the list under <b>Choose commands from</b> and select <b>All Commands</b>.\n</li><li>Scroll down that list until you see <b>Share Workbook (Legacy)</b>. \n\nSelect that item and click <b>Add</b>.</li>\n<li>Then scroll through the list until you see <b>Track Changes (Legacy)</b>. \nSelect that item and click <b>Add</b>.\n</li><li>Scroll through the list until you see <b>Protect Sharing (Legacy)</b>. \nSelect that item and click <b>Add</b>.\n</li><li>Scroll through the list until you see <b>Compare and Merge Workbooks</b>. \n\nSelect that item and click <b>Add</b>.</li>\n<li>Click <b>OK</b>.\n</li><li>Now four new buttons will appear at the top of the Excel window. \n</ol>\n\n<h3>Add Shared Workbook buttons to the Quick Access Toolbar</h3>\n<ol type="1"><li>Click <b>Excel</b> &gt; <b>Preferences</b> &gt; <b>Ribbon &amp; Toolbar</b> (under <b>Authoring</b>)</li>\n<li>Click <b>Quick Access Toolbar</b>.\n</li><li>Under <b>Choose commands from</b>, click <b>Review Tab</b>.\n</li><li>Select <b>Share Workbook (Legacy)</b> from the list, and click <b> &gt; </b> to move the command to the <b>Customize Quick Access Toolbar:</b> list, and finally click <b>Save</b>.</li>\n</ol>\n------------\n</li><li>\nOn the <b>Editing</b> tab, select the <b>Allow changes by more than one user ...</b> check box.\n</li><li>\nOn the <b>Advanced</b> tab, select the options that you want to use for tracking and updating changes, and then click <b>OK</b>.\n</li><li>\nIf this is a new workbook, type a name in the <b>File name</b> box. \nOr, if this is an existing workbook, click <b>OK</b> to save the workbook.\n</li><li>\nIf the workbook contains links to other workbooks or documents, verify the links and update any links that are broken.\n</li><li>\nClick <b>File</b> &gt; <b>Save</b>.\n</li><li>\nWhen you\'re done, <b>- Shared</b> will appear at the top of the Excel window, next to the filename.\n</li></ol>\n\n',
'<h2>excel special keyboard shortcut key CTRL + ;</h2>\n\ntry the following methods:\n\na) Start Excel in safe mode (Press Win+R>Type Excel.exe /Safe), if it works well, disable and check the add-ins one by one.\n\nb) Repair Office in Control Panel > Programs > Programs and Features\nc) Use Application.OnKey Method\nhttp://msdn.microsoft.com/en-us/library/office/ff197461(v=office.15).aspx\n\nd) Check if the keyboard shortcut key is disabled via Group Policy\nhttp://technet.microsoft.com/en-us/library/cc179143(v=office.15).aspx\n\nIf the issue still exists, we\'d better use Process monitor to detect which process/thread block the keyboard shortcut key(CTRL + ;).\n\n<a href="https://learn.microsoft.com/en-us/office/troubleshoot/excel/run-macro-cells-change">run a macro when certain cells change</a>\n<br>\n',
'<h2>the underscores _ at the end of lines of code</h2>\n\nA space followed by an underscore tells VBA that the current statement isn\'t finished yet but continues on the next line – it\'s used to split a single line of code over two lines, in order to make the code more readable (because VBA doesn\'t word-wrap).\n\nSo rather than:\n\nIf Not MyRange.Paragraphs(1).Range.End = MyRange.Sections(1).Range.End Then\n\nyou could use:\n\nIf Not MyRange.Paragraphs(1).Range.End = MyRange.Sections(1).Range.End Then\n\nBut you must insert a space before the underscore.\nOtherwise (in the above example) the VBA compiler would assume you thought there was such a word as “End_" and would  return an error.\n',
'<h2>Filter Different Column by Multiple Criteria in Excel VBA</h2>\n<k>Filter multiple criteria </k>in a different column(s).\nHere we have a dataset where we store the <k>names </k>of some businessmen, which <k>products </k>they bought for selling purposes, the <k>quantity </k>of the products, and how much <k>money</k> they used.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-different-column_1.png" alt="excel vba filter multiple criteria different column" width="495" height="391">\n\n<h3>Filtering Different Columns by Multiple Criteria <k>Using VBA With Statement</k></h3>\nSuppose you want to <k>Filter </k>those <k>TVs </k>which will cost these businessmen more than <k>1500 </k>bucks. We can do this by using <k>VBA With statement</k>. Let\'s discuss the process below.\n\nSub MultipleCriteria()\n  With Range("B4:E4")\n    .AutoFilter Field:=2, Criteria1:="TV"\n    .AutoFilter Field:=3, Criteria1:=">=1500"\n  End With\nEnd Sub\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-different-column_9.png" alt="excel vba filter multiple criteria different column" width="492" height="216">\n\n',
'<h2>Filter dates between two specific dates with VBA code</h2>\n<img src="https://cdn.extendoffice.com/images/stories/doc-excel/filter-between-dates/doc-filter-dates-7.png" width="542" height="323">\n\nPublic Sub MyFilter()\n    Dim dateStart As Long, dateEnd As Long\n    dateStart = Range("E1").Value \'assume this is the start date\n    dateEnd = Range("E2").Value \'assume this is the end date\n    Range("C1:C13").AutoFilter field:=1, Criteria1:=">=" & dateStart, Operator:=xlAnd, Criteria2:="&lt;=" & dateEnd\nEnd Sub\n\n',
'<h2>Copy only visible cells</h2>\n<a href="https://www.exceldemy.com/copy-and-paste-in-excel-vba/#Excel_VBA_Copy_Paste_Knowledge_Hub">12 Methods Copy and Paste in Excel Using VBA</a>\n\n  ActiveSheet.Range("A1:E14").SpecialCells(xlCellTypeVisible).Copy\n  ActiveSheet.Range("G1").PasteSpecial Paste:=xlPasteAll\n  Application.CutCopyMode = False\n\n  \'Remove AutoFilter\n  ActiveSheet.AutoFilterMode = False\n\n\n  ActiveSheet.Range("$A$1:$J$5").AutoFilter Field:=2, Criteria1:="3"\n    Range("A2:A10").Select\n    Selection.SpecialCells(xlCellTypeVisible).Select\n    Selection.copy\n    Sheets("Email").Select\n    Range("A30").Select\n    ActiveSheet.Paste\n\n\n\'count the total rows in current sheet\nmsgbox Cells(Rows.Count, "A").End(xlUp).Row\n\n\n\'FilterAndCopy\nSub FilterAndCopy()\n  Dim wsData      As Worksheet\n  Dim dws         As Worksheet\n  Dim lr          As Long\n  Dim x           As Variant\n  Dim dict        As Object\n  Dim it          As Variant\n  Dim i           As Long\n  \n  Application.ScreenUpdating = False\n\n  Set wsData = Worksheets("Sheet1")\n  lr = wsData.Cells(Rows.Count, "A").End(xlUp).Row\n  x = wsData.Range("A2:A" & lr).Value\n  Set dict = CreateObject("Scripting.Dictionary")\n\n  For i = 1 To UBound(x, 1)\n      dict.Item(x(i, 1)) = ""\n  Next i\n\n  For Each it In dict.keys\n      On Error Resume Next\n      Set dws = Worksheets(CStr(it))\n      dws.Cells.Clear\n      On Error GoTo 0\n\n      If dws Is Nothing Then\n          Set dws = Worksheets.Add(after:=Worksheets(Worksheets.Count))\n          dws.Name = it\n      End If\n\n      With wsData.Range("A1").CurrentRegion\n        .AutoFilter field:=1, Criteria1:=it\n        wsData.Range("C2:I" & lr).SpecialCells(xlCellTypeVisible).Copy dws.Range("A1").AutoFilter\n      End With\n      Set dws = Nothing\n  Next it\n\n  Application.ScreenUpdating = True\nEnd Sub\n\n\'to change the destination range dws.Range("A" & dlr)\nwsData.Range("C2:I" & lr).SpecialCells(xlCellTypeVisible).Copy dws.Range("A" & dlr)\n\n',
'<h2>AutoFilter samples</h2>\nRange("C1:C13").AutoFilter field:=1, Criteria1:=">=" & dateStart, Operator:=xlAnd, Criteria2:="&lt;=" & dateEnd\n\nRange("A1").CurrentRegion.AutoFilter Field:=6,Criteria1:="CASH"\n\nRange("A1").CurrentRegion.AutoFilter Field:=6, Criteria1:="CASH", Operator:=xlOr,Criteria2:="VOUCH"\n\nRange("A1").CurrentRegion.AutoFilter Field:=4, Criteria1:=Array("1", "20","30", "40"), Operator:=xlFilterValuesNB You have to use the <k>xlFilterValues</k> operator when using an Array as your criteria.\n\nRange("A1").CurrentRegion.AutoFilter Field:=5,Criteria1:="&gt;=5000", Operator:=xlAnd,Criteria2:="&lt;=6000"\n\nRange("A1").CurrentRegion.AutoFilter Field:=5, Criteria1:=25, Operator:=xlTop10Items\n\nRange("A1").CurrentRegion.AutoFilter field:=2, Criteria1:=xlFilterAllDatesInPeriodMonth, Operator:=xlFilterDynamic\n\nRange("A1").CurrentRegion.AutoFilter Field:=5,Criteria1:=xlFilterAboveAverage, Operator:=xlFilterDynamic\n\nRange("A1").CurrentRegion.AutoFilter Field:=1, Criteria1:=RGB(255, 255, 0),Operator:=xlFilterCellColor\n\nRange("A1").CurrentRegion.AutoFilter Field:=1, Criteria1:=ActiveWorkbook.IconSets(xl3TrafficLights1).Item(1), Operator:=xlFilterIcon\n\nRange("A1").CurrentRegion.AutoFilter field:=3,Criteria1:="ADC-AA?*"\n\n.AutoFilter Field:=6,Criteria1:="CASH", Operator:=xlOr, Criteria2:="VOUCH"\n\n.AutoFilter Field:=4, Criteria1:=Array("1", "20","30", "40"), Operator:=xlFilterValues\n\nActiveSheet.Range("$C$4:$C$15").AutoFilter Field:=1, Criteria1:="&lt;>California", Criteria2:="&lt;>Texas", Operator:=xlAnd\n\nActiveSheet.Range("$C$4:$C$15").AutoFilter Field:=1, Criteria1:=Array( "California", "Texas"), Operator:=xlFilterValues\n\nWorksheets("OR").Range("B4").AutoFilter Field:=2, Criteria1:="New York", Operator:=xlOr, Criteria2:=">3000"\n\nWorksheets("AND").Range("B4").AutoFilter Field:=3, Criteria1:=">2000", Operator:=xlAnd, Criteria2:="&lt;3500"\n\nWorksheets("DateRange").Range("B4:D15").AutoFilter Field:=1, Criteria1:=">=12-03-21", Operator:=xlAnd, Criteria2:="&lt;=12-08-21"\n\nActiveSheet.Range("B3:D3").AutoFilter Field:=2, Operator:=xlFilterValues, Criteria1:=Array("Emily", "Daniel", "Gabriel")\n\nActiveSheet.Range("B3:D3").AutoFilter Field:=1, Operator:=xlFilterValues, Criteria1:=ID_range\n\nWorksheets("xland_filter").Range("B4:E13").AutoFilter Field:=4, Criteria1:=">2", Operator:=xlAnd, Criteria2:="&lt;=5"\n\nWorksheets("xlor_filter").Range("B4").AutoFilter Field:=3, Criteria1:="&lt;1600", Operator:=xlOr, Criteria2:=">=2100"\n\n',
'<h2>Filter Data Using AutoFilter</h2>\nUse the <k>AutoFilter </k>method to perform filters on data\n\nexpression.AutoFilter(Field, Criteria1, Operator, Criteria2, VisibleDropDown)\n\n<img src="https://www.bluepecantraining.com/wp-content/uploads/2017/02/data.png">\n\n<h3>Filter on a Single Criteria</h3>\nThis code would filter the data so that only cash payments were displayed.\n\nRange("A1").CurrentRegion.AutoFilter Field:=6,Criteria1:="CASH"\n<h3>Filter on Two “Or” Criteria</h3>\nUse the <k>xlOr</k> operator to perform “Or” criteria.\n\nRange("A1").CurrentRegion.AutoFilter Field:=6, Criteria1:="CASH", Operator:=xlOr,Criteria2:="VOUCH"\n<h3>Filter on More Than Two “Or” Criteria Using Array</h3>\nRange("A1").CurrentRegion.AutoFilter Field:=4, Criteria1:=Array("1", "20","30", "40"), Operator:=xlFilterValuesNB You have to use the <k>xlFilterValues</k> operator when using an Array as your criteria.\n\n<h3>Filter on Two “And” Criteria</h3>\nUse the <k>xlAnd</k> operator to perform “And” criteria.\n\nRange("A1").CurrentRegion.AutoFilter Field:=5,Criteria1:="&gt;=5000", Operator:=xlAnd,Criteria2:="&lt;=6000"\n\n<h3>Filter on Top/Bottom X Values</h3>\nUse the Criteria parameter to specify the number of records to return.\n\nRange("A1").CurrentRegion.AutoFilter Field:=5, Criteria1:=25, Operator:=xlTop10Items\n\n<h3>Perform Dynamic Date Filters</h3>\nExcel\'s Autofilter allows you to apply date filters that for example filter for dates in the current month, quarter or year, as well as filters for past and future periods. These can be accessed in VBA. You will need to use <k>xlFilterDynamic</k> as your Operator. The following code filters the date field for dates in the current month. <i>Use CTRL SPACE to open the IntelliSense list which includes all the dynamic filter names.</i>\n\nRange("A1").CurrentRegion.AutoFilter field:=2, Criteria1:=xlFilterAllDatesInPeriodMonth, Operator:=xlFilterDynamic\n\n<h3>Perform Dynamic Average Filters</h3>\nThis code filters the TRANS_VALUE column for the above average values.\n\nRange("A1").CurrentRegion.AutoFilter Field:=5,Criteria1:=xlFilterAboveAverage, Operator:=xlFilterDynamic\n<h3>Perform a Filter Based on Cell Colour</h3>\nRange("A1").CurrentRegion.AutoFilter Field:=1, Criteria1:=RGB(255, 255, 0),Operator:=xlFilterCellColor\n<h3>Perform a Filter Based on Icon</h3>\nThis code filters for cells containing a red traffic light.\n\nRange("A1").CurrentRegion.AutoFilter Field:=1, Criteria1:=ActiveWorkbook.IconSets(xl3TrafficLights1).Item(1), Operator:=xlFilterIcon\n<h3>Perform Wildcard Filters on Text Fields</h3>\nYou can use the * and ? wildcard characters in the usual way.\n\nRange("A1").CurrentRegion.AutoFilter field:=3,Criteria1:="ADC-AA?*"\nTo apply filters to more than one field, you could do this…\n\nWithRange("A1").CurrentRegion\n   .AutoFilter Field:=6,Criteria1:="CASH", Operator:=xlOr, Criteria2:="VOUCH"\n   .AutoFilter Field:=4, Criteria1:=Array("1", "20","30", "40"), Operator:=xlFilterValues\nEnd With\n\n',
'<h2>Excel VBA to Filter by Multiple Criteria</h2>\n<h3>Remove Specific Values with VBA to Filter in Same Column by Multiple Criteria in Excel</h3>\nWe will remove the value <k>California </k>&amp; <k>Texas </k>from the column City with an excel <k>VBA </k>filter.\n\n<code>Sub Remove()\nApplication.DisplayAlerts = True\nWorksheets("Remove").Activate\nColumns("C:C").Select\n    Selection.AutoFilter\n    ActiveSheet.Range("$C$4:$C$15").AutoFilter Field:=1, Criteria1:="&lt;>California", Criteria2:="&lt;>Texas", Operator:=xlAnd\nEnd Sub</code>\n\nFinally, we get results like the image below.\nWe can see that the values <k>California </k>&amp; <k>Texas </k>have been filtered from the column <k>City</k>.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-4.png" width="377" height="335">\n\n<h3>Keep Particular Values in Same Column with Excel VBA</h3>\nUnlike the previous example in this example, we will keep a particular value in the same column instead of removing it.\nTo do this we will apply an excel <k>VBA </k>filter by multiple criteria in the same column.\nIn the previous example, we have removed the value ‘<k>California</k>\' &amp; ‘<k>Texas</k>\'.\nBut, in this example, we will keep these values after applying filters whereas we will remove the other ones.\nLet\'s see the steps to follow for this example.\n\n<code>Sub Keep()\nApplication.DisplayAlerts = True\nWorksheets("KEEP").Activate\nColumns("C:C").Select\nSelection.AutoFilter\nActiveSheet.Range("$C$4:$C$15").AutoFilter Field:=1, Criteria1:=Array( "California", "Texas"), Operator:=xlFilterValues\nEnd Sub</code>\n\nAs a result, we can see the result in the below image.\nOnly the values present in the <k>City </k>column are <k>California </k>and <k>Texas</k>.\nOther values have been filtered.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-7.png" width="338" height="257">\n\n<h3>VBA to Filter by Multiple Criteria with Advanced Criteria Range in Same Column</h3>\nIn the third example, we will apply excel <k>VBA </k>to filter by multiple criteria with advanced criteria ranges in the same column.\nWe will use the dataset of our previous examples.\nFrom the image below we can see the advanced criteria also.\nWe are going to filter the data set for two criteria.\nThe first one is that the city will be<k> New York</k> and the sales amount will be greater than <k>$3000</k>.\nThe second one is that the city will be in <k>California </k>and the sales amount will be less than <k>$3000</k>.\nJust follow the below steps to perform this method.\n\n<code>Sub Advanced_Criteria()\nRange("B4:D15").AdvancedFilter Action:=xlFilterInPlace, CriteriaRange:=Range("F6:G8")\nEnd Sub</code>\n\nLastly, we get results like the image below.\nThe filtered data in the image below follows our criteria range.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-10.png" width="347" height="228">\n\n<h3>Filter in Same Column Using VBA with OR Criteria in Excel</h3>\nAnother example to apply filters in the same column is to use <k>VBA </k>with <k><a href="https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/or-operator" target="_blank" rel="noopener">OR</a> </k>criteria in excel.\nWe will use two criteria in our dataset.\nThe <k>OR </k>criteria will return a value if the values from our dataset meet any of the defined two criteria.\nTo perform this example in our dataset follow the below steps.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-11.png" width="374" height="458">\n\n<code>Sub OR_Criteria()\nWorksheets("OR").Range("B4").AutoFilter Field:=2, Criteria1:="New York", Operator:=xlOr, Criteria2:=">3000"\nEnd Sub</code>\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-12.png" width="495" height="140">\n\nLastly, we get our dataset filtered for the defined criteria range.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-13.png" width="377" height="257">\n\n<h3>Insert AND Criteria with Excel VBA to Filter in Same Column</h3>\nThe <k><a href="https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/and-operator" target="_blank" rel="noopener">AND</a> </k>criteria will return the values which will meet both criteria that we will fix.\nUsing <k>AND </k>criteria we can filter in the same column using excel <k>VBA </k>by multiple criteria.\nWe will filter the data in our dataset for sales values between <k>$2000</k> &amp; <k>$3500</k>.\nLet\'s take a look at the steps to apply <k>AND </k>criteria with the <k>VBA </k>filter in our dataset.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-14.png" width="403" height="450">\n\n<code>Sub AND_Criteria()\nWorksheets("AND").Range("B4").AutoFilter Field:=3, Criteria1:=">2000", Operator:=xlAnd, Criteria2:="&lt;3500"\nEnd Sub</code>\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-15.png" width="484" height="133">\n\nLastly, we can see the result for filtered data in the image below.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-16.png" width="409" height="363">\n\n<h3>Put VBA to Filter by Multiple Criteria in Same Column with Data Range</h3>\nIn the last example, we will apply <k>VBA </k>to filter with data range.\nTo do this we will fix multiple criteria in the same column.\nIn spite of the use of <k>AND </k>criteria, we are showing this example since we will filter the dataset for a date range.\nFollow the below steps to apply a <k>VBA </k>filter with the data range in our dataset.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-17.png" width="404" height="454">\n\n<code>Sub Date_Range()\nWorksheets("DateRange").Range("B4:D15").AutoFilter Field:=1, Criteria1:=">=12-03-21", Operator:=xlAnd, Criteria2:="&lt;=12-08-21"\nEnd Sub</code>\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-18.png" width="538" height="168">\n\nIn the end, we get the <k>Date </k>column filtered by our given criteria.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-19.png" width="408" height="306">\n\n',
'<h2>Excel VBA to Turn off AutoFilter</h2>\nIn the following image, we can see that the filter is already applied to the dataset.\nIn this section, we will use <k>VBA </k>to turn off the filter applied in this dataset.\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-20.png" width="408" height="335">\n\nSo, let\'s see the steps to perform this method.\n\n<code>Sub Turn_Off_Filter()\nWorksheets("TurnOff").AutoFilterMode = False\nEnd Sub</code>\n\n',
'<h2>Turn on AutoFilter in Excel Using VBA</h2>\n<code>Sub Turn_On_Filter()\n  If Not Worksheets("TurnOn").Range("B4").AutoFilter Then\n  Worksheets("TurnOn").Range("B4").AutoFilter\n  End If\nEnd Sub</code>\n\nAs a result, we can see filter icons in the header cells of our dataset.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-25.png" width="399" height="438">\n\n',
'<h2>Check If Filter Is Applied or Not</h2>\nSuppose we are working with thousands of cells.\nIt\'s not possible to identify if the dataset has filters applied to it only by looking at it.\nSo, in this method, we will use a <k>VBA </k>code to see if the dataset contains a filter or not.\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-26.png" width="341" height="331">\n\nLet\'s see the steps which we have to follow in this method.\n\n<code>Sub Filter_Check()\nIf ActiveSheet.AutoFilterMode = True Then\nMsgBox "Active worksheet have filters already in place"\nElse\nMsgBox "Active worksheet doesn\'t contain any filter\nEnd If\nEnd Sub</code>\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-27.png" width="489" height="182">\n\nLastly, we get a message box displaying the message ‘<k>Active worksheet have filters already in place</k>\'.\n\n<img src="https://www.exceldemy.com/wp-content/uploads/2022/04/excel-vba-filter-multiple-criteria-same-column-28.png" width="631" height="324">\n\n',
'<h2>Excel Application object</h2>\nProperties\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activecell">ActiveCell</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activechart">ActiveChart</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activeencryptionsession">ActiveEncryptionSession</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activeprinter">ActivePrinter</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activeprotectedviewwindow">ActiveProtectedViewWindow</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activesheet">ActiveSheet</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activewindow">ActiveWindow</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.activeworkbook">ActiveWorkbook</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.addins">AddIns</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.addins2">AddIns2</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.alertbeforeoverwriting">AlertBeforeOverwriting</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.altstartuppath">AltStartupPath</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.alwaysusecleartype">AlwaysUseClearType</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.application">Application</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.arbitraryxmlsupportavailable">ArbitraryXMLSupportAvailable</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.asktoupdatelinks">AskToUpdateLinks</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.assistance">Assistance</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.autocorrect">AutoCorrect</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.autoformatasyoutypereplacehyperlinks">AutoFormatAsYouTypeReplaceHyperlinks</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.automationsecurity">AutomationSecurity</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.autopercententry">AutoPercentEntry</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.autorecover">AutoRecover</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.build">Build</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.calculatebeforesave">CalculateBeforeSave</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.calculation">Calculation</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.calculationinterruptkey">CalculationInterruptKey</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.calculationstate">CalculationState</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.calculationversion">CalculationVersion</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.caller">Caller</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.canplaysounds">CanPlaySounds</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.canrecordsounds">CanRecordSounds</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.caption">Caption</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.celldraganddrop">CellDragAndDrop</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.cells">Cells</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.chartdatapointtrack">ChartDataPointTrack</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.charts">Charts</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.clipboardformats">ClipboardFormats</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.clusterconnector">ClusterConnector</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.columns">Columns</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.comaddins">COMAddIns</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.commandbars">CommandBars</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.commandunderlines">CommandUnderlines</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.constrainnumeric">ConstrainNumeric</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.controlcharacters">ControlCharacters</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.copyobjectswithcells">CopyObjectsWithCells</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.creator">Creator</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.cursor">Cursor</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.cursormovement">CursorMovement</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.customlistcount">CustomListCount</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.cutcopymode">CutCopyMode</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.dataentrymode">DataEntryMode</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.ddeappreturncode">DDEAppReturnCode</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.decimalseparator">DecimalSeparator</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.defaultfilepath">DefaultFilePath</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.defaultsaveformat">DefaultSaveFormat</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.defaultsheetdirection">DefaultSheetDirection</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.defaultweboptions">DefaultWebOptions</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.deferasyncqueries">DeferAsyncQueries</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.dialogs">Dialogs</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayalerts" aria-current="page">DisplayAlerts</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayclipboardwindow">DisplayClipboardWindow</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displaycommentindicator">DisplayCommentIndicator</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displaydocumentactiontaskpane">DisplayDocumentActionTaskPane</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displaydocumentinformationpanel">DisplayDocumentInformationPanel</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayexcel4menus">DisplayExcel4Menus</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayformulaautocomplete">DisplayFormulaAutoComplete</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayformulabar">DisplayFormulaBar</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayfullscreen">DisplayFullScreen</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayfunctiontooltips">DisplayFunctionToolTips</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayinsertoptions">DisplayInsertOptions</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displaynoteindicator">DisplayNoteIndicator</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displaypasteoptions">DisplayPasteOptions</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayrecentfiles">DisplayRecentFiles</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displayscrollbars">DisplayScrollBars</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.displaystatusbar">DisplayStatusBar</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.editdirectlyincell">EditDirectlyInCell</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enableanimations">EnableAnimations</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enableautocomplete">EnableAutoComplete</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enablecancelkey">EnableCancelKey</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enablecheckfileextensions">EnableCheckFileExtensions</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enableevents">EnableEvents</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enablelargeoperationalert">EnableLargeOperationAlert</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enablelivepreview">EnableLivePreview</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enablemacroanimations">EnableMacroAnimations</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.enablesound">EnableSound</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.errorcheckingoptions">ErrorCheckingOptions</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.excel4intlmacrosheets">Excel4IntlMacroSheets</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.excel4macrosheets">Excel4MacroSheets</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.extendlist">ExtendList</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.featureinstall">FeatureInstall</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.fileconverters">FileConverters</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.filedialog">FileDialog</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.fileexportconverters">FileExportConverters</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.filevalidation">FileValidation</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.filevalidationpivot">FileValidationPivot</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.findformat">FindFormat</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.fixeddecimal">FixedDecimal</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.fixeddecimalplaces">FixedDecimalPlaces</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.flashfill">FlashFill</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.flashfillmode">FlashFillMode</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.formulabarheight">FormulaBarHeight</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.generategetpivotdata">GenerateGetPivotData</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.generatetablerefs">GenerateTableRefs</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.height">Height</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.highqualitymodeforgraphics">HighQualityModeForGraphics</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.hinstance">Hinstance</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.hinstanceptr">HinstancePtr</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.hwnd">HWnd</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.ignoreremoterequests">IgnoreRemoteRequests</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.interactive">Interactive</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.international">International</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.issandboxed">IsSandboxed</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.iteration">Iteration</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.languagesettings">LanguageSettings</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.largeoperationcellthousandcount">LargeOperationCellThousandCount</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.left">Left</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.librarypath">LibraryPath</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.mailsession">MailSession</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.mailsystem">MailSystem</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.mappapersize">MapPaperSize</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.mathcoprocessoravailable">MathCoprocessorAvailable</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.maxchange">MaxChange</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.maxiterations">MaxIterations</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.measurementunit">MeasurementUnit</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.mergeinstances">MergeInstances</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.mouseavailable">MouseAvailable</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.moveafterreturn">MoveAfterReturn</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.moveafterreturndirection">MoveAfterReturnDirection</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.multithreadedcalculation">MultiThreadedCalculation</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.name">Name</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.names">Names</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.networktemplatespath">NetworkTemplatesPath</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.newworkbook(property)">NewWorkbook</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.odbcerrors">ODBCErrors</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.odbctimeout">ODBCTimeout</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.oledberrors">OLEDBErrors</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.onwindow">OnWindow</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.operatingsystem">OperatingSystem</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.organizationname">OrganizationName</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.parent">Parent</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.path">Path</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.pathseparator">PathSeparator</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.pivottableselection">PivotTableSelection</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.previousselections">PreviousSelections</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.printcommunication">PrintCommunication</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.productcode">ProductCode</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.promptforsummaryinfo">PromptForSummaryInfo</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.protectedviewwindows">ProtectedViewWindows</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.quickanalysis">QuickAnalysis</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.range">Range</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.ready">Ready</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.recentfiles">RecentFiles</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.recordrelative">RecordRelative</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.referencestyle">ReferenceStyle</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.registeredfunctions">RegisteredFunctions</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.replaceformat">ReplaceFormat</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.rollzoom">RollZoom</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.rows">Rows</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.rtd">RTD</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.screenupdating">ScreenUpdating</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.selection">Selection</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.sensitivitylabelpolicy">SensitivityLabelPolicy</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.sheets">Sheets</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.sheetsinnewworkbook">SheetsInNewWorkbook</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showcharttipnames">ShowChartTipNames</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showcharttipvalues">ShowChartTipValues</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showdevtools">ShowDevTools</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showmenufloaties">ShowMenuFloaties</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showquickanalysis">ShowQuickAnalysis</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showselectionfloaties">ShowSelectionFloaties</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showstartupdialog">ShowStartupDialog</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.showtooltips">ShowToolTips</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.smartartcolors">SmartArtColors</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.smartartlayouts">SmartArtLayouts</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.smartartquickstyles">SmartArtQuickStyles</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.speech">Speech</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.spellingoptions">SpellingOptions</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.standardfont">StandardFont</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.standardfontsize">StandardFontSize</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.startuppath">StartupPath</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.statusbar">StatusBar</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.templatespath">TemplatesPath</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.thiscell">ThisCell</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.thisworkbook">ThisWorkbook</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.thousandsseparator">ThousandsSeparator</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.top">Top</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.transitionmenukey">TransitionMenuKey</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.transitionmenukeyaction">TransitionMenuKeyAction</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.transitionnavigkeys">TransitionNavigKeys</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.usableheight">UsableHeight</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.usablewidth">UsableWidth</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.useclusterconnector">UseClusterConnector</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.usedobjects">UsedObjects</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.usercontrol">UserControl</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.userlibrarypath">UserLibraryPath</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.username">UserName</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.usesystemseparators">UseSystemSeparators</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.value">Value</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.vbe">VBE</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.version">Version</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.visible">Visible</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.warnonfunctionnameconflict">WarnOnFunctionNameConflict</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.watches">Watches</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.width">Width</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.windows">Windows</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.windowsforpens">WindowsForPens</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.windowstate">WindowState</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.workbooks">Workbooks</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.worksheetfunction">WorksheetFunction</a>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.application.worksheets">Worksheets</a>\n\nAreas object, Author object, AutoCorrect object, AutoFilter object, AutoRecover object, Axes object, Axis object, AxisTitle object, Border object, Borders object, CalculatedFields object, CalculatedItems object, CalculatedMember object, CalculatedMembers object, CalloutFormat object, CategoryCollection object, CellFormat object, Characters object, Chart object, ChartArea object, ChartCategory object, ChartFormat object, ChartGroup object, ChartGroups object, ChartObject object, ChartObjects object, Charts object, ChartTitle object, ChartView object, ColorFormat object, ColorScale object, ColorScaleCriteria object, ColorScaleCriterion object, ColorStop object, ColorStops object, Comment object, Comments object, CommentThreaded object, CommentsThreaded object, ConditionValue object, Connections object, ConnectorFormat object, ControlFormat object, CubeField object, CubeFields object, CustomProperty object, CustomProperties object, CustomView object, CustomViews object, DataBar object, DataBarBorder object, DataFeedConnection object, DataLabel object, DataLabels object, DataTable object, DefaultWebOptions object, Dialog object, Dialogs object, DialogSheetView object, DisplayFormat object, DisplayUnitLabel object, DownBars object, DropLines object, Error object, ErrorBars object, ErrorCheckingOptions object, Errors object, FileExportConverter object, FileExportConverters object, FillFormat object, Filter object, Filters object, Floor object, Font object, FormatColor object, FormatCondition object, FormatConditions object, FreeformBuilder object, FullSeriesCollection object, Graphic object, Gridlines object, GroupShapes object, HeaderFooter object, HiLoLines object, HPageBreak object, HPageBreaks object, Hyperlink object, Hyperlinks object, Icon object, IconCriteria object, IconCriterion object, IconSet object, IconSetCondition object, IconSets object, Interior object, IRtdServer object, IRTDUpdateEvent object, LeaderLines object, Legend object, LegendEntries object, LegendEntry object, LegendKey object, LinearGradient object, LineFormat object, LinkFormat object, ListColumn object, ListColumns object, ListDataFormat object, ListObject object, ListObjects object, ListRow object, ListRows object, Mailer object, Model object, ModelChanges object, ModelColumnChange object, ModelColumnChanges object, ModelColumnName object, ModelColumnNames object, ModelConnection object, ModelFormatBoolean object, ModelFormatCurrency object, ModelFormatDate object, ModelFormatDecimalNumber object, ModelFormatGeneral object, ModelFormatPercentageNumber object, ModelFormatScientificNumber object, ModelFormatWholeNumber object, ModelMeasure object, ModelMeasureName object, ModelMeasureNames object, ModelMeasures object, ModelRelationship object, ModelRelationships object, ModelTable object, ModelTableColumn object, ModelTableColumns object, ModelTableNameChange object, ModelTableNameChanges object, ModelTableNames object, ModelTables object, Model3DFormat\nModuleView object, MultiThreadedCalculation object, Name object, Names object, NegativeBarFormat object, ODBCConnection object, ODBCError object, ODBCErrors object, OLEDBConnection object, OLEDBError object, OLEDBErrors object, OLEFormat object, OLEObject object, OLEObjects object, Outline object, Page object, Pages object, PageSetup object, Pane object, Panes object, Parameter object, Parameters object, Phonetic object, Phonetics object, PictureFormat object, PivotAxis object, PivotCache object, PivotCaches object, PivotCell object, PivotField object, PivotFields object, PivotFilter object, PivotFilters object, PivotFormula object, PivotFormulas object, PivotItem object, PivotItemList object, PivotItems object, PivotLayout object, PivotLine object, PivotLineCells object, PivotLines object, PivotTable object, PivotTableChangeList object, PivotTables object, PivotValueCell object, PlotArea object, Point object, Points object, ProtectedViewWindow object, ProtectedViewWindows object, Protection object, PublishObject object, PublishObjects object, Queries object, QueryTable object, QueryTables object, QuickAnalysis object, Range object, Ranges object, RecentFile object, RecentFiles object, RectangularGradient object, Research object, RoutingSlip object, RTD object, Scenario object, Scenarios object, Series object, SeriesCollection object, SeriesLines object, ServerViewableItems object, ShadowFormat object, Shape object, ShapeNode object, ShapeNodes object, ShapeRange object, Shapes object, Sheets object, SheetViews object, Slicer object, SlicerCache object, SlicerCacheLevel object, SlicerCacheLevels object, SlicerCaches object, SlicerItem object, SlicerItems object, SlicerPivotTables object, Slicers object, Sort object, SortField object, SortFields object, SparkAxes object, SparkColor object, SparkHorizontalAxis object, Sparkline object, SparklineGroup object, SparklineGroups object, SparkPoints object, SparkVerticalAxis object, Speech object, SpellingOptions object, Style object, Styles object, Tab object, TableObject object, TableStyle object, TableStyleElement object, TableStyleElements object, TableStyles object, TextConnection object, TextEffectFormat object, TextFrame object, TextFrame2 object, ThreeDFormat object, TickLabels object, TimelineState object, TimelineViewState object, Top10 object, TreeviewControl object, Trendline object, Trendlines object, UniqueValues object, UpBars object, UsedObjects object, UserAccess object, UserAccessList object, Validation object, ValueChange object, VPageBreak object, VPageBreaks object, Walls object, Watch object, Watches object, WebOptions object, Window object, Windows object, Workbook object, WorkbookConnection object, WorkbookQuery object, Workbooks object, Worksheet object, WorksheetDataConnection object, WorksheetFunction object, Worksheets object, WorksheetView object, XmlDataBinding object, XmlMap object, XmlMaps object, XmlNamespace object, XmlNamespaces object, XmlSchema object, XmlSchemas object, XPath object, Enumerations\n\n',
'<h2>the Find Method</h2>\n<h3>Syntax</h3>\nThe Find method can be written as follows:\n<b>Find(<em>What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat</em>)</b>\nThat looks complicated!\nLet\'s break it down into smaller chunks:\n<b>1. What (required)</b>: The only required parameter, <b>What</b> tells the Excel what to actually look for.\nThis can be anything – string, integer, etc.).\n<b>Syntax</b>: expression.Find(What:="x")\n<b>2. After (optional)</b>: This specifies the cell <em>after</em> which the search is to begin.\nThis must always be a single cell; you can\'t use a range here.\nIf the <em>after</em> parameter isn\'t specified, the search begins from the top-left corner of the cell range.\n<b>Syntax:</b><em> expression</em>.Find(What:="x", After:=ActiveCell)\nHere, we\'ve used ‘ActiveCell\' as our starting cell, though you can also specify a particular cell.\n\n<b>3. LookIn (optional):</b> This tells Excel what type of data to look in, such as <b>xlFormulas.</b>\n<b>Syntax:</b> <em>expression</em>.Find(What:="x", After:=ActiveCell, LookIn:=xlFormulas)\n<b>4. LookAt (optional)</b>: This tells Excel whether to look at the whole set of data, or only a selected part.\nIt can take two values: <b>xlWhole</b> and <b>xlPart</b>\n<b>Syntax</b>: <em>expression</em>.Find(What:="x", After:=ActiveCell, LookIn:=xlFormulas, <b>LookAt:=xlPart</b>)\n<b>5. SearchOrder(optional)</b>: You have the choice of telling Excel whether to search by rows or by columns, i.e. <b>xlByRows</b> or <b>xlByColumns</b>\n<b>Syntax:</b> <em>expression</em>.Find(What:="x", After:=ActiveCell, LookIn:=xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows)\n<b>6. SearchDirection(optional)</b>: This is used to specify whether Excel should search for the next or the previous matching value.\nYou can use either <b>xlNext</b> (to search for next matches) or <b>xlPrevious</b> (to search for previous matches).\n<b>Syntax:</b> <em>expression</em>.Find(What:="x", After:=ActiveCell, LookIn:xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows, <b>SearchDirection:=xlNext</b>)\n<b>7. MatchCase(optional)</b>: Self-explanatory; this tells Excel whether it should match case when doing the search or not.\nThe default value is <b>False.</b>\n<b>Syntax:</b> <em>expression</em>.Find(What:="x", After:=ActiveCell, LookIn:xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, <b>MatchCase:=True</b>)\n<b>8. MatchByte(optional)</b>: This is used if you have installed double-type character set <a href="http://en.wikipedia.org/wiki/DBCS">(DBCS)</a>.\nUnderstanding DBCS is beyond the scope of this tutorial.\nLike MatchCase, this can also have two values: True or False, with default being False.\n<b>Syntax:</b> <em>expression</em>.Find(What:="x", After:=ActiveCell, LookIn:xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=True, <b>MarchByte:=False</b>)\nThe MatchByte parameter is usually not a part of the Find range if you record a macro using Excel\'s built-in Find & Replace function (CTRL + F).\n<b>9. SearchFormat(optional)</b>: This parameter is used when you want to select cells with a specified property.\nIt is used in conjunction with the FindFormat property.\nSay, you have a list of cells where one particular cell (or cell range) is in Italics.\nYou could use the FindFormat property and set it to Italics.\nIf you later use the SearchFormat parameter in Find, it will select the Italicized cell.\nSearchFormat can have two values: True and False.\nDefault is false.\n<b>Syntax:</b> <em>expression</em>.Find(What:="x", After:=ActiveCell, LookIn:xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=True, MarchByte:=False, SearchFormat:=False)\n<h3>Find Method Example:</h3>\nLet\'s say we have a spreadsheet where the first column is filled with an arithmetic progression:\n1, 4, 7, 10, 13, 16, 19….\nThe entire column from A1 to A65000 is filled.\nWe want to find a specific value, say, 24652, in this progression.\nTo do this, we can enter the following formula:\nCells.Find(What:="24652", After:=ActiveCell, LookIn:=xlFormulas, LookAt:= xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False , SearchFormat:=False).Activate\nWhich immediately finds us our required cell – A8218 upon running the macro:\n<img src="https://lh3.googleusercontent.com/gJ-vFfVwHAcoV682l8cq352S_6NcyovU_qiaQmqzvybudMrQ49WdynkqBbW7VWRBt5L9eLaLSBURG4xWDrtKg8EyczSPmDREIgGgAA3m9egtFsOnFfeniAmL5mHw7OEMgGw" width="120px;" height="163px;" />\nWe entered all the parameters above for illustrative purposes.\nIn your actual formula, you can use just the value to be searched (“What:=").\nInstead of using ‘Cells.\' At the beginning, you can also specify a particular range.\nTo see how different search options affect the Find method syntax, try recording macros with Excel\'s built-in Find function (CTRL + F).\nYou can also use .<b>FindNext</b> and .<b>FindPrevious</b> to search for next/pervious matching values.\nKeep in mind that when you use the Find method once, Excel stores all the parameters you entered (‘SearchFormat\', ‘MatchCase\', etc.).\nThus, if you set ‘MatchCase\' to true once, it remains true for subsequent searches as well until you explicitly change it to false.\nWant to use macros but hate programming? Try this <a href="https://www.udemy.com/course/vba-macros/?tc=blog.excelvbafind.cta.p">non-coding approach to Excel VBA and macros</a>.\n<h3>Applications</h3>\nYou\'ll use the Find method a lot to find and/or replace values data in your VBA programs.\nIts primary applications are:\nSearch for and replace values in Cell Value\nSearch for values in Cell Formula\nMost importantly, the Find method acts as a far more efficient alternative to using loops to look for data.\nThe performance boost is very significant – a search like the kind outlined above in our example using loops would take anywhere from 20-120 milliseconds.\nThe same with Find takes less than 5 milliseconds.\nIf you\'re in the habit of using loops, you\'ll find a worthy (and easier to use) ally in Find.\n\n',
'<h2>Find Value</h2>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.xllookat">excel.xllookat</a>\n\n<a href="https://www.thespreadsheetguru.com/category/vba/">VBA Coding Basics</a>\n\nsht.Cells.Replace What:=fndList(x), Replacement:=rplcList(x), LookAt:=xlwhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False\n\nLookAt:=xlwhole, xlPart\n\nSub FindValue()\n    Dim c As Range\n    Dim firstAddress As String\n    With Worksheets(1).Range("A1:A500") \n        Set c = .Find(2, lookin:=xlValues) \n        If Not c Is Nothing Then \n            firstAddress = c.Address \n            Do \n                c.Value = 5 \n                Set c = .FindNext(c) \n            Loop While Not c Is Nothing\n        End If \n    End With\nEnd Sub\n\nSub FindString()\n    Dim c As Range\n    Dim firstAddress As String\n    With Worksheets(1).Range("A1:A500")\n        Set c = .Find("abc", LookIn:=xlValues)\n        If Not c Is Nothing Then\n            firstAddress = c.Address\n            Do\n                c.Value = Replace(c.Value, "abc", "xyz")\n                Set c = .FindNext(c)\n            Loop While Not c Is Nothing\n        End If\n    End With\nEnd Sub\n\nSub UseLookAt()\n    Dim cell As Range\n    Set cell = Range("e1:e7").Find("床", Lookat:=xlPart)\n    Debug.Print cell.Address\n    Set cell = Range("e1:e7").Find("床", Lookat:=xlWhole)\n    Debug.Print cell.Address\nEnd Sub\n\nSub FindAll()\n\'PURPOSE: Find all cells containing a specified values\n\nDim fnd As String, FirstFound As String\nDim FoundCell As Range, rng As Range\nDim myRange As Range, LastCell As Range\n\n\'value to find (must be in string form)?\n  fnd = "12"\n\nSet myRange = ActiveSheet.UsedRange\nSet LastCell = myRange.Cells(myRange.Cells.Count)\nSet FoundCell = myRange.Find(what:=fnd, after:=LastCell)\n\n\'Test to see if anything was found\n  If Not FoundCell Is Nothing Then\n    FirstFound = FoundCell.Address\n  Else\n    GoTo NothingFound\n  End If\n\nSet rng = FoundCell\n\n\'Loop until cycled through all unique finds\n  Do Until FoundCell Is Nothing\n    \'Find next cell with fnd value\n      Set FoundCell = myRange.FindNext(after:=FoundCell)\n    \n    \'Add found cell to rng range variable\n      Set rng = Union(rng, FoundCell)\n    \n    \'Test to see if cycled through to first found cell\n      If FoundCell.Address = FirstFound Then Exit Do\n      \n  Loop\n\n\'Select Cells Containing Find Value\n  rng.Select\n  \nExit Sub\n\n\'Error Handler\nNothingFound:\n  MsgBox "No values were found in this worksheet"\n\nEnd Sub\n\n\nWe can take the above code a step further and actually take an action with the Find Range.\nWith the below VBA macro, you can highlight all cells containing the value 12 with a yellow cell fill.\n\nSub HighlightFindValues()\n\'PURPOSE: Highlight all cells containing a specified values\n\nDim fnd As String, FirstFound As String\nDim FoundCell As Range, rng As Range\nDim myRange As Range, LastCell As Range\n\n\'value to find (must be in string form)?\n  fnd = "Kentucky"\n\nSet myRange = ActiveSheet.UsedRange\nSet LastCell = myRange.Cells(myRange.Cells.Count)\nSet FoundCell = myRange.Find(what:=fnd, after:=LastCell)\n\n\'Test to see if anything was found\n  If Not FoundCell Is Nothing Then\n    FirstFound = FoundCell.Address\n  Else\n    GoTo NothingFound\n  End If\n\nSet rng = FoundCell\n\n\'Loop until cycled through all unique finds\n  Do Until FoundCell Is Nothing\n    \'Find next cell with fnd value\n      Set FoundCell = myRange.FindNext(after:=FoundCell)\n    \n    \'Add found cell to rng range variable\n      Set rng = Union(rng, FoundCell)\n    \n    \'Test to see if cycled through to first found cell\n      If FoundCell.Address = FirstFound Then Exit Do\n      \n  Loop\n\n\'Highlight Found cells yellow\n  rng.Interior.Color = RGB(255, 255, 0)\n  \nExit Sub\n\n\'Error Handler\nNothingFound:\n  MsgBox "No values were found in this worksheet"\nEnd Sub\n\n',
'<h2>Scrape Data</h2>\n<a href="https://oxylabs.io/blog/web-scraping-excel-vba">Guide to Extracting Website Data Using Excel VBA</a>\n<br><a href="https://www.octoparse.com/blog/scraping-data-from-website-to-excel">Scrape Data from Website to Excel</a>\n<br><a href="https://www.exceldemy.com/excel-vba-web-scraping-chrome/">Excel VBA Web Scraping with Chrome</a>\n<br>\nSub scrape_quotes()\n   Dim browser As InternetExplorer\n   Dim page As HTMLDocument\n   Set browser = New InternetExplorer\n   browser.Visible = True\n   browser.navigate ("https://quotes.toscrape.com")\nEnd Sub\n\nSub scraping_web()\n  Dim chrome As Selenium.ChromeDriver\n  Dim row_no, col_no As Integer\n  row_no = 2\n  Application.ScreenUpdating = False\n  Set chrome = New Selenium.ChromeDriver\n  chrome.Start\n  chrome.Get "https://www.exceldemy.com/excel-vba-translate-formula-language/"\n  For Each tr In chrome.FindElementByClass("wpsm-table"). _\n  FindElementByTag("tbody").FindElementsByTag("tr")\n  col_no = 2\n  For Each td In tr.FindElementsByTag("td")\n  Sheet1.Cells(row_no, col_no).Value = td.Text\n  col_no = col_no + 1\n  Next td\n  row_no = row_no + 1\n  Next tr\n  Application.Wait Now + TimeValue("00:00:20")\nEnd Sub\n  \n\n\n',
'<h2>VBA Advanced Filter: A Complete Guide</h2>\n<div id="AdvancedFiltertoc"><a href="#AdvancedFiltertopic-0" target="_self" >VBA Advanced Filter Quick Guide</a><br><a href="#AdvancedFiltertopic-1" target="_self" >What is Advanced Filter</a><br><a href="#AdvancedFiltertopic-2" target="_self" >VBA Advanced Filter on YouTube</a><br><a href="#AdvancedFiltertopic-3" target="_self" >VBA Advanced Filter Parameters</a><br><a href="#AdvancedFiltertopic-4" target="_self" >Understanding the Advanced Filter Ranges</a><br><a href="#AdvancedFiltertopic-5" target="_self" > Criteria Range</a><br><a href="#AdvancedFiltertopic-6" target="_self" > CopyTo Range</a><br><a href="#AdvancedFiltertopic-7" target="_self" > List Range</a><br><a href="#AdvancedFiltertopic-8" target="_self" >Writing the VBA Code</a><br><a href="#AdvancedFiltertopic-9" target="_self" >VBA Advanced Filter Clear</a><br><a href="#AdvancedFiltertopic-10" target="_self" >VBA Advanced Filter Criteria</a><br><a href="#AdvancedFiltertopic-11" target="_self" >Advanced Filter Multiple Criteria</a><br><a href="#AdvancedFiltertopic-12" target="_self" > Advanced Filter Multiple Criteria Examples</a><br><a href="#AdvancedFiltertopic-13" target="_self" > Advanced Filter Criteria - OR</a><br><a href="#AdvancedFiltertopic-14" target="_self" > Combining AND Criteria and OR Criteria</a><br><a href="#AdvancedFiltertopic-15" target="_self" > Using Formulas as Criteria</a><br><a href="#AdvancedFiltertopic-16" target="_self" > Advanced Filter Case Sensitive Criteria</a><br><a href="#AdvancedFiltertopic-17" target="_self" >VBA Advanced Filter Dates</a><br><a href="#AdvancedFiltertopic-18" target="_self" >VBA Advanced Filter Advantages and Limitations</a><br><a href="#AdvancedFiltertopic-19" target="_self" >Error 1004 - Extract Range</a><br><a href="#AdvancedFiltertopic-20" target="_self" >What to do if Advanced Filter is not working</a><br></div></center>\n<pre>VBA Advanced Filter is one of the many hidden gems that Excel VBA offers to make our time more productive.\n\nVBA Advanced Filter requires <strong>very little code</strong>, is one of the <strong>fastest ways</strong> to <a href="https://excelmacromastery.com/excel-vba-copy/" target="_blank" rel="noopener">copy data,</a> and provides advanced filtering options that we cannot get anywhere else.\n\n<h3 id="AdvancedFiltertopic-0">VBA Advanced Filter Quick Guide</h3>\nUsing the criteria with AdvancedFilter is very powerful.\nYou can see the possible options in the table below:\n\n<table>\n<thead>\n<tr><th><strong>Task</strong></th><th><strong>Cell formula</strong></th><th><strong>Examples where true</strong></th></tr>\n</thead>\n<tbody>\n<tr><td>Contains</td><td>="=*Pea*"</td><td>Peach, Pea, Appear</td></tr>\n<tr><td>Does not contain</td><td>="&lt;&gt;*Pea*"</td><td>any text that does not contain Pea</td></tr>\n<tr><td>Exact match</td><td>="=Pea"</td><td>Pea</td></tr>\n<tr><td>Does not exactly match</td><td>="&lt;&gt;Pea"</td><td>Peach, Pear etc.</td></tr>\n<tr><td>Starts with</td><td>="=Pea*"</td><td>Peach, Pear, Pea<br></td></tr>\n<tr><td>Ends with</td><td>="=*Pea"</td><td>SweetPea, GreenPea<br></td></tr>\n<tr><td>Use the <strong>?</strong> symbol to represent any single character<br></td><td>  ="=Pea?"<br></td><td>Pear, Peas or any 4 letter word starting with "Pea"<br></td></tr>\n<tr><td>Any of the symbols *?~<br></td><td>  ="=Pea~*"<br></td><td>Pea*, Pea?<br></td></tr>\n<tr><td>Case sensitive(see section <a href="https://excelmacromastery.com/vba-advanced-filter/#Using_Formulas_as_Criteria">Using Formulas as Criteria</a>)</td><td>=EXACT(A7,"Peach")<br></td><td>Peach</td></tr>\n<tr><td>Greater than<br></td><td> ="&gt;700"<br></td><td>701,702 etc.</td></tr>\n<tr><td>Greater than or equals<br></td><td>="&gt;=700"</td><td>700, 701,702 etc.</td></tr>\n<tr><td>Less than<br></td><td> ="&lt;700"<br></td><td>699,698 etc.</td></tr>\n<tr><td>Less than or equals<br></td><td> ="&lt;=700"<br></td><td>700, 699, 698 etc.</td></tr>\n<tr><td>Equals</td><td> ="=700"<br></td><td>700</td></tr>\n<tr><td>After date</td><td>="&gt;" &amp; DATE(2023,4,30)</td><td>01-May-2023<br>02-May-2023</td></tr>\n<tr><td>Before date</td><td>="&lt;" &amp; DATE(2023,4,30)</td><td>29-April-2023<br>28-April-2023</td></tr>\n<tr><td>Equal date</td><td>="=" &amp; DATE(2023,4,30)</td><td>30-April-2023</td></tr>\n</tbody>\n</table>\n\n<strong>Important Note:</strong> A <em>Criteria</em> column header must exist as a List range column header.\nFor example, if the Criteria column header is "Fruit" then there must be a List range column header called "Fruit".\n\nHere are some important things to know about the Criteria column headers:\n\n<li>They can be used in any order.</li>\n<li>You can use the same header multiple times(see section <a href="https://excelmacromastery.com/vba-advanced-filter/#Advanced_Filter_Multiple_Criteria_Examples">Advanced Filter Multiple Criteria</a> below).</li>\n<li>You don\'t need to include a column header in the criteria if you are not filtering by this column.</li>\n\n<h3 id="AdvancedFiltertopic-1">What is Advanced Filter</h3>\nAdvanced Filter is a tool that is available in the <em>Sort &amp; Filter</em>  section of the <em>Data</em> tab on the Excel Ribbon:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-ribbon1.png" alt="" width="449" height="151" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-ribbon1.png 449w, https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-ribbon1-300x101.png 300w" sizes="(max-width: 449px) 100vw, 449px">\n\nIt allows us to filter data based on a <em>Criteria</em> range.\nThis allows us to do more advanced filtering than the standard filtering on the worksheet.\n\nA second advantage of using Advanced Filter is that we have the option to copy the results to a new range if we choose.\n\nUsing Advanced Filter is quite simple as you can see from the dialog:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Excel-advanced-filter1.png" alt="" width="254" height="268" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Excel-advanced-filter1.png 357w, https://excelmacromastery.com/wp-content/uploads/2021/09/Excel-advanced-filter1-284x300.png 284w" sizes="(max-width: 254px) 100vw, 254px">\n\nWe filter in-place or we copy to another location.\n We then simply need the data range(List range) and the Criteria Range.\nIf we decided to copy to another location then we provide the "Copy to" range.\n\nUsing <em>Advanced Filter</em> is very useful in VBA because it is extremely fast, powerful and as we will see it requires very little code.\n\n<h3 id="AdvancedFiltertopic-2">VBA Advanced Filter on YouTube</h3>\nTo see me working with Advanced Filter, check out this YouTube video:\n\n<iframe title="YouTube video player" src="https://www.youtube.com/embed/0YNhxVu2a5s" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe>\n\n<h3 id="AdvancedFiltertopic-3">VBA Advanced Filter Parameters</h3>\nThe following table shows the parameters of the AdvancedFilter function:<br>\n\n<table>\n<thead>\n<tr><th>Parameter</th><th>Optional</th><th>Type</th><th>Details</th></tr>\n</thead>\n<tbody>\n<tr><td>Action</td><td>Required</td><td>xlFilterAction</td><td><strong>xlFilterInPlace</strong> or <strong>xlFilterCopy</strong>.</td></tr>\n<tr><td>CriteriaRange</td><td>Optional</td><td>Range</td><td>Range of the criteria used for filtering the data.</td></tr>\n<tr><td>CopyToRange</td><td>Optional</td><td>Range</td><td>Destination range if <strong>Action</strong> is set to xlFilterCopy.</td></tr>\n<tr><td>Unique</td><td>Optional</td><td>Boolean</td><td>True for unique records only.</td></tr>\n<tr><td></td><td></td><td></td><td></td></tr>\n</tbody>\n</table>\n\nYou can read about the parameters on the <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.range.advancedfilter">Microsoft help page.</a>\n\nAdvancedFilter requires three ranges to run(or two if you are using <em>xlFilterInPlace</em> as the Action parameter):\n\n<li><strong>List range</strong> - data to filter.</li>\n<li><strong>Criteria range</strong> - how to filter.</li>\n<li><strong>Copy To range </strong>- where to place the results if the <em>Action</em> parameter is set to xlFilterCopy is set.</li>\n\n<em>AdvancedFilter</em> is a range Function.\nThis means you get the range of data you wish to filter and then call the AdvancedFilter function of that range:\n\n DataRange.AdvancedFilter Filter Action, Criteria, [CopyTo], [Unique]\n\nWe can filter in place or we can copy the filter results to another location.\nThis means there are two ways to use AdvancedFilter:\n\n \' Filter in place\n rgData.AdvancedFilter xlFilterInPlace, rgCriteriaRange\n\n \' Filter and copy data\n rgData.AdvancedFilter xlFilterCopy, rgCriteriaRange, rgDestination\n\nThe first parameter indicates the way to apply the filter:\n\n<li><em>xlFilterInPlace</em> - Filter the original data.</li>\n<li><em>xlFilterCopy</em> - Copy the filter results to a new range.</li>\n\nIf we use <em>xlFilterInPlace</em> then we don\'t need the destination range.\n\nTo remove duplicate records we simply set the <em>Unique</em> parameter to <em>True.\n</em>Otherwise, duplicate records are ignored:\n\n \' Filter in place\n rgData.AdvancedFilter xlFilterInPlace, rgCriteriaRange, , True \n\n \' Filter and copy data\n rgData.AdvancedFilter xlFilterCopy, rgCriteriaRange, rgDestination, True \n\n<h3 id="AdvancedFiltertopic-4">Understanding the Advanced Filter Ranges</h3>\nThe following screenshot shows an example of the 3 ranges.\nThe List(or data) range is shaded blue, the Criteria range is green, and the CopyTo range is yellow:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-ranges.png" alt="Advanced filter ranges" width="1104" height="396" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-ranges.png 1104w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-ranges-600x215.png 600w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-ranges-300x108.png 300w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-ranges-1024x367.png 1024w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-ranges-768x275.png 768w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-ranges-1080x387.png 1080w" sizes="(max-width: 1104px) 100vw, 1104px">\n\nThe following subsection provides a quick guide to each of the ranges:\n\n<h3 id="AdvancedFiltertopic-5"> Criteria Range</h3>\n\n<li>The criteria headers must be one of the List Range column headers.\nIf not then it will be ignored.</li>\n<li>Criteria headers can be in any order.</li>\n<li>You can include as many or as few Criteria headers as you need.</li>\n<li>You can use the same header multiple times - this allows us to do multiple AND operations on the same column.</li>\n\n<h3 id="AdvancedFiltertopic-6"> CopyTo Range</h3>\n\n<li>This range is only used when the <em>Action</em> parameter is set to <em>xlFilterCopy</em>.</li>\n<li>To avoid errors this range should be the <em>Header row</em> of the output destination.</li>\n<li>You can use any(or all) columns from the List range as your output and they can be in any order.</li>\n<li>The columns headers in this range must be a <em>List Range</em> column header or you will get a VBA Runtime Error 1004.</li>\n\n<h3 id="AdvancedFiltertopic-7"> List Range</h3>\n\n<li>The <em>List Range</em> is the range of data that will be filtered.</li>\n<li>You must include the headers as part of the <em>List Range</em>.</li>\n<li>If you set the Action parameter to <strong>xlFilterInPlace</strong> then the List data will be filtered.</li>\n<li>If you set the Action parameter to <strong>xlFilterCopy</strong> then the results will be copied to the location which is specified in the <em>CopyToRange </em>parameter.</li>\n\n<h3 id="AdvancedFiltertopic-8">Writing the VBA Code</h3>\nThe easiest way to define the data range is to use <a href="https://excelmacromastery.com/excel-vba-range-cells/#Using_the_Range_CurrentRegion" target="_blank" rel="noopener"><em>CurrentRegion</em></a> although you can get the range any way you like.\n Using <em>CurrentRegion</em> gets all the adjacent data to the specified cell or range.\n\nWe can use CurrentRegion like this:\n\n Dim rgData As Range, rgCriteriaRange As Range\n Set rgData = Range("A4").CurrentRegion\n Set rgCriteriaRange = Range("A1").CurrentRegion\n\nTo set the <em>CopyTo </em>range<em>,</em> you specify the entire heading row.\n\nYou can use a simple trick with CurrentRegion to get the CopyToRange header row.\nFirst, use CurrentRegion and then take the first row of the resulting range:\n\n Dim rgCopyToRange As Range\n Set rgCopyToRange = shFruit.Range("E4").CurrentRegion.Rows(1)\n\nThe full VBA Advanced filter code looks like this:\n\nSub RunAdvancedFilter()\n\n    \' Declare the variables\n    Dim rgData As Range, rgCriteriaRange As Range, rgCopyToRange As Range\n    \n    \' Set the ranges\n    Set rgData = Sheet1.Range("A4").CurrentRegion\n    Set rgCriteriaRange = Sheet1.Range("A1").CurrentRegion\n    Set rgCopyToRange = Sheet1.Range("D1").CurrentRegion.Rows(1)\n    \n    \' Run AdvancedFilter\n    rgData.AdvancedFilter xlFilterCopy, rgCriteriaRange, rgCopyToRange  \n\nEnd Sub\n\nYou can run this code for pretty much any AdvancedFilter that you want to do.\nAll you need to do is to change the ranges as appropriate.\nYou can change <em>Sheet1</em> in the code to any worksheet variable or <a href="https://excelmacromastery.com/excel-vba-range-cells/code-name/" target="_blank" rel="noopener">code name.</a>\n\n<strong>Important Note:</strong> When we run AdvancedFilter using VBA, the ranges do not need to be on the same worksheet or even in the same workbook.\n\n<h3 id="AdvancedFiltertopic-9">VBA Advanced Filter Clear</h3>\nIf we Filter the data in place then we can use <em>ShowAllData</em> to remove the filter.\nWe should check the filter is turned on first so we don\'t get an error.\nWe can use the following code to check and clear the filter if it exists:\n\nIf Sheet1.FilterMode = True Then\n    Sheet1.ShowAllData\nEnd If\n\nIf we are we filter using copy then Advanced Filter will automatically remove existing data from the destination before copying.\nHowever, if you want to simply clear the data you can do it like this:\n\n    Sheet1.Range("E7").CurrentRegion.Offset(1).ClearContents\n\nThis highlights all the adjacent data to the output headers.\nIt moves down one row using <em>Offset</em> to avoid clearing the header row.\n\n\n\n<h3 id="AdvancedFiltertopic-10">VBA Advanced Filter Criteria</h3>\nCheck out this YouTube video to see me using Advanced Filter Criteria:\n\n<iframe title="YouTube video player" src="https://www.youtube.com/embed/Dgs8xyOUFhg" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe>\n\nTo use Criteria on a filter we use the columns headers of the List range with the criteria below them.\n The following criteria will return all rows where the <em>Fruit</em> column contains the text <em>Orange:</em>\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-1.png" alt="" width="267" height="102">\n\nThis criteria will return the following rows:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-basic-and-results.png" alt="" width="372" height="290" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-basic-and-results.png 372w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-basic-and-results-300x234.png 300w" sizes="(max-width: 372px) 100vw, 372px">\n\n<h3 id="AdvancedFiltertopic-11">Advanced Filter Multiple Criteria</h3>\nWe can use the columns in any row to filter by multiple criteria.\nThis allows us to filter using AND logic e.g.\nIf <em>Fruit</em> equals "Apple" AND <em>City</em> equals "New York":\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-AND-columns.png" alt="" width="349" height="189" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-AND-columns.png 444w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-AND-columns-300x162.png 300w" sizes="(max-width: 349px) 100vw, 349px">\n\nWe can use multiple rows if we want to filter using OR logic e.g.\nIf <em>Fruit</em> equals "Apple" OR <em>Fruit</em> equals "Pear" OR <em>Fruit</em> equals "Plum":\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-OR-example.png" alt="" width="307" height="276" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-OR-example.png 444w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-OR-example-300x269.png 300w" sizes="(max-width: 307px) 100vw, 307px">\n\nLet\'s have a look at examples of using Multiple Criteria with Advanced Filter:\n\n<h3 id="AdvancedFiltertopic-12"> Advanced Filter Multiple Criteria Examples</h3>\nIn our first example we will start with a simple AND filter:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and.png" alt="Advanced filter criteria and" width="267" height="102">\n\nThese criteria return all the rows that have the fruit <em>Orange</em> AND the city <em>Berlin:</em>\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-and-results.png" alt="Advanced filter data and results" width="305" height="238" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-and-results.png 372w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-and-results-300x234.png 300w" sizes="(max-width: 305px) 100vw, 305px">\n\nIn our next example, we are looking for a city that starts with <strong>S</strong> AND has sales of less than <strong>500</strong>:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-2.png" alt="" width="267" height="104">\n\nThese criteria will return the following rows:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-criteria-2.png" alt="" width="372" height="290" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-criteria-2.png 372w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-criteria-2-300x234.png 300w" sizes="(max-width: 372px) 100vw, 372px">\n\nWe can use any column header multiple times in the criteria range.\nFor example, we can use the <em>Sales</em> column twice to get a number between 300 and 500:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-between.png" alt="" width="267" height="109">\n\nThese criteria will return the following rows:<br>\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-AND-between.png" alt="" width="372" height="290" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-AND-between.png 372w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-AND-between-300x234.png 300w" sizes="(max-width: 372px) 100vw, 372px">\n\n<h3 id="AdvancedFiltertopic-13"> Advanced Filter Criteria - OR</h3>\nWe use columns in a row when we want to do an AND operation.\nIf we want want to do an OR operation we use rows in the Criteria filter.\n\nIn the following example we want to return rows where the Fruit is either a <em>Peach</em> OR a <em>Banana</em>:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-OR.png" alt="" width="271" height="140">\n\nThis will return the following rows:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-OR-1.png" alt="" width="372" height="290" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-OR-1.png 372w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-OR-1-300x234.png 300w" sizes="(max-width: 372px) 100vw, 372px">\n\nIn the following example, we want to return any rows that have a fruit <em>Banana</em> OR sales that are greater than <em>900:</em>\n\n<em><img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-AND-OR.png" alt="" width="268" height="131"></em>\n\nThese criteria will return the following rows:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-AND-OR.png" alt="" width="372" height="290" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-AND-OR.png 372w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-AND-OR-300x234.png 300w" sizes="(max-width: 372px) 100vw, 372px">\n\n<h3 id="AdvancedFiltertopic-14"> Combining AND Criteria and OR Criteria</h3>\nLet\'s look at an example of combining AND criteria with OR criteria.\n\nThis criteria filters by rows where (<em>Fruit</em> is Lemon AND <em>City</em> is Singapore) OR (<em>Fruit</em> is Orange AND <em>City</em> is Paris):\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-or-combined.png" alt="" width="444" height="157" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-or-combined.png 444w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-or-combined-300x106.png 300w" sizes="(max-width: 444px) 100vw, 444px">\n\nThese are the results:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-or-combined-results.png" alt="" width="444" height="355" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-or-combined-results.png 444w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-and-or-combined-results-300x240.png 300w" sizes="(max-width: 444px) 100vw, 444px">\n\n<h3 id="AdvancedFiltertopic-15"> Using Formulas as Criteria</h3>\nWhile the standard criteria methods offer powerful filtering methods they have limitations.\nThe beauty of the AdvancedFilter is that we can use worksheet formulas in the criteria.\n\nThere are 3 rules when using formulas in the criteria range:\n\n<li>No heading.</li>\n<li>The formula must result in True or False.</li>\n<li>The formula should reference the first row of the data range.</li>\n\nImagine we have the following data:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-football.png" alt="" width="450" height="176" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-football.png 450w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-football-300x117.png 300w" sizes="(max-width: 450px) 100vw, 450px">\n\nWe want to filter by games where the total number of goals scored was 2. We cannot do this using the normal criteria so we create a formula:\n\n<em>=B5+D5=2</em>\n\nWe place this formula in cell A2:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-criteria-formula.png" alt="" width="173" height="97">\n\nYou can see that we have followed the rules above:\n\n<li>We have no header in the criteria.</li>\n<li>The result of the formula is <em>False</em>.</li>\n<li>The formula refers to the first row of the data i.e. B5 and D5.</li>\n\nThe rows we get back are:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-football-filter.png" alt="" width="450" height="176" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-football-filter.png 450w, https://excelmacromastery.com/wp-content/uploads/2021/09/Advanced-filter-data-football-filter-300x117.png 300w" sizes="(max-width: 450px) 100vw, 450px">\n\nNote: If we want to use a formula on another row in the Criteria we should still refer to the first row of the data e.g.:\n\nCell A2 formula: <em>=B5+D5=2</em>\n\nCell A3 formula: <em>=B5+D5=5</em>\n\nCell A3 formula: <em>=B5+D5=7</em>\n\n<h3 id="AdvancedFiltertopic-16"> Advanced Filter Case Sensitive Criteria</h3>\nThere isn\'t a simple way to use case sensitivity in our Criteria therefore we use a formula instead:\n\n=EXACT(A5, "Pea")\n\nMake sure to follow the Formula rules in the previous section to ensure this works correctly.\n\n<h3 id="AdvancedFiltertopic-17">VBA Advanced Filter Dates</h3>\nTake a look at the following formula for the date criteria:\n\n="&lt;1/9/2021″\n\nThis formula will work fine when we run Advanced Filter from the ribbon.\nBut if we run Advanced Filter using VBA it will not return any records.\n\nInstead, we have to use a formula like this:\n\n="&lt;" &amp; DATE(2021,9,1)\n\nWhen we use this in the criteria like this:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/date-criteria.png" alt="" width="211" height="93">\n\nwe get:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-date-results.png" alt="" width="419" height="271" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-date-results.png 419w, https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-date-results-300x194.png 300w" sizes="(max-width: 419px) 100vw, 419px">\n\nIf you want to do between dates then you can use the formulas in two columns.\nFor example, imagine we want to get all the records in August 2021, then we can use the following formulas:\n\n<strong>A2:</strong> ="&lt;=" &amp; DATE(2021,8,31)\n\n<strong>B2:</strong> ="&gt;=" &amp; DATE(2021,8,1)\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/date-criteria-between.png" alt="" width="320" height="93" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/date-criteria-between.png 320w, https://excelmacromastery.com/wp-content/uploads/2021/09/date-criteria-between-300x87.png 300w" sizes="(max-width: 320px) 100vw, 320px">\n\nThis will return the following rows:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-date-between-results.png" alt="" width="462" height="265" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-date-between-results.png 462w, https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-date-between-results-300x172.png 300w" sizes="(max-width: 462px) 100vw, 462px">\n\n<h3 id="AdvancedFiltertopic-18">VBA Advanced Filter Advantages and Limitations</h3>\nAdvanced Filter is easy to use and does its job very well.\nHowever, like every tool it has advantages and limitations to what it can do.\n\nThe following are the advantages of using the Advanced Filter:\n\n<li><strong>Speed</strong> - It is the <a href="https://excelmacromastery.com/excel-vba-copy/#Which_Excel_VBA_Copy_Method_is_the_Fastest" target="_blank" rel="noopener">fastest VBA method</a> for copying and filtering data although multiple calls will slow it down.</li>\n<li><strong>Advanced filtering - </strong>provides in-depth filtering options including the use of formulas.</li>\n<li><strong>Requires very little code</strong> - You can use the same code most of the time and it\'s simplistic compared to other methods of copying and filtering code in VBA.</li>\n<li><strong>Formatting</strong> - When copying the results it automatically formats the result data to match the original data.</li>\n\nThe following are the limitations of the Advanced Filter which you should be aware of:\n\n<li><strong>Speed</strong> - using AdvancedFilter is extremely fast but calling it multiple times in the same code, will cause it to run slower.</li>\n<li><strong>Criteria can only use ranges</strong> - you cannot use an array for the Criteria.\nThe workaround is to write the array to a range and then use it as the Criteria.</li>\n<li><strong>Cannot alter data</strong> - AdvancedFilter simply filters and copies the data.\nYou cannot make changes to the data after filtering and before copying.</li>\n<li><strong>Cannot append data</strong> - To append data you need to write extra code.</li>\n\n<h3 id="AdvancedFiltertopic-19">Error 1004 - Extract Range</h3>\nThe most common error with the advanced filter is: <em>Error 1004 - the extract range has a missing or invalid field name.</em>\n\n<em>VBA Runtime Error 1004</em> occurs when one or more of the output column headers do not exist in the original data as we can see in this example:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/VBA-Runtime-Error-1004-Extract-range.png" alt="" width="536" height="358" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/VBA-Runtime-Error-1004-Extract-range.png 721w, https://excelmacromastery.com/wp-content/uploads/2021/09/VBA-Runtime-Error-1004-Extract-range-600x401.png 600w, https://excelmacromastery.com/wp-content/uploads/2021/09/VBA-Runtime-Error-1004-Extract-range-300x201.png 300w" sizes="(max-width: 536px) 100vw, 536px">\n\nIf this error occurs you should ensure that the <em>CopyTo</em> range has the correct column headers with the correct spelling and that it is referencing the correct range.\n\n<h3 id="AdvancedFiltertopic-20">What to do if Advanced Filter is not working</h3>\nIn general, when Advanced Filter throws an error, <strong>the problem is in one of the ranges</strong>.\n\nIf you have an error the following checks should fix most if not all errors:\n\n<li>Ensure all the range variables are referencing the expected ranges.</li>\n<li>Ensure the <em>Criteria</em> and <em>CopyTo</em> column headers are correctly spelled and exist in the column headers of the List range.</li>\n<li>Ensure that the <em>CopyTo</em> range references the header row only.</li>\n<li>Ensure that any Criteria columns using formulas do not have a header.</li>\n<li>Make sure that there are no trailing spaces in Criteria.</li>\n\n<strong>TIP: </strong>If you are debugging the code you can check any range using the <em>Address</em> property of the range:\n\n<img class="lazy" data-src="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-watch-window.png" alt="" width="434" height="98" srcset="https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-watch-window.png 434w, https://excelmacromastery.com/wp-content/uploads/2021/09/advanced-filter-watch-window-300x68.png 300w" sizes="(max-width: 434px) 100vw, 434px">\n\n\n\n',
'<h2>Export to PDF</h2>\nExportAsFixedFormat Type:=xlTypePDF, Filename:= "output.pdf"\n\n',
'<h2>delete table name in name manager</h2>\n1. Select the table\n2. On the Table Tools Menubar > Design > Tools\nSelect Convert to Range\n',
'<h2>Excel Hide Columns or Rows</h2>\nHide Columns\nColumns("B:B").Hidden = True\n\nor\nRange("B4").EntireColumn.Hidden = True\n\n',
'<h2>hide cell</h2>\nusr custom format: ;;;\n\nRange("A1").Select \nSelection.NumberFormat = ";;;" \nSelection.NumberFormat = "General" \nRange("A17").NumberFormat = "General" \nRows(1).NumberFormat = "hh:mm:ss" \nColumns("C").NumberFormat = "$#,##0.00_);[Red]($#,##0.00)"\n\nor Range.Hidden = True\n\n',
'<h2>Quick Guide to the VBA Array</h2>\nhttps://excelmacromastery.com/excel-vba-array/\n<table><thead>\n<tr><th>Task</th><th>Static Array</th><th>Dynamic Array</th></tr></thead><tbody>\n\n<tr><td>Declare</td><td>Dim arr(0  To  5) As Long </td><td>Dim arr() As Long<br>\nDim arr As Variant </td></tr>\n<tr><td>Set Size</td><td>See Declare above</td><td>ReDim arr(0  To  5)As Variant</td></tr>\n<tr><td>Get Size(number of items)</td><td>See <a href="https://excelmacromastery.com/excel-vba-array/#Get_the_Array_Size">ArraySize</a> function below.</td><td>See <a href="https://excelmacromastery.com/excel-vba-array/#Get_the_Array_Size">ArraySize</a> function below.</td></tr>\n<tr><td>Increase size (keep existing data)</td><td>Dynamic Only</td><td>ReDim Preserve arr(0 To 6)</td></tr>\n<tr><td>Set values</td><td>arr(1) = 22</td><td>arr(1) = 22</td></tr>\n<tr><td>Receive values</td><td>total = arr(1)</td><td>total = arr(1)</td></tr>\n<tr><td>First position</td><td>LBound(arr)</td><td>LBound(arr)</td></tr>\n<tr><td>Last position</td><td>Ubound(arr)</td><td>Ubound(arr)</td></tr>\n<tr><td>Read all items(1D)</td><td>For i = LBound(arr) To UBound(arr)<br>\nNext i<br>\n Or<br>\nFor i = LBound(arr,1) To UBound(arr,1)<br>\nNext i</td><td>For i = LBound(arr) To UBound(arr)<br>\nNext i<br>\n Or<br>\nFor i = LBound(arr,1) To UBound(arr,1)<br>\nNext i</td></tr>\n<tr><td>Read all items(2D)</td><td>For i = LBound(arr,1) To UBound(arr,1)<br>\n  For j = LBound(arr,2) To UBound(arr,2)<br>\n  Next j<br>\nNext i</td><td>For i = LBound(arr,1) To UBound(arr,1)<br>\n  For j = LBound(arr,2) To UBound(arr,2)<br>\n  Next j<br>\nNext i</td></tr>\n<tr><td>Read all items</td><td>Dim item As Variant<br>\n For Each item In arr<br>\nNext item</td><td>Dim item As Variant<br>\n For Each item In arr<br>\nNext item</td></tr>\n<tr><td>Pass to Sub</td><td>Sub MySub(ByRef arr() As String)</td><td>Sub MySub(ByRef arr() As String)</td></tr>\n<tr><td>Return from Function</td><td>Function GetArray() As Long()<br>\n    Dim arr(0 To 5) As Long<br>\n    GetArray = arr<br>\nEnd Function</td><td>Function GetArray() As Long()<br>\n    Dim arr() As Long<br>\n    GetArray = arr<br>\nEnd Function</td></tr>\n<tr><td>Receive from Function</td><td>Dynamic only</td><td>Dim arr() As Long <br>\nArr = GetArray()</td></tr>\n<tr><td>Erase array</td><td>Erase arr<br>\n*Resets all values to default</td><td>Erase arr<br>\n*Deletes array </td></tr>\n<tr><td>String to array</td><td>Dynamic only</td><td>Dim arr As Variant<br>\narr = Split("James:Earl:Jones",":")</td></tr>\n<tr><td>Array to string</td><td>Dim sName As String<br>\nsName = Join(arr, ":")</td><td>Dim sName As String<br>\nsName = Join(arr, ":")</td></tr>\n<tr><td>Fill with values</td><td>Dynamic only</td><td>Dim arr As Variant<br>\narr = Array("John", "Hazel", "Fred")</td></tr>\n<tr><td>Range to Array</td><td>Dynamic only</td><td>Dim arr As Variant<br>\narr = Range("A1:D2")</td></tr>\n<tr><td>Array to Range</td><td>Same as dynamic </td><td>Dim arr As Variant<br>\nRange("A5:D6") = arr</td></tr></tbody>\n</table>\n\n',
'<h2>search in excel</h2>\nSub filterCriteria()\n  ActiveSheet.Range("B3:D3").AutoFilter Field:=2, Operator:=xlFilterValues, Criteria1:=Array("Emily", "Daniel", "Gabriel")\nEnd Sub\n\nSub filterCriteria3()\n  Dim ID_range, k As Variant\n  ID_range = Application.Transpose(ActiveSheet.Range("F4:F6"))\n\n  For k = LBound(ID_range) To UBound(ID_range)\n    ID_range(k) = CStr(ID_range(k))\n  Next k\n  ActiveSheet.Range("B3:D3").AutoFilter Field:=1, Operator:=xlFilterValues, Criteria1:=ID_range\nEnd Sub\n\nSub MultipleCriteriaAndFilter()\n  Worksheets("xland_filter").Range("B4:E13").AutoFilter Field:=4, Criteria1:=">2", Operator:=xlAnd, Criteria2:="<=5"\nEnd Sub\n\nSub MultipleCriteriaOrFilter()\n  Worksheets("xlor_filter").Range("B4").AutoFilter Field:=3, Criteria1:="<1600", Operator:=xlOr, Criteria2:=">=2100"\nEnd Sub\n\nThis example finds all cells in the range A1:A500 in worksheet one that contain the value 2, and changes the entire cell value to 5. That is, the values 1234 and 99299 both contain 2 and both cell values will become 5. \nSub FindValue()\n    Dim c As Range\n    Dim firstAddress As String\n    With Worksheets(1).Range("A1:A500") \n        Set c = .Find(2, lookin:=xlValues) \n        If Not c Is Nothing Then \n            firstAddress = c.Address \n            Do \n                c.Value = 5 \n                Set c = .FindNext(c) \n            Loop While Not c Is Nothing\n        End If \n    End With\nEnd Sub\n\n\nThis example finds all cells in the range A1:A500 on worksheet one that contain the substring "abc" and then replaces "abc" with "xyz".\n\nSub FindString()\n    Dim c As Range\n    Dim firstAddress As String\n\n    With Worksheets(1).Range("A1:A500")\n        Set c = .Find("abc", LookIn:=xlValues)\n        If Not c Is Nothing Then\n            firstAddress = c.Address\n            Do\n                c.Value = Replace(c.Value, "abc", "xyz")\n                Set c = .FindNext(c)\n            Loop While Not c Is Nothing\n        End If\n    End With\nEnd Sub\n\n\nSub Find_from_Array()\n  Dim Rng As Range\n  Dim Author() As Variant\n  Set Rng = Range("C5:C14")\n  Author = Array("George R.R.Martin", "Siddhartha Mukherjee")\n  For i = 0 To UBound(Author)\n    For j = 1 To Rng.Rows.Count\n      If Rng.Cells(j, 1) = Author(i) Then\n        Range(Rng.Cells(j, 1).Offset(0, -1), Rng.Cells(j, 1).Offset(0, 2)).Interior.Color = vbGreen\n      End If\n    Next j\n  Next i\nEnd Sub\n\n    text_string = "a sadf dff assd fggd dd"\n    myArray = Split(text_string) \' split by space\n    MsgBox UBound(myArray) \' 5\n    MsgBox LBound(myArray) \' 0\n\nThe find method doesn\'t support multiple criteria in its search.\nYou could .Find one criteria in a loop and test the other three criteria for each match found until all four match.\n\nCode:\n    Dim Found As Range, Firstfound As String\n    Dim rngSearch As Range\n    Dim Criteria As Variant\n\n    Set rngSearch = Sheets("DataSheet").Range("B:B")\n\n    Criteria = Sheets("ControlSheet").Range("I12:I15").Value\n    Set Found = rngSearch.Find(What:=Criteria(1, 1),                                LookIn:=xlValues,                                LookAt:=xlWhole,                                SearchOrder:=xlByRows,                                SearchDirection:=xlNext,                                MatchCase:=False)\n    If Not Found Is Nothing Then\n        Firstfound = Found.Address\n        Do\n            If Found.EntireRow.Range("F1").Value = Criteria(2, 1) And                Found.EntireRow.Range("I1").Value = Criteria(3, 1) And                Found.EntireRow.Range("J1").Value = Criteria(4, 1) Then Exit Do \'Match found\n            \n            Set Found = rngSearch.FindNext(After:=Found)\n            If Found.Address = Firstfound Then Set Found = Nothing\n            \n        Loop Until Found Is Nothing\n    End If\n\n    If Not Found Is Nothing Then\n        Application.Goto Found.EntireRow\n    Else\n        MsgBox "Nothing matched all four criteria. ", , "No Match Found"\n    End If\n\n',
'<h2>Speed up data entry and validation with AutoComplete</h2>\n\nYou can\'t have autocomplete without VBA\nBut there is a small workaround without using VBA\nEnter some "dummy" single letter entries in your source list, A, B, C etc.\nand then sort the entire list.\n\nCreate the DV dropdown with that sorted source list.\nIn the DV cell, enter T then press the dropdown, and you will be at the    \nbeginning of your T entries - saves a lot of scrolling.\n\nSee http://www.contextures.com/xlDataVal02.html and/or http://www.contextures.com/xlDataVal10.html\n\nAutoComplete for dropdown lists is now available in Excel\n\n',
'<h2>run a macro when certain cells change in Excel</h2>\n\nPrivate Sub Worksheet_Change(ByVal Target As Range)\n    Dim KeyCells As Range\n\n\' The variable KeyCells contains the cells that will\n    \' cause an alert when they are changed.\n    Set KeyCells = Range("A1:C10")\n\n  If Not Application.Intersect(KeyCells, Range(Target.Address)) Is Nothing Then\n    \' Display a message when one of the designated cells has been changed.\n        MsgBox "Cell " & Target.Address & " has changed."\n  End If\nEnd Sub\n\n',
'<h2><span class="orange">selection in Visual Basic in Excel</span></h2>\n<div id="VisualBasicinExceltoc" class="toc"><a href="#topic-0" target="_self">select cells/ranges by using Visual Basic in Excel</a><br><a href="#topic-1" target="_self">Select a Cell on the Active Worksheet</a><br><a href="#topic-2" target="_self">Select a Cell on Another Worksheet in the Same Workbook</a><br><a href="#topic-3" target="_self">Select a Cell on a Worksheet in a Different Workbook</a><br><a href="#topic-4" target="_self">Select a Range of Cells on the Active Worksheet</a><br><a href="#topic-5" target="_self">Select a Range of Cells on Another Worksheet in the Same Workbook</a><br><a href="#topic-6" target="_self">Select a Range of Cells on a Worksheet in a Different Workbook</a><br><a href="#topic-7" target="_self">Select a Named Range on the Active Worksheet</a><br><a href="#topic-8" target="_self">Select a Named Range on Another Worksheet in the Same Workbook</a><br><a href="#topic-9" target="_self">Select a Named Range on a Worksheet in a Different Workbook</a><br><a href="#topic-10" target="_self">Select a Cell Relative to the Active Cell</a><br><a href="#topic-11" target="_self">Select a Cell Relative to Another (Not the Active) Cell</a><br><a href="#topic-12" target="_self">Select a Range of Cells Offset from a Specified Range</a><br><a href="#topic-13" target="_self">Select a Specified Range and Resize the Selection</a><br><a href="#topic-14" target="_self">Select a Specified Range, Offset It, and Then Resize It</a><br><a href="#topic-15" target="_self">Select the Union of Two or More Specified Ranges</a><br><a href="#topic-16" target="_self">Select the Intersection of Two or More Specified Ranges</a><br><a href="#topic-17" target="_self">Select the Last Cell of a Column of Contiguous Data</a><br><a href="#topic-18" target="_self">Select the Blank Cell at Bottom of a Column of Contiguous Data</a><br><a href="#topic-19" target="_self">Select an Entire Range of Contiguous Cells in a Column</a><br><a href="#topic-20" target="_self">Select an Entire Range of Non-Contiguous Cells in a Column</a><br><a href="#topic-21" target="_self">Select a Rectangular Range of Cells</a><br><a href="#topic-22" target="_self">Select Multiple Non-Contiguous Columns of Varying Length</a><br></div></center>\n<br><br>\n\n<h3 id="VisualBasicinExceltopic-0">select cells/ranges by using Visual Basic in Excel</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nhttps://williamkpchan.github.io/start20120304.htm\n\nisual Basic methods listed in the following table.\nMethod             Arguments\n------------------------------------------\nActivate           none\nCells              rowIndex, columnIndex\nApplication.Goto   reference, scroll\nOffset            rowOffset, columnOffset\nRange              cell1\n                   cell1, cell2\nResize             rowSize, columnSize\nSelect             none\nSheets             index (or sheetName)\nWorkbooks          index (or bookName)\nEnd                direction\nCurrentRegion      none\n\nThe examples in this article use the properties in the following table.\n\nProperty         Use\n---------------------------------------------------------------------\nActiveSheet      to specify the active sheet\nActiveWorkbook   to specify the active workbook\nColumns.Count    to count the number of columns in the specified item\nRows.Count       to count the number of rows in the specified item\nSelection        to refer to the currently selected range\n\n<h3 id="VisualBasicinExceltopic-1">Select a Cell on the Active Worksheet</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select cell D5 on the active worksheet, you can use either of the following examples:\n\nActiveSheet.Cells(5, 4).Select\n\n-or-\nActiveSheet.Range("D5").Select\n\n<h3 id="VisualBasicinExceltopic-2">Select a Cell on Another Worksheet in the Same Workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select cell E6 on another worksheet in the same workbook, you can use either of the following examples:\n\nApplication.Goto ActiveWorkbook.Sheets("Sheet2").Cells(6, 5)\n   -or-\nApplication.Goto (ActiveWorkbook.Sheets("Sheet2").Range("E6"))\n\nOr, you can activate the worksheet, and then use method 1 above to select the cell:\n\nSheets("Sheet2").Activate\nActiveSheet.Cells(6, 5).Select\n\n<h3 id="VisualBasicinExceltopic-3">Select a Cell on a Worksheet in a Different Workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select cell F7 on a worksheet in a different workbook, you can use either of the following examples:\n\nApplication.Goto Workbooks("BOOK2.XLS").Sheets("Sheet1").Cells(7, 6)\n\n-or-\nApplication.Goto Workbooks("BOOK2.XLS").Sheets("Sheet1").Range("F7")\n\nOr, you can activate the worksheet, and then use method 1 above to select the cell:\n\nWorkbooks("BOOK2.XLS").Sheets("Sheet1").Activate\nActiveSheet.Cells(7, 6).Select\n\n<h3 id="VisualBasicinExceltopic-4">Select a Range of Cells on the Active Worksheet</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the range C2:D10 on the active worksheet, you can use any of the following examples:\n\nActiveSheet.Range(Cells(2, 3), Cells(10, 4)).Select\nActiveSheet.Range("C2:D10").Select\nActiveSheet.Range("C2", "D10").Select\n\nor\n\nActiveSheet.Range(ActiveSheet.Cells(2, 3), ActiveSheet.Cells(10, 4)).Select\n\nor, alternatively, it could be simplified to this:\n\nRange(Cells(2, 3), Cells(10, 4)).Select\n\n\n<h3 id="VisualBasicinExceltopic-5">Select a Range of Cells on Another Worksheet in the Same Workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the range D3:E11 on another worksheet in the same workbook, you can use either of the following examples:\n\nApplication.Goto ActiveWorkbook.Sheets("Sheet3").Range("D3:E11")\nApplication.Goto ActiveWorkbook.Sheets("Sheet3").Range("D3", "E11")\n\nOr, you can activate the worksheet, and then use method 4 above to select the range:\n\nSheets("Sheet3").Activate\nActiveSheet.Range(Cells(3, 4), Cells(11, 5)).Select\n\n<h3 id="VisualBasicinExceltopic-6">Select a Range of Cells on a Worksheet in a Different Workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the range E4:F12 on a worksheet in a different workbook, you can use either of the following examples:\n\nApplication.Goto Workbooks("BOOK2.XLS").Sheets("Sheet1").Range("E4:F12")\nApplication.Goto       Workbooks("BOOK2.XLS").Sheets("Sheet1").Range("E4", "F12")\n\nOr, you can activate the worksheet, and then use method 4 above to select the range:\n\nWorkbooks("BOOK2.XLS").Sheets("Sheet1").Activate\n   ActiveSheet.Range(Cells(4, 5), Cells(12, 6)).Select\n\n<h3 id="VisualBasicinExceltopic-7">Select a Named Range on the Active Worksheet</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the named range "Test" on the active worksheet, you can use either of the following examples:\n\nRange("Test").Select\nApplication.Goto "Test"\n\n<h3 id="VisualBasicinExceltopic-8">Select a Named Range on Another Worksheet in the Same Workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the named range "Test" on another worksheet in the same workbook, you can use the following example:\n\nApplication.Goto Sheets("Sheet1").Range("Test")\n\nOr, you can activate the worksheet, and then use method 7 above to select the named range:\n\nSheets("Sheet1").Activate\nRange("Test").Select\n\n<h3 id="VisualBasicinExceltopic-9">Select a Named Range on a Worksheet in a Different Workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the named range "Test" on a worksheet in a different workbook, you can use the following example:\n\nApplication.Goto    Workbooks("BOOK2.XLS").Sheets("Sheet2").Range("Test")\n\nOr, you can activate the worksheet, and then use method 7 above to select the named range:\n\nWorkbooks("BOOK2.XLS").Sheets("Sheet2").Activate\nRange("Test").Select\n\n<h3 id="VisualBasicinExceltopic-10">Select a Cell Relative to the Active Cell</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select a cell that is five rows below and four columns to the left of the active cell, you can use the following example:\n\nActiveCell.Offset(5, -4).Select\n\nTo select a cell that is two rows above and three columns to the right of the active cell, you can use the following example:\n\nActiveCell.Offset(-2, 3).Select\n\nNote\nAn error will occur if you try to select a cell that is "off the worksheet." The first example shown above will return an error if the active cell is in columns A through D, since moving four columns to the left would take the active cell to an invalid cell address.\n\n<h3 id="VisualBasicinExceltopic-11">Select a Cell Relative to Another (Not the Active) Cell</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select a cell that is five rows below and four columns to the right of cell C7, you can use either of the following examples:\n\nActiveSheet.Cells(7, 3).Offset(5, 4).Select\nActiveSheet.Range("C7").Offset(5, 4).Select\n\n<h3 id="VisualBasicinExceltopic-12">Select a Range of Cells Offset from a Specified Range</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select a range of cells that is the same size as the named range "Test" but that is shifted four rows down and three columns to the right, you can use the following example:\n\nActiveSheet.Range("Test").Offset(4, 3).Select\n\nIf the named range is on another (not the active) worksheet, activate that worksheet first, and then select the range using the following example:\n\nSheets("Sheet3").Activate\nActiveSheet.Range("Test").Offset(4, 3).Select\n\n<h3 id="VisualBasicinExceltopic-13">Select a Specified Range and Resize the Selection</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the named range "Database" and then extend the selection by five rows, you can use the following example:\n\nRange("Database").Select\nSelection.Resize(Selection.Rows.Count + 5,    Selection.Columns.Count).Select\n\n<h3 id="VisualBasicinExceltopic-14">Select a Specified Range, Offset It, and Then Resize It</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select a range four rows below and three columns to the right of the named range "Database" and include two rows and one column more than the named range, you can use the following example:\n\nRange("Database").Select\nSelection.Offset(4, 3).Resize(Selection.Rows.Count + 2,    Selection.Columns.Count + 1).Select\n\n<h3 id="VisualBasicinExceltopic-15">Select the Union of Two or More Specified Ranges</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the union (that is, the combined area) of the two named ranges "Test" and "Sample," you can use the following example:\n\nApplication.Union(Range("Test"), Range("Sample")).Select\n\nNote that both ranges must be on the same worksheet for this example to work. Note also that the Union method does not work across sheets. For example, this line works fine.\n\nSet y = Application.Union(Range("Sheet1!A1:B2"), Range("Sheet1!C3:D4"))\n\nbut this line\nSet y = Application.Union(Range("Sheet1!A1:B2"), Range("Sheet2!C3:D4"))\n\nreturns the error message:\n\n<strong>Union method of application class failed</strong>\n\n<h3 id="VisualBasicinExceltopic-16">Select the Intersection of Two or More Specified Ranges</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the intersection of the two named ranges "Test" and "Sample," you can use the following example:\n\nApplication.Intersect(Range("Test"), Range("Sample")).Select\n\nNote that both ranges must be on the same worksheet for this example to work.\n\nExamples 17-21 in this article refer to the following sample set of data. Each example states the range of cells in the sample data that would be selected.\n\nA1: Name    B1: Sales    C1: Quantity\nA2: a       B2: $10      C2: 5\nA3: b       B3:          C3: 10\nA4: c       B4: $10      C4: 5\nA5:         B5:          C5:\nA6: Total   B6: $20      C6: 20\n\n<h3 id="VisualBasicinExceltopic-17">Select the Last Cell of a Column of Contiguous Data</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the last cell in a contiguous column, use the following example:\n\nActiveSheet.Range("a1").End(xlDown).Select\n\nWhen this code is used with the sample table, cell A4 will be selected.\n\n<h3 id="VisualBasicinExceltopic-18">Select the Blank Cell at Bottom of a Column of Contiguous Data</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select the cell below a range of contiguous cells, use the following example:\n\nActiveSheet.Range("a1").End(xlDown).Offset(1,0).Select\n\nWhen this code is used with the sample table, cell A5 will be selected.\n\n<h3 id="VisualBasicinExceltopic-19">Select an Entire Range of Contiguous Cells in a Column</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select a range of contiguous cells in a column, use one of the following examples:\n\nActiveSheet.Range("a1", ActiveSheet.Range("a1").End(xlDown)).Select\n   -or-\nActiveSheet.Range("a1:" &amp; ActiveSheet.Range("a1").       End(xlDown).Address).Select\n\nWhen this code is used with the sample table, cells A1 through A4 will be selected.\n\n<h3 id="VisualBasicinExceltopic-20">Select an Entire Range of Non-Contiguous Cells in a Column</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select a range of cells that are non-contiguous, use one of the following examples:\n\nActiveSheet.Range("a1",ActiveSheet.Range("a" &amp; ActiveSheet.Rows.Count).End(xlUp)).Select\n   -or-\nActiveSheet.Range("a1:" &amp; ActiveSheet.Range("a" &amp; ActiveSheet.Rows.Count).    End(xlUp).Address).Select\n\nWhen this code is used with the sample table, it will select cells A1 through A6. \n<h3 id="VisualBasicinExceltopic-21">Select a Rectangular Range of Cells</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nIn order to select a rectangular range of cells around a cell, use the CurrentRegion method. The range selected by the CurrentRegion method is an area bounded by any combination of blank rows and blank columns. The following is an example of how to use the CurrentRegion method:\n\nActiveSheet.Range("a1").CurrentRegion.Select\n\nThis code will select cells A1 through C4. Other examples to select the same range of cells are listed below:\n\nActiveSheet.Range("a1",    ActiveSheet.Range("a1").End(xlDown).End(xlToRight)).Select\n   -or-\nActiveSheet.Range("a1:" &amp;    ActiveSheet.Range("a1").End(xlDown).End(xlToRight).Address).Select\n\nIn some instances, you may want to select cells A1 through C6. In this example, the CurrentRegion method will not work because of the blank line on Row 5. The following examples will select all of the cells:\n\nlastCol = ActiveSheet.Range("a1").End(xlToRight).Column\nlastRow = ActiveSheet.Cells(ActiveSheet.Rows.Count, lastCol).End(xlUp).Row\nActiveSheet.Range("a1", ActiveSheet.Cells(lastRow, lastCol)).Select\n    -or-\nlastCol = ActiveSheet.Range("a1").End(xlToRight).Column\nlastRow = ActiveSheet.Cells(ActiveSheet.Rows.Count, lastCol).End(xlUp).Row\nActiveSheet.Range("a1:" &amp;    ActiveSheet.Cells(lastRow, lastCol).Address).Select\n\n<h3 id="VisualBasicinExceltopic-22">Select Multiple Non-Contiguous Columns of Varying Length</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo select multiple non-contiguous columns of varying length, use the following sample table and macro example:\n\nA1: 1  B1: 1  C1: 1  D1: 1\nA2: 2  B2: 2  C2: 2  D2: 2\nA3: 3  B3: 3  C3: 3  D3: 3\nA4:    B4: 4  C4: 4  D4: 4\nA5:    B5: 5  C5: 5  D5:\nA6:    B6:    C6: 6  D6:\n\nStartRange = "A1"\nEndRange = "C1"\nSet a = Range(StartRange, Range(StartRange).End(xlDown))\nSet b = Range(EndRange, Range(EndRange).End(xlDown))\nUnion(a,b).Select\n\nWhen this code is used with the sample table, cells A1:A3 and C1:C6 will be selected.\n\n',
'<h2>Create drop down list in Excel</h2>\n\n<div id="dropdownlisttoc" class="toc"><a href="#dropdownlisttopic-0" target="_self"><span class="orange">Excel drop down list</span></a><br><a href="#dropdownlisttopic-1" target="_self"><span class="orange">How to create drop down list in Excel</span></a><br><a href="#dropdownlisttopic-2" target="_self"> Make drop-down menu from a range of cells</a><br><a href="#dropdownlisttopic-3" target="_self"> Insert drop down list from a named range</a><br><a href="#dropdownlisttopic-4" target="_self"> Create drop-down from Excel table</a><br><a href="#dropdownlisttopic-5" target="_self"><span class="orange">How to create a dynamic dropdown list in Excel</span></a><br><a href="#dropdownlisttopic-6" target="_self"><span class="orange">Make a dynamic dropdown list in Excel 365/2021</span></a><br><a href="#dropdownlisttopic-7" target="_self"><span class="orange">How to create drop down list from another sheet</span></a><br><a href="#dropdownlisttopic-8" target="_self"><span class="orange">How to make drop-down list from another workbook</span></a><br><a href="#dropdownlisttopic-9" target="_self"> How to make a dynamic dropdown from another workbook</a><br><a href="#dropdownlisttopic-10" target="_self"><span class="orange">Searchable drop down list in Excel 365</span></a><br><a href="#dropdownlisttopic-11" target="_self"><span class="orange">Insert a drop down list with message</span></a><br><a href="#dropdownlisttopic-12" target="_self"><span class="orange">Make an editable drop down list in Excel</span></a><br></div></center>\n<br><br>\n<h3 id="dropdownlisttopic-0"><span class="orange">Excel drop down list</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nExcel drop down list, aka <i>dropdown box</i> or <i>dropdown menu</i>, is used to enter data in a spreadsheet from a predefined items list.\nWhen you select a cell containing the list, a small arrow appears next to the cell, so you click on it to make a selection.\n\nThe main purpose of using drop down lists in Excel is to limit the number of choices available for the user.\nApart from that, a dropdown prevents spelling mistakes and makes data input faster and more consistent.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/excel-dropdown-list.png">\n\n<h3 id="dropdownlisttopic-1"><span class="orange">How to create drop down list in Excel</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo make a drop-down list in Excel, use the <a href="https://www.ablebits.com/office-addins-blog/data-validation-excel/">Data Validation</a> feature.\nHere are the steps:\n\n<li>Select one or more cells where you want the picklist to appear.\nThis can be a single cell, a range of cells, or a whole column.\nTo select multiple non-contiguous cells, press and hold the <span>Ctrl</span> key.</li>\n<li>On the <i>Data</i> tab, in the <i>Data Tools</i> group, click <i>Data Validation</i>.</li>\n<li>On the <i>Settings</i> tab of the <i>Data Validation</i> dialog box, do the following:\n\n</li><li>In the <i>Allow</i> box, select <b>List</b>.</li>\n<li>In the <i>Source</i> box, type the items separated by a comma with or without spaces.\nOr select a range of cells on the sheet containing the items.</li>\n<li>Make sure the <i>In-cell dropdown box</i> is checked (default), otherwise the drop-down arrow won\'t appear next to the cell.</li>\n<li>Select or clear the <i>Ignore blank</i> option depending on how you want to handle empty cells.</li>\n<li>When done, click OK.</li>\n\n\nCongratulations! You have successfully created a simple dropdown list in Excel.\nNow, your users can click an arrow next to a cell, and then select the entry they want.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/create-dropdown-excel.png">\nA <b>drop down list of comma separated values</b> works well for small data validation lists that are unlikely to ever change.\nFor frequently updated lists, you\'d better use a <b>range</b> or <b>table</b> for the source.\nThe detailed step-by-step instructions for each method follow below.\n\n<span>Tip.</span> To expedite data input in your Excel sheets, you can also use a <a href="https://www.ablebits.com/office-addins-blog/create-data-entry-form-excel/">data entry form</a>.\n\n<h3 id="dropdownlisttopic-2"> Make drop-down menu from a range of cells</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo insert a drop-down list based on the values input in a range of cells, carry out these steps:\n\n<li>Start by creating a list of items that you want to include in the drop-down.\nFor this, just type each item in a separate cell.\nThis can be done in the same worksheet as the dropdown list or in a different sheet.</li>\n<li>Select the cell(s) that are to contain the list.</li>\n<li>On the ribbon, click the <i>Data</i> tab &gt; <i>Data Validation</i>.</li>\n<li>In the <i>Data Validation dialog window,</i> select <i>List</i> from the <i>Allow</i> drop-down menu.\nPlace the cursor in the <i>Source box</i> and select the range of cells containing the items, or click the <i>Collapse Dialog</i> icon and then select the range.\nWhen done, click OK.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dropdown-from-range.png">\n</li>\n\n<i>Advantages</i>: You can modify your dropdown list by making changes in the referenced range without having to edit the data validation list itself.\n\n<i>Drawbacks</i>: To add or remove items, you will need to update the <i>Source</i> range reference.<br>\n\n<h3 id="dropdownlisttopic-3"> Insert drop down list from a named range</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nInitially, this method of creating an Excel data validation list takes a bit more time but may save even more time in the long run.\n\n<li>Make a list of items on the sheet.\nThe values should be entered into a single column or row without any blank cells.\n\n<span>Tip.</span> It\'s a good idea to sort the items alphabetically or in a custom order you want them to appear in the drop-down menu.\n\n</li>\n<li>Create a named range.\nThe fastest way is to select the cells and type the desired name directly in the <i>Name Box</i>.\nWhen finished, click <span>Enter</span> to save the newly created named range.\nFor more information, please see <a href="https://www.ablebits.com/office-addins-blog/excel-named-range/#name-excel-range">how to define a name in Excel</a>.\nAs an example, let\'s create a range named <i>Ingredients</i>:\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/named-range.png">\n</li>\n<li>Select the cells for the picklist - on the same sheet as the named range or in a different worksheet.</li>\n<li>Open the <i>Data Validation</i> dialog window and configure the rule:\n\n</li><li>In the <i>Allow</i> box, select <b>List</b>.</li>\n<li>In the <b><i>Source</i></b> box, type an equals sign followed by the range name.\nIn our case, it\'s  <i>=Ingredients</i>.</li>\n<li>Click <i>OK</i>.</li>\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dropdown-from-named-range.png">\n\n\n<span>Note.</span> If your named range has at least one <b>blank cell</b>, leaving the <i>Ignore blank</i> box selected allows typing any value in the validated cell.\n\n<i>Advantages</i>: If you insert multiple drop-downs in different sheets, named ranges will make them a lot easier to identify and manage.\n\n<i>Drawbacks</i>: Takes a bit more time to set up.<br>\n\n<h3 id="dropdownlisttopic-4"> Create drop-down from Excel table</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nInstead of using a named range, you can place the source data into a fully functional <a href="https://www.ablebits.com/office-addins-blog/excel-table-tutorial/">Excel table</a>.\nWhy may you want to use a table? First and foremost, because it lets you create an <b>expandable dynamic drop-down list</b> that updates automatically as you add or remove items to/from the table.\n\nTo make a dynamic dropdown from an Excel table, follow these steps:\n\n<li>Type the list items in a table or convert an existing range to a table using the <span>Ctrl + T</span> shortcut.</li>\n<li>Select the cell(s) where you wish to insert a dropdown.</li>\n<li>Open the <i>Data Validation</i> dialog window.</li>\n<li>Select <i>List</i> from the <i>Allow</i> drop-down box.</li>\n<li>In the <i>Source</i> box, enter the formula referring to a specific column in your table, not including the header cell.\nFor this, use the <a href="https://www.ablebits.com/office-addins-blog/excel-indirect-function/">INDIRECT</a> function with a <a href="https://www.ablebits.com/office-addins-blog/structured-references-excel-tables/">structured reference</a> like this:\n<code>=INDIRECT("Table_name[Column_name]")</code>\n</li>\n<li>When done, click <i>OK</i>.</li>\n\nFor this example, we\'re making a dropdown menu from the column named <i>Ingredients</i> in <i>Table1</i>:\n\n<code>=INDIRECT("Table1[Ingredients]")</code>\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dropdown-from-table.png">\n<i>Advantages</i>: Easy and quick way to insert an expandable dynamic drop down menu in Excel.\n\n<i>Drawbacks</i>: Not found :)<br>\n\n<h3 id="dropdownlisttopic-5"><span class="orange">How to create a dynamic dropdown list in Excel</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nIf you regularly change the items in your picklist, the best approach is to create a <b>dynamic drop down list</b>.\nIn this case, the list will update automatically in all the cells that contain whenever you add or remove items to/from the source list.\n\nThe fastest way to make a dynamic drop down in Excel is from a table as shown above.\nThat is the default behavior of Excel tables; no extra settings or moves are required.\n\nAnother way is to use a regular named range and reference it with the OFFSET formula, as explained below.\n\n<li>Type the items for the drop down menu in separate cells.</li>\n<li>Create a <a href="https://www.ablebits.com/office-addins-blog/excel-named-range/#named-formula">named formula</a>.\nFor this, press <span>Ctrl + F3</span> to open the <i>New Name</i> dialog box.\nType the name you want in the <i>Name</i> box, and then enter the following formula in the <i>Refers to</i> box.\n<code>=OFFSET(Sheet3!$A$2, 0, 0, COUNTA(Sheet3!$A:$A), 1)</code>\n\nWhere:\n</li><li>Sheet3 - the sheet\'s name</li>\n<li>A - the column where the drop-down items are located</li>\n<li>$A$2 - the cell containing the first item</li>\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dynamic-dropdown-formula.png">\n\n<li>With the formula name defined, create a <a href="https://www.ablebits.com/office-addins-blog/excel-drop-down-list/comment-page-1/#dropdown-list-named-range">dropdown based on a named range</a> as usual.</li>\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dynamic-dropdown-list.png">\n<b>How this formula works</b>\n\nThe formula comprises two functions - <a href="https://www.ablebits.com/office-addins-blog/excel-offset-function/">OFFSET</a> and <a href="https://www.ablebits.com/office-addins-blog/excel-count-counta-function/#excel-counta-function">COUNTA</a>.\nThe COUNTA function counts all non-blanks in the specified column.\nOFFSET uses that count for the <i>height</i> argument, so it returns a reference to a range that includes only non-empty cells, starting from the cell containing the first item that you supply for the <i>reference</i> argument.\n\n<i>Advantages</i>: The main advantage of a dynamic drop-down list is that you won\'t have to change the reference to the named range each time the source list is expanded or contracted.\nYou simply delete or type new entries in the source list, and your dropdown menu will update automatically!\n\n<i>Drawbacks</i>: A bit complex setup process.<br>\n\n<h3 id="dropdownlisttopic-6"><span class="orange">Make a dynamic dropdown list in Excel 365/2021</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n<a href="https://www.ablebits.com/office-addins-blog/excel-dynamic-arrays-functions-formulas/">Dynamic Array Excel</a> has many innovative functions that are not available in older versions.\nOne of these new functions named <a href="https://www.ablebits.com/office-addins-blog/excel-unique-function-find-unique-values/">UNIQUE</a> can help you create a dynamic drop-down with a simple formula.\n\nSuppose you have a dataset with many repeated items like in column A in the image below.\nYou aim to add a dropdown list where each item appears just once.\n\nTo extract the unique items, use this formula:\n\n<code>=UNIQUE(A2:A21)</code>\n\nOptionally, you can sort the extracted values alphabetically by wrapping it in the <a href="https://www.ablebits.com/office-addins-blog/excel-sort-function-auto-sort-data-formula/">SORT</a> function:\n\n<code>=SORT(UNIQUE(A2:A21))</code>\n\nThis dynamic array formula is entered just in one cell (E2) and it automatically <a href="https://www.ablebits.com/office-addins-blog/spill-excel-tutorial/">spills</a> into as many cells as needed to show all the unique items.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/unique-formula.png">\nNext, you set up a drop down list using a <a href="https://www.ablebits.com/office-addins-blog/excel-spill-range/#spill-range-operator">spill range reference</a>, which is a cell address followed by a hash character.\nIn our case it\'s =$E$2# or =Sheet1!$E$2# if a dropdown is in another sheet:\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dynamic-dropdown-excel365.png">\nThe result is an <b>expandable dynamic drop-down list</b> - the UNIQUE function automatically extracts new items as they are added to the source table, and the spill range reference forces Excel to update the drop-down list accordingly.\n\n<span>Tip.</span> The same approach can be used to create a cascading drop-down list in Excel 365. For full details, please see <a href="https://www.ablebits.com/office-addins-blog/create-dynamic-dependent-drop-down-excel/">Make a dynamic dependent dropdown list an easy way</a>.\n\n\n<h3 id="dropdownlisttopic-7"><span class="orange">How to create drop down list from another sheet</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo insert a drop-down menu that pulls data from a different worksheet, you can use a normal range, named range or Excel table:\n\n<li>When making a <a href="#from-named-range">dropdown menu from a named range</a>, make sure the <a href="https://www.ablebits.com/office-addins-blog/excel-named-range/#excel-names-scope">scope of the name</a> is <i>Workbook</i>, and then set up a data validation list as usual.</li>\n<li>When creating a <a href="#from-table">drop down list from a table</a>, no extra steps are needed as table names/references are valid across the entire workbook.</li>\n<li>If you insert a <a href="#from-range">drop down from a regular range</a>, include the sheet\'s name in the source reference.\nIn the <i>Data Validation</i> dialog window, place the cursor in the <i>Source</i> box, switch to the other sheet and select the range containing the items.\nExcel will add the sheet name to the reference automatically.</li>\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dropdown-from-another-sheet.png">\n\n<h3 id="dropdownlisttopic-8"><span class="orange">How to make drop-down list from another workbook</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo create a drop-down menu in Excel using a list from another workbook as the source, you will have to define 2 named ranges - one in the source workbook and the other in the workbook where you wish to insert your Data Validation list.\nThe steps are:\n\n<li>In the source workbook, create a named range for the source list, say <i>Source_list</i>.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/named-range-source-book.png">\n</li>\n<li>In the main workbook, define a name that references your source list.\nFor this example, we create the name <i>Items</i> that refers to:\n<i>=SourceFile.xlsx!Source_list</i>\n\nIf the workbook\'s name contains spaces or non-alphabetical characters, it must be enclosed in single quotation marks like this:\n\n<i>=\'Source File.xlsx\'!Source_list</i>\n\nFor more details, please see <a href="https://www.ablebits.com/office-addins-blog/excel-reference-another-sheet-workbook/">How to make external reference in Excel</a>.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/name-main-book.png">\n</li>\n<li>In the main workbook, select the cell(s) for your picklist and click the <i>Data tab &gt; Data Validation</i>.\nIn the <i>Source</i> box, reference the name you created in step 2. In our case, it\'s =Items.</li>\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dropdown-from-another-workbook.png">\n\n<span>Notes:</span>\n\n<li>For the drop-down list from another workbook to work, the source workbook must be open.</li>\n<li>The dropdown list created in this way won\'t update automatically when items are added to or removed from the source list - you will have to modify the source list reference manually.</li>\n\n<h3 id="dropdownlisttopic-9"> How to make a dynamic dropdown from another workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo create a <b>dynamic dropdown list from another workbook</b>, define a formula name in the source workbook using the OFFSET formula explained in <a href="#dynamic">Creating a dynamic drop-down in Excel</a>.\nIn this case, a dropdown menu in another workbook will be updated on the fly once any changes are made to the source list.<br>\n\n<h3 id="dropdownlisttopic-10"><span class="orange">Searchable drop down list in Excel 365</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nIn Excel 365, data validation lists have an awesome <b>AutoComplete</b> feature.\nTo speed up data entry in large lists, just start typing the target word in the dropdown menu cell - the autocomplete algorithm will match the typed substring with the dropdown list items and show you the found matches.\nAs you type more characters, the displayed list is narrowed down, and conversely, when you remove characters, more matches are shown.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/searchable-dropdown.png">\n\n<h3 id="dropdownlisttopic-11"><span class="orange">Insert a drop down list with message</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nTo show an information message when someone clicks a dropdown list cell, proceed in this way:\n\n<li>In the <i>Data Validation</i> dialog box, switch to the <i>Input Message</i> tab.</li>\n<li>Make sure the <i>Show input message when cell is selected</i> option is checked.</li>\n<li>Type the title and message in the corresponding fields (up to 225 characters).</li>\n<li>Click <i>OK</i> to save the message and close the dialog.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/add-dropdown-message.png">\n</li>\nThe resulting drop down list with message will look similar to this:\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/dropdown-with-message.png">\n\n<h3 id="dropdownlisttopic-12"><span class="orange">Make an editable drop down list in Excel</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\nBy default, an Excel drop-down is non-editable, i.e. restricted to the values in the list itself.\nIf you type any other value, an error alert will show up.\nHowever, you can allow users to enter their own values.\nHere\'s how:\n\n<li>Open the <i>Data Validation</i> dialog window.</li>\n<li>On the <i>Error Alert</i> tab, uncheck the <i>Show error alert after invalid data is entered</i> box.\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/allow-other-entries.png">\n</li>\n\nTechnically, this turns a drop-down list into a <b>combo box</b>.\nThe term "combo box" means an editable dropdown that allows users to either select a value from the predefined list or type a custom value directly in the box.\n\nOptionally, you can display a <b>warning message</b> when someone attempts to enter a value that is not in the list:\n\n<li>On the <i>Error Alert</i> tab, select the <i>Show error alert after invalid data is entered</i> option.</li>\n<li>From the <i>Style</i> box, pick either <i>Information</i> or <i>Warning</i>, and then type the title and message text.\n\n</li><li><b>Information</b> message is best to be used if there is nothing wrong with the user entering a custom value.</li>\n<li><b>Warning</b> message will induce users to select an item from the drop-down box rather than enter their own data, though it does not prohibit it.</li>\n\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/make-editable-dropdown.png">\nAnd here\'s an editable Excel dropdown list with a warning message in action:\n\n<img src="https://cdn.ablebits.com/_img-blog/dropdown/editable-dropdown-excel.png">\n\n<span>Tip.</span> If you are not sure what title or message text to type, you can leave the fields empty.\nIn this case, Excel will display the default alert "<i>This value does not match the data validation restrictions defined for this cell</i>."\n\n<a href="https://www.ablebits.com/office-addins-blog/dependent-cascading-dropdown-lists-excel/">cascading (dependent) drop down list</a> with conditional Data Validation.\n\n\n\n',
'<h2>Notes on the examples</h2>\nThe ActiveSheet property can usually be omitted, because it is implied if a specific sheet is not named. For example, instead of\n\nActiveSheet.Range("D5").Select\n\nyou can use:\n\nRange("D5").Select\n\nThe ActiveWorkbook property can also usually be omitted. Unless a specific workbook is named, the active workbook is implied.\n\nWhen you use the Application.Goto method, if you want to use two Cells methods within the Range method when the specified range is on another (not the active) worksheet, you must include the Sheets object each time. For example:\n\n    With ActiveWorkbook.Sheets("Sheet1")\n        Application.Goto .Range(.Cells(2, 3), .Cells(4, 5))\n    End With\n\nFor any item in quotation marks (for example, the named range "Test"), you can also use a variable whose value is a text string. For example, instead of\n\nActiveWorkbook.Sheets("Sheet1").Activate\n\nyou can use\n\nActiveWorkbook.Sheets(myVar).Activate\n\nwhere the value of myVar is "Sheet1".\n\n\n\n',
'<h2>worksheetfunction Methods</h2>\n<a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.accrint">AccrInt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.accrintm">AccrIntM</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.acos">Acos</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.acosh">Acosh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.acot">Acot</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.acoth">Acoth</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.aggregate">Aggregate</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.amordegrc">AmorDegrc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.amorlinc">AmorLinc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.and">And</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.arabic">Arabic</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.asc">Asc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.asin">Asin</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.asinh">Asinh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.atan2">Atan2</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.atanh">Atanh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.avedev">AveDev</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.average">Average</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.averageif">AverageIf</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.averageifs">AverageIfs</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bahttext">BahtText</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.base">Base</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.besseli">BesselI</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.besselj">BesselJ</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.besselk">BesselK</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bessely">BesselY</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.beta_dist">Beta_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.beta_inv">Beta_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.betadist">BetaDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.betainv">BetaInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bin2dec">Bin2Dec</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bin2hex">Bin2Hex</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bin2oct">Bin2Oct</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.binom_dist">Binom_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.binom_dist_range">Binom_Dist_Range</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.binom_inv">Binom_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.binomdist">BinomDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bitand">Bitand</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bitlshift">Bitlshift</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bitor">Bitor</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bitrshift">Bitrshift</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.bitxor">Bitxor</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ceiling">Ceiling</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ceiling_math">Ceiling_Math</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ceiling_precise">Ceiling_Precise</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chidist">ChiDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chiinv">ChiInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chisq_dist">ChiSq_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chisq_dist_rt">ChiSq_Dist_RT</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chisq_inv">ChiSq_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chisq_inv_rt">ChiSq_Inv_RT</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chisq_test">ChiSq_Test</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.chitest">ChiTest</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.choose">Choose</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.clean">Clean</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.combin">Combin</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.combina">Combina</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.complex">Complex</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.confidence">Confidence</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.confidence_norm">Confidence_Norm</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.confidence_t">Confidence_T</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.convert">Convert</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.correl">Correl</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.cosh">Cosh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.cot">Cot</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.coth">Coth</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.count">Count</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.counta">CountA</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.countblank">CountBlank</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.countif">CountIf</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.countifs">CountIfs</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.coupdaybs">CoupDayBs</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.coupdays">CoupDays</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.coupdaysnc">CoupDaysNc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.coupncd">CoupNcd</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.coupnum">CoupNum</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.couppcd">CoupPcd</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.covar">Covar</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.covariance_p">Covariance_P</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.covariance_s">Covariance_S</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.critbinom">CritBinom</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.csc">Csc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.csch">Csch</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.cumipmt">CumIPmt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.cumprinc">CumPrinc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.daverage">DAverage</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.days">Days</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.days360">Days360</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.db">Db</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dbcs">Dbcs</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dcount">DCount</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dcounta">DCountA</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ddb">Ddb</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dec2bin">Dec2Bin</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dec2hex">Dec2Hex</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dec2oct">Dec2Oct</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.decimal">Decimal</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.degrees">Degrees</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.delta">Delta</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.devsq">DevSq</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dget">DGet</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.disc">Disc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dmax">DMax</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dmin">DMin</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dollar">Dollar</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dollarde">DollarDe</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dollarfr">DollarFr</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dproduct">DProduct</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dstdev">DStDev</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dstdevp">DStDevP</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dsum">DSum</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.duration">Duration</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dvar">DVar</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.dvarp">DVarP</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.edate">EDate</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.effect">Effect</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.encodeurl">EncodeUrl</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.eomonth">EoMonth</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.erf">Erf</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.erf_precise">Erf_Precise</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.erfc">ErfC</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.erfc_precise">ErfC_Precise</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.even">Even</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.expon_dist">Expon_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.expondist">ExponDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.f_dist">F_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.f_dist_rt">F_Dist_RT</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.f_inv">F_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.f_inv_rt">F_Inv_RT</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.f_test">F_Test</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.fact">Fact</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.factdouble">FactDouble</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.fdist">FDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.filterxml">FilterXML</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.find">Find</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.findb">FindB</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.finv">FInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.fisher">Fisher</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.fisherinv">FisherInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.fixed">Fixed</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.floor">Floor</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.floor_math">Floor_Math</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.floor_precise">Floor_Precise</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.forecast">Forecast</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.forecast_ets">Forecast_ETS</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.forecast_ets_confint">Forecast_ETS_ConfInt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.forecast_ets_seasonality">Forecast_ETS_Seasonality</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.forecast_ets_stat">Forecast_ETS_STAT</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.forecast_linear">Forecast_Linear</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.frequency">Frequency</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ftest">FTest</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.fv">Fv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.fvschedule">FVSchedule</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gamma">Gamma</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gamma_dist">Gamma_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gamma_inv">Gamma_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gammadist">GammaDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gammainv">GammaInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gammaln">GammaLn</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gammaln_precise">GammaLn_Precise</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gauss">Gauss</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gcd">Gcd</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.geomean">GeoMean</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.gestep">GeStep</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.growth">Growth</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.harmean">HarMean</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.hex2bin">Hex2Bin</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.hex2dec">Hex2Dec</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.hex2oct">Hex2Oct</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.hlookup">HLookup</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.hypgeom_dist">HypGeom_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.hypgeomdist">HypGeomDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.iferror">IfError</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ifna">IfNa</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imabs">ImAbs</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imaginary">Imaginary</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imargument">ImArgument</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imconjugate">ImConjugate</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imcos">ImCos</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imcosh">ImCosh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imcot">ImCot</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imcsc">ImCsc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imcsch">ImCsch</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imdiv">ImDiv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imexp">ImExp</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imln">ImLn</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imlog10">ImLog10</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imlog2">ImLog2</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.impower">ImPower</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.improduct">ImProduct</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imreal">ImReal</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imsec">ImSec</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imsech">ImSech</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imsin">ImSin</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imsinh">ImSinh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imsqrt">ImSqrt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imsub">ImSub</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imsum">ImSum</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.imtan">ImTan</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.index">Index</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.intercept">Intercept</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.intrate">IntRate</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ipmt">Ipmt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.irr">Irr</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.iserr">IsErr</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.iserror">IsError</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.iseven">IsEven</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.isformula">IsFormula</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.islogical">IsLogical</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.isna">IsNA</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.isnontext">IsNonText</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.isnumber">IsNumber</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.iso_ceiling">ISO_Ceiling</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.isodd">IsOdd</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.isoweeknum">IsoWeekNum</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ispmt">Ispmt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.istext">IsText</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.kurt">Kurt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.large">Large</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.lcm">Lcm</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.linest">LinEst</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ln">Ln</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.log">Log</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.log10">Log10</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.logest">LogEst</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.loginv">LogInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.lognorm_dist">LogNorm_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.lognorm_inv">LogNorm_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.lognormdist">LogNormDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.lookup">Lookup</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.match">Match</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.max">Max</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mdeterm">MDeterm</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mduration">MDuration</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.median">Median</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.min">Min</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.minverse">MInverse</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mirr">MIrr</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mmult">MMult</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mode">Mode</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mode_mult">Mode_Mult</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mode_sngl">Mode_Sngl</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.mround">MRound</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.multinomial">MultiNomial</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.munit">Munit</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.negbinom_dist">NegBinom_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.negbinomdist">NegBinomDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.networkdays">NetworkDays</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.networkdays_intl">NetworkDays_Intl</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.nominal">Nominal</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.norm_dist">Norm_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.norm_inv">Norm_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.norm_s_dist">Norm_S_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.norm_s_inv">Norm_S_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.normdist">NormDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.norminv">NormInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.normsdist">NormSDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.normsinv">NormSInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.nper">NPer</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.npv">Npv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.numbervalue">NumberValue</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.oct2bin">Oct2Bin</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.oct2dec">Oct2Dec</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.oct2hex">Oct2Hex</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.odd">Odd</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.oddfprice">OddFPrice</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.oddfyield">OddFYield</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.oddlprice">OddLPrice</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.oddlyield">OddLYield</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.or">Or</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.pduration">PDuration</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.pearson">Pearson</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.percentile">Percentile</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.percentile_exc">Percentile_Exc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.percentile_inc">Percentile_Inc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.percentrank">PercentRank</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.percentrank_exc">PercentRank_Exc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.percentrank_inc">PercentRank_Inc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.permut">Permut</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.permutationa">Permutationa</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.phi">Phi</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.phonetic">Phonetic</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.pi">Pi</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.pmt">Pmt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.poisson">Poisson</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.poisson_dist">Poisson_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.power">Power</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ppmt">Ppmt</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.price">Price</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.pricedisc">PriceDisc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.pricemat">PriceMat</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.prob">Prob</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.product">Product</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.proper">Proper</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.pv">Pv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.quartile">Quartile</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.quartile_exc">Quartile_Exc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.quartile_inc">Quartile_Inc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.quotient">Quotient</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.radians">Radians</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.randbetween">RandBetween</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rank">Rank</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rank_avg">Rank_Avg</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rank_eq">Rank_Eq</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rate">Rate</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.received">Received</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.replace">Replace</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.replaceb">ReplaceB</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rept">Rept</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.roman">Roman</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.round">Round</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rounddown">RoundDown</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.roundup">RoundUp</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rri">Rri</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rsq">RSq</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.rtd">RTD</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.search">Search</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.searchb">SearchB</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sec">Sec</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sech">Sech</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.seriessum">SeriesSum</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sinh">Sinh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.skew">Skew</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.skew_p">Skew_p</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sln">Sln</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.slope">Slope</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.small">Small</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sqrtpi">SqrtPi</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.standardize">Standardize</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.stdev">StDev</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.stdev_p">StDev_P</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.stdev_s">StDev_S</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.stdevp">StDevP</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.steyx">StEyx</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.substitute">Substitute</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.subtotal">Subtotal</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sum">Sum</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sumif">SumIf</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sumifs">SumIfs</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sumproduct">SumProduct</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sumsq">SumSq</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sumx2my2">SumX2MY2</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sumx2py2">SumX2PY2</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.sumxmy2">SumXMY2</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.syd">Syd</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.t_dist">T_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.t_dist_2t">T_Dist_2T</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.t_dist_rt">T_Dist_RT</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.t_inv">T_Inv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.t_inv_2t">T_Inv_2T</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.t_test">T_Test</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.tanh">Tanh</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.tbilleq">TBillEq</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.tbillprice">TBillPrice</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.tbillyield">TBillYield</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.tdist">TDist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.text">Text</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.tinv">TInv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.transpose">Transpose</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.trend">Trend</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.trim">Trim</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.trimmean">TrimMean</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ttest">TTest</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.unichar">Unichar</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.unicode">Unicode</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.usdollar">USDollar</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.var">Var</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.var_p">Var_P</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.var_s">Var_S</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.varp">VarP</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.vdb">Vdb</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.vlookup">VLookup</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.webservice">WebService</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.weekday">Weekday</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.weeknum">WeekNum</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.weibull">Weibull</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.weibull_dist">Weibull_Dist</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.workday">WorkDay</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.workday_intl">WorkDay_Intl</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.xirr">Xirr</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.xnpv">Xnpv</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.xor">Xor</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.yearfrac">YearFrac</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.yielddisc">YieldDisc</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.yieldmat">YieldMat</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.z_test">Z_Test</a>, <a href="https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.ztest">ZTest</a>\n',
'<h2>Open Task Scheduler With Run</h2>\ntaskschd.msc\n\n',
'<h2>install the User Defined Function</h2>\n1. Open up your workbook\n2. Get into VB Editor (Press Alt+F11)\n3. Insert a new module (Insert > Module)\n4. Copy and Paste in your code\n   example: IF(ISNA(VLOOKUP(A2,$AA$1:$AB$99,2,False)),"This employee has left the company.", VLOOKUP(A2,$AA$1:$AB$99,2,False))\n\n5. Get out of VBA (Press Alt+Q)\n6. Save your sheet\n\n',
'<h2><span class="orange">Create external reference</span></h2>\n\n<div id="externalreferencetoc" class="toc"><a href="#externalreferencetoctopic-0" target="_self"><span class="orange">Create an external reference (link) to a cell in another workbook</span></a><br><a href="#externalreferencetoctopic-1" target="_self">Create an external reference between cells in different workbooks</a><br><a href="#externalreferencetoctopic-2" target="_self">Create an external reference to a defined name in another workbook</a><br><a href="#externalreferencetoctopic-3" target="_self">Define a name that contains an external reference to cells in another workbook</a><br><a href="#externalreferencetoctopic-4" target="_self">Where external references can be used effectively</a><br><a href="#externalreferencetoctopic-5" target="_self">What an external reference to another workbook looks like</a><br><a href="#externalreferencetoctopic-6" target="_self">Create a link to another worksheet</a><br><a href="#externalreferencetoctopic-7" target="_self">Create an external reference between cells in different workbooks</a><br><a href="#externalreferencetoctopic-8" target="_self">Create a link to a worksheet in the same workbook</a><br></div></center>\n<br><br>\n\n<h3 id="externalreferencetoctopic-0"><span class="orange">Create an external reference (link) to a cell in another workbook</span></h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nYou can refer to the contents of cells in another workbook by creating an external reference formula.\n\nAn external reference (also called a link) is a reference to a cell or range on a worksheet in another Excel workbook, or a reference to a defined name in another workbook.\n\nSub ExtractData()\n    Application.ScreenUpdating = False\n    Set wb = Workbooks.Open("d:\我的文档\桌面\excel video\资料库.xls")\n    For row = 1 To 4\n        Workbooks("测试工作簿.xls").Worksheets("订单").Cells(row, 3).Value = wb.Worksheets("资料库").Cells(row, 2)\n    Next row\n    wb.Close SaveChanges:=False\n    Application.ScreenUpdating = True\nEnd Sub\n\n\n<h3 id="externalreferencetoctopic-1">Create an external reference between cells in different workbooks</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nOpen the workbook that will contain the external reference (the destination workbook) and the workbook that contains the data that you want to link to (the source workbook).\n\nSelect the cell or cells where you want to create the external reference.\n\nType <b>=</b> (equal sign).\nIf you want to use a function, such as SUM, then type the function name followed by an opening parenthesis.\n\nFor example, <b>=SUM(</b>.\n\nSwitch to the source workbook, and then click the worksheet that contains the cells that you want to link.\n\nSelect the cell or cells that you want to link to and press <b>Enter</b>.\n\n<b>Note: </b>If you select multiple cells, like =[SourceWorkbook.xlsx]Sheet1!$A$1:$A$10, and have a current version of <a href="https://products.office.com/en-us/buy/compare-microsoft-office-products" target="_blank">Microsoft 365</a>, then you can simply press <b>ENTER</b> to confirm the formula as a dynamic array formula.\n\nOtherwise, the formula must be entered as a legacy array formula by pressing <b>CTRL+SHIFT+ENTER</b>.\n\nFor more information on array formulas, see <a href="https://support.microsoft.com/en-us/office/guidelines-and-examples-of-array-formulas-7d94a64e-3ff3-4686-9372-ecfd5caa57c7">Guidelines and examples of array formulas</a>.\n\nExcel will return you to the destination workbook and display the values from the source workbook.\n\nNote that Excel will return the link with <a href="https://support.microsoft.com/en-us/office/switch-between-relative-absolute-and-mixed-references-dfec08cd-ae65-4f56-839e-5f0d8d0baca9">absolute references</a>, so if you want to copy the formula to other cells, you\'ll need to remove the dollar ($) signs:\n=[SourceWorkbook.xlsx]Sheet1!<b>$</b>A<b>$</b>1\nIf you close the source workbook, Excel will automatically append the file path to the formula:\n=\'C:\Reports\[SourceWorkbook.xlsx]Sheet1\'!$A$1\n\n<h3 id="externalreferencetoctopic-2">Create an external reference to a defined name in another workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nOpen the workbook that will contain the external reference (the destination workbook) and the workbook that contains the data that you want to link to (the source workbook).\n\nSelect the cell or cells where you want to create the external reference.\n\nType <b>=</b> (equal sign).\n\nSwitch to the source workbook, and then click the worksheet that contains the cells that you want to link.\n\nPress <b>F3</b>, select the name that you want to link to and press <b>Enter</b>.\n\n<b>Note: </b>If the named range references multiple cells, and you have a current version of <a href="https://products.office.com/en-us/buy/compare-microsoft-office-products" target="_blank">Microsoft 365</a>, then you can simply press <b>ENTER</b> to confirm the formula as a dynamic array formula.\n\nOtherwise, the formula must be entered as a legacy array formula by pressing <b>CTRL+SHIFT+ENTER</b>.\n\nFor more information on array formulas, see <a href="https://support.microsoft.com/en-us/office/guidelines-and-examples-of-array-formulas-7d94a64e-3ff3-4686-9372-ecfd5caa57c7">Guidelines and examples of array formulas</a>.\n\nExcel will return you to the destination workbook and display the values from the named range in the source workbook.\n\n<h3 id="externalreferencetoctopic-3">Define a name that contains an external reference to cells in another workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nOpen the destination workbook and the source workbook.\n\nIn the destination workbook, Go to <b>Formulas</b> &gt; <b>Defined Names</b> &gt; <b>Define Name</b>.\n\n<img class="lazy" data-src="https://support.content.office.net/en-us/media/57225530-459b-4c4f-b4a6-cea21655903b.png" alt="Defined Names group on the ribbon">\n\nIn the <b>New Name</b> dialog box, in the <b>Name</b> box, type a name for the range.\n\nIn the <b>Refers to</b> box, delete the contents, and then keep the cursor in the box.\nIf you want the name to use a function, enter the function name, and then position the cursor where you want the external reference.\n\nFor example, type <b>=SUM()</b>, and then position the cursor between the parentheses.\n\nSwitch to the source workbook, and then click the worksheet that contains the cells that you want to link.\n\nSelect the cell or range of cells that you want to link, and click <b>OK</b>.\n\n<img class="lazy" data-src="https://support.content.office.net/en-us/media/60cd0671-e99c-4a5b-b754-7520b46b0910.jpg" alt="Adding a defined name to an external workbook from Formulas > Defined Names > Define Name > New Name.">\n\n<h3 id="externalreferencetoctopic-4">Where external references can be used effectively</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nExternal references are especially useful when it\'s not practical to keep large worksheet models together in the same workbook.\n\n<b>Merge data from several workbooks</b>You can link workbooks from several users or departments and then integrate the pertinent data into a summary workbook.\n\nThat way, when the source workbooks are changed, you won\'t have to manually change the summary workbook.\n\n<b>Create different views of your data</b>You can enter all of your data into one or more source workbooks, and then create a report workbook that contains external references to only the pertinent data.\n\n<b>Streamline large, complex models</b>By breaking down a complicated model into a series of interdependent workbooks, you can work on the model without opening all of its related sheets.\n\nSmaller workbooks are easier to change, don\'t require as much memory, and are faster to open, save, and calculate.\n\n<h3 id="externalreferencetoctopic-5">What an external reference to another workbook looks like</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nFormulas with external references to other workbooks are displayed in two ways, depending on whether the source workbook — the one that supplies data to a formula — is open or closed.\nWhen the source is open, the external reference includes the workbook name in square brackets (<b>[ ]</b>), followed by the worksheet name, an exclamation point (<b>!</b>), and the cells that the formula depends on.\n\nFor example, the following formula adds the cells C10:C25 from the workbook named Budget.xls.\n\n<b>External reference</b>\n=SUM([Budget.xlsx]Annual!C10:C25)\n\nWhen the source is not open, the external reference includes the entire path.\n\n<b>External reference</b>\n\n=SUM(\'C:\Reports\[Budget.xlsx]Annual\'!C10:C25)\n\n<b>Note: </b>If the name of the other worksheet or workbook contains spaces or non-alphabetical characters, you must enclose the name (or the path) within single quotation marks as in the example above.\n\nExcel will automatically add these for you when you select the source range.\nFormulas that link to a defined name in another workbook use the workbook name followed by an exclamation point (!) and the name.\n\nFor example, the following formula adds the cells in the range named Sales from the workbook named Budget.xlsx.\n\n<b>External reference</b>\n\n=SUM(Budget.xlsx!Sales)\n\n<h3 id="externalreferencetoctopic-6">Create a link to another worksheet</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nSelect the cell or cells where you want to create the external reference.\n\nType <b>=</b> (equal sign).\nIf you want to use a function, such as SUM, then type the function name followed by an opening parenthesis.\n\nFor example, <b>=SUM(</b>.\n\nSwitch to the worksheet that contains the cells that you want to link to.\n\nSelect the cell or cells that you want to link to and press <b>Enter</b>.\n\n<b>Note: </b>If you select multiple cells (=Sheet1!A1:A10), and have a current version of <a href="https://products.office.com/en-us/buy/compare-microsoft-office-products" target="_blank">Microsoft 365</a>, then you can simply press <b>ENTER</b> to confirm the formula as a dynamic array formula.\n\nOtherwise, the formula must be entered as a legacy array formula by pressing <b>CTRL+SHIFT+ENTER</b>.\n\nFor more information on array formulas, see <a href="https://support.microsoft.com/en-us/office/guidelines-and-examples-of-array-formulas-7d94a64e-3ff3-4686-9372-ecfd5caa57c7">Guidelines and examples of array formulas</a>.\n\nExcel will return to the original worksheet and display the values from the source worksheet.\n\n<h3 id="externalreferencetoctopic-7">Create an external reference between cells in different workbooks</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nOpen the workbook that will contain the external reference (the destination workbook, also called the formula workbook) and the workbook that contains the data that you want to link to (the source workbook, also called the data workbook).\n\nIn the source workbook, select the cell or cells you want to link.\n\nPress <b>Ctrl+C</b> or go to <b>Home </b>&gt; <b>Clipboard </b>&gt; <b>Copy</b>.\n\nSwitch to the destination workbook, and then click the worksheet where you want the linked data to be placed.\n\nSelect the cell where you want to place the linked data, then go to <b>Home </b>&gt; <b>Clipboard </b>&gt; <b>Paste </b>&gt; <b>Paste Link</b>.\n\nExcel will return the data you copied from the source workbook.\n\nIf you change it, it will automatically change in the destination workbook when you refresh your browser window.\n\nTo use the link in a formula, type <b>=</b> in front of the link, choose a function, type <b>(</b>, and then type <b>)</b> after the link.\n\n<h3 id="externalreferencetoctopic-8">Create a link to a worksheet in the same workbook</h3> <a href="#top" target="_self"><b>⇧</b></a><br>\n\nSelect the cell or cells where you want to create the external reference.\n\nType <b>=</b> (equal sign).\nIf you want to use a function, such as SUM, then type the function name followed by an opening parenthesis.\n\nFor example, <b>=SUM(</b>.\n\nSwitch to the worksheet that contains the cells that you want to link to.\n\nSelect the cell or cells that you want to link to and press <b>Enter</b>.\n\nExcel will return to the original worksheet and display the values from the source worksheet.\n\n\n',
'<h2><span class="orange">Excel VBA, Get Data From Another Workbook Through Automation</span></h2>\nBasic object model of an Excel application:\n<img class="lazy" data-src="https://software-solutions-online.com/wp-content/uploads/2014/05/excel-object-model1.png" />\n\nApplication: As you can see at the top of the hierarchy there is the Excel application.\nEach application can have several workbooks.\n\nWorkbooks: Excel files are workbooks.\nYou can have several excel workbooks (files) open at the same time, but there will only be one Excel application open.\nYou can test this by <a href="https://software-solutions-online.com/splwow64-exe-error/#Method_2nbspEnd_the_process_manually_after_printing">looking at the task manager</a>.\n\nWorksheet: Each workbook consists of at least one worksheet.\nBy default workbooks have 3 worksheets (Sheet1, Sheet2, Sheet3).\n\n',
'<h2>Method 1, Adding a Workbook to the Current Application:</h2>\nIn this method a new workbook will be added to the collection of workbooks of the current Excel application.\nIn other words we will not be creating a new Excel application object, but only adding a new workbooks to its collection of workbooks.\nThis is done through the code below:\n\nSub main()\nDim wb As Workbook\nSet wb = Workbooks.Open( "D:StuffBusinessTempData.xlsx")\nEnd Sub\n\nWhere "D:StuffBusinessTempData.xlsx" is the path of the second excel workbook.\n\nAssume the following data is in sheet1 of the second workbook:\n\n<img class="lazy" data-src="https://software-solutions-online.com/wp-content/uploads/2014/05/excel-data-sheet1.png" alt="Excel Data Sheet" width="600" height="678" />\n\n\nThe code below will open the file "Data.xlsx", read the first column of data, and close the file:\n\nSub Example1()\nDim  wb As  Workbook\nDim  i As Integer \n\'open the workbook with data \nSet wb = Workbooks.Open( "D:StuffBusinessTempData.xlsx")\n\n\'read the data from the first columns \nFor  i = 1 To  9\n    Cells(i, 1) = wb.Worksheets("Sheet1").Cells(i + 1, 1) \nNext  i\n\n\'close the workbook \nwb.Close\nEnd  Sub \n\nNote how the cells in the second workbook were referenced using their complete name:\n\nwb.Worksheets("Sheet1").Cells(i + 1, 1)\n\nWe could have also chosen to use this:\n\nwb.Worksheets(1).Cells(i + 1, 1)\n\nResult:\n<img class="lazy" data-src="https://software-solutions-online.com/wp-content/uploads/2014/05/result-excel-automation1.png" alt="Result Excel, Automation">\n\nNote: The code below would have resulted in an error:\n\nwb.Sheet1.Cells(i + 1, 1)\n\n',
'<h2>Method 2, Creating a New Excel Application:</h2>\nThe method explained in the previous section has its pros and cons:\n\nPros: It is fast.\n\nCons: A workbook will flash on the screen and disappear after closing.\n\nHaving a workbook flash on the screen and disappear might not be a very professional thing to see in a program.\nOne method to overcome this is to do the following:\n\n\nAutomate a new Excel application object.\nSets its visible property to "hidden".\nOpen the second workbook from the new excel application object.\n\nThe problem with this method is that <a href="https://software-solutions-online.com/vba-wait/">the program will pause a little</a> until the new excel application is automated.\n\nSub Example2()\nDim  appExcel As  Application\nDim  wb As  Workbook\nDim  i As Integer \n\'create new excel application object \n\nSet appExcel = New Application\n\'set the applications visible property to false \nappExcel.Visible = False\n\n\'open the workbook with data \nSet wb = appExcel.Workbooks.Open( "D:StuffBusinessTempData.xlsx")\nEnd  Sub \n\nThis is assuming the second file is located in the path "D:StuffBusinessTempData.xlsx".\n\nThe complete code can be seen below:\n\nSub Example3()\nDim  appExcel As  Application\nDim  wb As  Workbook\nDim  i As Integer \n\'create new excel application object \nSet appExcel = New Application\n\n\'set the applications visible property to false \nappExcel.Visible = False\n\n\'open the workbook with data \nSet wb = appExcel.Workbooks.Open( "D:StuffBusinessTempData.xlsx")\n\nFor  i = 1 To  9\n    Cells(i, 1) = wb.Worksheets("Sheet1").Cells(i + 1, 1) \nNext  i\n\n\'close the workbooks \nwb.Close\n\n\'close the application \nappExcel.Quit\nEnd  Sub \n\nNote: Don\'t forget to close the excel application object or you will end up with resource leakage.\n\n',
'<h2>VBA Functions List</h2>\nVBA built-in functions.\n<b>String/Text Functions</b>  \nASC Returns ASCII value of a character\n<a href="https://www.automateexcel.com/vba/char-chr-function/" target="_blank">CHR Returns the character based on the ASCII value</a>\n<a href="https://www.automateexcel.com/vba/concatenate-text-strings/" target="_blank">CONCATENATE with & Used to join 2 or more strings together using the & operator</a>\nFORMAT STRINGS  Takes a string expression and returns it as a formatted string\n<a href="https://www.automateexcel.com/vba/instr-find-text" target="_blank">INSTR Returns the position of the first occurrence of a substring in a string</a>\n<a href="https://www.automateexcel.com/vba/instr-find-text" target="_blank">INSTRREV Returns the position of the first occurrence of a string in another string, starting from the end of the string</a>\n<a href="https://www.automateexcel.com/vba/upper-lower-proper-case-functions/" target="_blank">LCASE Converts a string to lowercase</a>\n<a href="https://www.automateexcel.com/vba/remove-characters" target="_blank">LEFT Extract a substring from a string, starting from the left-most character</a>\n<a href="https://www.automateexcel.com/vba/calculate-number-of-words-in-string/" target="_blank">LEN Returns the length of the specified string</a>\n<a href="https://www.automateexcel.com/vba/strings-substrings-functions/#The_VBA_LTrim_String_Function" target="_blank">LTRIM Removes leading spaces from a string</a>\n<a href="https://www.automateexcel.com/vba/strings-substrings-functions/#The_VBA_Mid_String_Function" target="_blank">MID Extracts a substring from a string (starting at any position)</a>\n<a href="https://www.automateexcel.com/vba/strings-substrings-functions/#The_VBA_Replace_String_Function" target="_blank">REPLACE Replaces a sequence of characters in a string with another set of characters</a>\n<a href="https://www.automateexcel.com/vba/remove-characters" target="_blank">RIGHT Extracts a substring from a string starting from the right-most character</a>\n<a href="https://www.automateexcel.com/vba/strings-substrings-functions/#The_VBA_RTrim_String_Function" target="_blank">RTRIM Removes trailing spaces from a string</a>\n<a href="https://www.automateexcel.com/vba/add-spaces-to-string-of-text" target="_blank">SPACE Returns a string with a specified number of spaces</a>\nSPLIT Used to split a string into substrings based on a delimiter\nSTR Returns a string representation of a number\n<a href="https://www.automateexcel.com/vba/compare-strings-strcomp/" target="_blank">STRCOMP Returns an integer value representing the result of a string comparison</a>\n<a href="https://www.automateexcel.com/vba/proper-upper-lower-case/" target="_blank">STRCONV Returns a string converted to uppercase, lowercase, proper case or Unicode</a>\n<a href="https://www.automateexcel.com/vba/strreverse-reverse-string/" target="_blank">STRREVERSE Returns a string whose characters are in reverse order</a>\n<a href="https://www.automateexcel.com/vba/strings-substrings-functions/#The_VBA_Trim_String_Function" target="_blank">TRIM Returns a text value with the leading and trailing spaces removed</a>\n<a href="https://www.automateexcel.com/vba/upper-lower-proper-case-functions/" target="_blank">UCASE Converts a string to all uppercase</a>\nVAL Returns the numbers found in a string\nFormat  Applies a format to an expression and returns the result as a string.\n<a href="https://www.automateexcel.com/vba/strings-substrings-functions/" target="_blank">String Creates a string consisting of a number of repeated characters.</a>\n<b>Date/Time Functions</b>  \n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">DATE Returns the current system date</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">DATEADD Returns a date after which a certain time/date interval has been added</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">DATEDIFF Returns the difference between two date values, based on the interval specified</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">DATEPART Returns a specified part of a given date</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">DATESERIAL Returns a date given a year, month, and day value</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">DATEVALUE Returns the serial number of a date</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">DAY Returns the day of the month (a number from 1 to 31) given a date value</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">FORMAT DATES Takes a date expression and returns it as a formatted string</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">HOUR Returns the hours (a number from 0 to 23) from a time value</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">MINUTE Returns the minutes (a number from 0 to 59) from a time value</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">MONTH Returns the month (a number from 1 to 12) given a date value</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">MONTHNAME Returns a string representing the month given a number from 1 to 12</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">NOW Returns the current system date and time</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">TIMESERIAL Returns a time given an hour, minute, and second value</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">TIMEVALUE Returns the serial number of a time</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">WEEKDAY Returns a number representing the day of the week, given a date value</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">WEEKDAYNAME Returns a string representing the day of the week given a number from 1 to 7</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">YEAR Returns a four-digit year (a number from 1900 to 9999) given a date value</a>\n<a href="https://www.automateexcel.com/vba/second-function/" target="_blank">Second Returns the second component of a supplied time.</a>\n<a href="https://www.automateexcel.com/vba/date-functions/" target="_blank">Time Returns the current time.</a>\n<a href="https://www.automateexcel.com/vba/timer-function/" target="_blank">Timer Returns the number of seconds that have elapsed since midnight.</a>\n<b>Math/Trig Functions</b>  \n<a href="https://www.automateexcel.com/vba/vba-abs-function/" target="_blank">ABS Returns the absolute value of a number</a>\nATN Returns the arctangent of a number\nCOS Returns the cosine of an angle\nEXP Returns e raised to the nth power\nFIX Returns the integer portion of a number\nFORMAT NUMBERS  Takes a numeric expression and returns it as a formatted string\nINT Returns the integer portion of a number\nLOG Returns the natural logarithm of a number\nRANDOMIZE Used to change the seed value used by the random number generator for the RND function\nRND Used to generate a random number (integer value)\nROUND Returns a number rounded to a specified number of digits\nSGN Returns the sign of a number\nSIN Returns the sine of an angle\nSQR Returns the square root of a number\nTAN Returns the tangent of an angle\nMOD Returns the remainder after division operator (Integer).\n<a href="https://www.automateexcel.com/vba/logical-operators/#Using_the_Xor_Logical_Operator" target="_blank">XOR The bitwise exclusion operator.</a>\n<b>Logical Functions</b>  \n<a href="https://www.automateexcel.com/vba/else-if-statement" target="_blank">AND Returns TRUE if all conditions are TRUE</a>\n<a href="https://www.automateexcel.com/vba/select-case" target="_blank">CASE Has the functionality of an IF-THEN-ELSE statement</a>\n<a href="https://www.automateexcel.com/vba/exit-for/" target="_blank">FOR...NEXT Used to create a FOR LOOP</a>\n<a href="https://www.automateexcel.com/vba/else-if-statement" target="_blank">IF-THEN-ELSE Returns a value if a specified condition evaluates to TRUE or another value if it evaluates to FALSE</a>\n<a href="https://www.automateexcel.com/vba/else-if-statement#IF_8211_Or_And_Xor_Not" target="_blank">OR Returns TRUE if any of the conditions are TRUE</a>\nSWITCH  Evaluates a list of expressions and returns the corresponding value for the first expression in the list that is TRUE\nWHILE...WEND  Used to create a WHILE LOOP\n<a href="https://www.automateexcel.com/vba/test-if-selection-is-range" target="_blank">IS Compares two object reference variables.</a>\n<a href="https://www.automateexcel.com/vba/like-operator/" target="_blank">LIKE The pattern matching operator.</a>\n<b>Information Functions</b>  \n<a href="https://www.automateexcel.com/vba/environ-function/" target="_blank">ENVIRON Returns the value of an operating system environment variable</a>\n<a href="https://www.automateexcel.com/vba/isdate-function/" target="_blank">ISDATE Returns TRUE if the expression is a valid date</a>\n<a href="https://www.automateexcel.com/vba/isempty-isblank" target="_blank">ISEMPTY Used to check for blank cells or uninitialized variables</a>\n<a href="https://www.automateexcel.com/vba/iserror-function/" target="_blank">ISERROR Used to check for error values</a>\n<a href="https://www.automateexcel.com/vba/isnull-function/" target="_blank">ISNULL Used to check for a NULL value</a>\n<a href="https://www.automateexcel.com/vba/isnumber-isnumeric/" target="_blank">ISNUMERIC Used to check for a numeric value</a>\n<a href="https://www.automateexcel.com/vba/isarray-function/" target="_blank">IsArray Tests if a supplied variable is an array.</a>\n<a href="https://www.automateexcel.com/vba/ismissing-function/" target="_blank">IsMissing Tests if an optional argument to a procedure is missing.</a>\nIsObject  Tests if a supplied variable represents an object variable.\n<b>Financial Functions</b>  \nDDB Returns the depreciation of an asset based on the double-declining balance method\nFV  Returns the future value of an investment\nIPMT  Returns the interest payment for an investment\nIRR Returns the internal rate of return for a series of cash flows\nMIRR  Returns the modified internal rate of return for a series of cash flows\nNPER  Returns the number of periods for an investment\nNPV Returns the net present value of an investment\nPMT Returns the payment amount for a loan\nPPMT  Returns the payment on the principal for a particular payment\nPV  Returns the present value of an investment\nRATE  Returns the interest rate for an annuity\nSLN Returns the depreciation of an asset based on the straight-line depreciation method\nSYD Returns the depreciation of an asset based on the sum-of-years\' digits depreciation method\n<b>File/Directory Functions</b> \n<a href="https://www.automateexcel.com/vba/chdir-statement/" target="_blank">CHDIR Used to change the current directory or folder</a>\n<a href="https://www.automateexcel.com/vba/chdrive-statement/" target="_blank">CHDRIVE Used to change the current drive</a>\n<a href="https://www.automateexcel.com/vba/curdir-function/" target="_blank">CURDIR Returns the current path</a>\n<a href="https://www.automateexcel.com/vba/dir-function/" target="_blank">DIR Returns the first filename that matches the pathname and attributes specified</a>\n<a href="https://www.automateexcel.com/vba/filedatetime-function/" target="_blank">FILEDATETIME Returns the date and time of when a file was created or last modified</a>\nFILELEN Returns the size of a file in bytes\n<a href="https://www.automateexcel.com/vba/getattr-function/" target="_blank">GETATTR Returns an integer that represents the attributes of a file, folder, or directory</a>\n<a href="https://www.automateexcel.com/vba/mkdir-statement/" target="_blank">MKDIR Used to create a new folder or directory</a>\nSETATTR Used to set the attributes of a file\nFileAttr  Returns the mode of a file that has been opened using the Open statement.\n<a href="https://www.automateexcel.com/vba/filecopy-statement/" target="_blank">FILECOPY Copies a file from one directory to another.</a>\n<a href="https://www.automateexcel.com/vba/freefile-function/" target="_blank">FREEFILE Returns the next valid free file number (Integer).</a>\nGET Reads data from a text file into a record.\n<a href="https://www.automateexcel.com/vba/input-statement/" target="_blank">INPUT Returns the open stream of an Input or Binary file (String).</a>\n<a href="https://www.automateexcel.com/vba/eof-function/" target="_blank">EOF Returns the value indicating if the end of a file has been reached (Boolean).</a>\n<a href="https://www.automateexcel.com/vba/write-statement/" target="_blank">WRITE Writes data to a sequential file.</a>\n<a href="https://www.automateexcel.com/vba/debug-print-immediate-window/" target="_blank">PRINT Writes display-formatted data to a sequential file.</a>\nPUT Writes data from a record into a text file.\n<a href="https://www.automateexcel.com/vba/delete-files-from-hard-drive/" target="_blank">KILL Deletes an existing file.</a>\nSEEK - Function Returns the current read/write position within a file opened using the Open statement (Long).\nSEEK - Statement  Repositions where the next operation in a file will occur.\n<a href="https://www.automateexcel.com/vba/open-statement/" target="_blank">OPEN Opens a text file or CSV file.</a>\n<a href="https://www.automateexcel.com/vba/line-input-statement/" target="_blank">LINE INPUT Reads a single line from an Open sequential file and assigns it to a string.</a>\n<a href="https://www.automateexcel.com/vba/close-statement/" target="_blank">CLOSE Closes a text file.</a>\nLOADPICTURE Loads a picture from a file into a Picture or Image control (IPictureDisp).\nLOC Returns the current read/write position within an open file (Long).\nLOCK  Locks access to parts of a file for other processes.\n<a href="https://www.automateexcel.com/vba/lof-function/" target="_blank">LOF Returns the length or size of an open file, in bytes (Long).</a>\n<a href="https://www.automateexcel.com/vba/rename-file/" target="_blank">NAME Renames an existing file or directory.</a>\nSAVEPICTURE Saves a graphic image from an objects Picture or Image property to a file.\n<b>Data Type Conv. Functions</b>  \nCBOOL Converts a value to a boolean\nCBYTE Converts a value to a byte (ie: number between 0 and 255)\n<a href="https://www.automateexcel.com/vba/convert-text-string-to-number/" target="_blank">CCUR Converts a value to currency</a>\nCDATE Converts a value to a date\n<a href="https://www.automateexcel.com/vba/convert-text-string-to-number/" target="_blank">CDBL Converts a value to a double</a>\n<a href="https://www.automateexcel.com/vba/convert-text-string-to-number/" target="_blank">CDEC Converts a value to a decimal number</a>\n<a href="https://www.automateexcel.com/vba/convert-text-string-to-number/" target="_blank">CINT Converts a value to an integer</a>\n<a href="https://www.automateexcel.com/vba/convert-text-string-to-number/" target="_blank">CLNG Converts a value to a long integer</a>\n<a href="https://www.automateexcel.com/vba/csng-function/" target="_blank">CSNG Converts a value to a single-precision number</a>\n<a href="https://www.automateexcel.com/vba/convert-number-to-string/" target="_blank">CSTR Converts a value to a string</a>\nCVAR  Converts a value to a variant\n<a href="https://www.automateexcel.com/vba/clnglng-function/" target="_blank">CLNGLNG Returns the expression converted to a longlong (64 bit platform) data type.</a>\nCLNGPTR Returns the expression converted to a longptr data type.\nCVDATE  Returns the expression converted to a date variant-subtype (Variant).\nFormatCurrency  Applies a currency format to an expression and returns the result as a string.\nFormatDateTime  Applies a date/time format to an expression and returns the result as a string.\nFormatNumber  Applies a number format to an expression and returns the result as a string.\nFormatPercent Applies a percentage format to an expression and returns the result as a string.\n<a href="https://www.automateexcel.com/vba/hex-function/" target="_blank">Hex Converts a numeric value to hexadecimal notation and returns the result as a string.</a>\nOct Converts a numeric value to octal notation and returns the result as a string.\n<a href="https://www.automateexcel.com/vba/macid-function/" target="_blank">MACID Converts a four character constant to a value that can be used by Dir, Kill, Shell and AppActivate.</a>\n<b>VBA Array Functions</b>  \n<a href="https://www.automateexcel.com/vba/arrays/" target="_blank">Array Creates an array, containing a supplied set of values.</a>\n<a href="https://www.automateexcel.com/vba/filter-arrays-function/" target="_blank">Filter Returns a subset of a supplied string array, based on supplied criteria.</a>\n<a href="https://www.automateexcel.com/vba/join-function/" target="_blank">Join Joins a number of substrings into a single string.</a>\n<a href="https://www.automateexcel.com/vba/ubound-lbound-function/" target="_blank">LBound Returns the lowest subscript for a dimension of an array.</a>\n<a href="https://www.automateexcel.com/vba/ubound-lbound-function/" target="_blank">UBound Returns the highest subscript for a dimension of an array.</a>\n<a href="https://www.automateexcel.com/vba/array-variables/" target="_blank">REDIM Initialises and resizes a dynamic array.</a>\n<b>VBA Message Functions</b>  \n<a href="https://www.automateexcel.com/vba/input-box-macro" target="_blank">InputBox Displays a dialog box prompting the user for input.</a>\n<a href="https://www.automateexcel.com/vba/yes-no-message-box/" target="_blank">MsgBox Displays a modal message box.</a>\n<b>VBA Error Handling Functions</b> \nCVErr Produces an Error data type for a supplied error code.\nError Returns the error message corresponding to a supplied error code.\n<b>Lookup/Ref Functions</b> \nCHOOSE  Returns a value from a list of values based on a given position\n<b>VBA Program Flow Functions</b> \nIIf Evaluates an expression and returns one of two values, depending on whether the expression evaluates to True or False.\n<b>Others</b> \n<a href="https://www.automateexcel.com/vba/vlookup" target="_blank">Vlookup in VBA Use the Excel spreadsheet Vlookup function from within VBA</a>\nAPPACTIVATE Activates an application or window currently running on Windows.\nBEEP  Produces a single beep noise.\nCALL  Transfers control to a subroutine or function.\nCALLBYNAME  Returns, sets or executes a method or property of an object (Variant).\nCOMMAND Returns the argument portion of the command line used to launch the application (Variant).\nCREATEOBJECT  Returns a reference after creating a new ActiveX or OLE object (Variant).\nDELETESETTING Removes (or deletes) a key or section from the registry.\n<a href="https://www.automateexcel.com/vba/doevents/" target="_blank">DOEVENTS Pauses execution to let the system process other events.</a>\nEQV The bitwise comparison operator.\nERASE Reinitialises the elements of an array.\nGETALLSETTINGS  Returns the list of key settings and their values from the registry (Variant).\nGETOBJECT Returns the reference to an object provided by an ActiveX component.\nGETSETTING  Reads from the registry and returns the value or key from the registry (String).\n<a href="https://www.automateexcel.com/vba/goto-line-label/" target="_blank">GOTO Transfers control to the subroutine indicated by the line label.</a>\nIMESTATUS Returns the current Input Method Editor mode of Microsoft Windows (Integer).\nIMP The logical implication from two values (Variant).\nIMPLEMENTS  Specifies an interface or class that can be implemented in a class module.\nLET Computes a value and assigns it to a new variable.\nLOAD  Loads an object but doesn\'t display it.\nLSET  Left aligns a string within a string variable.\n<a href="https://www.automateexcel.com/vba/logical-operators/#Using_the_Not_Logical_Operator" target="_blank">NOT The logical \'NOT\' operator (Boolean).</a>\nOBJPTR  Returns a LongPtr on a 64 bit version and a Long on a 32 bit version.\nPARTITION Returns a string indicating which particular range it falls into (String).\nQBCOLOR Returns the RGB colour corresponding to the specified colour number (Long).\nRAISEEVENT  Fires an event declared at module level within a class, form or document.\nREM Specifies a single line of comments.\nRESET Closes all files open with the Open statement.\nRGB Returns the number representing an RGB colour value (Long).\nRMDIR Removes an existing directory.\nRSET  Right aligns a string within a string variable.\nSAVESETTING Writes to the registry and saves a section or key in the registry.\n<a href="https://www.automateexcel.com/vba/sendkeys/" target="_blank">SENDKEYS Sends keystrokes to an application.</a>\nSET Assigns an object reference to an object variable.\nSHELL Returns the program\'s task id from running an executable programs (Double).\nSPC Inserts a specified number (n) of spaces when writing or displaying text.\nSTOP  Suspends execution.\nSTRPTR  Returns a LongPtr on a 64 bit version and a Long on a 32 bit version.\nTAB Used with the Print # statement or the Print method to position output.\nTYPENAME  Returns the data type of the variable as a string (String).\nTYPEOF  Returns the object data type.\nUNLOAD  Removes an object from memory.\nUNLOCK  Controls access to a file.\nVARPTR  Returns a LongPtr on a 64 bit version and a Long on a 32 bit version.\nVARTYPE Returns the number indicating the data type of a variable (Integer).\nWIDTH Assigns an output line width (characters) for the open file.\n\n',
'<h2>Setting up the VBA debugger</h2>\n<k>Step 1: Enable the VBA Debugger </k>\nChoose Options from the Tools menu. \nCheck the box next to "Break on All Errors" in the General tab of the Options dialogue box.\n\n<k>Step 2: Add Breakpoints </k>\nClick on the line of code where you wish to halt the execution, then press <b>F9</b> to add a breakpoint. You can also choose "Toggle Breakpoint" from the context menu when you right-click the line of code.\n\n<k>Step 3: Run the Code </k>\nPress F5 or choose the Run option in the VBA editor to accomplish this. \n\n<k>Step 4: Examine Variable Values </k>\nCheck the values of variables or objects in the Locals pane when the code reaches a breakpoint.\n\n<h3>Hovering the mouse over a particular variable</h3>\nHovering the mouse over a particular variable or expression in the code or typing it into the Immediate window will also reveal its value.\n\n<k>Step 5: Stepping through Code </k>\nYou can walk through the code by pressing F8 or the Step Into button in the VBA editor.\n\n<k>Step 6: Using the Immediate Window </k>\nA useful tool for evaluating variable values and testing expressions is the Instant window. \n\nYou can access the Immediate window by hitting Ctrl + G or by choosing Immediate Window from the View menu. In addition, you can run code and test expressions in the Instant window.\n\n<k>Step 7: Error Handling </k>\nWhen an error occurs, error handling is essential for keeping the code from crashing. With the On Error statement, you may add error management to your code. \n\nYou can indicate what should happen when an error arises using the On Error statement, such as displaying a message or logging the error.\n\n<h3>Best practices for debugging VBA code</h3>\nProgramming with VBA requires debugging VBA code. Thus best practices must be followed to enable successful and quick debugging. \n\n<k>Use Descriptive Variable Names</k>\nThe function of each variable in your code can be more recognized and understood if you give them descriptive names. \n\nThis makes it simpler to pinpoint which variable might be the source of an error, which is useful for debugging your code.\n<k>Use Option Explicit</k>\nTo ensure that all variables used in your code are declared, use Option Explicit at the beginning of your code. \n\nBy doing this, it is possible to avoid typos and other problems when using undeclared variables.\n<k>Break Your Code into Smaller Sections</k>\nIt may be simpler to locate an error if your code is divided into smaller portions. \n\nYou can reduce the number of potential mistakes caused by isolating particular portions of your code. It will make it simpler to discover and solve the error.\n<k>Use Error Handling</k>\nWhen an error occurs, using error handling can assist in keeping your program from crashing. \n\nAlthough it might be challenging to pinpoint the exact location of a mistake, this can be especially helpful when working with big and complicated codebases.\n<k>Use Breakpoints</k>\nBreakpoints make it possible to halt the execution of your code at particular points, making it simpler to check the values of variables and expressions there. \n\nThis can be helpful when you need to locate an error or check the values of particular variables while the code is executed.\n<k>Stepping Through Code</k>\nBy running your code one line at a time while stepping through it, you can check the execution path and see mistakes more easily. \n\n',
'<h2>To access an SQL Server</h2>\nFirst, you need a data connection.\nIf you are using a work SQL Server, then you will be given details of your server by your IT department.\n\nThis will include:\nThe Server Name: It can also take this from the Connection String if you have it.\nAuthentication Method: You will use either:\nWindows Authentication, using your Windows username and password\nSQL Server Authentication, using a separate username and password\n\nIf you have Microsoft SQL Server on your own computer, then the server name could be “localhost" or “.", and you will probably use Windows Authentication.\n\nYou can use this connection to retrieve the Microsoft SQL Server data.\n\nThere are three different places in Excel where you can load SQL data:\n\nIn the main Excel window\nIn the Get and Transform window (also known as the Power Query editor)\nIn the Power Pivot window (also known as the Data Model)\nWe will have a look at each of these places.\n\n<h3>Connecting SQL to the main Excel window</h3>\nThe main Excel window is the one you use every time you open Excel.\nTo load data from SQL Server, go to Data – Get Data – From Database – From SQL Server Database.\n\nYou will then have to provide the Server Name.\nThere are four SQL Server data sources that you could query to return the results.\n\nYou may want the data from a table.\n\nYou may want the query results from a previously created view.\n\nYou may want the results from a stored procedure.\n\nYou may want to run an ad hoc SQL query using the SELECT statement.\nIf you want to run a Stored Procedure or an ad hoc query, then at this stage, you will need to click on “Advanced options" and write the query in the box provided.\nYou will also need to enter the name of the database as well.\n\nNext, you need to provide the Authentication mode and any credentials required:\n\nIf you want to retrieve the results of a table or query, you can select the table or query.\n\nIf you then click “Load," it will be loaded into your Excel Workbook.\n\nOnce you have made the link, it will load the data into an Excel Table.\nYou can then use it just like other data stored in a table.\n\nYou can refresh the data whenever you want by right-hand clicking inside the table and choosing Refresh, or by going to Table Design – Refresh.\n\n<h3>Connecting SQL to Get and Transform</h3>\nThe second way to connect to SQL data is by using the Get and Transform window.\n\nThis follows the same process for connecting to SQL Server as mentioned above, except that you press “Transform Data" instead of Load.\n\nOnce you have done this, then the data is in the Get and Transform window, also known as the Power Query Editor.\n\nYou can also load data directly from the Power Query Editor.\nTo do this, go to Home – New Source.\n\nYou can then perform additional manipulations before the data transfer into Excel.\n\nFor example, you might want to:\nHide some columns or rows (by going to Home – Choose/Remove Columns)\n\nAdd additional columns using formulas.\n(However, Power Query uses a language called M, which differs significantly from Excel.)\n\nSummarise the data using the Group By function\nIf you do this in Power Query, it will reduce the amount of data that goes into Excel.\n\nPower Query reduces the amount of data that it receives from SQL Server through a process called Query Folding.\n\nFor example, you could retrieve all the contents of a table into Power Query, limit the number of rows to just 50, and reduce the number of columns used to just two.\n\nThis reduction will be incorporated into the SQL statement so that Excel only retrieves the needed rows and columns from SQL Server.\nThis reduces network traffic and increases the speed of retrieving that data.\n\nWhen you leave the Power Query window by going to Home – Close & Load, it would then load the data into an Excel Table as before.\n\nHowever, if you go to “Home – Close & Load To…" instead, you could then:\n\nUse it in a Pivot Table or Chart without loading the data in Excel as a Table.\nSave it as a Connection (without loading the data into an Excel Table).\n\nIf you save it as a connection, you can use it later as the data source in any new Pivot Tables.\n\nIn “Save & Load To…", there is a checkbox for “Add this data to the Data Model." If you click on this, Excel will then export the data into Power Pivot, also known as the Data Model.\nWe\'ll have a look at the Data Model in the next part of this Article.\n\n<h3>Connecting SQL to Power Pivot</h3>\nThe third way of connecting SQL to Excel directly is by using the Data Model, also known as Power Pivot.\nTo open the Data Model, you need to go to Data – Manage Data Model.\n\nThen you can import the data into Power Pivot by going to Home – Get External Data – From Database – From SQL Server.\nYou then connect to SQL Server in a similar process as before.\n\nOnce you have imported the data, you can then create calculation columns or measures.\nPower Pivot uses a formula language called DAX to build formulas.\nDAX is an extended version of the Excel formulas.\n\nOnce you have finished, you can then create a Power Pivot Table by going to Home – PivotTable – PivotTable.\n\nThis allows you to create Pivot Tables or charts from this data.\n\n',
'<h2>run a Macro by clicking a specific cell</h2>\nOption Explicit\nSub Worksheet_SelectionChange(ByVal Target As Range)\n    If Selection.Count = 1 Then\n        If Not Intersect(Target, Range("D4")) Is Nothing Then\n            Call MyMacro\n        End If\n    End If\nEnd Sub\n\n\n',
'<h2>Automatically open a specific worksheet when open workbook</h2>\ndouble click This Workbook to open the Module,\nand then copy and paste the following VBA code in the right pane.\n\nPrivate Sub Workbook_Open()\n  Sheets("开始").Activate\nEnd Sub\n\nPrivate Sub Workbook_Open() \n Application.WindowState = xlMaximized \nEnd Sub\n\n\n',
'<h2>Jump To Sheet</h2>\nJump to the first worksheet of the workbook\nSub GoToFirstSheet()\nOn Error Resume Next\nSheets(1).Select\nEnd Sub\n\nJump to the last worksheet of the workbook\nSub GoTolastSheet()\nOn Error Resume Next\nSheets(Sheets.Count).Select\nEnd Sub\n\nJump To Sheet\nSub JumpToSheet()\n    Dim FindName As String, FindSheet As Worksheet\n        FindName = InputBox(prompt:="Enter the sheet name that you need to find", Title:=" jump to Specific Sheet "")\n\n        For Each FindSheet In ActiveWorkbook.Worksheets\n            If FindSheet.Name = FindName Then\n                FindSheet.Activate\n                Exit Sub\n            End If\n        Next\nEnd Sub\n\nSub JumpTo派工单()\n  Sheets("派工单").Activate\nEnd Sub\n\n',
'<h2>declare a Public variable</h2>\nPlace variable in the Declarations section of VBA code below the Option Explicit statement, outside of any of your Sub Procedures or Functions and you also have to use the Public keyword.\n\n<img class="lazy" data-src="https://www.automateexcel.com/excel/wp-content/uploads/2019/03/PublicVariable.png">\n\nPublic Number As Integer \' Public Integer variable. \nPublic NameArray(1 To 5) As String \' Public array variable. \n\' Multiple declarations, two Variants and one Integer, all Public. \nPublic MyVar, YourVar, ThisVar As Integer \n\n\n',
'<h2>使用 EXCEL 设计订单表格</h2>\n\n<h3>制作下拉选单 （输入时可以使用三角符选择）</h3>\n在菜单 选\n资料 资料认证 清单 框选数据范围（可以是外部工作簿或工作表）\n框选数据范围可以非常大 以满足日后不断增加的数据项目\n\n也可以把框选数据范围转换成表格 这样得出一个名称代表框选数据范围 也能够满足日后不断增加的数据项目\n如果旧版本不能转换成表格 可以用软件自动检测数据范围 给予一个名称\n\n<h3>查找客户的电话</h3>\n可以设定电话栏\n=vlookup(关键字, 表格范围, 栏数, 比对方式)\n=vlookup($d$5, 表格1, 2, 0) \'代表需要完全正确\n按下F4 可以锁定单元格\n<h3>避免因为找不到数据出现 #N/A 使用iferror</h3>\n\n=iferror(公式, 错误处理)\n=iferror(vlookup($d$5, 表格1, 2, 0), "")\n\n<h3>查找客户住址</h3>\n可以设定住址栏\n=vlookup($d$5, 表格1, 3, 0) \'第三栏\n\n<h3>计算金额 如果数量单元格是空白 计算结果会出现错误提示 用if 函数来避免</h3>\n= if(条件, 合格情况, 不合格况)\n= if(or(品项空白, 数量空白), 金额维持空白, 数量x单价) \' or 函数，满足任何一项都成立\n= if(or(d10="", e10=""), "", e10 x f10) \' or 函数，满足任何一项都成立\n\n<h3>设定单元格格式可以使单元格按情况更改颜色</h3>\n设定单元格格式可以使单元格按情况更改颜色\n\n<h3>choose 函数可以用来帮助vlookup 调换栏目查找</h3>\n= choose(__, 甲, 乙, 丙)\n= choose(2, 甲, 乙, 丙) \' 乙\n= choose(2, 表格2[编号], 表格2[产品])\' 表格2[产品]\n= choose({2, 1}, 表格2[编号], 表格2[产品])\' 表格2[产品], 表格2[编号]\n\n<h3>按照品项查找编号</h3>\n=iferror(vlookup(d10, choose({2, 1}, 表格2[编号], 表格2[产品]), 2, 0), "")\n\n\n<h3>读入外部工作簿 抽出数据 填入目前工作表 使用for next 流程</h3>\nSub ExtractData()\n    Application.ScreenUpdating = False \'停止屏幕更新 避免减低运行速度\n    Dim 横 As Integer \'定义 横 变量\n    Dim wb As Workbook \'定义 wb 变量，工作簿\n\n    Set wb = Workbooks.Open("d:\我的文档\桌面\excel video\资料库.xls") \'打开外部工作簿\n    For 横 = 1 To 4\n        Cells(横, 3).Value = wb.Worksheets("资料库").Cells(横, 2) \'将外部工作簿数据填入目前工作表\n    Next 横\n\n    wb.Close SaveChanges:=False \'关闭外部工作簿 不更新\n    Application.ScreenUpdating = True \'从新更新屏幕\nEnd Sub\n\n\n<h3>读入外部工作簿 抽出数据 填入目前工作表 使用 range 范围</h3>\nSub testData()\n    Application.ScreenUpdating = False\n    Set wb = Workbooks.Open("d:\我的文档\桌面\excel video\资料库.xls")\n\n    \'将 wb "a2" 数据填入目前工作表"订单" "A2"范围\n    ThisWorkbook.Sheets("订单").Range("A2") = wb.Range("a2")\n\n    wb.Close SaveChanges:=False \'关闭外部工作簿 不更新\n    Application.ScreenUpdating = True \'从新更新屏幕\nEnd Sub\n\n\n<h3>重置（清空）范围 使用 ClearContents</h3>\nSub reset()\n    Worksheets("订单").Range("B9:c15").ClearContents\nEnd Sub\n\n',
'<h2>在excel 使用vba编写程式 要打开 Visual Basic程式编辑</h2>\n打开 Visual Basic 程式编辑 可以在键盘按 alt+F11\n或者可以在自定义功能区添加Visual Basic图标 点按图标就进入Visual Basic编程\n\n',
'<h2>在excel 编写程式 首先建立一个模组</h2>\n建立模组後 就建立sub 宏\n建立重设表格 sub\nsub 重设表格()\n  sheets("订单").range("d5, d10:e16").ClearContents\nend sub\n\nsheets("订单") 指定一个工作表\nrange("d5, d10:e16") 指定一个范围 要用引号框住 中间可以有多个逗号指向各个不同区域\nClearContents 是清除单元格内容\n点 . 用来连接多个函数\n\n按F5 可以立即执行宏 可以测试是否有效\n\n',
'<h2>用vba 来取得范围内最後一行数据</h2>\nCurrentRegion 目前范围\nRange("A1").CurrentRegion\n\nEnd 末端\nRange("A1").CurrentRegion.End(xlToRight) \'在A1单元格范围 移动到最右边\nRange("A1").CurrentRegion.End(xlDown) \'在A1单元格范围 移动到最下边\n\n定义一个变数来储存一个未知数值\ndim 目前编号 as integer \' 定义一个变数叫 目前编号, 这是一个整数\n\n目前编号 = sheets("资料库").range("a1").CurrentRegion.End(xlDown).value \' value 是单元格的值\nsheets("订单").range("G6").value = 目前编号 + 1\n\nsheets("订单").range("G7").value = date \' date 是日期函数\n\n',
'<h2>把工作表上的按钮指定向一个宏</h2>\n点按按钮就可以执行一组动作 叫宏 或者叫巨集 或者叫功能\n带有宏的工作簿 要储存为启用巨集的工作簿\n\n',
'<h2>Copy a Range using Variable</h2>\ndeclare a variable as a range\ndeclared the range A1:A10 as a variable rng\ncopy it using the following code\n\nSub range_variable()\n  Dim rng As Range\n  Set rng = Range("b3:g24")\n  rng.Copy\nEnd Sub\n\n\ncopy from the range B:G in the last row of column B,\nand paste that into B:G the next blank row in column B\nto the last row number in A, 0\n\nlrB = cells (rows.count, "B").End(xlUp).Row\nRange("B" & lrB & ":G" & lrB).copy destination:=range ("B" & lrB +1 &":G" & lr)\n\n\nDim lr As Long\nlr = Cells(Rows.Count, "A").End(xlUp).Row\nRange("b2:G2").Copy Destination:=Range("B3:G" & lr)\n\nSub Copy_Range()\n  Range("B5:C7").Copy Range("F5:G7")\nEnd Sub\n\nSub CopyAndPaste()\n  ActiveSheet.Range("a1").Select\n  Selection.End(xlDown).Select\n  lastRow = ActiveCell.Row + 1\n  lastCell = "A" & lastRow\n  ActiveSheet.Range("a1").Select\n  ActiveSheet.Range(Selection, Selection.End(xlToRight)).Select\n  Selection.Copy\n  ActiveSheet.Range(lastCell).Select\n  ActiveSheet.Paste\nEnd Sub\n\nSub DeclareAndSettingRange()\n  Dim rng As Range\n  Set rng = Range("A10:B10")\n\n  rng.Value = "AutomateExcel"\n  rng.Font.Bold = True\n  rng.Select\n  rng.Columns.AutoFit\nEnd Sub\n\n',
'<h2>Using Range Variable in a Function</h2>\n\nSub vba_range_variable()\n  Dim iNames As Variant\n  Dim rng As Range\n  Set rng = Range("A1:A10")\n  Range("B1") = WorksheetFunction.Max(rng)\nEnd Sub\n\nCount Number of Rows and Columns\n\nSub range_variable()\n  Dim rng As Range\n  Set rng = Range("A1:A10")\n  MsgBox "This range has " & rng.Rows.Count & " row(s) and " &   rng.Columns.Count & " coulmn(s)."\nEnd Sub\n\nSub 复制()\n  Set rng = Range("b3:g24")\n  rng.Copy\n  Range("临时!b3:g24").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False\nEnd Sub\n\nSub 粘贴()\n  Set rng = Range("临时!b3:g24")\n  rng.Copy\n  Range("入库登记!b3:g24").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False\nEnd Sub\n\n\n\nthisRange = cells(rows.count, "B").End(xlUp).Row\nRange("B" & thisRange & ":G" & thisRange).copy destination:=range ("B" & thisRange +1 &":G" & lr)\n\nDim lr As Long\nlr = Cells(Rows.Count, "A").End(xlUp).Row\nRange("b2:G2").Copy Destination:=Range("B3:G" & lr)\n\n\n',
'<h2>Excel WorksheetFunction</h2>\nWorksheetFunction is an Excel worksheet functions that can be called from Visual Basic.\n\nSet myRange = Worksheets("Sheet1").Range("A1:C10") \nanswer = Application.WorksheetFunction.Min(myRange) \nMsgBox answer\n\n品项数量 = WorksheetFunction.CountA(Sheets("订单").range("D10:D16")) \nMsgBox 品项数量\n\n\n\n',
'<h2>储存订单功能</h2>\nsub 储存订单()\ndim 品项数量 as integer, 空白列 as integer\n品项数量 = WorksheetFunction.CountA(Sheets("订单").range("D10:D16")) \n\n\' 找出空白列位置\n空白列 = sheets("资料库").range("a1").CurrentRegion.End(xlDown).offset(1,0).row \' offset 是位移\n\nsheets("订单").range("d10:g10").resize(品项数量).copy \' 调整大小 resize\nsheets("资料库").range("d" & 空白列).PasteSpecial xlPasteValues \' & 是文字连接\n\nsheets("资料库").range("a" & 空白列).resize(品项数量).value = sheets("订单").range("g6").value\nsheets("资料库").range("b" & 空白列).resize(品项数量).value = sheets("订单").range("g7").value\nsheets("资料库").range("c" & 空白列).resize(品项数量).value = sheets("订单").range("d5").value\n\ncall 重设表格\nmsgbox \'存储完毕\'\n\nEnd Sub\n\n\n\' 测试 resize, 将所选范围扩大一列一栏\n\' resize(4,3), 改成四列三栏\n\nSub testresize()\n   Worksheets("订单").Activate\n   numRows = Selection.Rows.Count\n   numColumns = Selection.Columns.Count\n   Selection.Resize(numRows + 1, numColumns + 1).Select\nEnd Sub\n\n\n\' 测试 Range.PasteSpecial\nExample\n .Range("C1:C5").Copy \n .Range("D1:D5").PasteSpecial Operation:=xlPasteSpecialOperationAdd \n\nRange("B1").PasteSpecial Paste:=xlPasteValues\n\nSheets("Sheet1").Range("A1").Copy\nSheets("Sheet2").Range("B1").PasteSpecial Paste:=xlPasteValues\nsheets("资料库").range("d" & 空白列).PasteSpecial xlPasteValues\n\nSub PasteSpecialmethod()\n  Range("d11").Copy\n  Range("f12").PasteSpecial xlPasteValues\nEnd Sub\n\n',
'<h2>查询功能</h2>\nsub 查询订单()\n  dim 订单编号 as integer, 订单位置 as integer, 品项数量 as integer\n  \n  \' 找出订单编号的值, 数一下品项数量, \n  订单编号 = sheets("订单").range("g6").value\n  品项数量 = WorksheetFunction.CountIf(Sheets("资料库").range("A:A"), 订单编号) \n  \n  sheets("订单").range("d5, d10:e16").ClearContents \'清空范围\n  \n  \' 假如没查到就说没查到 否则就干活 复制资料到订单明细界面\n  if 品项数量 = 0 then\n    msgbox "无此订单"\n    exit sub\n  else\n    订单位置 = WorksheetFunction.Match("订单编号", sheets("资料库").range("A:A"), 0)\n    sheets("资料库").range("d" & 订单位置).resize(品项数量, 2).copy\n    sheets("订单").range("d10").PasteSpecial xlPasteValues\n  \n    sheets("订单").range("g7").value = sheets("资料库").range("b" & 订单位置).value\n    sheets("订单").range("d5").value = sheets("资料库").range("c" & 订单位置).value\n  endif\nendsub\n\n\n',
'<h2>列印订单</h2>\nsub 列印订单()\n  dim 档名 as string\n  档名 = format(range("g6").value, "00000")\n\n  sheets("订单").ExportAsFixedFormat Type:= xlTypePDF Filename:= "D:\我的文档\桌面\excel video\" & 档名, IgnorePrintAreas:=False\nendsub\n\n',
'<h2>入库登记全功能</h2>\nSub 清空()\n  Range("b4:g4, b8:d8, e8, b12:c12, b24:d24").ClearContents\nEnd Sub\n\nSub 复制()\n  Range("临时!b3:g24").ClearContents\n  Range("入库登记!b3:g24").Copy\n  Sheets("临时").Range("b3:g24").PasteSpecial Paste:=xlPasteFormulas\nEnd Sub\n\nSub 粘贴()\n  Set rng = Range("临时!b3:g24")\n  rng.Copy\n  Range("入库登记!b3:g24").PasteSpecial Paste:=xlPasteFormulas\nEnd Sub\n\nSub 储存()\n  Dim 空白列 As Integer\n  空白列 = Sheets("数据库").Range("a2").CurrentRegion.Rows.Count + 1\n\n\'类别\n  Sheets("数据库").Range("a" & 空白列).Value = Sheets("入库登记").Range("b4").Value\n  Sheets("数据库").Range("b" & 空白列).Value = Sheets("入库登记").Range("c4").Value\n  Sheets("数据库").Range("c" & 空白列).Value = Sheets("入库登记").Range("d4").Value\n  Sheets("数据库").Range("d" & 空白列).Value = Sheets("入库登记").Range("e4").Value\n  Sheets("数据库").Range("e" & 空白列).Value = Sheets("入库登记").Range("f4").Value\n  Sheets("数据库").Range("f" & 空白列).Value = Sheets("入库登记").Range("g4").Value\n\n\'入库\n  Sheets("数据库").Range("g" & 空白列).Value = Sheets("入库登记").Range("b8").Value\n  Sheets("数据库").Range("h" & 空白列).Value = Sheets("入库登记").Range("c8").Value\n  Sheets("数据库").Range("i" & 空白列).Value = Sheets("入库登记").Range("d8").Value\n  Sheets("数据库").Range("j" & 空白列).Value = Sheets("入库登记").Range("e8").Value\n\n\'退货\n  Sheets("数据库").Range("k" & 空白列).Value = Sheets("入库登记").Range("b12").Value\n  Sheets("数据库").Range("l" & 空白列).Value = Sheets("入库登记").Range("c12").Value\n  Sheets("数据库").Range("m" & 空白列).Value = Sheets("入库登记").Range("d12").Value\n\n\'实际岀库\n  Sheets("数据库").Range("n" & 空白列).Value = Sheets("入库登记").Range("b16").Value\n  Sheets("数据库").Range("o" & 空白列).Value = Sheets("入库登记").Range("c16").Value\n\n\'实际库存\n  Sheets("数据库").Range("p" & 空白列).Value = Sheets("入库登记").Range("b20").Value\n  Sheets("数据库").Range("q" & 空白列).Value = Sheets("入库登记").Range("c20").Value\n\n\'支付信息\n  Sheets("数据库").Range("r" & 空白列).Value = Sheets("入库登记").Range("b24").Value\n  Sheets("数据库").Range("s" & 空白列).Value = Sheets("入库登记").Range("c24").Value\n  Sheets("数据库").Range("t" & 空白列).Value = Sheets("入库登记").Range("d24").Value\n\n  Call 复制\n  Call 清空\n  MsgBox "存储完毕 第" & 空白列 & "行"\nEnd Sub\n\nSub 删除列()\n  Dim 删除列号码, answer As Integer\n  删除列号码 = InputBox("输入删除列号码")\n  answer = MsgBox("确认删除第 " & 删除列号码 & " 行", vbQuestion + vbYesNo + vbDefaultButton2, "确认删除!")\n\n  If answer = vbYes Then\n    Range("数据库!" & "a" & 删除列号码).EntireRow.Delete\n  Else\n    MsgBox "不删除"\n  End If\nEnd Sub\n\n\n',
'<h2>action on cell change</h2>\nPrivate Sub Worksheet_Change(ByVal Target As Range)\n  If Target.Address = "$C$12" Or Target.Address = "$F$11" Then \'note the address mustbe capitalise\n      新入库数量 = Range("$C$12").Value\n      新退货数量 = Range("$F$11").Value\n      新实际库存数量 = Range("c20").Value\n\n      旧实际库存数量 = Range("c20").Value\n      差数 = 新实际库存数量 - 旧实际库存数量\n      ActiveSheet.Unprotect "1" \' unprotext sheet\n      Range("c12").Value = 新入库数量\n      Range("f11").Value = 新退货数量\n      Range("c17") = Range("c17").Value + 差数\n      ActiveSheet.Protect "1"\n  End If\nEnd Sub\n\n',
'<h2>create snd save file</h2>\n      pathName = Sheets("选项").Range("f1")\n\n      srcFilename = Sheets("选项").Range("f3") \'转换数据库\n      inFilename = Sheets("选项").Range("f2")  \'2023年入库表.xls\n      outFilename = Sheets("选项").Range("h2") \'2023年岀库表.xls\n\n      \'create new book\n      Workbooks.Add\n      Sheets.Add.Name = "入库登记"\n      ActiveWorkbook.SaveAs Filename:=pathName & "\" & "New " & inFilename\n      ActiveWorkbook.Close SaveChanges:=False\n\n',
'<h2>to assign a formula to a variable in VBA</h2>\n\n Dim colNum As Long\n    colNum = 4\n    Range("a1").FormulaR1C1 = "=R1C" & colNum & "+R2C" & colNum\n\n',
'<h2>vba data validation</h2>\nSub data_validation_from_array()\n\nDim region, product As Variant\nDim region_range, product_range As Range\n\nregion = Array("North", "South", "East", "West")\nproduct = Array("TV", "Fridge", "Mobile", "Laptop", "AC")\n\nSet region_range = Range("C5:C10")\nSet product_range = Range("D5:D10")\n\nWith region_range.Validation\n.Delete\n.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Formula1:=Join(region, ",")\n.IgnoreBlank = True\n.InCellDropdown = True\n.InputTitle = ""\n.ErrorTitle = "Error"\n.InputMessage = ""\n.ErrorMessage = "Please Provide a Valid Input"\n.ShowInput = True\n.ShowError = True\nEnd With\n\nEnd Sub\n\nUse the Validation property of the Range object to return the Validation object.\n\nRange("e5").Validation _ \n .Modify xlValidateList, xlValidAlertStop, "=$A$1:$A$10"\n\n',
'<h2>VBA Examples</h2>\nPrint All Sheet Names\n   Cells(i, 1).Value = Sheets(i).Name\n\nInsert Different Color Index in VBA\n   Cells(i, 2).Interior.ColorIndex = i\n\nInsert Worksheets as Much as You want\n   Worksheets.Add\n\nDelete All Blank Worksheets From the Workbook\n   If WorksheetFunction.CountA(ws.UsedRange) = 0 Then\n     ws.Delete\n\nInsert Blank Row\n   ActiveCell.EntireRow.Insert\n\nHighlight Spelling Mistake\n  If Not Application.CheckSpelling(Word:=MySelection.Text) Then\n    MySelection.Interior.Color = vbRed\n\nChange All To Upper Case Characters\n    Rng.Value = UCase(Rng.Value)\n\nHighlight All the Commented Cells\n    If Rng.HasFormula = False Then\n      Rng.Value = LCase(Rng.Value)\n\nHighlight All the Blank Cells\n    ActiveSheet.UsedRange.SpecialCells(xlCellTypeComments).Interior.ColorIndex = 4\n\nHide All Sheets Except One Sheet\n    If Ws.Name <> "Main Sheet" Then Ws.Visible = xlSheetVeryHidden\n\nUnhide All Sheets\n    For Each Ws In ActiveWorkbook.Worksheets\n      Ws.Visible = xlSheetVisible\n\nDelete All Files in the Folder\n    Kill "C:UsersAdmin_2.Dell-PcDesktopDelete Folder*.*"\n\nDelete Entire Folder\n    Kill "C:UsersAdmin_2.Dell-PcDesktopDelete Folder*.*"\n    RmDir "C:UsersAdmin_2.Dell-PcDesktopDelete Folder"\n\nFind the Last Used Row in the Sheet\n    LR = Cells(Rows.Count, 1).End(xlUp).Row\n    MsgBox LR\n\nFind the Last Used Column in the Sheet\n    LC = Cells(1, Columns.Count).End(xlToLeft).Column\n    MsgBox LC\n\n',
'<h2>VBA connect to MySQL database in Excel</h2>\nSub connect()\n    Dim Password As String\n    Dim SQLStr As String\n    \'OMIT Dim Cn statement\n    Dim Server_Name As String\n    Dim User_ID As String\n    Dim Database_Name As String\n    \'OMIT Dim rs statement\n\n    Set rs = CreateObject("ADODB.Recordset") \'EBGen-Daily\n    Server_Name = Range("b2").Value\n    Database_name = Range("b3").Value \' Name of database\n    User_ID = Range("b4").Value \'id user or username\n    Password = Range("b5").Value \'Password\n\n    SQLStr = "SELECT * FROM ComputingNotesTable"\n\n    Set Cn = CreateObject("ADODB.Connection") \'NEW STATEMENT\n    Cn.Open "Driver={MySQL ODBC 5.2.2 Driver};Server=" & _ \n            Server_Name & ";Database=" & Database_Name & _\n            ";Uid=" & User_ID & ";Pwd=" & Password & ";"\n\n    rs.Open SQLStr, Cn, adOpenStatic\n\n    Dim myArray()\n\n    myArray = rs.GetRows()\n\n    kolumner = UBound(myArray, 1)\n    rader = UBound(myArray, 2)\n\n    For K = 0 To kolumner \' Using For loop data are displayed\n        Range("a5").Offset(0, K).Value = rs.Fields(K).Name\n        For R = 0 To rader\n           Range("A5").Offset(R + 1, K).Value = myArray(K, R)\n        Next\n    Next\n\n    rs.Close\n    Set rs = Nothing\n    Cn.Close\n    Set Cn = Nothing\nEnd Sub\n\n\nCheck the Drivers tab in the ODBC Data Source \n"MySQL ODBC 5.3 Unicode Driver"\nActivated Microsoft ActiveX Data Objects 6.1 Library, go Tools/References and check Microsoft Active X Data Objects x library\n\n<h3>Enable Microsoft ActiveX Data Objects 2.8 Library</h3>\n\nDim oConn As ADODB.Connection \nPrivate Sub ConnectDB()     \n  Set oConn = New ADODB.Connection    \n  oConn.Open "DRIVER={MySQL ODBC 5.1 Driver};" & _        \n  "SERVER=localhost;" & _         \n  "DATABASE=yourdatabase;" & _        \n  "USER=yourdbusername;" & _      \n  "PASSWORD=yourdbpassword;" & _      \n  "Option=3" \nEnd Sub\n\ninstead of looping through every row and column which takes forever. try using\n\nSub connect()\n    Dim Password As String\n    Dim SQLStr As String\n    \'OMIT Dim Cn statement\n    Dim Server_Name As String\n    Dim User_ID As String\n    Dim Database_Name As String\n    \'OMIT Dim rs statement\n\n    Set rs = CreateObject("ADODB.Recordset") \'EBGen-Daily\n    Server_Name = "Server_Name "\n    Database_Name = "Database_Name" \' Name of database\n    User_ID = "User_ID" \'id user or username\n    Password = "Password" \'Password\n\n    SQLStr = "SELECT * FROM item"\n\n    Set Cn = CreateObject("ADODB.Connection") \'NEW STATEMENT\n    Cn.Open "Driver={MySQL ODBC 8.0 ANSI Driver};Server=" & _\n            Server_Name & ";Database=" & Database_Name & _\n            ";Uid=" & User_ID & ";Pwd=" & Password & ";"\n\n    rs.Open SQLStr, Cn, adOpenStatic\n    Range("A2").CopyFromRecordset rs\n\n    rs.Close\n    Set rs = Nothing\n    Cn.Close\n    Set Cn = Nothing\nEnd Sub',
]
