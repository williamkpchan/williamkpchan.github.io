Mongodb Tutorial

mongo pw: K..@M..

download:windows 64bit
run the msi file
select custom to select the installation path, setup a short name path
and then all next

after installation, 
create 2 folders in the mongodb folder to hold the log and database: data, log folders
inside data folder create the db folder to store the database

then open the cmd as administrator and goto the mongodb folder to run some commands

cd d:\mongodb\bin

run command to configure: 
mongod --directoryperdb --dbpath d:\mongodb\data\db --logpath d:\mongodb\log\mongo.log --logappend --rest --install

or without rest

mongod --directoryperdb --dbpath d:\mongodb\data\db --logpath d:\mongodb\log\mongo.log --logappend --install

to start MongoDB services (note this starts the server): net start MongoDB
or 
mongod --dbpath d:\mongodb\data\db
or 
mongod

to enter the mongo shell: mongo

and then clear the screen: cls
to show the dbs: show dbs
to create new database: use customerdatabase
	creating the database will enter the database automatically
to show the present database: db
to create user for the database: db.createUser({
 user: "brad",
 pwd: "1234",
 roles: ["readWrite", "dbAdmin"]
});

to add data: db.createCollection("customers");
to show data in database: show collections
to insert document: db.customers.insert({first_name:"john", last_name:"wo"});
to view the document: db.customers.find();
to insert multiple document (note the square bracket added and added field): db.customers.insert([{first_name:"lisa", last_name:"lo"}, {first_name:"bill", last_name:"bo", gender:"male"}]);

to view the document formatted nice and neat: db.customers.find().pretty();
to upadte a document: db.customers.update({first_name:"john"}, {first_name:"john", last_name:"wo", gender:"male"});

to update set of documents, use set operator:
db.customers.update({first_name:"john"}, {$set: {gender:"male"}});
to update set of documents with age:
db.customers.update({first_name:"john"}, {$set: {age:45}});

to increment the age:
db.customers.update({first_name:"john"}, {$ind: {age:5}});

to remove a field:
db.customers.update({first_name:"john"}, {$unset: {age: 1}});


mongod is the primary daemon process for the MongoDB system. It handles data requests, manages data access, and performs background management operations.

--directoryperdb
	Uses a separate directory to store data for each database. The directories are under the --dbpath directory, and each subdirectory name corresponds to the database name.

--dbpath <path>
	contains data files
	Default: /data/db on Linux and macOS, \data\db on Windows
	The directory where the mongod instance stores its data.

--logpath <path>
	Sends all diagnostic logging information to a log file instead of to standard output or to the hostâ€™s syslog system. MongoDB creates the log file at the path you specify.
	By default, MongoDB will move any existing log file rather than overwrite it. 
	To instead append to the log file, set the --logappend option.

--rest option
	Default: false
	Set to true to enable a simple REST interface.
	The mongod process includes a simple REST interface, generally used for monitoring/alerting scripts or administrative tasks.


db.createUser(user, writeConcern)
	Creates a new user for the database on which the method is run.

db.collection.insert()
	Inserts a document or documents into a collection.

