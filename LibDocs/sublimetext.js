var sublimetext = [
'Multiple Cursors by Mouse<br>Add to selection: Ctrl',
'Multiple Cursors by Mouse<br>Subtract from selection: Alt',
'Multiple Cursors by Mouse<br>Linear selection: Left Click',
'Multiple Cursors by Mouse<br>Block selection: Shift + Right Click',
'Multiple Cursors by Mouse<br>Add to selection: Ctrl + Left Click (and optionally drag)',
'Multiple Cursors by Mouse<br>Subtract from select: Alt + Left Click and drag (this combination doesnot work in Sublime Text 3, but supposedly it works in 2)',
'Multiple Cursors by Mouse<br>Add block selection: Ctrl + Shift + Right Click (and drag)',
'Multiple Cursors by Mouse<br>Subtract block selection: Alt + Shift + Right Click (and drag)',
'Multiple Cursors by Mouse<br>Return to single selection mode: Esc',
'Multiple Cursors by Mouse<br>Extend selection upward/downward at all carets: Ctrl + Alt + Up/Down',
'Multiple Cursors by Mouse<br>Extend selection leftward/rightward at all carets: Shift + Left/Right',
'Multiple Cursors by Mouse<br>Move all carets up/down/left/right, and clear selection: Up/Down/Left/Right',
'Multiple Cursors by Mouse<br>Undo the last selection motion: Ctrl + U',
'Multiple Cursors by Mouse<br>Add next occurrence of selected text to selection: Ctrl + D',
'Multiple Cursors by Mouse<br>Add all occurrences of the selected text to the selection: Alt + F3',
'Multiple Cursors by Mouse<br>Rotate between occurrences of selected text (single selection): Ctrl + F3',
'Multiple Cursors by Mouse<br>Turn a single linear selection into a block selection, with a caret at the end of the selected text in each line: Ctrl + Shift + L',
'Ctrl+C<br>copy current line (if no selection)',
'Ctrl+X<br>cut current line (if no selection)',
'Ctrl+⇧+K<br>delete line',
'Ctrl+↩<br>insert line after',
'Ctrl+⇧+↩<br>insert line before',
'Ctrl+⇧+↑<br>move line (or selection) up',
'Ctrl+L<br>select line (repeat to select next lines)',
'Ctrl+D<br>select word (repeat select others occurrences in context for multiple editing)',
'Ctrl+M<br>jump to closing bracket for current code, repeat to jump to opening bracket',
'Ctrl+⇧+M<br>select all contents of the current brackets (curly brackets, square brackets, parentheses)',
'Ctrl+KK<br>delete from cursor to end of line',
'Ctrl+K+⌫<br>delete from cursor to start of line',
'Ctrl+]<br>indent current line(s)',
'Ctrl+[<br>un-indent current line(s)',
'Ctrl+⇧+D<br>duplicate line(s)',
'Ctrl+J<br>join line below to the end of the current line',
'Ctrl+ /<br>comment/un-comment current line',
'Ctrl+⇧+/<br>block comment current selection',
'Ctrl+Y<br>redo, or repeat last keyboard shortcut command',
'Ctrl+⇧+V<br>paste and indent correctly',
'Ctrl+Space<br>select next auto-complete suggestion',
'Ctrl+U<br>soft undo (somehow undoes your movements; it jumps to your last change before undoing it when you repeat this command)',
'Ctrl+P<br>quick-open files by name in your project (doesn’t seem to need an actual project set up, it just searches in the directories around the currently-opened file',
'Ctrl+R<br>goto symbol (functions and classes) in the file. Same as Ctrl+P, then type @',
'Ctrl+;<br>goto word in current file. Same as Ctrl+P, then type #',
'Ctrl+G<br>goto line in current file. Same as Ctrl+P, then type :',
'Ctrl+⇧+P<br>command prompt',
'Ctrl+KB<br>toggle side bar',
'Ctrl+F<br>find',
'Ctrl+H<br>replace',
'Ctrl+⇧+F<br>find in files',
'Ctrl+⇧+t<br>open last closed tab (just like in your browser)',
'Ctrl+PgDn<br>cycle down through open tabs, cycle up with Ctrl+PgUp',
'Ctrl+⇆<br>cycle through last tabs (repeat to go back further in history)',
'Alt+⇧+2<br>split into two columns',
'Alt+⇧+1<br>revert to single column',
'Alt+⇧+5<br>grid (4 groups)',
'Ctrl+[1,2,3,4]<br>jump to “group” (pane)',
'Ctrl+⇧+[1,2,3,4]<br>move file to specified group',
'Ctrl+F2<br>toggle bookmark',
'F2<br>next bookmark',
'⇧+F2<br>previous bookmark',
'Ctrl+⇧+F2<br>clear bookmarks',
'Text manipulation',
'Ctrl+KU<br>upper case',
'Ctrl+KL<br>lower case',
'User Preference Settings<br>user settings (Preferences => Settings – User):<br><br>"draw_white_space": "all"<br>adds white space markers<br><br>"rulers": [80]<br>puts a ruler at the 80 character mark<br><br>"tab_size": 2<br>makes indents only two characters long<br><br>"translate_tabs_to_spaces": true<br>converts hard-tabs to spaces',
'Command Palette<br>will let you run toolbar actions (e.g. setting the code syntax for an opened file) without having to lift a finger from the keyboard. Although the command palette can be opened with a mouse through Tool => Command Palette, the best way to get the Command Palette prompt is to use the keyboard shortcut CTRL-SHIFT-P.',
'Column and Row Workspace Panes<br>allows you to see files side by side, so that you won’t be switching back and forth between an HTML file and its CSS document.<br>To view two column (vertical) panes side-by-side use the shortcut ALT-UP-2. Replace the last stroke with “3” or “4” to view three or four panes respectively. Using “5” produces a 4 pane grid. <br>To view two row (horizontal) panes side-by-side use the shortcut SHIFT-ALT-UP-2. Replace the last stroke with “3” to view three panes respectively.<br>If you want to split a pane further, you can use ST3’s “Group” feature.<br>Use CTRL-K, SHIFT-CTRL-UP to create a new group inside a pane.',
'Package Control<br>The easiest way to install packages is to use Package Control.<br>Command Palette (CTRL-SHIFT-P)',
'Emmet makes coding HTML much easier by using abbreviations/shortcuts, based on CSS selectors.<br>with Emmet, just type lorem and hit tab.<br>Want a certain number of filler words (such as 100 words of lorem ipsum)? Use lorem100 instead.<br>Emmet also extends to CSS. For example, CSS vendor prefixes are always a pain, so Emmet lets you use the shorthand -bdrs to set a border radius<br>((h4>a[rel=external])+p>img[width=500 height=320])*12<br>It creates 12 lists of Headings followed with an image. I can then fill in my content without worrying about messing up the format.',
'The Git package lets you run Git commands (e.g. “Git Diff” or “Git Blame”) straight from ST3’s Command Palette.',
'GitGutter shows uncommitted additions, changes, and deletions next to ST3’s line numbers',
'SASS<br>ST3 doesn’t come with native SASS syntax and snippet support, but the ST3 package “SASS” adds it in. Highly recommended for advanced front-end developers and Ruby on Rails programmers',
'Multiple cursors are a killer feature of Sublime Text. It allows you to type in multiple places at the same time, saving you development time. To trigger multiple cursors, put your cursor on the word you want highlighted and hit CTRL-D till you have selected all the words you want. You can also create multiple cursors with CTRL-MOUSECLICK in all the places you want to have a cursor.',
'Goto Anything<br>Similar to the command palette, ST3 has the Goto Anything feature (pronounced “go to”) that can take you to a specific file, line, or method definition. Bring up Goto Anything’s search bar with CTRL-P. To switch between files, start typing the file’s name. Since its a fuzzy search, the search query doesn’t have to match the name exactly and you don’t have to type the whole file path:<br>Goto Anything doesn’t just take you to a file, it can also bring you to a specific line within a file. If you want to go to a line in the current file, just bring up Goto Anything and type a colon followed by the line number (e.g. :18 for line 18). To go to a line in another file, type the file name and then a colon and the line number:<br>If you want to go to a class, method, or function definition in a file, Goto Anything has a similar syntax as going to a line. Instead of colon, Goto Definition uses a @. You’ll get a list of all of the definitions in your chosen file and typing the name of one and hitting ENTER will take you to the given definition',
'Distraction Free Mode<br>Sometimes being the most productive coder means removing all distractions. No other applications, windows, tabs, sidebars, and menus. Sublime offers an easy way to do this through its Distraction Free Mode. Trigger it using SHIFT-F11',
'Hide/Show the Sidebar<br>The sidebar is useful for showing your files and directory structure, but sometimes you need a little more window space to code. Using the keyboard shortcut CTRL-K, CTRL-B (in this order) will toggle the sidebar. Remember a sidebar will only be viewable if you have multiple files or a folder open.',
'Quickly Comment Your Code<br>This is a useful tip if you’re constantly commenting your code or for temporarily testing how disabling a block of code affects your project. To comment code quickly in ST3, highlight the code and use CTRL-/. If you don’t highlight any code, using this shortcut will comment out the entire line.',
'Selecting Text<br>to select a word (CTRL-D)<br>to select the entire current line: CTRL-L.<br>to select all code that shares immediate indentation: CTRL-SHIFT-J.<br>to select everything inside the current HTML tag: CTRL-SHIFT-A',
'Indent Quickly<br>Developers know the importance of indentation because it keeps your code legible and easier to understand. If you want to increase the current line’s indent, useCTRL-]. Decreasing the indent uses the other square bracket key (CTRL-[).',
'Pasting with Indentation<br>When you copy/cut indented code and want to have the indentation level maintained when pasting, use CTRL-Shift-V to paste with indentation.',
'Switching Lines<br>Have you ever written code, only to realize that certain lines are out of order? ST3 has a time-saving shortcut that lets you move a given line up or down in a document. CTRL-SHIFT-UP moves a line up, while CTRL-SHIFT-DOWN moves a line down.',
'Deleting Lines<br>For the times when a line of code isn’t out of order, but needs to simply be removed, ST3 has handy shortcut for deleting lines without having to select the entire line. CTRL-SHIFT-K will delete the current line your cursor is on.',
'SublimeLinter<br>SublimeLinter is a plugin for Sublime Text that provides a framework for linting code.',
'SublimeEnhancements<br>SidebarEnhancements has a few new things in the Sidebar menu including New File Creation in the current project folder, Moving File and Folder, Duplicating File and Folder, Open in Finder and Browser, Refresh, and a bunch more.',
'PackageResourceViewer<br>With PackageResourceViewer, you can view, and edit packages that come from SublimeText easily. You can also extract package, which will copy it to the User folder so you can safely edit it.',
'Terminal<br>This plugin lets you open your project folders in Terminal directly from SublimeText – with a hotkey. It is a very helpful plugin when you need to execute command lines at the given folder.',
'CSSComb<br>CSSComb is a plugin to sort CSS properties. If you need your codes to be tidy and in the right order, this plugin will let you customize the order of the properties. This is also helpful when you work with a team of developers, each with their own preferences of writing code.',
'CanIUse<br>With this plugin, you can check the browser support for CSS properties and HTML elements that you are using. To use it, highlight the CSS property or the HTML element, and it will bring you to the appropriate page in CanIUse.com.',
'Alignment<br>Alignment lets you align your codes including PHP, JavaScript, and CSS, thus making it neat and more readable.',
'Trimmer<br>This plugin helps you remove unnecessary spaces, as well as trailing spaces, which could cause some errors In JavaScript.',
'ColorPicker<br>With this plugin you can select and add colors to SublimeText with the native color wheel from your OS.',
'MarkDown Editing<br>Even though SublimeText is capable of viewing and editing Markdown files, it treats it as plain text with very poor formatting. This plugin is useful for giving better support with proper color highlighting for Markdown in SublimeText.',
'FileDiffs<br>FileDiffs allows you to see the differences between two files in SublimeText. You can compare files with copied data from Clipboard, a File in the Project, File that is currently open, and between saved and unsaved files.',
'DocBlockr<br>DocBlokr lets you create documentation or annotation for your codes with ease, by parsing the functions, parameters, variables, and automatically adding some possible documentation',
'Custom Themes<br>Believe it or not, having a different theme can induce your creativity and ideas. Below are several great custom themes that gives SublimeText a different, possibly better look.',
'Snippets<br>Snippets can help you write code faster by reusing code pieces. While you can also create your own set of code snippets, there are several snippet packages ready for use right away.',
'Foundation – A collection of snippets to build Foundation 5 framework components such as the Buttons, Tabs, and Navigation.',
'jQuery Mobile – A collection of snippets to build jQuery Mobile components and layouts.',
'HTML5 Boilerplate – this snippet lets you create HTML5 Boilerplate documents in a snap.',
'Additional Syntax Support<br>Languages that are not supported in SublimeText may not display with proper syntax highlighting. They include LESS, Sass, SCSS, Stylus, and Jade, so if you are working with those languages, here are the plugins to install, for syntax support.',
'<h2>Selection by Mark</h2>\nthe “Mark” feature\ngo to the last line you want to select\nEdit > Mark > Set Mark (<i>ctrl + K, ctrl + space</i>)\ngo to the first line you want to select.\nEdit > Mark > Select to Mark (<i>ctrl + K, ctrl + A</i>)\n',
'<h2>current encoding</h2>\nsee the current encoding of a file in Sublime Text\nin user preferences, add the line:\n"show_encoding": true\nView -> Show Console\ntype on the console the following command:\nview.encoding()\nsublime到底是以什么编码格式去理解文本呢？\n这又是sublime的强大之处了。\nsublime会先读取文本的前几个字符，然后猜测要解码的文本是用什么编码的，猜到什么，就用什么编码格式去理解文本，然后把它解码。\n既然是猜，那就可能会猜错，这时候就要靠你自己去指定这个格式了，于是reopen with encoding就派上用场了，你用reopen with encoding，可以告诉sublime用什么编码去理解文本。\nreopen with encoding是sublime自带的，不支持GBK等字符，reload with encoding是一个叫做ConvertToUTF8的插件提供的，专门用于支持GBK等字符，和reopen with encoding一样也是用来指定解码格式的。\n它还提供一个与save with encoding相同功能的操作叫做set file encoding to，用一支持将“编码”目标编码格式指定为GBK等，但是它不立即保存文件到磁盘。\n要注意的是，因为ConvertToUTF8是一个为了专门支持GBK等编码的插件，所以它的优先级是高于sublime本身的，当你用set file encoding to指定为GBK是，你在用save with encoding想把文件保存成utf-8，它会帮你保存为GBK（因为sublime本身不支持GBK，所以ConvertToUTF8为了支持GBK不得不这么做）。\n',
'<h2>Fold / Collapse the code section</h2>\ngo to edit->code folding and choose "fold all" or "unfold all"\nctrl + shift + [\nctrl + shift + ]\n\n',
'<h2>lookbehind and lookahead</h2>\n  Question:    What is:  (?<=x)\n  Positive  lookbehind.\nsublime text Positive lookbehind\n================================\nNote: after bracket, some characters must follow to form a paired condition.\nFind all instances of p preceded by space \n(?<= )p\nFind all instances of double space not preceded by space \n(?<=[^\s])  \nFind all instances of double space preceded by : \n(?<=:)  \nsublime text Positive lookahead\n================================\nNote: before bracket, some characters must precede to form a paired condition for look ahead.\nFind all spaces, followed by of\n (?=of)\nFind all ins, followed by tan\nins(?=tan)\nFind all ins, NOT followed by tan, note! without the (=) sign\nins(?!tan)\nFind all spaces, followed by a question mark, a period or an exclamation mark:\n (?=(\?|\.|!))\n',
'<h2>preferrence settings</h2>\n{\n "auto_complete": true,\n "auto_complete_commit_on_tab": false,\n "auto_indent": false,\n "bold_folder_labels": true,\n "caret_extra_width": 2,\n "caret_style": "phase",\n "color_scheme": "Packages/User/0Amytheme.tmTheme",\n "detect_indentation": false,\n "detect_slow_plugins": false,\n "fade_fold_buttons": false,\n "font_face": "微軟雅黑",\n "font_size": 21.0,\n "highlight_line": true,\n "ignored_packages":\n [\n  "Vintage"\n ],\n "line_numbers": false,\n "line_padding_bottom": 5,\n "line_padding_top": 5,\n "remember_full_screen": true,\n "rulers":\n [\n  100\n ],\n "tab_completion": false,\n "tab_size": 5,\n "theme": "Adaptive.sublime-theme",\n "translate_tabs_to_spaces": false,\n "update_check": false,\n "wide_caret": true,\n "word_separators": "./\\()\"\'-:,;&lt;>~!@#$%^&*|+=[]{}`~?“”_"\n}\n\n',
'<h2>to sort numerically</h2>\n<a href="https://forum.sublimetext.com/t/sort-lines-numeric/5633/7">to sort numerically</a>\nGet insertion points at the start of each line (Windows: Ctrl+A, Ctrl+Shift+L, Home), \nthen insert at least as many spaces at the start of the lines as your widest number (here it’s 100, so at least 3 spaces). \nNow press End:\nCursor back to the left past the digits:\nSelected the leading space and delete it (Ctrl+Shift+Left, Del). \nBecause the insertion points were relative to the length of the numbers, all the numbers should now line up on the right\nnow just do a normal Edit - Sort Lines\n<br>\n',
'<h2>Sublime text Commands</h2>\n<a href="Sublime text Commands.html"><span class="redb">&diams;Sublime text Commands</span></a>\n\n',
'<h2>Preferences.sublime-settings</h2>\nNote: for portable version, create a folder: Color Scheme - Default, and put the theme file 0Amytheme.tmTheme to be effective.\n{\n "auto_complete": false,\n "auto_complete_commit_on_tab": false,\n "caret_extra_width": 4,\n "caret_style": "phase",\n "color_scheme": "Packages/Color Scheme - Default/0Amytheme.tmTheme",\n "detect_indentation": false,\n "detect_slow_plugins": false,\n "font_face": "SimSun",\n "font_size": 22.0,\n "highlight_line": true,\n "ignored_packages":\n ["Vintage"],\n "line_padding_bottom": 1,\n "line_padding_top": 1,\n "rulers":\n [80],\n "tab_completion": false,\n "tab_size": 5,\n "translate_tabs_to_spaces": false,\n "wide_caret": true\n}\n[\n{"args":{"characters": "&lt;a href=\""},"command": "insert"},\n{"args":{"extend": false,"to": "hardeol"},"command": "move_to"},\n{"args":{"characters": "\">"},"command": "insert"},\n{"args": null,"command": "right_delete"},\n{"args":{"extend": false,"to": "hardeol"},"command": "move_to"},\n{"args":{"characters": "</a>"},"command": "insert"},\n{"args":{"by": "characters","forward": true},"command": "move"},\n{"args":{"characters": "<br>"},"command": "insert"}\n]\n\n\n',
'<h2>Snippets</h2>\n<a href="Sublime Text Snippets.html"><b class="greenword">&diams;Sublime Text Snippets</b></a>\n\n',
'<h2>Emmet Notes</h2>\n<a href="Emmet for Sublime Text.html"><span class="redb">&diams;Emmet Notes</span></a><br>\n<a href="Mastering Emmet.html" class="bordred1 borRad10 green limebs">&diams;Mastering Emmet</a><br>\n\n',
'<h2>programming sublime</h2>\nDefault.sublime-commands\nin C:\Users\User\AppData\Roaming\Sublime Text 3\Packages\User\na file called Default.sublime-commands in your Packages/User folder\n<a href="http://docs.sublimetext.info/en/latest/extensibility/macros.html">sublimetext macros</a>\n<a href="http://docs.sublimetext.info/en/latest/extensibility/snippets.html">snippets</a>\n<a href="http://docs.sublimetext.info/en/latest/reference/command_palette.html">sublimetext command_palette</a>\na find_all_under command\n',
'<h2>ahref tail.sublime-macro</h2>\n[\n{"args":{"characters": "&lt;a href=\""},"command": "insert"},\n{"args":{"extend": false,"to": "hardeol"},"command": "move_to"},\n{"args":{"characters": "\"&gt;"},"command": "insert"},\n{"args": null,"command": "right_delete"},\n{"args":{"extend": false,"to": "hardeol"},"command": "move_to"},\n{"args":{"characters": "&lt;/a&gt;"},"command": "insert"},\n{"args":{"by": "characters","forward": true},"command": "move"},\n{"args":{"characters": "&lt;br&gt;"},"command": "insert"\n}\n]\n\n',
'<h2>\Sublime Text\Data\Packages\User\Default (Windows).sublime-keymap</h2>\n[\n{"keys": ["ctrl+k", "ctrl+b"], "command": "toggle_side_bar" },\n{"keys": ["ctrl+shift+t"], "command": "toggle_tabs" },\n{"keys": ["ctrl+k", "ctrl+k"], "command": "toggle_status_bar" },\n{"keys": ["ctrl+alt+w"], "command": "toggle_setting","args": {"setting": "word_wrap"}},\n{"keys": ["ctrl+shift+l"], "command": "toggle_setting", "args": { "setting": "line_numbers"} },\n{ "keys": ["ctrl+shift+j"], "command": "split_selection_into_lines" },\n{"keys": ["ctrl+shift+r"], "command": "reopen_last_file" },\n{"keys": ["ctrl+shift+c"], "command": "title_case" },\n{"keys": ["f8"], "command": "permute_lines", "args": {"operation": "unique"} },\n{"keys": ["ctrl+shift+d"], "command": "duplicate_lines" },\n{"keys": ["f12"], "command": "reindent", "args": {"single_line": true}},\n{"keys": ["shift+f2"], "command": "select_to_bookmark", "args": {"forward": true}},\n{ "keys": ["tab"], "command": "insert", "args": {"characters": "\t"}, "context": \n [{ "key": "auto_complete_visible" }]},\n{"keys": ["ctrl+shift+m"],  "command": "run_macro_file",  "args": { "file": "Packages/User/ahref tail.sublime-macro" }},\n{"keys": ["ctrl+shift+e"],  "command": "run_macro_file",  "args": { "file": "Packages/User/EOLmac.sublime-macro" }},\n{"keys": ["ctrl+d"],  "command": "run_macro_file",  "args": { "file": "Packages/User/deleteImg.sublime-macro" }},\n{"keys": ["ctrl+."],  "command": "run_macro_file",  "args": { "file": "Packages/User/insertline.sublime-macro" }},\n{"keys": ["ctrl+alt+b"], "command": "run_existing_window_command", "args": {\n    "id": "repl_python_run",\n    "file": "config/Python/Main.sublime-menu"}},\n{"keys": ["ctrl+up"], "command": "scroll_lines", "args": {"amount": 1.0 } },\n{"keys": ["ctrl+down"], "command": "scroll_lines", "args": {"amount": -1.0 } }\n]\n\n',
'<h2>\Sublime Text\Data\Packages\Default\Default (Windows).sublime-keymap</h2>\n[\n{ "keys": ["ctrl+shift+n"], "command": "new_window" },\n{ "keys": ["ctrl+o"], "command": "prompt_open_file" },\n{ "keys": ["ctrl+shift+t"], "command": "reopen_last_file" },\n{ "keys": ["alt+o"], "command": "switch_file", "args": {"extensions": ["cpp", "cxx", "cc", "c", "hpp", "hxx", "h", "ipp", "inl", "m", "mm"]} },\n{ "keys": ["ctrl+n"], "command": "new_file" },\n{ "keys": ["ctrl+s"], "command": "save" },\n{ "keys": ["ctrl+shift+s"], "command": "prompt_save_as" },\n{ "keys": ["ctrl+f4"], "command": "close_file" },\n{ "keys": ["ctrl+w"], "command": "close" },\n{ "keys": ["ctrl+k", "ctrl+b"], "command": "toggle_side_bar" },\n{ "keys": ["f11"], "command": "toggle_full_screen" },\n{ "keys": ["shift+f11"], "command": "toggle_distraction_free" },\n{ "keys": ["backspace"], "command": "left_delete" },\n{ "keys": ["shift+backspace"], "command": "left_delete" },\n{ "keys": ["ctrl+shift+backspace"], "command": "left_delete" },\n{ "keys": ["delete"], "command": "right_delete" },\n{ "keys": ["enter"], "command": "insert", "args": {"characters": "\n"} },\n{ "keys": ["shift+enter"], "command": "insert", "args": {"characters": "\n"} },\n{ "keys": ["ctrl+z"], "command": "undo" },\n{ "keys": ["ctrl+shift+z"], "command": "redo" },\n{ "keys": ["ctrl+y"], "command": "redo_or_repeat" },\n{ "keys": ["ctrl+u"], "command": "soft_undo" },\n{ "keys": ["ctrl+shift+u"], "command": "soft_redo" },\n{ "keys": ["ctrl+shift+v"], "command": "paste_and_indent" },\n{ "keys": ["shift+delete"], "command": "cut" },\n{ "keys": ["ctrl+insert"], "command": "copy" },\n{ "keys": ["shift+insert"], "command": "paste" },\n{ "keys": ["ctrl+x"], "command": "cut" },\n{ "keys": ["ctrl+c"], "command": "copy" },\n{ "keys": ["ctrl+v"], "command": "paste" },\n{ "keys": ["left"], "command": "move", "args": {"by": "characters", "forward": false} },\n{ "keys": ["right"], "command": "move", "args": {"by": "characters", "forward": true} },\n{ "keys": ["up"], "command": "move", "args": {"by": "lines", "forward": false} },\n{ "keys": ["down"], "command": "move", "args": {"by": "lines", "forward": true} },\n{ "keys": ["shift+left"], "command": "move", "args": {"by": "characters", "forward": false, "extend": true} },\n{ "keys": ["shift+right"], "command": "move", "args": {"by": "characters", "forward": true, "extend": true} },\n{ "keys": ["shift+up"], "command": "move", "args": {"by": "lines", "forward": false, "extend": true} },\n{ "keys": ["shift+down"], "command": "move", "args": {"by": "lines", "forward": true, "extend": true} },\n{ "keys": ["ctrl+left"], "command": "move", "args": {"by": "words", "forward": false} },\n{ "keys": ["ctrl+right"], "command": "move", "args": {"by": "word_ends", "forward": true} },\n{ "keys": ["ctrl+shift+left"], "command": "move", "args": {"by": "words", "forward": false, "extend": true} },\n{ "keys": ["ctrl+shift+right"], "command": "move", "args": {"by": "word_ends", "forward": true, "extend": true} },\n{ "keys": ["alt+left"], "command": "move", "args": {"by": "subwords", "forward": false} },\n{ "keys": ["alt+right"], "command": "move", "args": {"by": "subword_ends", "forward": true} },\n{ "keys": ["alt+shift+left"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} },\n{ "keys": ["alt+shift+right"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} },\n{ "keys": ["ctrl+alt+up"], "command": "select_lines", "args": {"forward": false} },\n{ "keys": ["ctrl+alt+down"], "command": "select_lines", "args": {"forward": true} },\n{ "keys": ["pageup"], "command": "move", "args": {"by": "pages", "forward": false} },\n{ "keys": ["pagedown"], "command": "move", "args": {"by": "pages", "forward": true} },\n{ "keys": ["shift+pageup"], "command": "move", "args": {"by": "pages", "forward": false, "extend": true} },\n{ "keys": ["shift+pagedown"], "command": "move", "args": {"by": "pages", "forward": true, "extend": true} },\n{ "keys": ["home"], "command": "move_to", "args": {"to": "bol", "extend": false} },\n{ "keys": ["end"], "command": "move_to", "args": {"to": "eol", "extend": false} },\n{ "keys": ["shift+home"], "command": "move_to", "args": {"to": "bol", "extend": true} },\n{ "keys": ["shift+end"], "command": "move_to", "args": {"to": "eol", "extend": true} },\n{ "keys": ["ctrl+home"], "command": "move_to", "args": {"to": "bof", "extend": false} },\n{ "keys": ["ctrl+end"], "command": "move_to", "args": {"to": "eof", "extend": false} },\n{ "keys": ["ctrl+shift+home"], "command": "move_to", "args": {"to": "bof", "extend": true} },\n{ "keys": ["ctrl+shift+end"], "command": "move_to", "args": {"to": "eof", "extend": true} },\n{ "keys": ["ctrl+up"], "command": "scroll_lines", "args": {"amount": 1.0 } },\n{ "keys": ["ctrl+down"], "command": "scroll_lines", "args": {"amount": -1.0 } },\n{ "keys": ["ctrl+pagedown"], "command": "next_view" },\n{ "keys": ["ctrl+pageup"], "command": "prev_view" },\n{ "keys": ["ctrl+tab"], "command": "next_view_in_stack" },\n{ "keys": ["ctrl+shift+tab"], "command": "prev_view_in_stack" },\n{ "keys": ["ctrl+a"], "command": "select_all" },\n{ "keys": ["ctrl+shift+l"], "command": "split_selection_into_lines" },\n{ "keys": ["escape"], "command": "single_selection", "context":\n [{ "key": "num_selections", "operator": "not_equal", "operand": 1 }]\n },\n{ "keys": ["escape"], "command": "clear_fields", "context":\n [{ "key": "has_next_field", "operator": "equal", "operand": true }]\n },\n{ "keys": ["escape"], "command": "clear_fields", "context":\n [{ "key": "has_prev_field", "operator": "equal", "operand": true }]\n },\n{ "keys": ["escape"], "command": "hide_panel", "args": {"cancel": true},"context":\n [{ "key": "panel_visible", "operator": "equal", "operand": true }]\n },\n{ "keys": ["escape"], "command": "hide_overlay", "context":\n [{ "key": "overlay_visible", "operator": "equal", "operand": true }]\n },\n{ "keys": ["escape"], "command": "hide_auto_complete", "context":\n [{ "key": "auto_complete_visible", "operator": "equal", "operand": true }]\n },\n { "keys": ["tab"], "command": "reindent", "context":\n  [{ "key": "setting.auto_indent", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_match", "operand": "^$", "match_all": true },\n  { "key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true }]\n },\n{ "keys": ["tab"], "command": "indent", "context":\n [{ "key": "text", "operator": "regex_contains", "operand": "\n" }]\n },\n{ "keys": ["tab"], "command": "next_field", "context":\n [{ "key": "has_next_field", "operator": "equal", "operand": true }]\n },\n { "keys": ["shift+tab"], "command": "insert", "args": {"characters": "\t"} },\n{ "keys": ["shift+tab"], "command": "unindent", "context":\n [{ "key": "setting.shift_tab_unindent", "operator": "equal", "operand": true }]\n },\n{ "keys": ["shift+tab"], "command": "unindent", "context":\n [{ "key": "preceding_text", "operator": "regex_match", "operand": "^[\t ]*" }]\n },\n{ "keys": ["shift+tab"], "command": "unindent", "context":\n [{ "key": "text", "operator": "regex_contains", "operand": "\n" }]\n },\n{ "keys": ["shift+tab"], "command": "prev_field", "context":\n [{ "key": "has_prev_field", "operator": "equal", "operand": true }]\n },\n { "keys": ["ctrl+]"], "command": "indent" },\n{ "keys": ["ctrl+["], "command": "unindent" },\n{ "keys": ["insert"], "command": "toggle_overwrite" },\n{ "keys": ["ctrl+l"], "command": "expand_selection", "args": {"to": "line"} },\n{ "keys": ["ctrl+d"], "command": "find_under_expand" },\n{ "keys": ["ctrl+k", "ctrl+d"], "command": "find_under_expand_skip" },\n{ "keys": ["ctrl+shift+space"], "command": "expand_selection", "args": {"to": "scope"} },\n{ "keys": ["ctrl+shift+m"], "command": "expand_selection", "args": {"to": "brackets"} },\n{ "keys": ["ctrl+m"], "command": "move_to", "args": {"to": "brackets"} },\n{ "keys": ["ctrl+shift+j"], "command": "expand_selection", "args": {"to": "indentation"} },\n{ "keys": ["ctrl+shift+a"], "command": "expand_selection", "args": {"to": "tag"} },\n{ "keys": ["alt+."], "command": "close_tag" },\n{ "keys": ["ctrl+q"], "command": "toggle_record_macro" },\n{ "keys": ["ctrl+shift+q"], "command": "run_macro" },\n{ "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "Packages/Default/Add Line.sublime-macro"} },\n{ "keys": ["ctrl+shift+enter"], "command": "run_macro_file", "args": {"file": "Packages/Default/Add Line Before.sublime-macro"} },\n{ "keys": ["enter"], "command": "commit_completion", "context":\n [{ "key": "auto_complete_visible" },\n  { "key": "setting.auto_complete_commit_on_tab", "operand": false }]\n },\n { "keys": ["ctrl+p"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },\n{ "keys": ["ctrl+shift+p"], "command": "show_overlay", "args": {"overlay": "command_palette"} },\n{ "keys": ["ctrl+alt+p"], "command": "prompt_select_project" },\n{ "keys": ["ctrl+r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"} },\n{ "keys": ["ctrl+g"], "command": "show_overlay", "args": {"overlay": "goto", "text": ":"} },\n{ "keys": ["ctrl+;"], "command": "show_overlay", "args": {"overlay": "goto", "text": "#"} },\n{ "keys": ["ctrl+i"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse":false} },\n{ "keys": ["ctrl+shift+i"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse":true} },\n{ "keys": ["ctrl+f"], "command": "show_panel", "args": {"panel": "find"} },\n{ "keys": ["ctrl+h"], "command": "show_panel", "args": {"panel": "replace"} },\n{ "keys": ["ctrl+shift+h"], "command": "replace_next" },\n{ "keys": ["f3"], "command": "find_next" },\n{ "keys": ["shift+f3"], "command": "find_prev" },\n{ "keys": ["ctrl+f3"], "command": "find_under" },\n{ "keys": ["ctrl+shift+f3"], "command": "find_under_prev" },\n{ "keys": ["alt+f3"], "command": "find_all_under" },\n{ "keys": ["ctrl+e"], "command": "slurp_find_string" },\n{ "keys": ["ctrl+shift+e"], "command": "slurp_replace_string" },\n{ "keys": ["ctrl+shift+f"], "command": "show_panel", "args": {"panel": "find_in_files"} },\n{ "keys": ["f4"], "command": "next_result" },\n{ "keys": ["shift+f4"], "command": "prev_result" },\n{ "keys": ["f6"], "command": "toggle_setting", "args": {"setting": "spell_check"} },\n{ "keys": ["ctrl+f6"], "command": "next_misspelling" },\n{ "keys": ["ctrl+shift+f6"], "command": "prev_misspelling" },\n{ "keys": ["ctrl+shift+up"], "command": "swap_line_up" },\n{ "keys": ["ctrl+shift+down"], "command": "swap_line_down" },\n{ "keys": ["ctrl+backspace"], "command": "delete_word", "args": { "forward": false } },\n{ "keys": ["ctrl+shift+backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete to Hard BOL.sublime-macro"} },\n{ "keys": ["ctrl+delete"], "command": "delete_word", "args": { "forward": true } },\n{ "keys": ["ctrl+shift+delete"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete to Hard EOL.sublime-macro"} },\n{ "keys": ["ctrl+/"], "command": "toggle_comment", "args": { "block": false } },\n{ "keys": ["ctrl+shift+/"], "command": "toggle_comment", "args": { "block": true } },\n{ "keys": ["ctrl+j"], "command": "join_lines" },\n{ "keys": ["ctrl+shift+d"], "command": "duplicate_line" },\n{ "keys": ["ctrl+`"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },\n{ "keys": ["ctrl+space"], "command": "auto_complete" },\n{ "keys": ["ctrl+space"], "command": "replace_completion_with_auto_complete", "context":\n [{ "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },\n  { "key": "auto_complete_visible", "operator": "equal", "operand": false },\n  { "key": "setting.tab_completion", "operator": "equal", "operand": false }]\n },\n { "keys": ["ctrl+alt+shift+p"], "command": "show_scope_name" },\n { "keys": ["f7"], "command": "build" },\n{ "keys": ["ctrl+b"], "command": "build" },\n{ "keys": ["ctrl+shift+b"], "command": "build", "args": {"variant": "Run"} },\n{ "keys": ["ctrl+break"], "command": "exec", "args": {"kill": true} },\n{ "keys": ["ctrl+t"], "command": "transpose" },\n{ "keys": ["f9"], "command": "sort_lines", "args": {"case_sensitive": false} },\n{ "keys": ["ctrl+f9"], "command": "sort_lines", "args": {"case_sensitive": true} },\n // Auto-pair quotes\n{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"$0\""}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },\n  { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },\n  { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true }]\n },\n{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"${0:$SELECTION}\""}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }]\n },\n{ "keys": ["\""], "command": "move", "args": {"by": "characters", "forward": true}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\"", "match_all": true }]\n },\n{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_contains", "operand": "\"$", "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\"", "match_all": true }]\n },\n  // Auto-pair single quotes\n{ "keys": ["\'"], "command": "insert_snippet", "args": {"contents": "\'$0\'"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },\n  { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\'a-zA-Z0-9_]$", "match_all": true },\n  { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true }]\n },\n{ "keys": ["\'"], "command": "insert_snippet", "args": {"contents": "\'${0:$SELECTION}\'"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }]\n },\n{ "keys": ["\'"], "command": "move", "args": {"by": "characters", "forward": true}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\'", "match_all": true }]\n },\n{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_contains", "operand": "\'$", "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\'", "match_all": true }]\n },\n  // Auto-pair brackets\n{ "keys": ["("], "command": "insert_snippet", "args": {"contents": "($0)"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }]\n },\n{ "keys": ["("], "command": "insert_snippet", "args": {"contents": "(${0:$SELECTION})"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }]\n },\n{ "keys": [")"], "command": "move", "args": {"by": "characters", "forward": true}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true }]\n },\n{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true }]\n },\n  // Auto-pair square brackets\n{ "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$0]"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }]\n },\n{ "keys": ["["], "command": "insert_snippet", "args": {"contents": "[${0:$SELECTION}]"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }]\n },\n{ "keys": ["]"], "command": "move", "args": {"by": "characters", "forward": true}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true }]\n },\n{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_contains", "operand": "\\[$", "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true }]\n },\n  // Auto-pair curly brackets\n{ "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$0}"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }]\n },\n{ "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{${0:$SELECTION}}"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }]\n },\n{ "keys": ["}"], "command": "move", "args": {"by": "characters", "forward": true}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }]\n },\n{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":\n [{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }]\n },\n { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "Packages/Default/Add Line in Braces.sublime-macro"}, "context":\n [{ "key": "setting.auto_indent", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }]\n },\n{ "keys": ["shift+enter"], "command": "run_macro_file", "args": {"file": "Packages/Default/Add Line in Braces.sublime-macro"}, "context":\n [{ "key": "setting.auto_indent", "operator": "equal", "operand": true },\n  { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },\n  { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },\n  { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }]\n },\n  {\n  "keys": ["alt+shift+1"],\n  "command": "set_layout",\n  "args":\n  {\n  "cols": [0.0, 1.0],\n  "rows": [0.0, 1.0],\n  "cells": [[0, 0, 1, 1]]\n  }\n },\n {\n  "keys": ["alt+shift+2"],\n  "command": "set_layout",\n  "args":\n  {\n  "cols": [0.0, 0.5, 1.0],\n  "rows": [0.0, 1.0],\n  "cells": [[0, 0, 1, 1], [1, 0, 2, 1]]\n  }\n },\n {\n  "keys": ["alt+shift+3"],\n  "command": "set_layout",\n  "args":\n  {\n  "cols": [0.0, 0.33, 0.66, 1.0],\n  "rows": [0.0, 1.0],\n  "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]]\n  }\n },\n {\n  "keys": ["alt+shift+4"],\n  "command": "set_layout",\n  "args":\n  {\n  "cols": [0.0, 0.25, 0.5, 0.75, 1.0],\n  "rows": [0.0, 1.0],\n  "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1], [3, 0, 4, 1]]\n  }\n },\n {\n  "keys": ["alt+shift+8"],\n  "command": "set_layout",\n  "args":\n  {\n  "cols": [0.0, 1.0],\n  "rows": [0.0, 0.5, 1.0],\n  "cells": [[0, 0, 1, 1], [0, 1, 1, 2]]\n  }\n },\n {\n  "keys": ["alt+shift+9"],\n  "command": "set_layout",\n  "args":\n  {\n  "cols": [0.0, 1.0],\n  "rows": [0.0, 0.33, 0.66, 1.0],\n  "cells": [[0, 0, 1, 1], [0, 1, 1, 2], [0, 2, 1, 3]]\n  }\n },\n {\n  "keys": ["alt+shift+5"],\n  "command": "set_layout",\n  "args":\n  {\n  "cols": [0.0, 0.5, 1.0],\n  "rows": [0.0, 0.5, 1.0],\n  "cells":\n  [\n   [0, 0, 1, 1], [1, 0, 2, 1],\n   [0, 1, 1, 2], [1, 1, 2, 2]\n  ]\n  }\n },\n{ "keys": ["ctrl+1"], "command": "focus_group", "args": { "group": 0 } },\n{ "keys": ["ctrl+2"], "command": "focus_group", "args": { "group": 1 } },\n{ "keys": ["ctrl+3"], "command": "focus_group", "args": { "group": 2 } },\n{ "keys": ["ctrl+4"], "command": "focus_group", "args": { "group": 3 } },\n{ "keys": ["ctrl+shift+1"], "command": "move_to_group", "args": { "group": 0 } },\n{ "keys": ["ctrl+shift+2"], "command": "move_to_group", "args": { "group": 1 } },\n{ "keys": ["ctrl+shift+3"], "command": "move_to_group", "args": { "group": 2 } },\n{ "keys": ["ctrl+shift+4"], "command": "move_to_group", "args": { "group": 3 } },\n{ "keys": ["ctrl+0"], "command": "focus_side_bar" },\n{ "keys": ["alt+1"], "command": "select_by_index", "args": { "index": 0 } },\n{ "keys": ["alt+2"], "command": "select_by_index", "args": { "index": 1 } },\n{ "keys": ["alt+3"], "command": "select_by_index", "args": { "index": 2 } },\n{ "keys": ["alt+4"], "command": "select_by_index", "args": { "index": 3 } },\n{ "keys": ["alt+5"], "command": "select_by_index", "args": { "index": 4 } },\n{ "keys": ["alt+6"], "command": "select_by_index", "args": { "index": 5 } },\n{ "keys": ["alt+7"], "command": "select_by_index", "args": { "index": 6 } },\n{ "keys": ["alt+8"], "command": "select_by_index", "args": { "index": 7 } },\n{ "keys": ["alt+9"], "command": "select_by_index", "args": { "index": 8 } },\n{ "keys": ["alt+0"], "command": "select_by_index", "args": { "index": 9 } },\n{ "keys": ["f2"], "command": "next_bookmark" },\n{ "keys": ["shift+f2"], "command": "prev_bookmark" },\n{ "keys": ["ctrl+f2"], "command": "toggle_bookmark" },\n{ "keys": ["ctrl+shift+f2"], "command": "clear_bookmarks" },\n{ "keys": ["alt+f2"], "command": "select_all_bookmarks" },\n{ "keys": ["ctrl+shift+k"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Line.sublime-macro"} },\n{ "keys": ["alt+q"], "command": "wrap_lines" },\n{ "keys": ["ctrl+k", "ctrl+u"], "command": "upper_case" },\n{ "keys": ["ctrl+k", "ctrl+l"], "command": "lower_case" },\n{ "keys": ["ctrl+k", "ctrl+space"], "command": "set_mark" },\n{ "keys": ["ctrl+k", "ctrl+a"], "command": "select_to_mark" },\n{ "keys": ["ctrl+k", "ctrl+w"], "command": "delete_to_mark" },\n{ "keys": ["ctrl+k", "ctrl+x"], "command": "swap_with_mark" },\n{ "keys": ["ctrl+k", "ctrl+y"], "command": "yank" },\n{ "keys": ["ctrl+k", "ctrl+k"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete to Hard EOL.sublime-macro"} },\n{ "keys": ["ctrl+k", "ctrl+backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete to Hard BOL.sublime-macro"} },\n{ "keys": ["ctrl+k", "ctrl+g"], "command": "clear_bookmarks", "args": {"name": "mark"} },\n{ "keys": ["ctrl+k", "ctrl+c"], "command": "show_at_center" },\n{ "keys": ["ctrl++"], "command": "increase_font_size" },\n{ "keys": ["ctrl+="], "command": "increase_font_size" },\n{ "keys": ["ctrl+keypad_plus"], "command": "increase_font_size" },\n{ "keys": ["ctrl+-"], "command": "decrease_font_size" },\n{ "keys": ["ctrl+keypad_minus"], "command": "decrease_font_size" },\n{ "keys": ["alt+shift+w"], "command": "insert_snippet", "args": { "name": "Packages/XML/long-tag.sublime-snippet" } },\n{ "keys": ["ctrl+shift+["], "command": "fold" },\n{ "keys": ["ctrl+shift+]"], "command": "unfold" },\n{ "keys": ["ctrl+k", "ctrl+1"], "command": "fold_by_level", "args": {"level": 1} },\n{ "keys": ["ctrl+k", "ctrl+2"], "command": "fold_by_level", "args": {"level": 2} },\n{ "keys": ["ctrl+k", "ctrl+3"], "command": "fold_by_level", "args": {"level": 3} },\n{ "keys": ["ctrl+k", "ctrl+4"], "command": "fold_by_level", "args": {"level": 4} },\n{ "keys": ["ctrl+k", "ctrl+5"], "command": "fold_by_level", "args": {"level": 5} },\n{ "keys": ["ctrl+k", "ctrl+6"], "command": "fold_by_level", "args": {"level": 6} },\n{ "keys": ["ctrl+k", "ctrl+7"], "command": "fold_by_level", "args": {"level": 7} },\n{ "keys": ["ctrl+k", "ctrl+8"], "command": "fold_by_level", "args": {"level": 8} },\n{ "keys": ["ctrl+k", "ctrl+9"], "command": "fold_by_level", "args": {"level": 9} },\n{ "keys": ["ctrl+k", "ctrl+0"], "command": "unfold_all" },\n{ "keys": ["ctrl+k", "ctrl+j"], "command": "unfold_all" },\n{ "keys": ["ctrl+k", "ctrl+t"], "command": "fold_tag_attributes" },\n{ "keys": ["context_menu"], "command": "context_menu" },\n{ "keys": ["alt+c"], "command": "toggle_case_sensitive", "context":\n [{ "key": "setting.is_widget", "operator": "equal", "operand": true }]\n },\n{ "keys": ["alt+r"], "command": "toggle_regex", "context":\n [{ "key": "setting.is_widget", "operator": "equal", "operand": true }]\n },\n{ "keys": ["alt+w"], "command": "toggle_whole_word", "context":\n [{ "key": "setting.is_widget", "operator": "equal", "operand": true }]\n },\n{ "keys": ["alt+a"], "command": "toggle_preserve_case", "context":\n [{ "key": "setting.is_widget", "operator": "equal", "operand": true }]\n },\n  // Find panel key bindings\n{ "keys": ["enter"], "command": "find_next", "context":\n [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]\n },\n{ "keys": ["shift+enter"], "command": "find_prev", "context":\n [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]\n },\n{ "keys": ["alt+enter"], "command": "find_all", "args": {"close_panel": true},\n   "context": [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]\n },\n  // Replace panel key bindings\n{ "keys": ["enter"], "command": "find_next", "context":\n [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]\n },\n{ "keys": ["shift+enter"], "command": "find_prev", "context":\n [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]\n },\n{ "keys": ["alt+enter"], "command": "find_all", "args": {"close_panel": true},\n  "context": [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]\n },\n{ "keys": ["ctrl+alt+enter"], "command": "replace_all", "args": {"close_panel": true},\n   "context": [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]\n },\n  // Incremental find panel key bindings\n{ "keys": ["enter"], "command": "hide_panel", "context":\n [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]\n },\n{ "keys": ["shift+enter"], "command": "find_prev", "context":\n [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]\n },\n{ "keys": ["alt+enter"], "command": "find_all", "args": {"close_panel": true},\n  "context": [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]\n }\n]\n\n',
'<h2>\Sublime Text\Data\Packages\User\Preferences.sublime-settings</h2>\neg.: "font_face": "標楷體",\n{\n "auto_complete": false,\n "auto_complete_commit_on_tab": false,\n "caret_extra_width": 4,\n "caret_style": "phase",\n "color_scheme": "Packages/Color Scheme - Default/0Amytheme.tmTheme",\n "detect_indentation": false,\n "detect_slow_plugins": false,\n "font_face": "SimSun",\n "font_size": 22.0,\n "highlight_line": true,\n "ignored_packages":\n [\n  "Vintage"\n ],\n "line_padding_bottom": 1,\n "line_padding_top": 1,\n "rulers":\n [\n  80\n ],\n "tab_completion": false,\n "tab_size": 5,\n "translate_tabs_to_spaces": false,\n "wide_caret": true\n}\n\n',
'<h2>\Sublime Text\Data\Packages\User\0Amytheme.tmTheme</h2>\n\n&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;\n&lt;plist version="1.0"&gt;\n&lt;dict&gt;\n &lt;key&gt;name&lt;/key&gt;\n &lt;string&gt;Monokai&lt;/string&gt;\n &lt;key&gt;settings&lt;/key&gt;\n &lt;array&gt;\n  &lt;dict&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;background&lt;/key&gt;\n    &lt;string&gt;#000000&lt;/string&gt;\n    &lt;key&gt;caret&lt;/key&gt;\n    &lt;string&gt;#FF0000&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#CCCCCC&lt;/string&gt;\n    &lt;key&gt;invisibles&lt;/key&gt;\n    &lt;string&gt;#3B3A32&lt;/string&gt;\n    &lt;key&gt;lineHighlight&lt;/key&gt;\n    &lt;string&gt;#102808&lt;/string&gt;\n    &lt;key&gt;selection&lt;/key&gt;\n    &lt;string&gt;#001808&lt;/string&gt;\n    &lt;key&gt;findHighlight&lt;/key&gt;\n    &lt;string&gt;#803010&lt;/string&gt;\n    &lt;key&gt;findHighlightForeground&lt;/key&gt;\n    &lt;string&gt;#FFA0F0&lt;/string&gt;\n    &lt;key&gt;selectionBorder&lt;/key&gt;\n    &lt;string&gt;#FF0000&lt;/string&gt;\n    &lt;key&gt;activeGuide&lt;/key&gt;\n    &lt;string&gt;#9D550FB0&lt;/string&gt;\n    &lt;key&gt;bracketsForeground&lt;/key&gt;\n    &lt;string&gt;#A8C8A2C5&lt;/string&gt;\n    &lt;key&gt;bracketsOptions&lt;/key&gt;\n    &lt;string&gt;underline&lt;/string&gt;\n    &lt;key&gt;bracketContentsForeground&lt;/key&gt;\n    &lt;string&gt;#4FAF88A5&lt;/string&gt;\n    &lt;key&gt;bracketContentsOptions&lt;/key&gt;\n    &lt;string&gt;underline&lt;/string&gt;\n    &lt;key&gt;tagsOptions&lt;/key&gt;\n    &lt;string&gt;stippled_underline&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Comment&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;comment&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#75715E&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;String&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;string&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#E6DB74&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Number&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;constant.numeric&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#AE81FF&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Built-in constant&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;constant.language&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#AE81FF&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;User-defined constant&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;constant.character, constant.other&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#AE81FF&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Variable&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;variable&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Keyword&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;keyword&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#F92672&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Storage&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;storage&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#F92672&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Storage type&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;storage.type&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;italic&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#66D9EF&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Class name&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;entity.name.class&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;underline&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#A6E22E&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Inherited class&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;entity.other.inherited-class&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;italic underline&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#A6E22E&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Function name&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;entity.name.function&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#A6E22E&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Function argument&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;variable.parameter&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;italic&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#FD971F&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Tag name&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;entity.name.tag&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#F92672&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Tag attribute&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;entity.other.attribute-name&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#A6E22E&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Library function&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;support.function&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#66D9EF&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Library constant&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;support.constant&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#66D9EF&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Library class/type&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;support.type, support.class&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;italic&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#66D9EF&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Library variable&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;support.other.variable&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Invalid&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;invalid&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;background&lt;/key&gt;\n    &lt;string&gt;#F92672&lt;/string&gt;\n    &lt;key&gt;fontStyle&lt;/key&gt;\n    &lt;string&gt;&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#F8F8F0&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;Invalid deprecated&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;invalid.deprecated&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;background&lt;/key&gt;\n    &lt;string&gt;#AE81FF&lt;/string&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#F8F8F0&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;JSON String&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;meta.structure.dictionary.json string.quoted.double.json&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#CFCFC2&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;diff.header&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;meta.diff, meta.diff.header&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#75715E&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;diff.deleted&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;markup.deleted&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#F92672&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;diff.inserted&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;markup.inserted&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#A6E22E&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;name&lt;/key&gt;\n   &lt;string&gt;diff.changed&lt;/string&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;markup.changed&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#E6DB74&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;constant.numeric.line-number.find-in-files - match&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#AE81FFA0&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n  &lt;dict&gt;\n   &lt;key&gt;scope&lt;/key&gt;\n   &lt;string&gt;entity.name.filename.find-in-files&lt;/string&gt;\n   &lt;key&gt;settings&lt;/key&gt;\n   &lt;dict&gt;\n    &lt;key&gt;foreground&lt;/key&gt;\n    &lt;string&gt;#E6DB74&lt;/string&gt;\n   &lt;/dict&gt;\n  &lt;/dict&gt;\n &lt;/array&gt;\n &lt;key&gt;uuid&lt;/key&gt;\n &lt;string&gt;D8D5E82E-3D5B-46B5-B38E-8C841C21347D&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n\n',
'<h2>Build 3413 Enter License:</h2>\n----- BEGIN LICENSE -----\nMember J2TeaM\nSingle User License\nEA7E-1011316\nD7DA350E 1B8B0760 972F8B60 F3E64036\nB9B4E234 F356F38F 0AD1E3B7 0E9C5FAD\nFA0A2ABE 25F65BD8 D51458E5 3923CE80\n87428428 79079A01 AA69F319 A1AF29A4\nA684C2DC 0B1583D4 19CBD290 217618CD\n5653E0A0 BACE3948 BB2EE45E 422D2C87\nDD9AF44B 99C49590 D2DBDEE1 75860FD2\n8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864\n------ END LICENSE ------\n\nTwitterInc\n200 User License\nEA7E-890007\n1D77F72E 390CDD93 4DCBA022 FAF60790\n61AA12C0 A37081C5 D0316412 4584D136\n94D7F7D4 95BC8C1C 527DA828 560BB037\nD1EDDD8C AE7B379F 50C9D69D B35179EF\n2FE898C4 8E4277A8 555CE714 E1FB0E43\nD5D52613 C3D12E98 BC49967F 7652EED2\n9D2D2E61 67610860 6D338B72 5CF95C69\nE36B85CC 84991F19 7575D828 470A92AB\n\n',
'<h2>How to disable Sublime Text’s update check (new version prompt):</h2>\n\nGo to “Preferences -> Settings-User/Distraction Free“\nAdd this line: "update_check": false,\nDone!\nIf this does not work, add the following lines to your hosts file:\n127.0.0.1 www.sublimetext.com\n127.0.0.1 license.sublimehq.com\nWindows C:\Windows\System32\drivers\etc\hosts\nLinux /etc/hosts\nhttps://teamtreehouse.com/community/unable-to-save-cwindowssystem32driversetchosts\nunable to save C:/Windows/system32/drivers/etc/hosts\n\nEdit file hosts windows path\nLokasi hosts: C:\Windows\System32\drivers\etc\nTambahkan:\nSublime Text 3\n0.0.0.0 license.sublimehq.com\n0.0.0.0 45.55.255.55\n0.0.0.0 45.55.41.223\nLicense\n—– BEGIN LICENSE —–\nTwitterInc\n200 User License\nEA7E-890007\n1D77F72E 390CDD93 4DCBA022 FAF60790\n61AA12C0 A37081C5 D0316412 4584D136\n94D7F7D4 95BC8C1C 527DA828 560BB037\nD1EDDD8C AE7B379F 50C9D69D B35179EF\n2FE898C4 8E4277A8 555CE714 E1FB0E43\nD5D52613 C3D12E98 BC49967F 7652EED2\n9D2D2E61 67610860 6D338B72 5CF95C69\nE36B85CC 84991F19 7575D828 470A92AB\n—— END LICENSE ——\n\n',
'<h2>The following is the User Settings:</h2>\n\n{\n "auto_complete": false,\n "auto_complete_commit_on_tab": false,\n "auto_indent": false,\n "caret_extra_width": 1,\n "caret_style": "phase",\n "color_scheme": "Packages/User/0Amytheme.tmTheme",\n "default_line_ending": "unix",\n "detect_indentation": true,\n "detect_slow_plugins": false,\n "font_face": "Microsoft JhengHei UI",\n "font_size": 21.0,\n "highlight_line": true,\n "ignored_packages":\n [\n  "Vintage"\n ],\n "line_numbers": false,\n "line_padding_bottom": 1,\n "line_padding_top": 1,\n "rulers":\n [\n  80\n ],\n "save_on_focus_lost": true,\n "tab_completion": false,\n "tab_size": 4,\n "translate_tabs_to_spaces": false,\n "update_check": false,\n "wide_caret": true,\n "word_separators": "./\\()\"\'-:,.;&lt;>!@#$%^&*|+=[]{}`~?“”_"\n}\n\nThis is the User Key Bindings:\n[\n{"keys": ["ctrl+alt+."], "command": "toggle_setting","args": {"setting": "line_numbers"}},\n{"keys": ["ctrl+alt+w"], "command": "toggle_setting","args": {"setting": "word_wrap"}},\n{"keys": ["ctrl+shift+r"], "command": "reopen_last_file" },\n{"keys": ["ctrl+shift+c"], "command": "title_case" },\n{"keys": ["ctrl+up"], "command": "scroll_lines", "args": {"amount": 1.0 } },\n{"keys": ["f8"], "command": "permute_lines", "args": {"operation": "unique"} },\n{"keys": ["ctrl+shift+d"], "command": "duplicate_lines" },\n{"keys": ["ctrl+shift+m"],  "command": "run_macro_file",  "args": { "file": "Packages/User/ahref tail.sublime-macro" }},\n{"keys": ["f12"], "command": "reindent", "args": {"single_line": true}},\n{"keys": ["ctrl+alt+b"], "command": "run_existing_window_command", "args": {\n    "id": "repl_python_run",\n    "file": "config/Python/Main.sublime-menu"}},\n{"keys": ["ctrl+down"], "command": "scroll_lines", "args": {"amount": -1.0 } }\n]\n\n',
'<h2>Sublime Keyboard Shortcuts</h2>\n\nEditing\nCtrl + ↩ Insert line after\nCtrl + ⇧ + ↩ Insert line before\nCtrl + ⇧ + ↑ Move line/selection up\nCtrl + ⇧ + ↓ Move line/selection down\nCtrl + L Select line - Repeat to select next lines\nCtrl + D Select word - Repeat select others occurrences\nCtrl + M Jump to closing parentheses Repeat to jump to opening parentheses\nCtrl + ⇧ + M Select all contents of the current parentheses\nCtrl + ⇧ + K Delete Line\nCtrl + KK Delete from cursor to end of line\nCtrl + K + ⌫ Delete from cursor to start of line\nCtrl + ] Indent current line(s)\nCtrl + [ Un-indent current line(s)\nCtrl + ⇧ + D Duplicate line(s)\nCtrl + J Join line below to the end of the current line\nCtrl + / Comment/un-comment current line\n<span class="orange">The shortcut to comment out or uncomment the selected text or current line:\nWindows: Ctrl + /</span>\nCtrl + ⇧ + / Block comment current selection\nCtrl + Y Redo, or repeat last keyboard shortcut command\nCtrl + ⇧ + V Paste and indent correctly\nCtrl + Space Select next auto-complete suggestion\nCtrl + U soft undo; jumps to your last change before undoing change when repeated\nAlt + . Close current html tag\nWindows\nCtrl + Alt + Up Column selection up\nCtrl + Alt + Down Column selection down\nNavigation/Goto Anywhere\nCtrl + R Goto symbol, Jump to a function, method, selector, header, or ID\nCtrl + G To jump to a specific line\nCtrl + P Press # Jump to a word, Goto word in current file\nCtrl + P Press @ Jump to a function\nCtrl + F3 jump to later instances\nGeneral\nCtrl + ⇧ + P Command prompt\nCtrl + KB Toggle side bar\nCtrl + ⇧ + Alt + P Show scope in status bar\nFind/Replace\nCtrl + H Replace\nCtrl + ⇧ + F Find in files\nTabs\nCtrl + ⇧ + t Open last closed tab\nCtrl + PgUp Cycle up through tabs\nCtrl + PgDn Cycle down through tabs\nCtrl + ⇆ Find in files\nAlt + [NUM] Switch to tab number [NUM] where [NUM] <= number of tabs\nSplit Panel\nAlt + ⇧ + 2 Split view into two columns\nAlt + ⇧ + 5 Set view to grid (4 panels)\nAlt + ⇧ + 8 Split view into two rows\nCtrl + [NUM] Jump to numbered panel\nCtrl + ⇧ + [NUM] Move file to specified panel where num is 1-4\nBookmarks\nCtrl + F2 Toggle bookmark\nF2 Next bookmark\n⇧ + F2 Previous bookmark\nCtrl + ⇧ + F2 Clear bookmarks\nText manipulation\nCtrl + KU Transform to Uppercase\nCtrl + KL Transform to Lowercase\n\n',
'<h2>Ctrl + Arrow behavior</h2>\n\nhttp://compscientist.com/post/28272180856/word-separators\n"word delimiters" configuration\nPreference -> Settings - Default\n“word_separators”: “./\()"’-:,.;&lt;>~!@#$%^&*|+=[]{}`~?”,\n{ "keys": "ctrl+left"], "command": "move", "args": {"by": "words", "forward": false} },\n{ "keys": "ctrl+right"], "command": "move", "args": {"by": "words", "forward": true} },\n{ "keys": "ctrl+shift+left"], "command": "move", "args": {"by": "words", "forward": false, "extend": true} },\n{ "keys": "ctrl+shift+right"], "command": "move", "args": {"by": "words", "forward": true, "extend": true} }\nchanged ctrl+left and ctrl+shift+left from by word_ends to by words.\n\n\n',
'<h2>exclude a charachter in sublime text regex match and replace</h2>\n\nTry this one: ([^;]+)\n[^;] means anything but semicolon :-)\nsearch last occurence\nabc(?!.*abc)\n\n',
'<h2>save with backup</h2>\n"save_on_focus_lost": true,\n\n',
'<h2>hide tab</h2>\n{ "keys": ["ctrl+shift+t"], "command": "toggle_tabs" }\n\n',
'<h2>让Sublime Text 2支持GB2312和GBK编码</h2>\n第一步，确保已经安装了“Package Control”，有的话就跳过第一步\nSublime Text 2 安装 Sublime Package Control，通过 Sublime Package Control，安装、升级和卸载 Package。\n安装 Package Control 的方法：\n1、打开 Sublime Text 2，按下 Control + ` 调出 Console，通常这个快捷键会与PC上的其它软件起冲突，需要修改其它软件的这个快捷键。\n2、将以下代码粘贴进命令行中并回车：\nimport urllib2,os;pf="Package Control.sublime-package";ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),"wb").write(urllib2.urlopen("http://sublime.wbond.net/"+pf.replace(" ","%20")).read())\n3、重启 Sublime Text 2，如果在 Preferences -> Package Settings中见到Package Control这一项，就说明安装成功了。\n\n第二步：安装GBK包,这一步很简单\n安装好Package Control之后，通过快捷键[ctrl+shift+p]调出command palette，然后输入install，调出Package Control，然后找到GBK，回车即可。\n\n',
'<h2>Regex: Find out all files that do not contain some words</h2>\nThis is a better solution:\n(?s)\A(?!.*(YOUR_WORDS).*$)\n^&lt;a href="((?!(http|LibDocs)).).*html"&gt;\n&lt;a ((?!_blank).)*"&gt;\nMatch string not containing tab\n^((?!\t).)*$\n\n',
'<h2>Regular expression to stop at first match</h2>\nAdding a ? on a quantifier (?, * or +) makes it non-greedy\n(.*?)\n\n',
'<h2>word_separators</h2>\nThe sublime text word_separator is:\n"word_separators": "./\\()\"\'-:,.;&lt;>~!@#$%^&&*|+=[]{}`~?",\n\n',
'<h2>Sublime Text 支持GB2312和GBK编码 安装ConvertToUTF8</h2>\n\nopen the Sublime console\nCtrl+` or View > Show Console\nenter the following command:\nsublime.log_commands(True)\nNow whenever you do anything, Sublime logs the command along with any arguments that it might take.\nlist_all_commands\nlist all of the available commands of all types into a new scratch buffer.\n\n<br>\n',
'<h2>Project Format</h2>\nProject Format\n{\n "folders":\n [\n  {\n   "path": "/D/sublime"\n  },\n  {\n   "path": "/D/KPC"\n  },\n  {\n   "path": "/D/Users/SCL1122/Desktop"\n  }\n ]\n}\n',
'<h2>Compare Side-By-Side</h2>\nRight click on a tab and select “Compare with…”\n\n<br>\n',
'<h2>package control common packages</h2>\nctrl+shift+p\ninstall package\nemmet help to type html\ncodeintel intelligence and smart autocomplete engine, ie, ide\nmaterial theme display theme, activation required after installation, by install package material theme activate\nsidebar enhancement\nadvanced newfile\ngitgutter help to show difference versons\ndocblockr helps to write comments\nsublimelinter\njslint\nr-ide\njavascriptconsole\n<br>\n',
'<h2>insert Cursor At End Of EachLine Selected</h2>\nremove\n{"keys": ["ctrl+shift+l"], "command": "toggle_setting", "args": { "setting": "line_numbers"} },\nadd\n{ "key": "ctrl+shift+l", "command": "editor.action.insertCursorAtEndOfEachLineSelected", "when": "editorTextFocus "}\n<br>\n<br>\n',
'<h2>Installing multiple packages in sublime text</h2>\nJust use Preferences > Package Control > Package Control: Advanced Install Package.\nThen you can enter a comma-separated package list, e.g. ConvertToUTF8,MarkdownEditing,SublimeLinter,SublimeREPL.\n<br>\n',
'<h2>Manual installation package control</h2>\nhttps://packagecontrol.io/installation\nClick the Preferences > Browse Packages… menu\nBrowse up a folder and then into the Installed Packages/ folder\nDownload Package Control.sublime-package and copy it into the Installed Packages/ directory\nRestart Sublime Text\n\n\n\n',
'<h2>tabs and spaces for indentation</h2>\nclick<img src="http://i.stack.imgur.com/ZhjNN.png">\nSublime Text 3 controls tabs and spaces for indentation\n<br>\n<br>\n',
'<h2>Regular expressions and Sublime Text</h2>\n<p>Since I have several regular expressions that I use over and over (and over) again, I decided to store them in <a href="https://smilesoftware.com/textexpander"><span class="redword">TextExpander</span></a> for quick reference. I prefix each snippet with <code class="highlighter-rouge">rx</code>, which lets me use the TextExpander global shortcut to bring up a TextExpander search box anywhere in macOS so I can just grab the one I need.</p>\n<p><img style="width: 30%" src="http://www.practicallyefficient.com/img/rx-te-pe.png" alt="" title="TextExpander and Regular Expressions" /></p>\n<p>Using regular expressions to find text in Sublime Text is easy, but remember to press the <code class="highlighter-rouge">.*</code> button on the far left of the find/replace form first.</p>\n<p><img style="width: 50%" src="http://www.practicallyefficient.com/img/sublime-text-regex-pe.png" alt="" title="Sublime Text and Regular Expressions" /></p>\n<p>Regular expressions are even more powerful when you learn the “replace” syntax in Sublime Text. In the screenshot above, the regular expression <code class="highlighter-rouge">^.*\{frame\}</code> is designed to find lines containing the LaTeX Beamer <code class="highlighter-rouge">frame</code> environment and match all text from the beginning of the line through the closing <code class="highlighter-rouge">}</code> to the right of <code class="highlighter-rouge">frame</code>.</p>\n<p>By enclosing this search term in parentheses, I’m telling Sublime Text that I want to use it as a variable in my replace term. The variable is called <code class="highlighter-rouge">$1</code>. (You can separate multiple search terms with commas, to get <code class="highlighter-rouge">$1</code>, <code class="highlighter-rouge">$2</code>, etc.)</p>\n<p>Therefore my replace term <code class="highlighter-rouge">% $1</code> will effectively insert the <code class="highlighter-rouge">%</code> (LaTeX comment symbol) at the beginning of each matched line. This comments out all lines containing the <code class="highlighter-rouge">frame</code> environment so that LaTeX will ignore them—something that’s very useful in one of my LaTeX workflows.</p>\n<p>But anyway, if you use Sublime Text a lot and want to take your find/replace routine to the next level, regular expressions are your friend.</p>\n<p><a href="https://itunes.apple.com/us/app/regexrx/id498370702?mt=12">RegExRX</a> is a really handy Mac app for building and testing regular expressions.</p>\n\n',
'<h2>folder exclude patterns</h2>\n<a href="https://forum.sublimetext.com/t/sublime-project-folder-exclude-patterns/10480/2">sublime-project: folder_exclude_patterns</a>\n<a href="https://github.com/SublimeTextIssues/Core/issues/1895">folder_exclude_patterns</a>\n<br>\n<br>\n',
'<h2>Emmet 基本用法</h2>\n<a href="https://johndjameson.com/blog/using-emmet-with-sublime-text/" class="whitebut ">Using Emmet with Sublime Text</a>\n產生一個 h1 元素 直接輸入 h1 後，按下 Tab 鍵或是 Ctrl+E \n產生一個標準的 HTML5 樣板的話，我們可以直接輸入 ! 或是 html:5\n.className:\n產生元素時直接加上指定的 .className，例如：h1.title\n要加上多個 .className 的話，只要把它們接在一起就可以了\n一般預設的元素是 div，所以如果直接寫 .className 的話，就會自動產生一個 div 元素然後加上指定的 .className\n#id:\n加上指定的 #id\n同時加上 #id 及 .className 接在一起寫就可以了\n更多關於元素的快捷縮寫方式都可以在官方的文件中找到：Emmet Cheat Sheet\n\n<br>\n<br>\n',
'<h2>gutter background</h2>\n<key>gutter</key><!-- gutter background, monokai.tm-theme -->\n<string>#2e2e1f</string>\n<key>gutterForeground</key><!-- gutter numbers -->\n<string>#6b6b47</string>\n<key>lineHighlight</key><!-- gutter background active line, gutter only "highlight_line": false -->\n<string>#0f0f0a</string><!-- 3E3D32 -->\n<br>\n<br>\n',
'<h2>SublimeREPL</h2>\nSublimeREPL allows you to run the interpreter in multiple tabs.\nThe tab is still editable like a normal sublime tab\nTo install it press ctrl + shift + P\nType in "install",\nclick on \'sublime package control: install package\'.\nThen select SublimeREPL.\n<span class="goldword">Create Build System</span> :\nIn Top Bar > "Tools" > "Build System" > "New Build System"\nReplace all contents of the file with :\n<span class="goldword">\n{\n    "target": "run_existing_window_command", \n    "id": "repl_python_run",\n    "file": "config/Python/Main.sublime-menu"\n}</span>\nSave the file as "PythonRepl.sublime-build" in the default "user" folder.\nUsing :\n4.1) Open the Python file that you want to run in Sublime Text.\n4.2) In Top Bar > "Tools" > "Build System" > "PythonRepl".\n4.3) Build the Python file, by choosing In Top Bar > "Tools" > "Build"\nor \nUsing either the build shortcut Ctrl+B\n\n',
'<h2>Javascript Console</h2>\n<a href="https://pawelgrzybek.com/javascript-console-in-sublime-text/">Javascript Console In Sublime Text</a>\n{\n  "cmd": ["C:/Program Files/nodejs/node.exe", "$file"],\n  "selector": "source.js"\n}\n<a href="https://www.sitepoint.com/essential-sublime-text-javascript-plugins/" class="whitebut ">JavaScript plugin for Sublime Text 3</a>\n<br>\n<br>\n',
'<h2>edit Sublime Text build settings</h2>\n\n<a href="https://stackoverflow.com/questions/23789410/how-to-edit-sublime-text-build-settings">edit Sublime Text build settings</a>\n\n',
'<h2>Hide files with certain extension</h2>\nActivate the default preferences tab (user preferences) and search for \nfile_exclude_patterns\nfolder_exclude_patterns\n    "folder_exclude_patterns": [".svn", ".git", ".hg", "CVS"],\n    "file_exclude_patterns": ["*.exe", "*.dll", "*.obj", "*.lib", "*.class", "*.psd", "*.db", "*.sublime-workspace"],\n\n<br>\n<br>\n',
'<h2>to check commands in  Console</h2>\n<a href="https://forum.sublimetext.com/t/how-to-show-command-name-binded-to-a-certain-key/4322">show command name binded to a certain key</a>\nsublime.log_commands(True)\n<br>\n',
'<h2>Install package manually</h2>\n<a href="https://forum.sublimetext.com/t/install-package-manually/6737">Install package manually</a>\nput it in your User folder.\nif it\'s in the packages directory, then it is "installed".\nSublime just scans the Packages directory and loads anything it finds at directory depth level 1 (so not recursively).\nor\nusing "Package Control: Add repository."\n\n',
'<h2>show sublime.log_commands</h2>\nsublime.log_commands(True)\n',
'<h2>Sublime Text Python IDE</h2>\n<a href="Sublime Text Python IDE.html" target="_blank">Sublime Text Python IDE</a>\n<br>\n<br>\n',
'<h2>JavaScript console in Sublime Text</h2>\nGoogle Chrome Javascript Console isn\'t the most comfortable tool for sure. \nTools like <a href="http://jsbin.com/">jsbin.com</a> or <a href="http://jsfiddle.net/">jsfiddle.net</a> are super cool but lets confirm that, nothing is more convenient to write a piece of code than your favourite editor. \n<p>Build systems allows you to run your files through external programs without manually switching between code editor and Terminal. \nSublime Text comes with few predefined profiles.</p>\n<p><img src="https://pawelgrzybek.com/photos/2015-06-12-1.jpg"></p>\n<p>Our mission is to add a new one for JavaScript. \nWe are going to use <a href="https://nodejs.org/">node.js</a>. \nMake sure it is already installed on your device.</p>\n<h3>Create JavaScript build system in Sublime Text</h3>\n<p>Every built system is described on JSON file with <code>.sublime-build</code> extension. \nTo create new one go to Tools &gt; Build System &gt; New Build System&hellip; If you are mac OS user, copy and paste this bit of code:</p>\n<code data-lang="json"><span class="p">{</span>\n  <span class="nt">&#34;cmd&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;/usr/local/bin/node&#34;</span><span class="p">,</span> <span class="s2">&#34;$file&#34;</span><span class="p">],</span>\n  <span class="nt">&#34;selector&#34;</span><span class="p">:</span> <span class="s2">&#34;source.js&#34;</span>\n<span class="p">}</span></code>\n<p>Windows users&hellip;</p>\n<code class="language-json" data-lang="json"><span class="p">{</span>\n  <span class="nt">&#34;cmd&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;C:/Program Files/nodejs/node.exe&#34;</span><span class="p">,</span> <span class="s2">&#34;$file&#34;</span><span class="p">],</span>\n  <span class="nt">&#34;selector&#34;</span><span class="p">:</span> <span class="s2">&#34;source.js&#34;</span>\n<span class="p">}</span></code></div>\n<p>In most cases single <code>node</code> command does the job instead of passing a full path to node. \nI found this method more reliable though. \nIf you are not sure where node is installed, just type <code>which node</code> in Terminal (mac OS) or <code>where node</code> in command prompt (windows users) to get the path.</p>\n<img src="https://pawelgrzybek.com/photos/2015-06-12-2.jpg">\n<p>Save this file as a JavaScript.sublime-build in &ldquo;User&rdquo; directory inside Sublime Text settings folder.</p>\n<p>Time for fun part. \nCreate and save a JavaScript file (to execute a node interpreter, file needs to be saved), code some super amazing script and click Cmd + B (mac OS) or F7 (Windows). \nYou can run this task manually from Tools &gt; Build. \nSublime Text should automatically run your script through appropriate build system. \nIf something doesn\'t work correctly go to Tools &gt; Build System and make sure that Automatically or JavaScript is selected. \nEnjoy!</p>\n<img src="https://pawelgrzybek.com/photos/2015-06-12-3.jpg">\n',
'<h2>word_separators for R language</h2>\n<a href="https://github.com/lianos/Rx/wiki/Sublime-Text-R-Resources">Sublime Text R Resources</a>\nAdd <i>.</i> as a word character for your R files/projects.\n<i>With an R file open</i>, go to Preferences > Settings - More > Syntax Specific - User. This will create an empty R.sublime-settings file in your Packages/User folder. Add the word_separators variable, like so:\n{"word_separators": "/\\()\"\'-:,;&lt;&gt;~!@#$%^&*|+=[]{}`~?"}\nSave the file, and your done.\n\n',
'<h2>remove syntax highlighting</h2>\n<a href="https://forum.sublimetext.com/t/how-do-i-remove-syntax-highlighting-but-keep-language-settings/34686">remove syntax highlighting</a>\n<br>\n',
'<h2>Developing Sublime Text Plugin</h2>\nThe following steps show you in detail how to develop a plugin in Sublime Text\n<b>Step 1</b> Select the <b>New Plugin</b> option by navigating through <b>Tools &rarr; Developer &rarr; New Plugin</b> as shown below\n<img src ="https://www.tutorialspoint.com/sublime_text/images/developing_plugin_step1.jpg">\n<b>Step 2</b> The basic code of a plugin includes import of two main libraries: <b>sublime</b> and <b>sublime_plugin</b>.\n<img src ="https://www.tutorialspoint.com/sublime_text/images/developing_plugin_step2.jpg">\nThe code for the plugin is\nimport sublime\nimport sublime_plugin\nclass ExampleCommand(sublime_plugin.TextCommand):\n   def run(self, edit):\n    self.view.insert(edit, 0, "Hello, World!")\n<b>Step 3</b> The customized plugins are saved in <b>Packages &rarr; User</b> folder. \nRefer to the following screenshot that gives you the complete understanding of the plugins saved in Sublime Text editor.\n<img src ="https://www.tutorialspoint.com/sublime_text/images/developing_plugin_step3.jpg">\n',
'<h2>Running the plugin</h2>\nWhen you have created a plugin and saved it, open the console using the shortcut key <b>Ctrl+`</b> on Windows and <b>Cmd+`</b> on OSX, and execute the command shown here\nview.run_command(plugin-name)\n<img src ="https://www.tutorialspoint.com/sublime_text/images/running_the_plugin.jpg">\nThis command will execute the plugin defined by the user with the list of activities included in it.\n',
'<h2>Writing a simple Sublime Text plugin</h2>\nOne of the neat Sublime Text features is that it provides you with a list of <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/commands.html" alt="Sublime Text Command API">commands</a> which you can extend (or write your own) and assign them to different key binds. \nIn this blog post I will go over configuring key binds and use <code>insert_snippet</code> command to generate some debug statements and then we will write few lines of python to extend <code>insert_snippet</code> to use text from clipboard as well.\nLets start with key mapping. \nIf you go to Sublime Text preferences you will find a two item grouping for key binds (User and Default). \nYour new key binds should always go into User. \nDefault should never be modified. \nIf you wish to change any of the default key binds you can override them in the user config instead. \nSublime Text will always load default config first, followed by OS specific config and user config last (each overriding previous definitions if needed).\nOk, lets add couple of simple key binds to our config file:\n// Default.sublime-keymap\n[\n  { "keys": ["ctrl+shift+h"],\n    "command": "insert_snippet",\n    "args": {\n    "contents": "console.log("=== HEARTBEAT $TM_FILENAME [$TM_LINE_NUMBER] ===");${0}"\n    },\n    "context": [{\n    "key": "selector",\n    "operator": "equal",\n    "operand": "source.js",\n    "match_all": true\n    }]\n  },\n  { "keys": ["ctrl+shift+d"],\n    "command": "insert_snippet",\n    "args": {\n    "contents": "console.log("=== $SELECTION $TM_FILENAME [$TM_LINE_NUMBER] ===", $SELECTION);${0}"\n    },\n    "context": [{\n    "key": "selector",\n    "operator": "equal",\n    "operand": "source.js",\n    "match_all": true\n    }]\n  }\n]\nThe config is simple array of JSON objects, each containing a set of rules for particular key bind. \nI have configured two key binds: <code>ctrl+shift+h</code> and <code>ctrl+shift+d</code>. \nBoth use <code>insert_snippet</code> command and are defined within the context of "source.js" (I will explain in a bit). \nWe are passing <code>"console.log(...)"</code> as an argument to <code>insert_snippet</code> in both cases. \nThis is the string that will be inserted at the cursor position once we use <code>ctrl+shift+h</code> or <code>ctrl+shift+d</code>. \n<code>$TM_LINE_NUMBER</code>, <code>$TM_FILENAME</code> and <code>$SELECTION</code> are <a href="https://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/snippets.html?highlight=TM_FILENAME#environment-variables" alt="Sublime Text Environment Variables">environment variables</a> which will be dynamically replaced by Sublime Text at insert time. \nThe following snippet - <code>${0}</code> will set the caret at this position once our console.log is generated.\nThe context allows you to write language specific key binds. \nIn my case these will work with javascript files. \nYou can have the same key bind with different implementations specific to the programming language you are working in. \nWe can duplicate these two blocks and replace source.js with source.php to make it work with php and change console.log to print_r or dpm (or a different debug function) and Sublime Text will pick the correct snippet to insert depending on the language we are working in. \n \nThis is a sample output of the two key binds we defined above:\n// ctrl+shift+h\n// 477 is a line number\n// some_file.js is the current js file we are working in.\nconsole.log("=== HEARTBEAT some_file.js [477] ===");\n// ctrl+shift+d\n// 478 is a line number\n// testvar was string we had selected when we pressed our key combination\n// some_file.js is the current js file we are working in.\nconsole.log("=== testvar some_file.js [478] ===", testvar);\nSo we have two key binds, one inserting a general debug heartbeat and the other one printing contents of a selected variable. \nThat"s ok so far, but I really wanted to be able to use <code>ctrl+shift+d</code> to create a var dump statement of a variable (string) that is in the clipboard as a fallback or use selected text as it behaves currently. \nUnfortunately <code>insert_snippet</code> doesn"t have access to the clipboard content and we don"t have environment variable that contains clipboard content either. \nThere is a <code>paste</code> method in Sublime Text, but unfortunately we are unable to wrap arbitrary string around the clipboard content and can only paste clipboard content alone. \nWe have exhausted all the available resources and will have to write few lines of python and create our own plugin/command that will extend the functionality of <code>insert_snippet</code> and allow it to use the contents from clipboard if needed.\nLets write our first <a href="http://sublimetext.info/docs/en/extensibility/plugins.html" alt="Writing Sublime Text plugin">Sublime Text plugin</a> that will handle the functionality we outlined above. \nWe start by going to <code>Tools &gt; New Plugin...</code> which will generate a template for our new plugin. \nThe code stub will look something like this:\nimport sublime, sublime_plugin\nclass ExampleCommand(sublime_plugin.TextCommand):\n  def run(self, edit):\n    self.view.insert(edit, 0, "Hello, World!")\nI rewrote this template and my plugin looks something like this:\n# insert_snippet_and_clipboard.py\nimport sublime, sublime_plugin\nclass InsertSnippetAndClipboardCommand(sublime_plugin.TextCommand):\n  def run(self, edit, **args):\n    for region in self.view.sel():\n    if not region.empty():\n replacement = self.view.substr(region)\n args["contents"] = args["contents"].replace("$SELECTION_OR_CLIPBOARD", replacement)\n self.view.run_command("insert_snippet", args)\n    else:\n replacement = sublime.get_clipboard().strip()\n args["contents"] = args["contents"].replace("$SELECTION_OR_CLIPBOARD", replacement)\n self.view.run_command("insert_snippet", args)\n\nYou can now save the file as <code>insert_snippet_and_clipboard.py</code> within <code>packages/user/</code>.\nYou can open a Sublime Text console using <code>Ctrl+`</code> and debug your new plugin during development by calling your command using <code class="bordred1 borRad10 white">view.run_command("example")</code>. \nYou can pass optional arguments to your command by passing them to run_command like this: <code>view.run_command("example", args)</code>.\nBy following Sublime Text convention and naming our class <code>SomeFunctionNameCommand(sublime_plugin.TextCommand):</code> we are creating a text command named some_function_name. \nIn our example we are creating <code>insert_snippet_and_clipboard</code> command which will provide user with <code>$SELECTION_OR_CLIPBOARD</code> environment variable. \nThis environment variable will be populated at insert time. \nIn this implementation we are prioritizing selected text, if no text is selected we are using the last clipboard snipped, and as a fallback we will replace the variable with an empty string.\nAnd finally, lets update our key bind <code>ctrl+shift+d</code> to use <code>insert_snippet_and_clipboard</code> command:\n// Default.sublime-keymap\n[\n  { "keys": ["ctrl+shift+h"],\n    "command": "insert_snippet",\n    "args": {\n    "contents": "console.log("=== HEARTBEAT $TM_FILENAME [$TM_LINE_NUMBER] ===");${0}"\n    },\n    "context": [{\n    "key": "selector",\n    "operator": "equal",\n    "operand": "source.js",\n    "match_all": true\n    }]\n  },\n  { "keys": ["ctrl+shift+d"],\n    "command": "insert_snippet_and_clipboard",\n    "args": {\n    "contents": "console.log("=== $SELECTION_OR_CLIPBOARD $TM_FILENAME [$TM_LINE_NUMBER] ===", $SELECTION_OR_CLIPBOARD);${0}"\n    },\n    "context": [{\n    "key": "selector",\n    "operator": "equal",\n    "operand": "source.js",\n    "match_all": true\n    }]\n  }\n]\nAnd that is it. \nWe should be able to generate some var debug statements right away by either selecting a piece of text (or copying it) and hitting <code>ctrl+shift+d</code>. \n',
'<h2>filter code</h2>\n&lt;br.*?>|&lt;p.*?>|&lt;span.*?>|&lt;div.*?>|&lt;strong.*?>|&lt;ul.*?>|&lt;li.*?>|&lt;section.*?>|&lt;code.*?>|&lt;/strong>|&lt;/span>|&lt;/div>|&lt;/section>|&lt;/code>|&lt;/ul>|&lt;/li>|&lt;svg.*?&lt;/svg>|&lt;article.*?>|&lt;/article>|&lt;blockquote.*?>|&lt;/blockquote>|&lt;mpcpc.*?/mpcpc>|&lt;mpvoice.*/mpvoice>|&lt;hr.*>|&lt;iframe.*?iframe>|&lt;em.*?>|&lt;/em>|&lt;noscript>.*?&lt;/noscript>|&lt;figure.*?>|&lt;/figure>\n class=".*?"| id=".*?"| style=".*?"\nclass.*?data-src|data.*?data-src|class.*?data-lazy-src\nclass="lazy" data-src\ndata-ratio=".*?"\n\?wx.*?>\n&nbsp;\n {2,}\n\n{2,}\n(^.*\n){3}\n&lt;p[^>]*>|&lt;div[^>]*>|&lt;strong[^>]*>|&lt;section[^>]*>|&lt;/strong>|&lt;/div>|&lt;/section>\n\[\d{1,}\]\nreplace\nhttps://mmbiz.qpic\nwith\nhttps://youwuqiong.top/wp-admin/img.php?imgUrl=https://mmbiz.qpic\n歷史故事 <a href="歷史故事.html" class="whitebut ">歷史故事</a>\n品德教育 <a href="品德教育 Notes.html" class="whitebut ">品德教育</a> <a href="HistoricalFigure.html" class="redbut white emboss whitebs">历史人物</a>\n詩詞 <a href="詩詞.html" class="whitebut ">詩詞</a>\n<a href="imagelib.html"><span class="but yellowbut red2bs red"><span class="redglare"></span>&diams;imagelib</span></a>\n<a href="economics.html" class="bluebut gold greenblackgrad limebs">economics</a>\n①②③④⑤⑥⑦⑧⑨\n^.{1,8}?[散汤丸方法饮丹煎]\n\n^[\(（][一二三四五六七八]\n^第[一二三四五六七八九十]{1,}节\n\n',
'<h2>search for capital letter</h2>\nenable case sensitive and use re: \n([A-Z])\n',
'<h2>not include tab in whole line</h2>\n^[^\t]*$\ncut passage into 5 lines blocks\n(^.*\n){5}\nto select characters between signatures\n(?<=com/).*?(?=")\nNegative Lookahead ( not follow by digit\n\((?!\d).*?\)\n',
'<h2>to match lines not containing</h2>\n&lt;div>&lt;a href(?!.*img).*$\n',
'<h2>find lines that do not contain string pattern</h2>\nstart with &lt;span and no &lt;/span> included till end of line\n&lt;span(?!.*(</span>)).*$\n&lt;span(?!.*(</span>).*$)\n',
'<h2>Aid in debugging and changing the key bindings</h2>\nsublime.log_input(True)\nsublime.log_commands(True)\nin the Sublime Console and it’ll print out what keys it gets and the commands that it runs.\nkey evt: control+u   command: soft_undo\nMaybe it is by design that when hitting this soft undo with multi selections, that it cancels the whole multi selection. Pity realy, because Esc does the same.\n{ "keys": "ctrl+/", "ctrl+7"], "command": "toggle_comment", "args": { "block": false } }, { "keys": "ctrl+shift+/", "ctrl+shift+7"], "command": "toggle_comment", "args": { "block": true } },\nbut it does not work, had to replace them all together with only one key:\n{ "keys": "ctrl+7"], "command": "toggle_comment", "args": { "block": false } }, { "keys": "ctrl+shift+7"], "command": "toggle_comment", "args": { "block": true } },\n',
'<h2>Monaco Editor</h2>\n<a href="https://github.com/Microsoft/monaco-editor" class="whitebut ">Monaco Editor The editor engine behind Visual Studio Code</a>\n',
'<h2>Automatic Backups for Sublime Text</h2>\nBackup history navigation\nPress Ctrl+Alt+[ to navigate backwards one step through a file\'s backup history.\nPress Ctrl+Alt+] to navigate forwards one step.\nPress Ctrl+Shift+Alt+[ to jump to the first copy in the history.\nPress Ctrl+Shift+Alt+] to jump to the current version (that is, the actual file, not a backup).\nThese commands can also be accessed via Ctrl+Shift+P or Cmd+Shift+P.\nMerge from backup history\nWhen viewing a backup file via backup history navigation, press Ctrl+Alt+Shift+M to merge the backup version you\'re currently viewing with the latest version of the file using an external merge tool of your choosing.\nYou\'ll need to specify the command line for this merge tool; for more information go to Preferences->Package Settings->Automatic Backups->Settings - Default.\nThis command can also be accessed via Ctrl+Shift+P or Cmd+Shift+P.\n',
'<h2>disable autocomplete</h2>\nIn User File settings (Preferences > File Settings - User), \nadd the following: "auto_complete": false\nThis will disable autocomplete as you type, meaning you can still press control+space to bring up autocomplete. \nAnother option is to add a delay to the autocomplete. \nYou can add this line to your user settings: "auto_complete_delay": NUMBER where NUMBER is the number of milliseconds Sublime Text will wait to trigger autocomplete.\n',
'<h2>turn off the Sublime 3 registration popup</h2>\nAdd this line in your host file.\n127.0.0.1       www.sublimetext.com\nC:\Windows\System32\Drivers\etc\hosts\n',
'<h2>Sublime Suggestion still coming</h2>\nadded "auto_complete": false and restarted\nReason: SublimeCodeIntel installed\nThat plugin does IntelliSense, so it may help to uninstall it or disable it. \nYou can use a config file or set the Base File.sublime-settings\n“codeintel_live_disabled_languages”: “css”]\n',
'<h2>count total number of words</h2>\nUse regular expression to match the words and digits, the number of matches would be displayed on the status line.\nctrl+f and \w+\ncount total words excluding numbers\n\s+[^0-9]\ncount total words only including numbers\n\s+[0-9\.]+\nselect it and remove will get the opposites\n<br>\n<br>\n',
'<h2>python breakpoint plugin</h2>\n<a href="https://packagecontrol.io/packages/Python%20Breakpoints" class="whitebut ">python breakpoint debugger</a>\nUse ctrl+shift+b to toggle breakpoint in a line\nBut its not preferable solution for debugging a software using a text editor.\nThere are best IDE which makes your development lot easier\nvisual studio community edition\nPycharm, Eclipse, Komodo\n',
'<h2>count word number in sublime text</h2>\npress ctrl+f to find \w+\n',
'<h2>get the full list of installed packages</h2>\nPreferences -> Package Settings -> Package Control -> Settings-User.\n',
'<h3>install RegReplace</h3>\nThe recommended way to install RegReplace is via Package Control.\nPackage Control will install the correct branch on your system and keep it up to date.\n\nEnsure Package Control is installed.\n\nInstructions:\nIn Sublime Text, press Ctrl＋Shift＋P (Win, Linux) to bring up the quick panel and start typing Package Control: Install Package.\n\nSelect the command and it will show a list of installable plugins.\nStart typing RegReplace; when you see it, select it.\nRestart to be sure everything is loaded properly.\n',
'<h2>RegReplace</h2>Reference: <a href="https://stackoverflow.com/questions/43941045/creating-command-in-sublime-text-3-regreplace">creating command in sublime text regreplace</a>, <a href="https://superuser.com/questions/1142018/the-regreplace-sublime-text-3-plugin-is-not-doing-anything">regreplace hints</a>, <a href="https://facelessuser.github.io/RegReplace/usage/">RegReplace User Guide</a>, <a href="https://facelessuser.github.io/RegReplace/">RegReplace about</a>\n<h3>Settings file that stores settings specific to RegReplace</h3>\nPreferences > Package Settings > Reg Replace > User\nedit any commands here:\n{"replacements":{\n "break。":\n { "find": "。",\n   "name": "break。",\n   "replace": "。\n",\n   "greedy": true},\n "break？":\n { "find": "？",\n   "name": "break？",\n   "replace": "？\n",\n   "greedy": true},\n "break！":\n { "find": "！",\n   "name": "break！",\n   "replace": "！\n",\n   "greedy": true},\n "break：":\n { "find": "：",\n   "name": "break：",\n   "replace": "：\n",\n   "greedy": true},\n "break；":\n { "find": "；",\n   "name": "break；",\n   "replace": "；\n",\n   "greedy": true}\n    }\n}\ninside User package (use Preferences > Browse Packages)\ncreate a file named Default.sublime-commands\nand then add the commands:\n[\n{"caption": "RegReplace: process ChinChar",\n "command": "reg_replace",\n "args": {"replacements": ["break。",  "break？",  "break！",  "break：",  "break；", "break. "],\n "find_only":false}\n}\n]\nA sublime-commands file is a JSON file that expects an array of the commands to be added to the command palette\nSample:\nDefault.sublime-commands\n[\n    {\n "caption": "RegReplace: process ChinChar",\n "command": "reg_replace",\n "args": {"replacements": ["break。", "break？", "break！", "break：", "break；"],\n  "find_only":false}\n    }\n]\nkey bindings:\n{"keys": ["ctrl+shift+."],\n"command": "reg_replace",\n"args": {"replacements": ["break。",  "break？",  "break！",  "break：",  "break；"]}\n},\nReferences:\n<a href="http://docs.sublimetext.info/en/latest/reference/command_palette.html">Command Palette</a>\n<a href="http://docs.sublimetext.info/en/latest/reference/key_bindings.html">Key Bindings</a>\nSome break list and rejoin list\n===============================\n。？：…！\n。”\n。"\n！"\n？"\n…。\n\n<h3>RegReplace</h3>\nPlace the following text in Preferences -> PackageSettings -> RegReplace -> Rules-User, and save the file:\n{"replacements":{\n "remove_a":\n { "find": "a",\n   "name": "remove_a",\n   "replace": "",\n   "greedy": true}\n    }\n}\nThen, execute the view.run_command("reg_replace",{"replacements": ["remove_a"]}) command from the Console.\n\n<h3>Alternatively</h3>\ncreate your new rule by doing the following:\nOpen the Command Palette (Ctrl + Shift + P)\nType: regrep\nSelect the RegReplace: Create New Regular Expression Rule option\nIn the "settings panel" that opens, configure the following settings (include the double-quotes):\nname = "remove_a"\nfind = "a"\nreplace = ""\ngreedy = True\nWith the cursor still in the "settings panel", press Ctrl+S to save the settings\nTo close the "settings panel", press the Esc key\nOnce a rule has been created via either of the above methods, it can be edited via the Command Palette\'s RegReplace: Edit Regular Expression Rule option, which will allow you to select one of the existing named rules to edit.\n<h3>Reference:</h3>\nThe "A Better Way To Create Regex Rules" in <a href="http://facelessuser.github.io/RegReplace/usage/">User Guide</a>\n\n<a href="RegReplace User Guide.html">RegReplace User Guide</a>\n',
];
