MySQLTips=[
'<h2>mysql Tutorial</h2>\nhttps://dev.mysql.com/doc/refman/8.0/en/multiple-tables.html\n<a href="https://ss64.com/mysql/" class="whitebut ">The MySql database</a>\n\nmysql is an interactive program that enables you to connect to a MySQL server, run queries, and view the results. \nmysql may also be used in batch mode: you place your queries in a file beforehand, then tell mysql to execute the contents of the file. \nBoth ways of using mysql are covered here.\n\nTo see a list of options provided by mysql, invoke it with the --help option:\n\nshell> mysql --help\nThis chapter assumes that mysql is installed on your machine and that a MySQL server is available to which you can connect. \n\nThis chapter describes the entire process of setting up and using a database. \nIf you are interested only in accessing an existing database, you may want to skip the sections that describe how to create the database and the tables it contains.\n\n',
'<h2>3.1 Connecting to and Disconnecting from the Server</h2>\nTo connect to the server, you will usually need to provide a MySQL user name when you invoke mysql and, most likely, a password. \nIf the server runs on a machine other than the one where you log in, you will also need to specify a host name. \nContact your administrator to find out what connection parameters you should use to connect (that is, what host, user name, and password to use). \nOnce you know the proper parameters, you should be able to connect like this:\n\nshell> mysql -h host -u user -p\nEnter password: ********\nhost and user represent the host name where your MySQL server is running and the user name of your MySQL account. \nSubstitute appropriate values for your setup. \nThe ******** represents your password; enter it when mysql displays the Enter password: prompt.\n\nIf that works, you should see some introductory information followed by a mysql> prompt:\n\nshell> mysql -h host -u user -p\nEnter password: ********\nWelcome to the MySQL monitor. \n Commands end with ; or \g.\nYour MySQL connection id is 25338 to server version: 8.0.22-standard\n\nType \'help;\' or \'\h\' for help. \nType \'\c\' to clear the buffer.\n\nmysql>\nThe mysql> prompt tells you that mysql is ready for you to enter SQL statements.\n\nIf you are logging in on the same machine that MySQL is running on, you can omit the host, and simply use the following:\n\nshell> mysql -u user -p\nIf, when you attempt to log in, you get an error message such as ERROR 2002 (HY000): Can\'t connect to local MySQL server through socket \'/tmp/mysql.sock\' (2), it means that the MySQL server daemon (Unix) or service (Windows) is not running. \n\nSome MySQL installations permit users to connect as the anonymous (unnamed) user to the server running on the local host. \nIf this is the case on your machine, you should be able to connect to that server by invoking mysql without any options:\n\nshell> mysql\nAfter you have connected successfully, you can disconnect any time by typing QUIT (or \q) at the mysql> prompt:\n\nmysql> QUIT\nBye\nOn Unix, you can also disconnect by pressing Control+D.\n\nMost examples in the following sections assume that you are connected to the server. \nThey indicate this by the mysql> prompt.\n\n',
'<h2>3.2 Entering Queries</h2>\nMake sure that you are connected to the server, as discussed in the previous section. \nDoing so does not in itself select any database to work with, but that is okay. \nAt this point, it is more important to find out a little about how to issue queries than to jump right in creating tables, loading data into them, and retrieving data from them. \nThis section describes the basic principles of entering queries, using several queries you can try out to familiarize yourself with how mysql works.\n\nHere is a simple query that asks the server to tell you its version number and the current date. \nType it in as shown here following the mysql> prompt and press Enter:\n\nmysql> SELECT VERSION(), CURRENT_DATE;\n+-----------+--------------+\n| VERSION() | CURRENT_DATE |\n+-----------+--------------+\n| 5.8.0-m17 | 2015-12-21   |\n+-----------+--------------+\n1 row in set (0.02 sec)\nmysql>\nThis query illustrates several things about mysql:\n\nA query normally consists of an SQL statement followed by a semicolon. \n(There are some exceptions where a semicolon may be omitted. \nQUIT, mentioned earlier, is one of them. \nWe\'ll get to others later.)\n\nWhen you issue a query, mysql sends it to the server for execution and displays the results, then prints another mysql> prompt to indicate that it is ready for another query.\n\nmysql displays query output in tabular form (rows and columns). \nThe first row contains labels for the columns. \nThe rows following are the query results. \nNormally, column labels are the names of the columns you fetch from database tables. \nIf you\'re retrieving the value of an expression rather than a table column (as in the example just shown), mysql labels the column using the expression itself.\n\nmysql shows how many rows were returned and how long the query took to execute, which gives you a rough idea of server performance. \nThese values are imprecise because they represent wall clock time (not CPU or machine time), and because they are affected by factors such as server load and network latency. \n(For brevity, the “rows in set” line is sometimes not shown in the remaining examples in this chapter.)\n\nKeywords may be entered in any lettercase. \nThe following queries are equivalent:\n\nmysql> SELECT VERSION(), CURRENT_DATE;\nmysql> select version(), current_date;\nmysql> SeLeCt vErSiOn(), current_DATE;\nHere is another query. \nIt demonstrates that you can use mysql as a simple calculator:\n\nmysql> SELECT SIN(PI()/4), (4+1)*5;\n+------------------+---------+\n| SIN(PI()/4)      | (4+1)*5 |\n+------------------+---------+\n| 0.70710678118655 |      25 |\n+------------------+---------+\n1 row in set (0.02 sec)\nThe queries shown thus far have been relatively short, single-line statements. \nYou can even enter multiple statements on a single line. \nJust end each one with a semicolon:\n\nmysql> SELECT VERSION(); SELECT NOW();\n+-----------+\n| VERSION() |\n+-----------+\n| 8.0.13    |\n+-----------+\n1 row in set (0.00 sec)\n\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2018-08-24 00:56:40 |\n+---------------------+\n1 row in set (0.00 sec)\nA query need not be given all on a single line, so lengthy queries that require several lines are not a problem. \nmysql determines where your statement ends by looking for the terminating semicolon, not by looking for the end of the input line. \n(In other words, mysql accepts free-format input: it collects input lines but does not execute them until it sees the semicolon.)\n\nHere is a simple multiple-line statement:\n\nmysql> SELECT\n    -> USER()\n    -> ,\n    -> CURRENT_DATE;\n+---------------+--------------+\n| USER()        | CURRENT_DATE |\n+---------------+--------------+\n| jon@localhost | 2018-08-24   |\n+---------------+--------------+\nIn this example, notice how the prompt changes from mysql> to -> after you enter the first line of a multiple-line query. \nThis is how mysql indicates that it has not yet seen a complete statement and is waiting for the rest. \nThe prompt is your friend, because it provides valuable feedback. \nIf you use that feedback, you can always be aware of what mysql is waiting for.\n\nIf you decide you do not want to execute a query that you are in the process of entering, cancel it by typing \c:\n\nmysql> SELECT\n    -> USER()\n    -> \c\nmysql>\nHere, too, notice the prompt. \nIt switches back to mysql> after you type \c, providing feedback to indicate that mysql is ready for a new query.\n\nThe following table shows each of the prompts you may see and summarizes what they mean about the state that mysql is in.\n\nPrompt	Meaning\nmysql>	Ready for new query\n->	Waiting for next line of multiple-line query\n\'>	Waiting for next line, waiting for completion of a string that began with a single quote (\')\n">	Waiting for next line, waiting for completion of a string that began with a double quote (")\n`>	Waiting for next line, waiting for completion of an identifier that began with a backtick (`)\n/*>	Waiting for next line, waiting for completion of a comment that began with /*\nMultiple-line statements commonly occur by accident when you intend to issue a query on a single line, but forget the terminating semicolon. \nIn this case, mysql waits for more input:\n\nmysql> SELECT USER()\n    ->\nIf this happens to you (you think you\'ve entered a statement but the only response is a -> prompt), most likely mysql is waiting for the semicolon. \nIf you don\'t notice what the prompt is telling you, you might sit there for a while before realizing what you need to do. \nEnter a semicolon to complete the statement, and mysql executes it:\n\nmysql> SELECT USER()\n    -> ;\n+---------------+\n| USER()        |\n+---------------+\n| jon@localhost |\n+---------------+\nThe \'> and "> prompts occur during string collection (another way of saying that MySQL is waiting for completion of a string). \nIn MySQL, you can write strings surrounded by either \' or " characters (for example, \'hello\' or "goodbye"), and mysql lets you enter strings that span multiple lines. \nWhen you see a \'> or "> prompt, it means that you have entered a line containing a string that begins with a \' or " quote character, but have not yet entered the matching quote that terminates the string. \nThis often indicates that you have inadvertently left out a quote character. \nFor example:\n\nmysql> SELECT * FROM my_table WHERE name = \'Smith AND age < 30;\n    \'>\nIf you enter this SELECT statement, then press Enter and wait for the result, nothing happens. \nInstead of wondering why this query takes so long, notice the clue provided by the \'> prompt. \nIt tells you that mysql expects to see the rest of an unterminated string. \n(Do you see the error in the statement? The string \'Smith is missing the second single quotation mark.)\n\nAt this point, what do you do? The simplest thing is to cancel the query. \nHowever, you cannot just type \c in this case, because mysql interprets it as part of the string that it is collecting. \nInstead, enter the closing quote character (so mysql knows you\'ve finished the string), then type \c:\n\nmysql> SELECT * FROM my_table WHERE name = \'Smith AND age < 30;\n    \'> \'\c\nmysql>\nThe prompt changes back to mysql>, indicating that mysql is ready for a new query.\n\nThe `> prompt is similar to the \'> and "> prompts, but indicates that you have begun but not completed a backtick-quoted identifier.\n\nIt is important to know what the \'>, ">, and `> prompts signify, because if you mistakenly enter an unterminated string, any further lines you type appear to be ignored by mysql—including a line containing QUIT. \nThis can be quite confusing, especially if you do not know that you need to supply the terminating quote before you can cancel the current query.\n\nNote\nMultiline statements from this point on are written without the secondary (-> or other) prompts, to make it easier to copy and paste the statements to try for yourself.\n\nOnce you know how to enter SQL statements, you are ready to access a database.\n\nSuppose that you have several pets in your home (your menagerie) and you would like to keep track of various types of information about them. \nYou can do so by creating tables to hold your data and loading them with the desired information. \nThen you can answer different sorts of questions about your animals by retrieving data from the tables. \nThis section shows you how to perform the following operations:\n\nCreate a database\n\nCreate a table\n\nLoad data into the table\n\nRetrieve data from the table in various ways\n\nUse multiple tables\n\nThe menagerie database is simple (deliberately), but it is not difficult to think of real-world situations in which a similar type of database might be used. \nFor example, a database like this could be used by a farmer to keep track of livestock, or by a veterinarian to keep track of patient records. \nA menagerie distribution containing some of the queries and sample data used in the following sections can be obtained from the MySQL website. \nIt is available in both compressed tar file and Zip formats at https://dev.mysql.com/doc/.\n\nUse the SHOW statement to find out what databases currently exist on the server:\n\nmysql> SHOW DATABASES;\n+----------+\n| Database |\n+----------+\n| mysql    |\n| test     |\n| tmp      |\n+----------+\nThe mysql database describes user access privileges. \nThe test database often is available as a workspace for users to try things out.\n\nThe list of databases displayed by the statement may be different on your machine; SHOW DATABASES does not show databases that you have no privileges for if you do not have the SHOW DATABASES privilege. \nSee Section 13.7.7.14, “SHOW DATABASES Statement”.\n\nIf the test database exists, try to access it:\n\nmysql> USE test\nDatabase changed\nUSE, like QUIT, does not require a semicolon. \n(You can terminate such statements with a semicolon if you like; it does no harm.) The USE statement is special in another way, too: it must be given on a single line.\n\nYou can use the test database (if you have access to it) for the examples that follow, but anything you create in that database can be removed by anyone else with access to it. \nFor this reason, you should probably ask your MySQL administrator for permission to use a database of your own. \nSuppose that you want to call yours menagerie. \nThe administrator needs to execute a statement like this:\n\nmysql> GRANT ALL ON menagerie.* TO \'your_mysql_name\'@\'your_client_host\';\nwhere your_mysql_name is the MySQL user name assigned to you and your_client_host is the host from which you connect to the server.\n\n',
'<h2>3.3.1 Creating and Selecting a Database</h2>\nIf the administrator creates your database for you when setting up your permissions, you can begin using it. \nOtherwise, you need to create it yourself:\n\nmysql> CREATE DATABASE menagerie;\nUnder Unix, database names are case-sensitive (unlike SQL keywords), so you must always refer to your database as menagerie, not as Menagerie, MENAGERIE, or some other variant. \nThis is also true for table names. \n(Under Windows, this restriction does not apply, although you must refer to databases and tables using the same lettercase throughout a given query. \nHowever, for a variety of reasons, the recommended best practice is always to use the same lettercase that was used when the database was created.)\n\nNote\nIf you get an error such as ERROR 1044 (42000): Access denied for user \'micah\'@\'localhost\' to database \'menagerie\' when attempting to create a database, this means that your user account does not have the necessary privileges to do so. \nDiscuss this with the administrator or see Section 6.2, “Access Control and Account Management”.\n\nCreating a database does not select it for use; you must do that explicitly. \nTo make menagerie the current database, use this statement:\n\nmysql> USE menagerie\nDatabase changed\nYour database needs to be created only once, but you must select it for use each time you begin a mysql session. \nYou can do this by issuing a USE statement as shown in the example. \nAlternatively, you can select the database on the command line when you invoke mysql. \nJust specify its name after any connection parameters that you might need to provide. \nFor example:\n\nshell> mysql -h host -u user -p menagerie\nEnter password: ********\nImportant\nmenagerie in the command just shown is not your password. \n<r>If you want to supply your password on the command line after the -p option, you must do so with no intervening space\n(for example, as -ppassword, not as -p password).</r>\nHowever, putting your password on the command line is not recommended, because doing so exposes it to snooping by other users logged in on your machine.\n\nNote\nYou can see at any time which database is currently selected using SELECT DATABASE().\n\n\n',
'<h2>3.3.2 Creating a Table</h2>\nCreating the database is the easy part, but at this point it is empty, as SHOW TABLES tells you:\n\nmysql> SHOW TABLES;\nEmpty set (0.00 sec)\nThe harder part is deciding what the structure of your database should be: what tables you need and what columns should be in each of them.\n\nYou want a table that contains a record for each of your pets. \nThis can be called the pet table, and it should contain, as a bare minimum, each animal\'s name. \nBecause the name by itself is not very interesting, the table should contain other information. \nFor example, if more than one person in your family keeps pets, you might want to list each animal\'s owner. \nYou might also want to record some basic descriptive information such as species and sex.\n\nHow about age? That might be of interest, but it is not a good thing to store in a database. \nAge changes as time passes, which means you\'d have to update your records often. \nInstead, it is better to store a fixed value such as date of birth. \nThen, whenever you need age, you can calculate it as the difference between the current date and the birth date. \nMySQL provides functions for doing date arithmetic, so this is not difficult. \nStoring birth date rather than age has other advantages, too:\n\nYou can use the database for tasks such as generating reminders for upcoming pet birthdays. \n(If you think this type of query is somewhat silly, note that it is the same question you might ask in the context of a business database to identify clients to whom you need to send out birthday greetings in the current week or month, for that computer-assisted personal touch.)\n\nYou can calculate age in relation to dates other than the current date. \nFor example, if you store death date in the database, you can easily calculate how old a pet was when it died.\n\nYou can probably think of other types of information that would be useful in the pet table, but the ones identified so far are sufficient: name, owner, species, sex, birth, and death.\n\nUse a CREATE TABLE statement to specify the layout of your table:\n\nmysql> CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),\n species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);\nVARCHAR is a good choice for the name, owner, and species columns because the column values vary in length. \nThe lengths in those column definitions need not all be the same, and need not be 20. \nYou can normally pick any length from 1 to 65535, whatever seems most reasonable to you. \nIf you make a poor choice and it turns out later that you need a longer field, MySQL provides an ALTER TABLE statement.\n\nSeveral types of values can be chosen to represent sex in animal records, such as \'m\' and \'f\', or perhaps \'male\' and \'female\'. \nIt is simplest to use the single characters \'m\' and \'f\'.\n\nThe use of the DATE data type for the birth and death columns is a fairly obvious choice.\n\nOnce you have created a table, SHOW TABLES should produce some output:\n\nmysql> SHOW TABLES;\n+---------------------+\n| Tables in menagerie |\n+---------------------+\n| pet                 |\n+---------------------+\nTo verify that your table was created the way you expected, use a DESCRIBE statement:\n\nmysql> DESCRIBE pet;\n+---------+-------------+------+-----+---------+-------+\n| Field   | Type        | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| name    | varchar(20) | YES  |     | NULL    |       |\n| owner   | varchar(20) | YES  |     | NULL    |       |\n| species | varchar(20) | YES  |     | NULL    |       |\n| sex     | char(1)     | YES  |     | NULL    |       |\n| birth   | date        | YES  |     | NULL    |       |\n| death   | date        | YES  |     | NULL    |       |\n+---------+-------------+------+-----+---------+-------+\nYou can use DESCRIBE any time, for example, if you forget the names of the columns in your table or what types they have.\n\n',
'<h2>3.3.3 Loading Data into a Table</h2>\nAfter creating your table, you need to populate it. \nThe LOAD DATA and INSERT statements are useful for this.\n\nSuppose that your pet records can be described as shown here. \n(Observe that MySQL expects dates in \'YYYY-MM-DD\' format; this may differ from what you are used to.)\n\nname	owner	species	sex	birth	death\nFluffy	Harold	cat	f	1993-02-04	\nClaws	Gwen	cat	m	1994-03-17	\nBuffy	Harold	dog	f	1989-05-13	\nFang	Benny	dog	m	1990-08-27	\nBowser	Diane	dog	m	1979-08-31	1995-07-29\nChirpy	Gwen	bird	f	1998-09-11	\nWhistler	Gwen	bird		1997-12-09	\nSlim	Benny	snake	m	1996-04-29	\nBecause you are beginning with an empty table, an easy way to populate it is to create a text file containing a row for each of your animals, then load the contents of the file into the table with a single statement.\n\nYou could create a text file pet.txt containing one record per line, with values separated by tabs, and given in the order in which the columns were listed in the CREATE TABLE statement. \nFor missing values (such as unknown sexes or death dates for animals that are still living), you can use NULL values. \nTo represent these in your text file, use \N (backslash, capital-N). \nFor example, the record for Whistler the bird would look like this (where the whitespace between values is a single tab character):\n\nWhistler        Gwen    bird    \N      1997-12-09      \N\nTo load the text file pet.txt into the pet table, use this statement:\n\nmysql> LOAD DATA LOCAL INFILE \'/path/pet.txt\' INTO TABLE pet;\nIf you created the file on Windows with an editor that uses \r\n as a line terminator, you should use this statement instead:\n\nmysql> LOAD DATA LOCAL INFILE \'/path/pet.txt\' INTO TABLE pet\n LINES TERMINATED BY \'\r\n\';\n(On an Apple machine running macOS, you would likely want to use LINES TERMINATED BY \'\r\'.)\n\nYou can specify the column value separator and end of line marker explicitly in the LOAD DATA statement if you wish, but the defaults are tab and linefeed. \nThese are sufficient for the statement to read the file pet.txt properly.\n\nIf the statement fails, it is likely that your MySQL installation does not have local file capability enabled by default. \nSee Section 6.1.6, “Security Considerations for LOAD DATA LOCAL”, for information on how to change this.\n\nWhen you want to add new records one at a time, the INSERT statement is useful. \nIn its simplest form, you supply values for each column, in the order in which the columns were listed in the CREATE TABLE statement. \nSuppose that Diane gets a new hamster named “Puffball.” You could add a new record using an INSERT statement like this:\n\nmysql> INSERT INTO pet\n VALUES (\'Puffball\',\'Diane\',\'hamster\',\'f\',\'1999-03-30\',NULL);\nString and date values are specified as quoted strings here. \nAlso, with INSERT, you can insert NULL directly to represent a missing value. \nYou do not use \N like you do with LOAD DATA.\n\nFrom this example, you should be able to see that there would be a lot more typing involved to load your records initially using several INSERT statements rather than a single LOAD DATA statement.\n\nThe SELECT statement is used to pull information from a table. \nThe general form of the statement is:\n\nSELECT what_to_select\nFROM which_table\nWHERE conditions_to_satisfy;\nwhat_to_select indicates what you want to see. \nThis can be a list of columns, or * to indicate “all columns.” which_table indicates the table from which you want to retrieve data. \nThe WHERE clause is optional. \nIf it is present, conditions_to_satisfy specifies one or more conditions that rows must satisfy to qualify for retrieval.\n\n',
'<h2>3.3.4.1 Selecting All Data</h2>\nThe simplest form of SELECT retrieves everything from a table:\n\nmysql> SELECT * FROM pet;\n+----------+--------+---------+------+------------+------------+\n| name     | owner  | species | sex  | birth      | death      |\n+----------+--------+---------+------+------------+------------+\n| Fluffy   | Harold | cat     | f    | 1993-02-04 | NULL       |\n| Claws    | Gwen   | cat     | m    | 1994-03-17 | NULL       |\n| Buffy    | Harold | dog     | f    | 1989-05-13 | NULL       |\n| Fang     | Benny  | dog     | m    | 1990-08-27 | NULL       |\n| Bowser   | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |\n| Chirpy   | Gwen   | bird    | f    | 1998-09-11 | NULL       |\n| Whistler | Gwen   | bird    | NULL | 1997-12-09 | NULL       |\n| Slim     | Benny  | snake   | m    | 1996-04-29 | NULL       |\n| Puffball | Diane  | hamster | f    | 1999-03-30 | NULL       |\n+----------+--------+---------+------+------------+------------+\nThis form of SELECT is useful if you want to review your entire table, for example, after you\'ve just loaded it with your initial data set. \nFor example, you may happen to think that the birth date for Bowser doesn\'t seem quite right. \nConsulting your original pedigree papers, you find that the correct birth year should be 1989, not 1979.\n\nThere are at least two ways to fix this:\n\nEdit the file pet.txt to correct the error, then empty the table and reload it using DELETE and LOAD DATA:\n\nmysql> DELETE FROM pet;\nmysql> LOAD DATA LOCAL INFILE \'pet.txt\' INTO TABLE pet;\nHowever, if you do this, you must also re-enter the record for Puffball.\n\nFix only the erroneous record with an UPDATE statement:\n\nmysql> UPDATE pet SET birth = \'1989-08-31\' WHERE name = \'Bowser\';\nThe UPDATE changes only the record in question and does not require you to reload the table.\n\n',
'<h2>3.3.4.2 Selecting Particular Rows</h2>\nAs shown in the preceding section, it is easy to retrieve an entire table. \nJust omit the WHERE clause from the SELECT statement. \nBut typically you don\'t want to see the entire table, particularly when it becomes large. \nInstead, you\'re usually more interested in answering a particular question, in which case you specify some constraints on the information you want. \nLet\'s look at some selection queries in terms of questions about your pets that they answer.\n\nYou can select only particular rows from your table. \nFor example, if you want to verify the change that you made to Bowser\'s birth date, select Bowser\'s record like this:\n\nmysql> SELECT * FROM pet WHERE name = \'Bowser\';\n+--------+-------+---------+------+------------+------------+\n| name   | owner | species | sex  | birth      | death      |\n+--------+-------+---------+------+------------+------------+\n| Bowser | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |\n+--------+-------+---------+------+------------+------------+\nThe output confirms that the year is correctly recorded as 1989, not 1979.\n\nString comparisons normally are case-insensitive, so you can specify the name as \'bowser\', \'BOWSER\', and so forth. \nThe query result is the same.\n\nYou can specify conditions on any column, not just name. \nFor example, if you want to know which animals were born during or after 1998, test the birth column:\n\nmysql> SELECT * FROM pet WHERE birth >= \'1998-1-1\';\n+----------+-------+---------+------+------------+-------+\n| name     | owner | species | sex  | birth      | death |\n+----------+-------+---------+------+------------+-------+\n| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |\n| Puffball | Diane | hamster | f    | 1999-03-30 | NULL  |\n+----------+-------+---------+------+------------+-------+\nYou can combine conditions, for example, to locate female dogs:\n\nmysql> SELECT * FROM pet WHERE species = \'dog\' AND sex = \'f\';\n+-------+--------+---------+------+------------+-------+\n| name  | owner  | species | sex  | birth      | death |\n+-------+--------+---------+------+------------+-------+\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\n+-------+--------+---------+------+------------+-------+\nThe preceding query uses the AND logical operator. \nThere is also an OR operator:\n\nmysql> SELECT * FROM pet WHERE species = \'snake\' OR species = \'bird\';\n+----------+-------+---------+------+------------+-------+\n| name     | owner | species | sex  | birth      | death |\n+----------+-------+---------+------+------------+-------+\n| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |\n| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL  |\n| Slim     | Benny | snake   | m    | 1996-04-29 | NULL  |\n+----------+-------+---------+------+------------+-------+\nAND and OR may be intermixed, although AND has higher precedence than OR. \nIf you use both operators, it is a good idea to use parentheses to indicate explicitly how conditions should be grouped:\n\n\nmysql> SELECT * FROM pet WHERE (species = \'cat\' AND sex = \'m\')\n OR (species = \'dog\' AND sex = \'f\');\n+-------+--------+---------+------+------------+-------+\n| name  | owner  | species | sex  | birth      | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\n+-------+--------+---------+------+------------+-------+\n',
'<h2>3.3.4.3 Selecting Particular Columns</h2>\nIf you do not want to see entire rows from your table, just name the columns in which you are interested, separated by commas. \nFor example, if you want to know when your animals were born, select the name and birth columns:\n\nmysql> SELECT name, birth FROM pet;\n+----------+------------+\n| name     | birth      |\n+----------+------------+\n| Fluffy   | 1993-02-04 |\n| Claws    | 1994-03-17 |\n| Buffy    | 1989-05-13 |\n| Fang     | 1990-08-27 |\n| Bowser   | 1989-08-31 |\n| Chirpy   | 1998-09-11 |\n| Whistler | 1997-12-09 |\n| Slim     | 1996-04-29 |\n| Puffball | 1999-03-30 |\n+----------+------------+\nTo find out who owns pets, use this query:\n\nmysql> SELECT owner FROM pet;\n+--------+\n| owner  |\n+--------+\n| Harold |\n| Gwen   |\n| Harold |\n| Benny  |\n| Diane  |\n| Gwen   |\n| Gwen   |\n| Benny  |\n| Diane  |\n+--------+\nNotice that the query simply retrieves the owner column from each record, and some of them appear more than once. \nTo minimize the output, retrieve each unique output record just once by adding the keyword DISTINCT:\n\nmysql> SELECT DISTINCT owner FROM pet;\n+--------+\n| owner  |\n+--------+\n| Benny  |\n| Diane  |\n| Gwen   |\n| Harold |\n+--------+\nYou can use a WHERE clause to combine row selection with column selection. \nFor example, to get birth dates for dogs and cats only, use this query:\n\n\nmysql> SELECT name, species, birth FROM pet\n WHERE species = \'dog\' OR species = \'cat\';\n+--------+---------+------------+\n| name   | species | birth      |\n+--------+---------+------------+\n| Fluffy | cat     | 1993-02-04 |\n| Claws  | cat     | 1994-03-17 |\n| Buffy  | dog     | 1989-05-13 |\n| Fang   | dog     | 1990-08-27 |\n| Bowser | dog     | 1989-08-31 |\n+--------+---------+------------+\n',
'<h2>3.3.4.4 Sorting Rows</h2>\nYou may have noticed in the preceding examples that the result rows are displayed in no particular order. \nIt is often easier to examine query output when the rows are sorted in some meaningful way. \nTo sort a result, use an ORDER BY clause.\n\nHere are animal birthdays, sorted by date:\n\nmysql> SELECT name, birth FROM pet ORDER BY birth;\n+----------+------------+\n| name     | birth      |\n+----------+------------+\n| Buffy    | 1989-05-13 |\n| Bowser   | 1989-08-31 |\n| Fang     | 1990-08-27 |\n| Fluffy   | 1993-02-04 |\n| Claws    | 1994-03-17 |\n| Slim     | 1996-04-29 |\n| Whistler | 1997-12-09 |\n| Chirpy   | 1998-09-11 |\n| Puffball | 1999-03-30 |\n+----------+------------+\nOn character type columns, sorting—like all other comparison operations—is normally performed in a case-insensitive fashion. \nThis means that the order is undefined for columns that are identical except for their case. \nYou can force a case-sensitive sort for a column by using BINARY like so: ORDER BY BINARY col_name.\n\nThe default sort order is ascending, with smallest values first. \nTo sort in reverse (descending) order, add the DESC keyword to the name of the column you are sorting by:\n\nmysql> SELECT name, birth FROM pet ORDER BY birth DESC;\n+----------+------------+\n| name     | birth      |\n+----------+------------+\n| Puffball | 1999-03-30 |\n| Chirpy   | 1998-09-11 |\n| Whistler | 1997-12-09 |\n| Slim     | 1996-04-29 |\n| Claws    | 1994-03-17 |\n| Fluffy   | 1993-02-04 |\n| Fang     | 1990-08-27 |\n| Bowser   | 1989-08-31 |\n| Buffy    | 1989-05-13 |\n+----------+------------+\nYou can sort on multiple columns, and you can sort different columns in different directions. \nFor example, to sort by type of animal in ascending order, then by birth date within animal type in descending order (youngest animals first), use the following query:\n\nmysql> SELECT name, species, birth FROM pet\n ORDER BY species, birth DESC;\n+----------+---------+------------+\n| name     | species | birth      |\n+----------+---------+------------+\n| Chirpy   | bird    | 1998-09-11 |\n| Whistler | bird    | 1997-12-09 |\n| Claws    | cat     | 1994-03-17 |\n| Fluffy   | cat     | 1993-02-04 |\n| Fang     | dog     | 1990-08-27 |\n| Bowser   | dog     | 1989-08-31 |\n| Buffy    | dog     | 1989-05-13 |\n| Puffball | hamster | 1999-03-30 |\n| Slim     | snake   | 1996-04-29 |\n+----------+---------+------------+\nThe DESC keyword applies only to the column name immediately preceding it (birth); it does not affect the species column sort order.\n\n',
'<h2>3.3.4.5 Date Calculations</h2>\nMySQL provides several functions that you can use to perform calculations on dates, for example, to calculate ages or extract parts of dates.\n\nTo determine how many years old each of your pets is, use the TIMESTAMPDIFF() function. \nIts arguments are the unit in which you want the result expressed, and the two dates for which to take the difference. \nThe following query shows, for each pet, the birth date, the current date, and the age in years. \nAn alias (age) is used to make the final output column label more meaningful.\n\nmysql> SELECT name, birth, CURDATE(),\n TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age\n FROM pet;\n+----------+------------+------------+------+\n| name     | birth      | CURDATE()  | age  |\n+----------+------------+------------+------+\n| Fluffy   | 1993-02-04 | 2003-08-19 |   10 |\n| Claws    | 1994-03-17 | 2003-08-19 |    9 |\n| Buffy    | 1989-05-13 | 2003-08-19 |   14 |\n| Fang     | 1990-08-27 | 2003-08-19 |   12 |\n| Bowser   | 1989-08-31 | 2003-08-19 |   13 |\n| Chirpy   | 1998-09-11 | 2003-08-19 |    4 |\n| Whistler | 1997-12-09 | 2003-08-19 |    5 |\n| Slim     | 1996-04-29 | 2003-08-19 |    7 |\n| Puffball | 1999-03-30 | 2003-08-19 |    4 |\n+----------+------------+------------+------+\nThe query works, but the result could be scanned more easily if the rows were presented in some order. \nThis can be done by adding an ORDER BY name clause to sort the output by name:\n\nmysql> SELECT name, birth, CURDATE(),\n TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age\n FROM pet ORDER BY name;\n+----------+------------+------------+------+\n| name     | birth      | CURDATE()  | age  |\n+----------+------------+------------+------+\n| Bowser   | 1989-08-31 | 2003-08-19 |   13 |\n| Buffy    | 1989-05-13 | 2003-08-19 |   14 |\n| Chirpy   | 1998-09-11 | 2003-08-19 |    4 |\n| Claws    | 1994-03-17 | 2003-08-19 |    9 |\n| Fang     | 1990-08-27 | 2003-08-19 |   12 |\n| Fluffy   | 1993-02-04 | 2003-08-19 |   10 |\n| Puffball | 1999-03-30 | 2003-08-19 |    4 |\n| Slim     | 1996-04-29 | 2003-08-19 |    7 |\n| Whistler | 1997-12-09 | 2003-08-19 |    5 |\n+----------+------------+------------+------+\nTo sort the output by age rather than name, just use a different ORDER BY clause:\n\nmysql> SELECT name, birth, CURDATE(),\n TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age\n FROM pet ORDER BY age;\n+----------+------------+------------+------+\n| name     | birth      | CURDATE()  | age  |\n+----------+------------+------------+------+\n| Chirpy   | 1998-09-11 | 2003-08-19 |    4 |\n| Puffball | 1999-03-30 | 2003-08-19 |    4 |\n| Whistler | 1997-12-09 | 2003-08-19 |    5 |\n| Slim     | 1996-04-29 | 2003-08-19 |    7 |\n| Claws    | 1994-03-17 | 2003-08-19 |    9 |\n| Fluffy   | 1993-02-04 | 2003-08-19 |   10 |\n| Fang     | 1990-08-27 | 2003-08-19 |   12 |\n| Bowser   | 1989-08-31 | 2003-08-19 |   13 |\n| Buffy    | 1989-05-13 | 2003-08-19 |   14 |\n+----------+------------+------------+------+\nA similar query can be used to determine age at death for animals that have died. \nYou determine which animals these are by checking whether the death value is NULL. \nThen, for those with non-NULL values, compute the difference between the death and birth values:\n\nmysql> SELECT name, birth, death,\n TIMESTAMPDIFF(YEAR,birth,death) AS age\n FROM pet WHERE death IS NOT NULL ORDER BY age;\n+--------+------------+------------+------+\n| name   | birth      | death      | age  |\n+--------+------------+------------+------+\n| Bowser | 1989-08-31 | 1995-07-29 |    5 |\n+--------+------------+------------+------+\nThe query uses death IS NOT NULL rather than death <> NULL because NULL is a special value that cannot be compared using the usual comparison operators. \nThis is discussed later. \nSee Section 3.3.4.6, “Working with NULL Values”.\n\nWhat if you want to know which animals have birthdays next month? For this type of calculation, year and day are irrelevant; you simply want to extract the month part of the birth column. \nMySQL provides several functions for extracting parts of dates, such as YEAR(), MONTH(), and DAYOFMONTH(). \nMONTH() is the appropriate function here. \nTo see how it works, run a simple query that displays the value of both birth and MONTH(birth):\n\nmysql> SELECT name, birth, MONTH(birth) FROM pet;\n+----------+------------+--------------+\n| name     | birth      | MONTH(birth) |\n+----------+------------+--------------+\n| Fluffy   | 1993-02-04 |            2 |\n| Claws    | 1994-03-17 |            3 |\n| Buffy    | 1989-05-13 |            5 |\n| Fang     | 1990-08-27 |            8 |\n| Bowser   | 1989-08-31 |            8 |\n| Chirpy   | 1998-09-11 |            9 |\n| Whistler | 1997-12-09 |           12 |\n| Slim     | 1996-04-29 |            4 |\n| Puffball | 1999-03-30 |            3 |\n+----------+------------+--------------+\nFinding animals with birthdays in the upcoming month is also simple. \nSuppose that the current month is April. \nThen the month value is 4 and you can look for animals born in May (month 5) like this:\n\nmysql> SELECT name, birth FROM pet WHERE MONTH(birth) = 5;\n+-------+------------+\n| name  | birth      |\n+-------+------------+\n| Buffy | 1989-05-13 |\n+-------+------------+\nThere is a small complication if the current month is December. \nYou cannot merely add one to the month number (12) and look for animals born in month 13, because there is no such month. \nInstead, you look for animals born in January (month 1).\n\nYou can write the query so that it works no matter what the current month is, so that you do not have to use the number for a particular month. \nDATE_ADD() enables you to add a time interval to a given date. \nIf you add a month to the value of CURDATE(), then extract the month part with MONTH(), the result produces the month in which to look for birthdays:\n\nmysql> SELECT name, birth FROM pet\n WHERE MONTH(birth) = MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH));\nA different way to accomplish the same task is to add 1 to get the next month after the current one after using the modulo function (MOD) to wrap the month value to 0 if it is currently 12:\n\nmysql> SELECT name, birth FROM pet\n WHERE MONTH(birth) = MOD(MONTH(CURDATE()), 12) + 1;\nMONTH() returns a number between 1 and 12. \nAnd MOD(something,12) returns a number between 0 and 11. \nSo the addition has to be after the MOD(), otherwise we would go from November (11) to January (1).\n\nIf a calculation uses invalid dates, the calculation fails and produces warnings:\n\n\nmysql> SELECT \'2018-10-31\' + INTERVAL 1 DAY;\n+-------------------------------+\n| \'2018-10-31\' + INTERVAL 1 DAY |\n+-------------------------------+\n| 2018-11-01                    |\n+-------------------------------+\nmysql> SELECT \'2018-10-32\' + INTERVAL 1 DAY;\n+-------------------------------+\n| \'2018-10-32\' + INTERVAL 1 DAY |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: \'2018-10-32\' |\n+---------+------+----------------------------------------+\n',
'<h2>3.3.4.6 Working with NULL Values</h2>\nThe NULL value can be surprising until you get used to it. \nConceptually, NULL means “a missing unknown value” and it is treated somewhat differently from other values.\n\nTo test for NULL, use the IS NULL and IS NOT NULL operators, as shown here:\n\nmysql> SELECT 1 IS NULL, 1 IS NOT NULL;\n+-----------+---------------+\n| 1 IS NULL | 1 IS NOT NULL |\n+-----------+---------------+\n|         0 |             1 |\n+-----------+---------------+\nYou cannot use arithmetic comparison operators such as =, <, or <> to test for NULL. \nTo demonstrate this for yourself, try the following query:\n\nmysql> SELECT 1 = NULL, 1 <> NULL, 1 < NULL, 1 > NULL;\n+----------+-----------+----------+----------+\n| 1 = NULL | 1 <> NULL | 1 < NULL | 1 > NULL |\n+----------+-----------+----------+----------+\n|     NULL |      NULL |     NULL |     NULL |\n+----------+-----------+----------+----------+\nBecause the result of any arithmetic comparison with NULL is also NULL, you cannot obtain any meaningful results from such comparisons.\n\nIn MySQL, 0 or NULL means false and anything else means true. \nThe default truth value from a boolean operation is 1.\n\nThis special treatment of NULL is why, in the previous section, it was necessary to determine which animals are no longer alive using death IS NOT NULL instead of death <> NULL.\n\nTwo NULL values are regarded as equal in a GROUP BY.\n\nWhen doing an ORDER BY, NULL values are presented first if you do ORDER BY ... \nASC and last if you do ORDER BY ... \nDESC.\n\nA common error when working with NULL is to assume that it is not possible to insert a zero or an empty string into a column defined as NOT NULL, but this is not the case. \nThese are in fact values, whereas NULL means “not having a value.” You can test this easily enough by using IS [NOT] NULL as shown:\n\nmysql> SELECT 0 IS NULL, 0 IS NOT NULL, \'\' IS NULL, \'\' IS NOT NULL;\n+-----------+---------------+------------+----------------+\n| 0 IS NULL | 0 IS NOT NULL | \'\' IS NULL | \'\' IS NOT NULL |\n+-----------+---------------+------------+----------------+\n|         0 |             1 |          0 |              1 |\n+-----------+---------------+------------+----------------+\nThus it is entirely possible to insert a zero or empty string into a NOT NULL column, as these are in fact NOT NULL. \nSee Section B.4.4.3, “Problems with NULL Values”.\n\n',
'<h2>3.3.4.7 Pattern Matching</h2>\nMySQL provides standard SQL pattern matching as well as a form of pattern matching based on extended regular expressions similar to those used by Unix utilities such as vi, grep, and sed.\n\nSQL pattern matching enables you to use _ to match any single character and % to match an arbitrary number of characters (including zero characters). \nIn MySQL, SQL patterns are case-insensitive by default. \nSome examples are shown here. \nDo not use = or <> when you use SQL patterns. \nUse the LIKE or NOT LIKE comparison operators instead.\n\nTo find names beginning with b:\n\nmysql> SELECT * FROM pet WHERE name LIKE \'b%\';\n+--------+--------+---------+------+------------+------------+\n| name   | owner  | species | sex  | birth      | death      |\n+--------+--------+---------+------+------------+------------+\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |\n| Bowser | Diane  | dog     | m    | 1989-08-31 | 1995-07-29 |\n+--------+--------+---------+------+------------+------------+\nTo find names ending with fy:\n\nmysql> SELECT * FROM pet WHERE name LIKE \'%fy\';\n+--------+--------+---------+------+------------+-------+\n| name   | owner  | species | sex  | birth      | death |\n+--------+--------+---------+------+------------+-------+\n| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |\n+--------+--------+---------+------+------------+-------+\nTo find names containing a w:\n\nmysql> SELECT * FROM pet WHERE name LIKE \'%w%\';\n+----------+-------+---------+------+------------+------------+\n| name     | owner | species | sex  | birth      | death      |\n+----------+-------+---------+------+------------+------------+\n| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |\n| Bowser   | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |\n| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |\n+----------+-------+---------+------+------------+------------+\nTo find names containing exactly five characters, use five instances of the _ pattern character:\n\nmysql> SELECT * FROM pet WHERE name LIKE \'_____\';\n+-------+--------+---------+------+------------+-------+\n| name  | owner  | species | sex  | birth      | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\n+-------+--------+---------+------+------------+-------+\nThe other type of pattern matching provided by MySQL uses extended regular expressions. \nWhen you test for a match for this type of pattern, use the REGEXP_LIKE() function (or the REGEXP or RLIKE operators, which are synonyms for REGEXP_LIKE()).\n\nThe following list describes some characteristics of extended regular expressions:\n\n. \nmatches any single character.\n\nA character class [...] matches any character within the brackets. \nFor example, [abc] matches a, b, or c. \nTo name a range of characters, use a dash. \n[a-z] matches any letter, whereas [0-9] matches any digit.\n\n* matches zero or more instances of the thing preceding it. \nFor example, x* matches any number of x characters, [0-9]* matches any number of digits, and .* matches any number of anything.\n\nA regular expression pattern match succeeds if the pattern matches anywhere in the value being tested. \n(This differs from a LIKE pattern match, which succeeds only if the pattern matches the entire value.)\n\nTo anchor a pattern so that it must match the beginning or end of the value being tested, use ^ at the beginning or $ at the end of the pattern.\n\nTo demonstrate how extended regular expressions work, the LIKE queries shown previously are rewritten here to use REGEXP_LIKE().\n\nTo find names beginning with b, use ^ to match the beginning of the name:\n\nmysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, \'^b\');\n+--------+--------+---------+------+------------+------------+\n| name   | owner  | species | sex  | birth      | death      |\n+--------+--------+---------+------+------------+------------+\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |\n| Bowser | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |\n+--------+--------+---------+------+------------+------------+\nTo force a regular expression comparison to be case sensitive, use a case-sensitive collation, or use the BINARY keyword to make one of the strings a binary string, or specify the c match-control character. \nEach of these queries matches only lowercase b at the beginning of a name:\n\nSELECT * FROM pet WHERE REGEXP_LIKE(name, \'^b\' COLLATE utf8mb4_0900_as_cs);\nSELECT * FROM pet WHERE REGEXP_LIKE(name, BINARY \'^b\');\nSELECT * FROM pet WHERE REGEXP_LIKE(name, \'^b\', \'c\');\nTo find names ending with fy, use $ to match the end of the name:\n\nmysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, \'fy$\');\n+--------+--------+---------+------+------------+-------+\n| name   | owner  | species | sex  | birth      | death |\n+--------+--------+---------+------+------------+-------+\n| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |\n+--------+--------+---------+------+------------+-------+\nTo find names containing a w, use this query:\n\nmysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, \'w\');\n+----------+-------+---------+------+------------+------------+\n| name     | owner | species | sex  | birth      | death      |\n+----------+-------+---------+------+------------+------------+\n| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |\n| Bowser   | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |\n| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |\n+----------+-------+---------+------+------------+------------+\nBecause a regular expression pattern matches if it occurs anywhere in the value, it is not necessary in the previous query to put a wildcard on either side of the pattern to get it to match the entire value as would be true with an SQL pattern.\n\nTo find names containing exactly five characters, use ^ and $ to match the beginning and end of the name, and five instances of . \nin between:\n\nmysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, \'^.....$\');\n+-------+--------+---------+------+------------+-------+\n| name  | owner  | species | sex  | birth      | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\n+-------+--------+---------+------+------------+-------+\nYou could also write the previous query using the {n} (“repeat-n-times”) operator:\n\nmysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, \'^.{5}$\');\n+-------+--------+---------+------+------------+-------+\n| name  | owner  | species | sex  | birth      | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\n+-------+--------+---------+------+------------+-------+\nFor more information about the syntax for regular expressions, see Section 12.7.2, “Regular Expressions”.\n\n',
'<h2>3.3.4.8 Counting Rows</h2>\nDatabases are often used to answer the question, “How often does a certain type of data occur in a table?” For example, you might want to know how many pets you have, or how many pets each owner has, or you might want to perform various kinds of census operations on your animals.\n\nCounting the total number of animals you have is the same question as “How many rows are in the pet table?” because there is one record per pet. \nCOUNT(*) counts the number of rows, so the query to count your animals looks like this:\n\nmysql> SELECT COUNT(*) FROM pet;\n+----------+\n| COUNT(*) |\n+----------+\n|        9 |\n+----------+\nEarlier, you retrieved the names of the people who owned pets. \nYou can use COUNT() if you want to find out how many pets each owner has:\n\nmysql> SELECT owner, COUNT(*) FROM pet GROUP BY owner;\n+--------+----------+\n| owner  | COUNT(*) |\n+--------+----------+\n| Benny  |        2 |\n| Diane  |        2 |\n| Gwen   |        3 |\n| Harold |        2 |\n+--------+----------+\nThe preceding query uses GROUP BY to group all records for each owner. \nThe use of COUNT() in conjunction with GROUP BY is useful for characterizing your data under various groupings. \nThe following examples show different ways to perform animal census operations.\n\nNumber of animals per species:\n\nmysql> SELECT species, COUNT(*) FROM pet GROUP BY species;\n+---------+----------+\n| species | COUNT(*) |\n+---------+----------+\n| bird    |        2 |\n| cat     |        2 |\n| dog     |        3 |\n| hamster |        1 |\n| snake   |        1 |\n+---------+----------+\nNumber of animals per sex:\n\nmysql> SELECT sex, COUNT(*) FROM pet GROUP BY sex;\n+------+----------+\n| sex  | COUNT(*) |\n+------+----------+\n| NULL |        1 |\n| f    |        4 |\n| m    |        4 |\n+------+----------+\n(In this output, NULL indicates that the sex is unknown.)\n\nNumber of animals per combination of species and sex:\n\nmysql> SELECT species, sex, COUNT(*) FROM pet GROUP BY species, sex;\n+---------+------+----------+\n| species | sex  | COUNT(*) |\n+---------+------+----------+\n| bird    | NULL |        1 |\n| bird    | f    |        1 |\n| cat     | f    |        1 |\n| cat     | m    |        1 |\n| dog     | f    |        1 |\n| dog     | m    |        2 |\n| hamster | f    |        1 |\n| snake   | m    |        1 |\n+---------+------+----------+\nYou need not retrieve an entire table when you use COUNT(). \nFor example, the previous query, when performed just on dogs and cats, looks like this:\n\nmysql> SELECT species, sex, COUNT(*) FROM pet\n WHERE species = \'dog\' OR species = \'cat\'\n GROUP BY species, sex;\n+---------+------+----------+\n| species | sex  | COUNT(*) |\n+---------+------+----------+\n| cat     | f    |        1 |\n| cat     | m    |        1 |\n| dog     | f    |        1 |\n| dog     | m    |        2 |\n+---------+------+----------+\nOr, if you wanted the number of animals per sex only for animals whose sex is known:\n\nmysql> SELECT species, sex, COUNT(*) FROM pet\n WHERE sex IS NOT NULL\n GROUP BY species, sex;\n+---------+------+----------+\n| species | sex  | COUNT(*) |\n+---------+------+----------+\n| bird    | f    |        1 |\n| cat     | f    |        1 |\n| cat     | m    |        1 |\n| dog     | f    |        1 |\n| dog     | m    |        2 |\n| hamster | f    |        1 |\n| snake   | m    |        1 |\n+---------+------+----------+\nIf you name columns to select in addition to the COUNT() value, a GROUP BY clause should be present that names those same columns. \nOtherwise, the following occurs:\n\nIf the ONLY_FULL_GROUP_BY SQL mode is enabled, an error occurs:\n\nmysql> SET sql_mode = \'ONLY_FULL_GROUP_BY\';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT owner, COUNT(*) FROM pet;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column \'menagerie.pet.owner\';\nthis is incompatible with sql_mode=only_full_group_by\nIf ONLY_FULL_GROUP_BY is not enabled, the query is processed by treating all rows as a single group, but the value selected for each named column is nondeterministic. \nThe server is free to select the value from any row:\n\nmysql> SET sql_mode = \'\';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT owner, COUNT(*) FROM pet;\n+--------+----------+\n| owner  | COUNT(*) |\n+--------+----------+\n| Harold |        8 |\n+--------+----------+\n1 row in set (0.00 sec)\nSee also Section 12.20.3, “MySQL Handling of GROUP BY”. \nSee Section 12.20.1, “Aggregate (GROUP BY) Function Descriptions” for information about COUNT(expr) behavior and related optimizations.\n\n',
'<h2>3.3.4.9 Using More Than one Table</h2>\nThe pet table keeps track of which pets you have. \nIf you want to record other information about them, such as events in their lives like visits to the vet or when litters are born, you need another table. \nWhat should this table look like? It needs to contain the following information:\n\nThe pet name so that you know which animal each event pertains to.\n\nA date so that you know when the event occurred.\n\nA field to describe the event.\n\nAn event type field, if you want to be able to categorize events.\n\nGiven these considerations, the CREATE TABLE statement for the event table might look like this:\n\nmysql> CREATE TABLE event (name VARCHAR(20), date DATE,\n type VARCHAR(15), remark VARCHAR(255));\nAs with the pet table, it is easiest to load the initial records by creating a tab-delimited text file containing the following information.\n\nname	date	type	remark\nFluffy	1995-05-15	litter	4 kittens, 3 female, 1 male\nBuffy	1993-06-23	litter	5 puppies, 2 female, 3 male\nBuffy	1994-06-19	litter	3 puppies, 3 female\nChirpy	1999-03-21	vet	needed beak straightened\nSlim	1997-08-03	vet	broken rib\nBowser	1991-10-12	kennel	\nFang	1991-10-12	kennel	\nFang	1998-08-28	birthday	Gave him a new chew toy\nClaws	1998-03-17	birthday	Gave him a new flea collar\nWhistler	1998-12-09	birthday	First birthday\nLoad the records like this:\n\nmysql> LOAD DATA LOCAL INFILE \'event.txt\' INTO TABLE event;\nBased on what you have learned from the queries that you have run on the pet table, you should be able to perform retrievals on the records in the event table; the principles are the same. \nBut when is the event table by itself insufficient to answer questions you might ask?\n\nSuppose that you want to find out the ages at which each pet had its litters. \nWe saw earlier how to calculate ages from two dates. \nThe litter date of the mother is in the event table, but to calculate her age on that date you need her birth date, which is stored in the pet table. \nThis means the query requires both tables:\n\nmysql> SELECT pet.name,\n TIMESTAMPDIFF(YEAR,birth,date) AS age,\n remark\n FROM pet INNER JOIN event\n   ON pet.name = event.name\n WHERE event.type = \'litter\';\n+--------+------+-----------------------------+\n| name   | age  | remark                      |\n+--------+------+-----------------------------+\n| Fluffy |    2 | 4 kittens, 3 female, 1 male |\n| Buffy  |    4 | 5 puppies, 2 female, 3 male |\n| Buffy  |    5 | 3 puppies, 3 female         |\n+--------+------+-----------------------------+\nThere are several things to note about this query:\n\nThe FROM clause joins two tables because the query needs to pull information from both of them.\n\nWhen combining (joining) information from multiple tables, you need to specify how records in one table can be matched to records in the other. \nThis is easy because they both have a name column. \nThe query uses an ON clause to match up records in the two tables based on the name values.\n\nThe query uses an INNER JOIN to combine the tables. \nAn INNER JOIN permits rows from either table to appear in the result if and only if both tables meet the conditions specified in the ON clause. \nIn this example, the ON clause specifies that the name column in the pet table must match the name column in the event table. \nIf a name appears in one table but not the other, the row will not appear in the result because the condition in the ON clause fails.\n\nBecause the name column occurs in both tables, you must be specific about which table you mean when referring to the column. \nThis is done by prepending the table name to the column name.\n\nYou need not have two different tables to perform a join. \nSometimes it is useful to join a table to itself, if you want to compare records in a table to other records in that same table. \nFor example, to find breeding pairs among your pets, you can join the pet table with itself to produce candidate pairs of live males and females of like species:\n\nmysql> SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species\n FROM pet AS p1 INNER JOIN pet AS p2\n   ON p1.species = p2.species\n   AND p1.sex = \'f\' AND p1.death IS NULL\n   AND p2.sex = \'m\' AND p2.death IS NULL;\n+--------+------+-------+------+---------+\n| name   | sex  | name  | sex  | species |\n+--------+------+-------+------+---------+\n| Fluffy | f    | Claws | m    | cat     |\n| Buffy  | f    | Fang  | m    | dog     |\n+--------+------+-------+------+---------+\nIn this query, we specify aliases for the table name to refer to the columns and keep straight which instance of the table each column reference is associated with.\n\n',
'<h2>3.4 Getting Information About Databases and Tables</h2>\nWhat if you forget the name of a database or table, or what the structure of a given table is (for example, what its columns are called)? MySQL addresses this problem through several statements that provide information about the databases and tables it supports.\n\nYou have previously seen SHOW DATABASES, which lists the databases managed by the server. \nTo find out which database is currently selected, use the DATABASE() function:\n\nmysql> SELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| menagerie  |\n+------------+\nIf you have not yet selected any database, the result is NULL.\n\nTo find out what tables the default database contains (for example, when you are not sure about the name of a table), use this statement:\n\nmysql> SHOW TABLES;\n+---------------------+\n| Tables_in_menagerie |\n+---------------------+\n| event               |\n| pet                 |\n+---------------------+\nThe name of the column in the output produced by this statement is always Tables_in_db_name, where db_name is the name of the database. \nSee Section 13.7.7.37, “SHOW TABLES Statement”, for more information.\n\nIf you want to find out about the structure of a table, the DESCRIBE statement is useful; it displays information about each of a table\'s columns:\n\nmysql> DESCRIBE pet;\n+---------+-------------+------+-----+---------+-------+\n| Field   | Type        | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| name    | varchar(20) | YES  |     | NULL    |       |\n| owner   | varchar(20) | YES  |     | NULL    |       |\n| species | varchar(20) | YES  |     | NULL    |       |\n| sex     | char(1)     | YES  |     | NULL    |       |\n| birth   | date        | YES  |     | NULL    |       |\n| death   | date        | YES  |     | NULL    |       |\n+---------+-------------+------+-----+---------+-------+\nField indicates the column name, Type is the data type for the column, NULL indicates whether the column can contain NULL values, Key indicates whether the column is indexed, and Default specifies the column\'s default value. \nExtra displays special information about columns: If a column was created with the AUTO_INCREMENT option, the value will be auto_increment rather than empty.\n\nDESC is a short form of DESCRIBE. \nSee Section 13.8.1, “DESCRIBE Statement”, for more information.\n\nYou can obtain the CREATE TABLE statement necessary to create an existing table using the SHOW CREATE TABLE statement. \nSee Section 13.7.7.10, “SHOW CREATE TABLE Statement”.\n\nIf you have indexes on a table, SHOW INDEX FROM tbl_name produces information about them. \nSee Section 13.7.7.22, “SHOW INDEX Statement”, for more about this statement.\n\n',
'<h2>3.5 Using mysql in Batch Mode</h2>\nIn the previous sections, you used mysql interactively to enter statements and view the results. \nYou can also run mysql in batch mode. \nTo do this, put the statements you want to run in a file, then tell mysql to read its input from the file:\n\nshell> mysql < batch-file\nIf you are running mysql under Windows and have some special characters in the file that cause problems, you can do this:\n\nC:\> mysql -e "source batch-file"\nIf you need to specify connection parameters on the command line, the command might look like this:\n\nshell> mysql -h host -u user -p < batch-file\nEnter password: ********\nWhen you use mysql this way, you are creating a script file, then executing the script.\n\nIf you want the script to continue even if some of the statements in it produce errors, you should use the --force command-line option.\n\nWhy use a script? Here are a few reasons:\n\nIf you run a query repeatedly (say, every day or every week), making it a script enables you to avoid retyping it each time you execute it.\n\nYou can generate new queries from existing ones that are similar by copying and editing script files.\n\nBatch mode can also be useful while you\'re developing a query, particularly for multiple-line statements or multiple-statement sequences. \nIf you make a mistake, you don\'t have to retype everything. \nJust edit your script to correct the error, then tell mysql to execute it again.\n\nIf you have a query that produces a lot of output, you can run the output through a pager rather than watching it scroll off the top of your screen:\n\nshell> mysql < batch-file | more\nYou can catch the output in a file for further processing:\n\nshell> mysql < batch-file > mysql.out\nYou can distribute your script to other people so that they can also run the statements.\n\nSome situations do not allow for interactive use, for example, when you run a query from a cron job. \nIn this case, you must use batch mode.\n\nThe default output format is different (more concise) when you run mysql in batch mode than when you use it interactively. \nFor example, the output of SELECT DISTINCT species FROM pet looks like this when mysql is run interactively:\n\n+---------+\n| species |\n+---------+\n| bird    |\n| cat     |\n| dog     |\n| hamster |\n| snake   |\n+---------+\nIn batch mode, the output looks like this instead:\n\nspecies\nbird\ncat\ndog\nhamster\nsnake\nIf you want to get the interactive output format in batch mode, use mysql -t. \nTo echo to the output the statements that are executed, use mysql -v.\n\nYou can also use scripts from the mysql prompt by using the source command or \. \ncommand:\n\nmysql> source filename;\nmysql> \. \nfilename\nSee Section 4.5.1.5, “Executing SQL Statements from a Text File”, for more information.\n\nHere are examples of how to solve some common problems with MySQL.\n\nSome of the examples use the table shop to hold the price of each article (item number) for certain traders (dealers). \nSupposing that each trader has a single fixed price per article, then (article, dealer) is a primary key for the records.\n\nStart the command-line tool mysql and select a database:\n\nshell> mysql your-database-name\nTo create and populate the example table, use these statements:\n\nCREATE TABLE shop (\n    article INT UNSIGNED  DEFAULT \'0000\' NOT NULL,\n    dealer  CHAR(20)      DEFAULT \'\'     NOT NULL,\n    price   DECIMAL(16,2) DEFAULT \'0.00\' NOT NULL,\n    PRIMARY KEY(article, dealer));\nINSERT INTO shop VALUES\n    (1,\'A\',3.45),(1,\'B\',3.99),(2,\'A\',10.99),(3,\'B\',1.45),\n    (3,\'C\',1.69),(3,\'D\',1.25),(4,\'D\',19.95);\nAfter issuing the statements, the table should have the following contents:\n\nSELECT * FROM shop ORDER BY article;\n\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n|       1 | A      |  3.45 |\n|       1 | B      |  3.99 |\n|       2 | A      | 10.99 |\n|       3 | B      |  1.45 |\n|       3 | C      |  1.69 |\n|       3 | D      |  1.25 |\n|       4 | D      | 19.95 |\n+---------+--------+-------+\n\n',
'<h2>3.6.1 The Maximum Value for a Column</h2>\n“What is the highest item number?”\n\n\nSELECT MAX(article) AS article FROM shop;\n\n+---------+\n| article |\n+---------+\n|       4 |\n+---------+\n',
'<h2>3.6.2 The Row Holding the Maximum of a Certain Column</h2>\nTask: Find the number, dealer, and price of the most expensive article.\n\nThis is easily done with a subquery:\n\nSELECT article, dealer, price\nFROM   shop\nWHERE  price=(SELECT MAX(price) FROM shop);\n\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n|    0004 | D      | 19.95 |\n+---------+--------+-------+\nOther solutions are to use a LEFT JOIN or to sort all rows descending by price and get only the first row using the MySQL-specific LIMIT clause:\n\nSELECT s1.article, s1.dealer, s1.price\nFROM shop s1\nLEFT JOIN shop s2 ON s1.price < s2.price\nWHERE s2.article IS NULL;\n\nSELECT article, dealer, price\nFROM shop\nORDER BY price DESC\nLIMIT 1;\nNote\nIf there were several most expensive articles, each with a price of 19.95, the LIMIT solution would show only one of them.\n\n',
'<h2>3.6.3 Maximum of Column per Group</h2>\nTask: Find the highest price per article.\n\n\nSELECT article, MAX(price) AS price\nFROM   shop\nGROUP BY article\nORDER BY article;\n\n+---------+-------+\n| article | price |\n+---------+-------+\n|    0001 |  3.99 |\n|    0002 | 10.99 |\n|    0003 |  1.69 |\n|    0004 | 19.95 |\n+---------+-------+\n',
'<h2>3.6.4 The Rows Holding the Group-wise Maximum of a Certain Column</h2>\nTask: For each article, find the dealer or dealers with the most expensive price.\n\nThis problem can be solved with a subquery like this one:\n\nSELECT article, dealer, price\nFROM   shop s1\nWHERE  price=(SELECT MAX(s2.price)\n        FROM shop s2\n        WHERE s1.article = s2.article)\nORDER BY article;\n\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n|    0001 | B      |  3.99 |\n|    0002 | A      | 10.99 |\n|    0003 | C      |  1.69 |\n|    0004 | D      | 19.95 |\n+---------+--------+-------+\nThe preceding example uses a correlated subquery, which can be inefficient (see Section 13.2.11.7, “Correlated Subqueries”). \nOther possibilities for solving the problem are to use an uncorrelated subquery in the FROM clause, a LEFT JOIN, or a common table expression with a window function.\n\nUncorrelated subquery:\n\nSELECT s1.article, dealer, s1.price\nFROM shop s1\nJOIN (\n  SELECT article, MAX(price) AS price\n  FROM shop\n  GROUP BY article) AS s2\n  ON s1.article = s2.article AND s1.price = s2.price\nORDER BY article;\nLEFT JOIN:\n\nSELECT s1.article, s1.dealer, s1.price\nFROM shop s1\nLEFT JOIN shop s2 ON s1.article = s2.article AND s1.price < s2.price\nWHERE s2.article IS NULL\nORDER BY s1.article;\nThe LEFT JOIN works on the basis that when s1.price is at its maximum value, there is no s2.price with a greater value and thus the corresponding s2.article value is NULL. \nSee Section 13.2.10.2, “JOIN Clause”.\n\nCommon table expression with window function:\n\n\nWITH s1 AS (\n   SELECT article, dealer, price,\n    RANK() OVER (PARTITION BY article\n                     ORDER BY price DESC\n                ) AS `Rank`\n     FROM shop\n)\nSELECT article, dealer, price\n  FROM s1\n  WHERE `Rank` = 1\nORDER BY article;\n',
'<h2>3.6.5 Using User-Defined Variables</h2>\nYou can employ MySQL user variables to remember results without having to store them in temporary variables in the client. \n(See Section 9.4, “User-Defined Variables”.)\n\nFor example, to find the articles with the highest and lowest price you can do this:\n\nmysql> SELECT @min_price:=MIN(price),@max_price:=MAX(price) FROM shop;\nmysql> SELECT * FROM shop WHERE price=@min_price OR price=@max_price;\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n|    0003 | D      |  1.25 |\n|    0004 | D      | 19.95 |\n+---------+--------+-------+\nNote\nIt is also possible to store the name of a database object such as a table or a column in a user variable and then to use this variable in an SQL statement; however, this requires the use of a prepared statement. \nSee Section 13.5, “Prepared Statements”, for more information.\n\n',
'<h2>3.6.6 Using Foreign Keys</h2>\nIn MySQL, InnoDB tables support checking of foreign key constraints. \nSee Chapter 15, The InnoDB Storage Engine, and Section 1.8.2.3, “FOREIGN KEY Constraint Differences”.\n\nA foreign key constraint is not required merely to join two tables. \nFor storage engines other than InnoDB, it is possible when defining a column to use a REFERENCES tbl_name(col_name) clause, which has no actual effect, and serves only as a memo or comment to you that the column which you are currently defining is intended to refer to a column in another table. \nIt is extremely important to realize when using this syntax that:\n\nMySQL does not perform any sort of check to make sure that col_name actually exists in tbl_name (or even that tbl_name itself exists).\n\nMySQL does not perform any sort of action on tbl_name such as deleting rows in response to actions taken on rows in the table which you are defining; in other words, this syntax induces no ON DELETE or ON UPDATE behavior whatsoever. \n(Although you can write an ON DELETE or ON UPDATE clause as part of the REFERENCES clause, it is also ignored.)\n\nThis syntax creates a column; it does not create any sort of index or key.\n\nYou can use a column so created as a join column, as shown here:\n\nCREATE TABLE person (\n    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\n    name CHAR(60) NOT NULL,\n    PRIMARY KEY (id)\n);\n\nCREATE TABLE shirt (\n    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\n    style ENUM(\'t-shirt\', \'polo\', \'dress\') NOT NULL,\n    color ENUM(\'red\', \'blue\', \'orange\', \'white\', \'black\') NOT NULL,\n    owner SMALLINT UNSIGNED NOT NULL REFERENCES person(id),\n    PRIMARY KEY (id)\n);\n\nINSERT INTO person VALUES (NULL, \'Antonio Paz\');\n\nSELECT @last := LAST_INSERT_ID();\n\nINSERT INTO shirt VALUES\n(NULL, \'polo\', \'blue\', @last),\n(NULL, \'dress\', \'white\', @last),\n(NULL, \'t-shirt\', \'blue\', @last);\n\nINSERT INTO person VALUES (NULL, \'Lilliana Angelovska\');\n\nSELECT @last := LAST_INSERT_ID();\n\nINSERT INTO shirt VALUES\n(NULL, \'dress\', \'orange\', @last),\n(NULL, \'polo\', \'red\', @last),\n(NULL, \'dress\', \'blue\', @last),\n(NULL, \'t-shirt\', \'white\', @last);\n\nSELECT * FROM person;\n+----+---------------------+\n| id | name                |\n+----+---------------------+\n|  1 | Antonio Paz         |\n|  2 | Lilliana Angelovska |\n+----+---------------------+\n\nSELECT * FROM shirt;\n+----+---------+--------+-------+\n| id | style   | color  | owner |\n+----+---------+--------+-------+\n|  1 | polo    | blue   |     1 |\n|  2 | dress   | white  |     1 |\n|  3 | t-shirt | blue   |     1 |\n|  4 | dress   | orange |     2 |\n|  5 | polo    | red    |     2 |\n|  6 | dress   | blue   |     2 |\n|  7 | t-shirt | white  |     2 |\n+----+---------+--------+-------+\n\n\nSELECT s.* FROM person p INNER JOIN shirt s\n   ON s.owner = p.id\n WHERE p.name LIKE \'Lilliana%\'\n   AND s.color <> \'white\';\n\n+----+-------+--------+-------+\n| id | style | color  | owner |\n+----+-------+--------+-------+\n|  4 | dress | orange |     2 |\n|  5 | polo  | red    |     2 |\n|  6 | dress | blue   |     2 |\n+----+-------+--------+-------+\nWhen used in this fashion, the REFERENCES clause is not displayed in the output of SHOW CREATE TABLE or DESCRIBE:\n\nSHOW CREATE TABLE shirt\G\n*************************** 1. \nrow ***************************\nTable: shirt\nCreate Table: CREATE TABLE `shirt` (\n`id` smallint(5) unsigned NOT NULL auto_increment,\n`style` enum(\'t-shirt\',\'polo\',\'dress\') NOT NULL,\n`color` enum(\'red\',\'blue\',\'orange\',\'white\',\'black\') NOT NULL,\n`owner` smallint(5) unsigned NOT NULL,\nPRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4\nThe use of REFERENCES in this way as a comment or “reminder” in a column definition works with MyISAM tables.\n\n',
'<h2>3.6.7 Searching on Two Keys</h2>\nAn OR using a single key is well optimized, as is the handling of AND.\n\nThe one tricky case is that of searching on two different keys combined with OR:\n\nSELECT field1_index, field2_index FROM test_table\nWHERE field1_index = \'1\' OR  field2_index = \'1\'\nThis case is optimized. \nSee Section 8.2.1.3, “Index Merge Optimization”.\n\nYou can also solve the problem efficiently by using a UNION that combines the output of two separate SELECT statements. \nSee Section 13.2.10.3, “UNION Clause”.\n\nEach SELECT searches only one key and can be optimized:\n\n\nSELECT field1_index, field2_index\n    FROM test_table WHERE field1_index = \'1\'\nUNION\nSELECT field1_index, field2_index\nFROM test_table WHERE field2_index = \'1\';\n',
'<h2>3.6.8 Calculating Visits Per Day</h2>\nThe following example shows how you can use the bit group functions to calculate the number of days per month a user has visited a Web page.\n\nCREATE TABLE t1 (year YEAR, month INT UNSIGNED,\n       day INT UNSIGNED);\nINSERT INTO t1 VALUES(2000,1,1),(2000,1,20),(2000,1,30),(2000,2,2),\n      (2000,2,23),(2000,2,23);\nThe example table contains year-month-day values representing visits by users to the page. \nTo determine how many different days in each month these visits occur, use this query:\n\nSELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM t1\n GROUP BY year,month;\nWhich returns:\n\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2000 |     1 |    3 |\n| 2000 |     2 |    2 |\n+------+-------+------+\nThe query calculates how many different days appear in the table for each year/month combination, with automatic removal of duplicate entries.\n\n',
'<h2>3.6.9 Using AUTO_INCREMENT</h2>\nThe AUTO_INCREMENT attribute can be used to generate a unique identity for new rows:\n\nCREATE TABLE animals (\n     id MEDIUMINT NOT NULL AUTO_INCREMENT,\n     name CHAR(30) NOT NULL,\n     PRIMARY KEY (id)\n);\n\nINSERT INTO animals (name) VALUES\n    (\'dog\'),(\'cat\'),(\'penguin\'),\n    (\'lax\'),(\'whale\'),(\'ostrich\');\n\nSELECT * FROM animals;\nWhich returns:\n\n+----+---------+\n| id | name    |\n+----+---------+\n|  1 | dog     |\n|  2 | cat     |\n|  3 | penguin |\n|  4 | lax     |\n|  5 | whale   |\n|  6 | ostrich |\n+----+---------+\nNo value was specified for the AUTO_INCREMENT column, so MySQL assigned sequence numbers automatically. \nYou can also explicitly assign 0 to the column to generate sequence numbers, unless the NO_AUTO_VALUE_ON_ZERO SQL mode is enabled. \nFor example:\n\nINSERT INTO animals (id,name) VALUES(0,\'groundhog\');\nIf the column is declared NOT NULL, it is also possible to assign NULL to the column to generate sequence numbers. \nFor example:\n\nINSERT INTO animals (id,name) VALUES(NULL,\'squirrel\');\nWhen you insert any other value into an AUTO_INCREMENT column, the column is set to that value and the sequence is reset so that the next automatically generated value follows sequentially from the largest column value. \nFor example:\n\nINSERT INTO animals (id,name) VALUES(100,\'rabbit\');\nINSERT INTO animals (id,name) VALUES(NULL,\'mouse\');\nSELECT * FROM animals;\n+-----+-----------+\n| id  | name      |\n+-----+-----------+\n|   1 | dog       |\n|   2 | cat       |\n|   3 | penguin   |\n|   4 | lax       |\n|   5 | whale     |\n|   6 | ostrich   |\n|   7 | groundhog |\n|   8 | squirrel  |\n| 100 | rabbit    |\n| 101 | mouse     |\n+-----+-----------+\nUpdating an existing AUTO_INCREMENT column value also resets the AUTO_INCREMENT sequence.\n\nYou can retrieve the most recent automatically generated AUTO_INCREMENT value with the LAST_INSERT_ID() SQL function or the mysql_insert_id() C API function. \nThese functions are connection-specific, so their return values are not affected by another connection which is also performing inserts.\n\nUse the smallest integer data type for the AUTO_INCREMENT column that is large enough to hold the maximum sequence value you will need. \nWhen the column reaches the upper limit of the data type, the next attempt to generate a sequence number fails. \nUse the UNSIGNED attribute if possible to allow a greater range. \nFor example, if you use TINYINT, the maximum permissible sequence number is 127. \nFor TINYINT UNSIGNED, the maximum is 255. \nSee Section 11.1.2, “Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT” for the ranges of all the integer types.\n\nNote\nFor a multiple-row insert, LAST_INSERT_ID() and mysql_insert_id() actually return the AUTO_INCREMENT key from the first of the inserted rows. \nThis enables multiple-row inserts to be reproduced correctly on other servers in a replication setup.\n\nTo start with an AUTO_INCREMENT value other than 1, set that value with CREATE TABLE or ALTER TABLE, like this:\n\nmysql> ALTER TABLE tbl AUTO_INCREMENT = 100;\nInnoDB Notes\nFor information about AUTO_INCREMENT usage specific to InnoDB, see Section 15.6.1.6, “AUTO_INCREMENT Handling in InnoDB”.\n\nMyISAM Notes\nFor MyISAM tables, you can specify AUTO_INCREMENT on a secondary column in a multiple-column index. \nIn this case, the generated value for the AUTO_INCREMENT column is calculated as MAX(auto_increment_column) + 1 WHERE prefix=given-prefix. \nThis is useful when you want to put data into ordered groups.\n\nCREATE TABLE animals (\n    grp ENUM(\'fish\',\'mammal\',\'bird\') NOT NULL,\n    id MEDIUMINT NOT NULL AUTO_INCREMENT,\n    name CHAR(30) NOT NULL,\n    PRIMARY KEY (grp,id)\n) ENGINE=MyISAM;\n\nINSERT INTO animals (grp,name) VALUES\n    (\'mammal\',\'dog\'),(\'mammal\',\'cat\'),\n    (\'bird\',\'penguin\'),(\'fish\',\'lax\'),(\'mammal\',\'whale\'),\n    (\'bird\',\'ostrich\');\n\nSELECT * FROM animals ORDER BY grp,id;\nWhich returns:\n\n+--------+----+---------+\n| grp    | id | name    |\n+--------+----+---------+\n| fish   |  1 | lax     |\n| mammal |  1 | dog     |\n| mammal |  2 | cat     |\n| mammal |  3 | whale   |\n| bird   |  1 | penguin |\n| bird   |  2 | ostrich |\n+--------+----+---------+\nIn this case (when the AUTO_INCREMENT column is part of a multiple-column index), AUTO_INCREMENT values are reused if you delete the row with the biggest AUTO_INCREMENT value in any group. \nThis happens even for MyISAM tables, for which AUTO_INCREMENT values normally are not reused.\n\nIf the AUTO_INCREMENT column is part of multiple indexes, MySQL generates sequence values using the index that begins with the AUTO_INCREMENT column, if there is one. \nFor example, if the animals table contained indexes PRIMARY KEY (grp, id) and INDEX (id), MySQL would ignore the PRIMARY KEY for generating sequence values. \nAs a result, the table would contain a single sequence, not a sequence per grp value.\n\nFurther Reading\nMore information about AUTO_INCREMENT is available here:\n\nHow to assign the AUTO_INCREMENT attribute to a column: Section 13.1.20, “CREATE TABLE Statement”, and Section 13.1.9, “ALTER TABLE Statement”.\n\nHow AUTO_INCREMENT behaves depending on the NO_AUTO_VALUE_ON_ZERO SQL mode: Section 5.1.11, “Server SQL Modes”.\n\nHow to use the LAST_INSERT_ID() function to find the row that contains the most recent AUTO_INCREMENT value: Section 12.15, “Information Functions”.\n\nSetting the AUTO_INCREMENT value to be used: Section 5.1.8, “Server System Variables”.\n\nSection 15.6.1.6, “AUTO_INCREMENT Handling in InnoDB”\n\nAUTO_INCREMENT and replication: Section 17.5.1.1, “Replication and AUTO_INCREMENT”.\n\nServer-system variables related to AUTO_INCREMENT (auto_increment_increment and auto_increment_offset) that can be used for replication: Section 5.1.8, “Server System Variables”.\n\n',
'<h2>3.7 Using MySQL with Apache</h2>\nThere are programs that let you authenticate your users from a MySQL database and also let you write your log files into a MySQL table.\n\nYou can change the Apache logging format to be easily readable by MySQL by putting the following into the Apache configuration file:\n\nLogFormat \\n  "\"%h\",%{%Y%m%d%H%M%S}t,%>s,\"%b\",\"%{Content-Type}o\",  \\n  \"%U\",\"%{Referer}i\",\"%{User-Agent}i\""\nTo load a log file in that format into MySQL, you can use a statement something like this:\n\nLOAD DATA INFILE \'/local/access_log\' INTO TABLE tbl_name\nFIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'"\' ESCAPED BY \'\\\'\nThe named table should be created to have columns that correspond to those that the LogFormat line writes to the log file.\n\n\n',
'<h2>Create & Manage MySQL Databases, Tables & Users from command line</h2>\nThis article describes how to do common MySQL database administration tasks from the command line using the <em>mysql</em> program.\n\nTable of Contents\n<a href=\'#Create-MySQLDatabasesand-Users\'>Create MySQL Databases and Users</a>\n<a href=\'#Using-SQL-script-files\'>Using SQL script files</a>\n<a href=\'#DeleteMySQL-Tables-and-Databases\'>Delete MySQL Tables and Databases</a><a href=\'#Delete-MySQLUsers\'>Delete MySQL Users</a><a href=\'#More-Information\'>More Information</a><a href=\'#Related-Articles\'>Related Articles</a>\n<h4 id=\'Create-MySQLDatabasesand-Users\'>Create MySQL Databases and Users</h4>\n\nTo create MySQL database and users, follow these steps:\n<ol><li>At the command line, log in to MySQL as the root user:\nmysql -u root -p\n</li><li>Type the MySQL root password, and then press Enter.</li><li>To create a database user, type the following command. \nReplace <span style="color:#ff0000;"><em>username</em></span> with the user you want to create, and replace <span style="color:#ff0000;"><em>password</em></span> with the user&#39;s password:\n\nGRANT ALL PRIVILEGES ON *.* TO &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;\n\n\nThis command grants the user all permissions. However, you can grant specific permissions to maintain precise control over database access. For example, to explicitly grant the <strong>SELECT</strong> permission, you would use the following command:\n\nGRANT SELECT ON *.* TO &#39;username&#39;@&#39;localhost&#39;;\n\n\n For more information about setting MySQL database permissions, please visit <a href="https://dev.mysql.com/doc/refman/5.5/en/grant.html">https://dev.mysql.com/doc/refman/5.5/en/grant.html</a>.\n</li><li>Type <span class="user-input">\q</span> to exit the <em>mysql</em> program.</li><li>\nTo log in to MySQL as the user you just created, type the following command. Replace <span style="color:#ff0000;"><em>username</em></span> with the name of the user you created in step 3:\n\nmysql -u username -p\n</li><li>Type the user&#39;s password, and then press Enter.</li><li>\nTo create a database, type the following command. Replace <span style="color:#ff0000;"><em>dbname</em></span> with the name of the database that you want to create:\n\nCREATE DATABASE dbname;\n</li><li>\nTo work with the new database, type the following command. Replace <span style="color:#ff0000;"><em>dbname</em></span> with the name of the database you created in step 7:\n\nUSE dbname;\n</li><li>\nYou can now work with the database. For example, the following commands demonstrate how to create a basic table named <em>example</em>, and how to insert some data into it:\n\nCREATE TABLE example ( id smallint unsigned not null auto_increment, name varchar(20) not null, constraint pk_example primary key (id) );&#10;INSERT INTO example ( id, name ) VALUES ( null, &#39;Sample data&#39; );&#10;\n</li>\n</ol>\n\n<h5 id=\'Using-SQL-script-files\'>Using SQL script files</h5>\n\nThe previous procedure demonstrates how to create and populate a MySQL database by typing each command interactively with the <em>mysql</em> program. However, you can streamline the process by combining commands into a SQL script file.\n\nThe following procedure demonstrates how to use a SQL script file to create and populate a database:\n\n<ol>\n<li>As in the previous procedure, you should first create a user for the database. To do this, type the following commands:\n\nmysql -u root -p&#10;GRANT ALL PRIVILEGES ON *.* TO &#39;username&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;&#10;\q&#10;\n</li><li>\nCreate a file named <em>example.sql</em> and open it in your preferred text edtior. Copy and paste the following text into the file:\n\nCREATE DATABASE <span style="color:#ff0000;"><em>dbname</em></span>;&#10;USE <span style="color:#ff0000;"><em>dbname</em></span>;&#10;CREATE TABLE <span style="color:#ff0000;"><em>tablename</em></span> ( id smallint unsigned not null auto_increment, name varchar(20) not null, constraint pk_example primary key (id) );&#10;INSERT INTO <span style="color:#ff0000;"><em>tablename</em></span> ( id, name ) VALUES ( null, &#39;Sample data&#39; );\n</li><li>\nReplace <span style="color:#ff0000;"><em>dbname</em></span> with the name of the database that you want to create, and <span style="color:#ff0000;"><em>tablename</em></span> with the name of the table that you want to create.\nYou can modify the sample script file to create multiple databases and tables all at once. Additionally, the sample script creates a very simple table. You will likely have additional data requirements for your tables.</li><li>Save the changes to the <em>example.sql</em> file and exit the text editor.</li><li>\nTo process the SQL script, type the following command. Replace <span style="color:#ff0000;"><em>username</em></span> with the name of the user you created in step 1:\n\nmysql -u username -p &lt; example.sql\n\n\n The <em>mysql</em> program processes the script file statement by statement. When it finishes, the database and table are created, and the table contains the data you specified in the <strong>INSERT</strong> statements.\n\n</li>\n</ol>\n\n<h4 id=\'DeleteMySQL-Tables-and-Databases\'>Delete MySQL Tables and Databases</h4>\n\nTo delete a table, type the following command from the <strong>mysql&gt;</strong> prompt. Replace <span style="color:#ff0000;"><em>tablename</em></span> with the name of the table that you want to delete:\n\nDROP TABLE tablename;\n\nThis command assumes that you have already selected a database by using the <strong>USE</strong> statement.\n\nSimilarly, to delete an entire database, type the following command from the <strong>mysql&gt;</strong> prompt. Replace <span style="color:#ff0000;"><em>dbname</em></span> with the name of the database that you want to delete:\n\nDROP DATABASE dbname;\n\nThe <em>mysql</em> program does not ask for confirmation when you use this command. As soon as you press Enter, MySQL deletes the database and all of the data it contains.\n\n<h4 id=\'Delete-MySQLUsers\'>Delete MySQL Users</h4>\n\nTo view a list of all users, type the following command from the <strong>mysql&gt;</strong> prompt:\n\nSELECT user FROM mysql.user GROUP BY user;\n\n\nTo delete a specific user, type the following command from the <strong>mysql&gt;</strong> prompt. Replace <span style="color:#ff0000;"><em>username</em></span> with the name of the user that you want to delete:\n\nDELETE FROM mysql.user WHERE user = &#39;username&#39;;\n\n<h4 id=\'More-Information\'>More Information</h4>\nTo view the official MySQL documentation, please visit <a href="https://dev.mysql.com/doc/refman/5.5/en/index.html">https://dev.mysql.com/doc/refman/5.5/en/index.html</a>.\n\n<h4 id=\'Related-Articles\'>Related Articles</h4>\n<a href="/kb/developer-corner/mysql/connect-to-mysql-from-the-command-line">Connecting to MySQL from the command line</a>\nLearn how to connect to MySQL from the command line using the mysql program with this guide including detailed instructions, code snippets and links to related articles.\n<a href="/kb/developer-corner/mysql/reset-mysql-root-password">Reset MySQL root password</a>\nYou can reset your MySQL root password if you have forgotten it. This article shows you how to change it. Note that you must have root access to your server to accomplish this.\n\n',
'<h2></h2>\n',
'<h2>CREATE DATABASE Statement</h2>\n<h3>The SQL CREATE DATABASE Statement</h3>\nThe CREATE DATABASE statement is used to create a new SQL database.\n<h3>Syntax</h3>\nCREATE DATABASE <em>databasename</em> ;\n<h3>CREATE DATABASE Example</h3>\nThe following SQL statement creates a database called "testDB":\nCREATE DATABASE testDB;\n\n<b>Tip:</b> Make sure you have admin privilege before creating any database. \nOnce a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\n\n\n',
'<h2>DROP DATABASE Statement</h2>\n<h3>The SQL DROP DATABASE Statement</h3>\nThe DROP DATABASE statement is used to drop an existing SQL database.\n<h3>Syntax</h3>\n  DROP DATABASE <em>databasename</em> ;re dropping a database. \nDeleting a database will result in loss of complete information stored in the database!\n<h3>DROP DATABASE Example</h3>\nThe following SQL statement drops the existing database "testDB":\n  DROP DATABASE testDB;\n\n<b>Tip:</b> Make sure you have admin privilege before dropping any database. \nOnce a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nWrite the correct SQL statement to delete a database named <code">testDB</code>.\n<input name="ex1" maxlength="20" style="width: 212px;">;\n\n\n<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer &raquo;</button>\n\n\n',
'<h2>BACKUP DATABASE for SQL Server</h2>\n<h3>The SQL BACKUP DATABASE Statement</h3>\nThe BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database.\n<h3>Syntax</h3>\nBACKUP DATABASE <em>databasename</em> <br>TO DISK = \'<em>filepath</em> \'; \n<h3>The SQL BACKUP WITH DIFFERENTIAL Statement</h3>\nA differential back up only backs up the parts of the database that have changed since the last full database backup.\n<h3>Syntax</h3>\nBACKUP DATABASE <em>databasename</em> <br>TO DISK = \'<em>filepath</em> \'<br>WITH \n  DIFFERENTIAL;\n<h3>BACKUP DATABASE Example</h3>\nThe following SQL statement creates a full back up of the existing database "testDB" \nto the D disk:\nBACKUP DATABASE testDB<br>TO DISK = \'D:\backups\testDB.bak\';\n<b>Tip:</b> Always back up the database to a different drive than the actual database. \nThen, if you get a disk crash, you will not lose your backup file along with the database.\n<h3>BACKUP WITH DIFFERENTIAL Example</h3>\nThe following SQL statement creates a differential back up of the database "testDB":\nBACKUP DATABASE testDB<br>TO DISK = \'D:\backups\testDB.bak\'<br>WITH \n  DIFFERENTIAL;\n<b>Tip:</b> A differential back up reduces the back up time (since only the changes are backed up).\n\n',
'<h2>CREATE TABLE Statement</h2>\n<h3>The SQL CREATE TABLE Statement</h3>\nThe CREATE TABLE statement is used to create a new table in a database.\n<h3>Syntax</h3>\nCREATE TABLE <em>table_name </em> ( <em>    column1 datatype</em> , <em>    column2 datatype</em> , <em>    column3 datatype</em> ,  \n....);\nThe column parameters specify the names of the columns of the table.\nThe datatype parameter specifies the type of data the column can hold (e.g. \nvarchar, integer, date, etc.).\n\n<strong>Tip:</strong> For an overview of the available data types, go to our complete <a href="sql_datatypes.asp">Data Types Reference</a>.\n<h3>SQL CREATE TABLE Example</h3>\nThe following example creates a table called "Persons" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nCREATE TABLE Persons\n(   \nPersonID int,   \nLastName varchar(255),   \nFirstName varchar(255),   \nAddress varchar(255),   \nCity varchar(255) );\nThe PersonID column is of type int and will hold an integer.\nThe LastName, FirstName, Address, and City columns are of\ntype varchar and will hold characters, and the maximum length for these fields is 255 characters.\n\nThe empty "Persons" table will now look like this:\n<table>\n  <tr><th>PersonID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr>\n  <tr><td> </td><td> </td><td> </td><td> </td><td> </td></tr></table>\n<strong>Tip:</strong> The empty "Persons" table can now be filled with data with the \nSQL <a href="sql_insert.asp">INSERT INTO</a> statement.\n<h3>Create Table Using Another Table</h3>\nA copy of an existing table can also be created using CREATE TABLE.\nThe new table gets the same column definitions. \nAll columns or specific columns can be selected.\nIf you create a new table using an existing table, the new table will be filled with the existing values from the old table.\n<h3>Syntax</h3>\nCREATE TABLE <em>new_table_name</em>  AS<br>    \n  SELECT <em>column1, column2,...</em> <br>    FROM <em>\n  existing_table_name</em> <br>    WHERE ....;\nThe following SQL creates a new table called "TestTables" (which is a copy of the "Customers" table): \n  CREATE TABLE TestTable AS<br>SELECT customername, contactname<br>FROM \n  customers; self With Exercises</h3>\n<k>Exercise:</k>\nWrite the correct SQL statement to create a new table called <code">Persons</code>.\n<input name="ex1" maxlength="20" style="width: 212px;"> (\n  PersonID int,\n  LastName varchar(255),\n  FirstName varchar(255),\n  Address varchar(255),\n  City varchar(255) \n);\n\n\n<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer &raquo;</button>\n\n\n',
'<h2>DROP TABLE Statement</h2>\n<h3>The SQL DROP TABLE Statement</h3>\nThe DROP TABLE statement is used to drop an existing table in a database.\n<h3>Syntax</h3>\n  DROP TABLE <em>table_name</em> ;\n<strong>Note</strong><b>:</b> Be careful before dropping a table. \nDeleting a table will result in loss of complete information stored in the table!\n<h3>SQL DROP TABLE Example</h3>\nThe following SQL statement drops the existing table "Shippers":\n  DROP TABLE Shippers;\n<h3>SQL TRUNCATE TABLE</h3>\nThe TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.\n<h3>Syntax</h3>\n  TRUNCATE TABLE <em>table_name</em> ;\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nWrite the correct SQL statement to delete a table called <code">Persons</code>.\n<input name="ex1" maxlength="10" style="width: 107px;"> Persons;\n\n\n<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer &raquo;</button>\n\n\n',
'<h2>ALTER TABLE Statement</h2>\n<h3>SQL ALTER TABLE Statement</h3>\nThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\nThe ALTER TABLE statement is also used to add and drop various constraints on an existing table.\n<h3>ALTER TABLE - ADD Column</h3>\nTo add a column in a table, use the following syntax:\nALTER TABLE <em>table_name</em> ADD <em>column_name datatype</em> ;\nThe following SQL adds an "Email" column to the "Customers" table:\nALTER TABLE Customers<br>ADD Email varchar(255);\n<h3>ALTER TABLE - DROP COLUMN</h3>\nTo delete a column in a table, use the following syntax (notice that some database systems don\'t allow deleting a column):\nALTER TABLE <em>table_name</em> DROP COLUMN <em>column_name</em> ;\nThe following SQL deletes the "Email" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN Email;\n<h3>ALTER TABLE - ALTER/MODIFY COLUMN</h3>\nTo change the data type of a column in a table, use the following syntax:\n\n<b>SQL Server / MS Access:</b>\nALTER TABLE <em>table_name</em> ALTER COLUMN <em>column_name datatype</em> ;\n\n<b>My SQL / Oracle (prior version 10G):</b>\nALTER TABLE <em>table_name</em> MODIFY COLUMN <em>column_name datatype</em> ;\n\n<b>Oracle 10G and later:</b>\nALTER TABLE <em>table_name</em> MODIFY <em>column_name datatype</em> ;\n<h3>SQL ALTER TABLE Example</h3>\nLook at the "Persons" table:\n<table>\n  <tr><th>ID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>Timoteivn 10</td><td>Sandnes</td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>Borgvn 23</td><td>Sandnes</td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>Storgt 20</td><td>Stavanger</td></tr></table>\nNow we want to add a column named "DateOfBirth" in the "Persons" table.\nWe use the following SQL statement:\n\nALTER TABLE PersonsADD DateOfBirth date;\nNotice that the new column, "DateOfBirth", is of type date and is going to hold a date. \nThe data type specifies what type of data the column can hold. \nFor a complete reference of all the data types available in MS Access, MySQL, and SQL Server, go to our complete <a href="sql_datatypes.asp">Data Types reference</a>.\n\nThe "Persons" table will now look like this:\n<table>\n  <tr><th>ID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>DateOfBirth</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>Timoteivn 10</td><td>Sandnes</td><td> </td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>Borgvn 23</td><td>Sandnes</td><td> </td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>Storgt 20</td><td>Stavanger</td><td> </td></tr></table>\n<h3>Change Data Type Example</h3>\nNow we want to change the data type of the column named "DateOfBirth" in the "Persons" table.\nWe use the following SQL statement:\nALTER TABLE Persons ALTER COLUMN DateOfBirth year;\nNotice that the "DateOfBirth" column is now of type year and is going to hold a year in a two- or four-digit format.\n<h3>DROP COLUMN Example</h3>\nNext, we want to delete the column named "DateOfBirth" in the "Persons" table.\nWe use the following SQL statement:\nALTER TABLE PersonsDROP COLUMN DateOfBirth;\nThe "Persons" table will now look like this:\n<table>\n  <tr><th>ID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>Timoteivn 10</td><td>Sandnes</td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>Borgvn 23</td><td>Sandnes</td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>Storgt 20</td><td>Stavanger</td></tr></table>\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nAdd a column of type <code">DATE</code> called <code">Birthday</code>.\n<input name="ex1" maxlength="11" style="width: 117px;"> Persons\n<input name="ex2" maxlength="17" style="width: 180px;">;\n\n\n<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer &raquo;</button>\n\n\n',
'<h2>Constraints</h2>\n<p class="intro">SQL constraints are used to specify rules for data in a table.\n<h3>SQL Create Constraints</h3>\nConstraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.\n<h3>Syntax</h3>\nCREATE TABLE <em>table_name </em> ( <em>    column1 datatype</em>  <em>constraint</em> , <em>    column2 datatype</em>  <em>constraint</em> , <em>    column3 datatype</em>  <em>constraint</em> ,   \n....);\n<h3>SQL Constraints</h3>\nSQL constraints are used to specify rules for the data in a table.\nConstraints are used to limit the type of data that can go into a table. \nThis ensures the accuracy and reliability of the data in the table. \nIf there is any violation between the constraint and the data action, the action is aborted.\nConstraints can be column level or table level. \nColumn level constraints apply to a column, and table level constraints apply to the whole table.\nThe following constraints are commonly used in SQL:\n<ul>\n  <li><strong><a href="sql_notnull.asp">NOT NULL</a></strong> - Ensures that a column cannot have a NULL value</li>\n  <li><strong><a href="sql_unique.asp">UNIQUE</a></strong> - Ensures that all values in a column are different</li>\n  <li><strong><a href="sql_primarykey.asp">PRIMARY KEY</a></strong> - A combination of a NOT NULL and UNIQUE. \n\n  Uniquely identifies each row in a table</li>\n  <li><strong><a href="sql_foreignkey.asp">FOREIGN KEY</a></strong> - Uniquely identifies a row/record in another table</li>\n  <li><strong><a href="sql_check.asp">CHECK</a></strong> - Ensures that all values in a column satisfies a specific condition</li>\n  <li><strong><a href="sql_default.asp">DEFAULT</a></strong> - Sets a default value for a column when no value is specified</li>\n  <li><strong><a href="sql_create_index.asp">INDEX</a></strong> - Used to create and retrieve data from the database very quickly</li>\n</ul>\n\n',
'<h2>NOT NULL Constraint</h2>\n<h3>SQL NOT NULL Constraint</h3>\nBy default, a column can hold NULL values.\nThe NOT NULL constraint enforces a column to NOT accept NULL values.\nThis enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.\n<h3>SQL NOT NULL on CREATE TABLE</h3>\nThe following SQL ensures that the "ID", "LastName", and \n"FirstName" columns will NOT accept NULL values when the "Persons" table is created:\n  CREATE TABLE Persons (<br>    ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255) \n  NOT NULL, Age int); \n<h3>SQL NOT NULL on ALTER TABLE</h3>\nTo create a NOT NULL constraint on the "Age" column when the "Persons" table is already created, use the following SQL:\nALTER TABLE Persons MODIFY Age int NOT NULL;\n',
'<h2>UNIQUE Constraint</h2>\n<h3>SQL UNIQUE Constraint</h3>\nThe UNIQUE constraint ensures that all values in a column are different.\nBoth the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.\nA PRIMARY KEY constraint automatically has a UNIQUE constraint.\nHowever, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.\n<h3>SQL UNIQUE Constraint on CREATE TABLE</h3>\nThe following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:\n\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL UNIQUE,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nUNIQUE (ID));\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\n\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCONSTRAINT UC_Person UNIQUE (ID,LastName));\n<h3>SQL UNIQUE Constraint on ALTER TABLE</h3>\nTo create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD UNIQUE (ID);\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT UC_Person UNIQUE (ID,LastName);\n<h3>DROP a UNIQUE Constraint</h3>\nTo drop a UNIQUE constraint, use the following SQL:\n\n<b>MySQL:</b>\nALTER TABLE PersonsDROP INDEX UC_Person;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT UC_Person;\n\n',
'<h2>PRIMARY KEY Constraint</h2>\n<h3>SQL PRIMARY KEY Constraint</h3>\nThe PRIMARY KEY constraint uniquely identifies each record in a table.\nPrimary keys must contain UNIQUE values, and cannot contain NULL values.\nA table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).\n<h3>SQL PRIMARY KEY on CREATE TABLE</h3>\nThe following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nPRIMARY KEY (ID));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL PRIMARY KEY,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCONSTRAINT PK_Person PRIMARY KEY (ID,LastName));\n<b>Note:</b> In the example above there is only ONE PRIMARY KEY (PK_Person). \n\nHowever, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).\n\n\n<h3>SQL PRIMARY KEY on ALTER TABLE</h3>\nTo create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD PRIMARY KEY (ID);\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);\n<b>Note:</b> If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must\nalready have been declared to not contain NULL values (when the table was first created).\n<h3>DROP a PRIMARY KEY Constraint</h3>\nTo drop a PRIMARY KEY constraint, use the following SQL:\n\n<b>MySQL:</b>\nALTER TABLE PersonsDROP PRIMARY KEY;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT PK_Person;\n',
'<h2>FOREIGN KEY Constraint</h2>\n<h3>SQL FOREIGN KEY Constraint</h3>\nA FOREIGN KEY is a key used to link two tables together.\nA FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.\nThe table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.\nLook at the following two tables:\n"Persons" table:\n<table>\n  <tr><th>PersonID</th><th>LastName</th><th>FirstName</th><th>Age</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>30</td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>23</td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>20</td></tr></table>\n"Orders" table:\n<table style="width:50%">\n  <tr><th>OrderID</th><th>OrderNumber</th><th>PersonID</th></tr>\n  <tr><td>1</td><td>77895</td><td>3</td></tr>\n  <tr><td>2</td><td>44678</td><td>3</td></tr>\n  <tr><td>3</td><td>22456</td><td>2</td></tr>\n  <tr><td>4</td><td>24562</td><td>1</td></tr></table>\nNotice that the "PersonID" column in the "Orders" table points to the "PersonID" column in the "Persons" table.\nThe "PersonID" column in the "Persons" table is the PRIMARY KEY in the "Persons" table.\nThe "PersonID" column in the "Orders" table is a FOREIGN KEY in the "Orders" table.\nThe FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.\nThe FOREIGN KEY constraint also prevents invalid data from being inserted into the foreign key column,\nbecause it has to be one of the values contained in the table it points to.\n<h3>SQL FOREIGN KEY on CREATE TABLE</h3>\nThe following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:\n\n<b>MySQL:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL,   \nOrderNumber int NOT NULL,   \nPersonID int,   \nPRIMARY KEY (OrderID),   \nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL PRIMARY KEY,   \nOrderNumber int NOT NULL,   \nPersonID int FOREIGN KEY REFERENCES Persons(PersonID));\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL,   \nOrderNumber int NOT NULL,   \nPersonID int,   \nPRIMARY KEY (OrderID),   \nCONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)   \nREFERENCES Persons(PersonID));\n<h3>SQL FOREIGN KEY on ALTER TABLE</h3>\nTo create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersADD FOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID);\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersADD CONSTRAINT FK_PersonOrderFOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID);\n<h3>DROP a FOREIGN KEY Constraint</h3>\nTo drop a FOREIGN KEY constraint, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE OrdersDROP FOREIGN KEY FK_PersonOrder;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersDROP CONSTRAINT FK_PersonOrder;\n',
'<h2>CHECK Constraint</h2>\n<h3>SQL CHECK Constraint</h3>\nThe CHECK constraint is used to limit the value range that can be placed in a column.\nIf you define a CHECK constraint on a single column it allows only certain values for this column.\nIf you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.\n<h3>SQL CHECK on CREATE TABLE</h3>\nThe following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created.\nThe CHECK constraint ensures that you can not have any person below 18 years:\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCHECK (Age&gt;=18));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int CHECK (Age&gt;=18));\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCity varchar(255),   \nCONSTRAINT CHK_Person CHECK (Age&gt;=18 AND City=\'Sandnes\'));\n<h3>SQL CHECK on ALTER TABLE</h3>\nTo create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CHECK (Age&gt;=18);\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT CHK_PersonAge CHECK (Age&gt;=18 AND City=\'Sandnes\');\n<h3>DROP a CHECK Constraint</h3>\nTo drop a CHECK constraint, use the following SQL:\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT CHK_PersonAge;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP CHECK CHK_PersonAge;\n',
'<h2>DEFAULT Constraint</h2>\n<h3>SQL DEFAULT Constraint</h3>\nThe DEFAULT constraint is used to provide a default value for a column.\nThe default value will be added to all new records IF no other value is specified.\n<h3>SQL DEFAULT on CREATE TABLE</h3>\nThe following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created:\n\n<b>My SQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCity varchar(255) DEFAULT \'Sandnes\');\nThe DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():\nCREATE TABLE Orders\n(    ID int NOT NULL,   \nOrderNumber int NOT NULL,   \nOrderDate date DEFAULT GETDATE());\n<h3>SQL DEFAULT on ALTER TABLE</h3>\nTo create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE PersonsALTER City SET DEFAULT \'Sandnes\';\n<b>SQL Server:</b>\nALTER TABLE Persons<br>ADD CONSTRAINT df_City <br>DEFAULT \'Sandnes\' FOR City;\n<b>MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City SET DEFAULT \'Sandnes\';\n<b>Oracle:</b>\nALTER TABLE PersonsMODIFY City DEFAULT \'Sandnes\';\n<h3>DROP a DEFAULT Constraint</h3>\nTo drop a DEFAULT constraint, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE PersonsALTER City DROP DEFAULT;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City DROP DEFAULT;\n\n',
'<h2>CREATE INDEX Statement</h2>\n<h3>SQL CREATE INDEX Statement</h3>\nThe CREATE INDEX statement is used to create indexes in tables.\nIndexes are used to retrieve data from the database more quickly than otherwise. \nThe users cannot see the indexes, they are just used to speed up searches/queries.\n\n<strong>Note:</strong> Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).\nSo, only create indexes on columns that will be frequently searched against.\n<h3>CREATE INDEX Syntax</h3>\nCreates an index on a table. \nDuplicate values are allowed:\nCREATE INDEX <em>index_name</em> ON <em>table_name</em>  (<em>column1</em> , <em>column2</em> , ...);\n<h3>CREATE UNIQUE INDEX Syntax</h3>\nCreates a unique index on a table. \nDuplicate values are not allowed:\nCREATE UNIQUE INDEX <em>index_name</em> ON <em>table_name</em>  (<em>column1</em> , <em>column2</em> , ...);<b>Note:</b> The syntax for creating indexes varies among different databases. \nTherefore: Check the syntax for creating indexes in your database.\n<h3>CREATE INDEX Example</h3>\nThe SQL statement below creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:\nCREATE INDEX idx_lastnameON Persons (LastName);\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nCREATE INDEX idx_pnameON Persons (LastName, FirstName);\n<h3>DROP INDEX Statement</h3>\nThe DROP INDEX statement is used to delete an index in a table.\n\n<strong>MS Access:</strong>\nDROP INDEX <em>index_name</em>  ON <em>table_name</em> ;\n<strong>SQL Server:</strong>\nDROP INDEX <em>table_name</em> .<em>index_name</em> ;\n<strong>DB2/Oracle:</strong>\nDROP INDEX <em>index_name</em> ;\n<strong>MySQL:</strong>\nALTER TABLE <em>table_name<br></em> DROP INDEX <em>index_name</em> ;\n',
'<h2>AUTO INCREMENT Field</h2>\n<h3>AUTO INCREMENT Field</h3>\nAuto-increment allows a unique number to be generated automatically when a new record is inserted into a table.\nOften this is the primary key field that we would like to be created automatically every time a new record is inserted.\n<h3>Syntax for MySQL</h3>\nThe following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:\nCREATE TABLE Persons\n(    \n  Personid int NOT NULL AUTO_INCREMENT,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),    Age int,   \nPRIMARY KEY (Personid));\nMySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.\nBy default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.\nTo let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:\n\nALTER TABLE Persons AUTO_INCREMENT=100;\nTo insert a new record into the "Persons" table, we will NOT have to specify a value for the "Personid"\ncolumn (a unique value will be added automatically):\n\nINSERT INTO Persons (FirstName,LastName)VALUES (\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \nThe \n"Personid" column would be assigned a unique value. \nThe "FirstName" column would be set to \n"Lars" and the "LastName" column would be set to "Monsen".\n<h3>Syntax for SQL Server</h3>\nThe following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:\n\nCREATE TABLE Persons\n(    \n  Personid int IDENTITY(1,1) PRIMARY KEY,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\nThe MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature. \n\nIn the example above, the starting value for IDENTITY is 1, and it will increment by 1 for each new record.\n<strong>Tip:</strong> To specify that the "Personid" column should start at value 10 and increment by 5, change it to IDENTITY(10,5).\nTo insert a new record into the "Persons" table, we will NOT have to specify a value for the "Personid" column (a unique value will be added automatically):\n\nINSERT INTO Persons (FirstName,LastName)VALUES (\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \nThe \n"Personid" column would be assigned a unique value. \nThe "FirstName" column would be set to \n"Lars" and the "LastName" column would be set to "Monsen".\n<h3>Syntax for Access</h3>\nThe following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:\n\nCREATE TABLE Persons\n(    \n  Personid AUTOINCREMENT PRIMARY KEY,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\nThe MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature. \n\nBy default, the starting value for AUTOINCREMENT is 1, and it will increment by 1 for each new record.\n<strong>Tip:</strong> To specify that the "Personid" column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5).\nTo insert a new record into the "Persons" table, we will NOT have to specify a value for the "Personid" column (a unique value will be added automatically):\n\nINSERT INTO Persons (FirstName,LastName)VALUES (\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \nThe \n"Personid" column would be assigned a unique value. \nThe "FirstName" column would be set to \n"Lars" and the "LastName" column would be set to "Monsen".\n<h3>Syntax for Oracle</h3>\nIn Oracle the code is a little bit more tricky.\nYou will have to create an auto-increment field with the sequence object (this object generates a number sequence).\nUse the following CREATE SEQUENCE syntax:\n\nCREATE SEQUENCE seq_personMINVALUE 1START WITH 1INCREMENT BY 1CACHE 10; \nThe code above creates a sequence object called seq_person, that starts with 1 and will increment by 1.\nIt will also cache up to 10 values for performance. \nThe cache option specifies how many sequence values will be stored in memory for faster access.\nTo insert a new record into the "Persons" table, we will have to use the nextval function (this function retrieves the next value from seq_person sequence):\n\nINSERT INTO Persons (Personid,FirstName,LastName)VALUES (seq_person.nextval,\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \nThe "Personid" column would be assigned the next number from the seq_person sequence. \nThe "FirstName" column would be set to "Lars" and the "LastName" column would be set to "Monsen".\n',
'<h2>Working With Dates</h2>\n<h3>SQL Dates</h3>\n\nThe most difficult part when working with dates is to be sure that the format of the date you are trying to insert,\nmatches the format of the date column in the database.\n\nAs long as your data contains only the date portion, your queries will work as expected. \nHowever, if a time portion is involved, it gets more complicated.\n<h3>SQL Date Data Types</h3>\n<b>MySQL</b> comes with the following data types for storing a date or a date/time value in the database:\n<ul>\n  <li>DATE - format YYYY-MM-DD</li>\n  <li>DATETIME - format: YYYY-MM-DD HH:MI:SS</li>\n  <li>TIMESTAMP - format: YYYY-MM-DD HH:MI:SS</li>\n  <li>YEAR - format YYYY or YY</li>\n</ul>\n<b>SQL Server</b> comes with the following data types for storing a date or a date/time value in the database:\n<ul>\n  <li>DATE - format YYYY-MM-DD</li>\n  <li>DATETIME - format: YYYY-MM-DD HH:MI:SS</li>\n  <li>SMALLDATETIME - format: YYYY-MM-DD HH:MI:SS</li>\n  <li>TIMESTAMP - format: a unique number</li>\n</ul>\n<b>Note:</b> The date types are chosen for a column when you create a new table in your database!\n<h3>SQL Working with Dates</h3>\nYou can compare two dates easily if there is no time component involved!\n\nAssume we have the following "Orders" table:\n<table>\n<tr>\n<th style="width:20%">OrderId</th>\n<th style="width:45%">ProductName</th>\n<th>OrderDate</th></tr>\n<tr>\n<td>1</td>\n<td>Geitost</td>\n<td>2008-11-11</td></tr>\n<tr>\n<td>2</td>\n<td>Camembert Pierrot</td>\n<td>2008-11-09</td></tr>\n<tr>\n<td>3</td>\n<td>Mozzarella di Giovanni</td>\n<td>2008-11-11</td></tr>\n<tr>\n<td>4</td>\n<td>Mascarpone Fabioli</td>\n<td>2008-10-29</td></tr></table>\n\nNow we want to select the records with an OrderDate of "2008-11-11" from the table above.\nWe use the following SELECT statement:\n<div class="w3-code w3-border notranslate sqlHigh"><div>\nSELECT * FROM Orders WHERE OrderDate=\'2008-11-11\'\nThe result-set will look like this:\n<table>\n<tr>\n<th style="width:20%">OrderId</th>\n<th style="width:45%">ProductName</th>\n<th>OrderDate</th></tr>\n<tr>\n<td>1</td>\n<td>Geitost</td>\n<td>2008-11-11</td></tr>\n<tr>\n<td>3</td>\n<td>Mozzarella di Giovanni</td>\n<td>2008-11-11</td></tr></table>\n\nNow, assume that the "Orders" table looks like this (notice the time component in the "OrderDate" column):\n<table>\n<tr>\n<th style="width:20%">OrderId</th>\n<th style="width:45%">ProductName</th>\n<th>OrderDate</th></tr>\n<tr>\n<td>1</td>\n<td>Geitost</td>\n<td>2008-11-11 13:23:44</td></tr>\n<tr>\n<td>2</td>\n<td>Camembert Pierrot</td>\n<td>2008-11-09 15:45:21</td></tr>\n<tr>\n<td>3</td>\n<td>Mozzarella di Giovanni</td>\n<td>2008-11-11 11:12:01</td></tr>\n<tr>\n<td>4</td>\n<td>Mascarpone Fabioli</td>\n<td>2008-10-29 14:56:59</td></tr></table>\n\nIf we use the same SELECT statement as above:\n<div class="w3-code w3-border notranslate sqlHigh"><div>\nSELECT * FROM Orders WHERE OrderDate=\'2008-11-11\'we will get no result! This is because the query is looking only for dates with no time portion.\n<b>Tip:</b> To keep your queries simple and easy to maintain, do not allow time components in your dates!\n\n',
'<h2>Views</h2>\n<h3>SQL CREATE VIEW Statement</h3>\nIn SQL, a view is a virtual table based on the result-set of an SQL statement.\nA view contains rows and columns, just like a real table. \nThe fields in a view are fields from one or more real tables in the database.\nYou can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were coming from one single table.\n<h3>CREATE VIEW Syntax</h3>\nCREATE VIEW <em>view_name</em>  ASSELECT <em>column1</em> , <em>column2</em> , ...FROM <em>table_name</em> WHERE <em>condition</em> ;\n<b>Note:</b> A view always shows up-to-date data! The database engine recreates the data, using the view\'s SQL statement, every time a user queries a view.\n<h3>SQL CREATE VIEW Examples</h3>\nThe following SQL creates a view that shows all customers from Brazil:\nCREATE VIEW [Brazil \n  Customers] ASSELECT \n  CustomerName, ContactNameFROM CustomersWHERE \n  Country = "Brazil";\n\nWe can query the view above as follows:\nSELECT * FROM [Brazil \n  Customers];self &raquo;</a>\n\nThe following SQL creates a view that selects every product in the "Products" table with a price higher than the average price:\nCREATE VIEW [Products Above Average Price] ASSELECT ProductName, PriceFROM ProductsWHERE Price &gt; (SELECT AVG(Price) FROM Products);\n\nWe can query the view above as follows:\nSELECT * FROM [Products Above Average Price];\n<h3>SQL Updating a View</h3>\nA view can be updated with the CREATE OR REPLACE VIEW command.\n<h3>SQL CREATE OR REPLACE VIEW Syntax</h3>\nCREATE OR REPLACE VIEW <em>view_name</em>  ASSELECT <em>column1</em> , <em>column2</em> , ...FROM <em>table_name</em> WHERE <em>condition</em> ;\nThe following SQL adds the "City" column to the "Brazil Customers" view:\nCREATE OR REPLACE VIEW [Brazil Customers] ASSELECT CustomerName, ContactName, CityFROM CustomersWHERE Country = "Brazil";\n<h3>SQL Dropping a View</h3>\nA view is deleted with the DROP VIEW command.\n<h3>SQL DROP VIEW Syntax</h3>\nDROP VIEW <em>view_name</em> ;\nThe following SQL drops the "Brazil Customers" view:\nDROP VIEW [Brazil Customers];\n\n',
'<h2>Injection</h2>\n<h3>SQL Injection</h3>\nSQL injection is a code injection technique that might destroy your database.\nSQL injection is one of the most common web hacking techniques.\nSQL injection is the placement of malicious code in SQL statements, via web page input.\n<h3>SQL in Web Pages</h3>\nSQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will <strong>unknowingly</strong> run on your database.\nLook at the following example which creates a SELECT statement by adding a variable \n(txtUserId) to a select string. \nThe variable is fetched from user input \n(getRequestString):\n<div class="w3-code notranslate">\n txtUserId = getRequestString("UserId");<br>txtSQL = "SELECT *\nFROM Users WHERE UserId = " + txtUserId;The rest of this chapter describes the potential dangers of using user input in SQL statements.\n<h3>SQL Injection Based on 1=1 is Always True</h3>\nLook at the example above again. \nThe original purpose of the code was to create an SQL statement to select a user, with a given user id.\nIf there is nothing to prevent a user from entering "wrong" input, the user can enter some "smart" input like this:\nUserId: <input type="text" name="UserId" value="105 OR 1=1">\n\nThen, the SQL statement will look like this:\nSELECT * FROM Users WHERE UserId = 105 OR 1=1;\nThe SQL above is valid and will return ALL rows from the "Users" table, since <strong>\nOR 1=1</strong> is always TRUE.\nDoes the example above look dangerous? What if the "Users" table contains names and passwords?\nThe SQL statement above is much the same as this:\nSELECT UserId, Name, Password\nFROM Users WHERE UserId = 105 or 1=1;A hacker might get access to all the user names and passwords in a database, by simply inserting \n105 OR 1=1 into the input field.\n<h3>SQL Injection Based on "=" is Always True</h3>\nHere is an example of a user login on a web site:\nUsername:<input style="padding:4px" type="text" name="uName" value="John Doe">\nPassword:<input style="padding:4px" type="text" name="uPass" value="myPass">\n<div class="w3-code notranslate">\nuName = getRequestString("username");<br>uPass = getRequestString("userpassword");<br>sql = \'SELECT * FROM Users WHERE Name ="\' + uName + \'" AND Pass ="\' + uPass + \n \'"\'\n<h3>Result</h3>\nSELECT * FROM Users WHERE Name ="John Doe" AND Pass ="myPass"\n\nA hacker might get access to user names and passwords in a database by simply inserting " OR "=" into the user name or password text box:\n\nUser Name:<input style="padding:4px" type="text" name="uName" value=\'" or ""="\'>\nPassword:<input style="padding:4px" type="text" name="uPass" value=\'" or ""="\'>\nThe code at the server will create a valid SQL statement like this:\n<h3>Result</h3>\nSELECT * FROM Users WHERE Name =" or "=" AND Pass =" or "="The SQL above is valid and will return all rows from the "Users" table, since <strong>OR "="</strong> is always TRUE.\n<h3>SQL Injection Based on Batched SQL Statements </h3>\nMost databases support batched SQL statement.\nA batch of SQL statements is a group of two or more SQL statements, separated by semicolons.\nThe SQL statement below will return all rows from the "Users" table, then delete the \n"Suppliers" table.\nSELECT * FROM Users; DROP TABLE Suppliers\nLook at the following example: \n<div class="w3-code notranslate">\ntxtUserId = getRequestString("UserId");<br>txtSQL = "SELECT *\nFROM Users WHERE UserId = " + txtUserId;\nAnd the following input:\nUser id: <input type="text" style="width:250px"name="UserId" value="105; DROP TABLE Suppliers">\nThe valid SQL statement would look like this:\n<h3>Result</h3>\nSELECT * FROM Users WHERE \nUserId = 105; DROP TABLE Suppliers;\n<h3>Use SQL Parameters for Protection</h3>\nTo protect a web site from SQL injection, you can use SQL parameters.\nSQL parameters are values that are added to an SQL query at execution time, in a controlled manner.\n<h3>ASP.NET Razor Example</h3>\n<div class="w3-code notranslate">\ntxtUserId = getRequestString("UserId");<br>txtSQL = "SELECT *\nFROM Users WHERE UserId = @0";<br>db.Execute(txtSQL,txtUserId);Note that parameters are represented in the SQL statement by a @ marker.\nThe SQL engine checks each parameter to ensure that it is correct for its column\nand are treated literally, and not as part of the SQL to be executed.\n<h3>Another Example</h3>\n<div class="w3-code notranslate">\n txtNam = getRequestString("CustomerName");<br>txtAdd = getRequestString("Address");<br>txtCit = getRequestString("City"); txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";<br>db.Execute(txtSQL,txtNam,txtAdd,txtCit);\n<h3>Examples</h3>\nThe following examples shows how to build parameterized queries in some common web languages.\nSELECT STATEMENT IN ASP.NET:\n<div class="w3-code notranslate">\n txtUserId = getRequestString("UserId"); sql = "SELECT * FROM Customers WHERE CustomerId = @0";<br>command = new SqlCommand(sql);<br>command.Parameters.AddWithValue("@0",txtUserID); command.ExecuteReader();INSERT INTO STATEMENT IN ASP.NET:\n<div class="w3-code notranslate">\n txtNam = getRequestString("CustomerName");<br>txtAdd = getRequestString("Address");<br>txtCit = getRequestString("City"); txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";<br>command = new SqlCommand(txtSQL); command.Parameters.AddWithValue("@0",txtNam); command.Parameters.AddWithValue("@1",txtAdd); command.Parameters.AddWithValue("@2",txtCit);<br>command.ExecuteNonQuery();\nINSERT INTO STATEMENT IN PHP:\n<div class="w3-code notranslate">\n $stmt = $dbh-&gt;prepare("INSERT INTO Customers (CustomerName,Address,City)  VALUES (:nam, :add, :cit)");<br>$stmt-&gt;bindParam(\':nam\', $txtNam); $stmt-&gt;bindParam(\':add\', $txtAdd);<br>$stmt-&gt;bindParam(\':cit\', $txtCit); $stmt-&gt;execute();\n',
'<h2>Hosting</h2>\n<h3>SQL Hosting</h3>\nIf you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the \nSQL language.\nIf your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans.\nThe most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access.\n<h3>MS SQL Server</h3>\nMicrosoft\'s SQL Server is a popular database software for  database-driven web sites with high traffic.\nSQL Server is a very powerful, robust and full featured SQL database system.\n<h3>Oracle</h3>\nOracle is also a popular database software for  database-driven web sites with high traffic.\nOracle is a very powerful, robust and full featured SQL database system.\n<h3>MySQL</h3>\nMySQL is also a popular database software for web sites.\n\nMySQL is a very powerful, robust and full featured SQL database system.\n\nMySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions.\n<h3>Access</h3>\nWhen a web site requires only a simple database, Microsoft Access can be a solution.\nAccess is not well suited for very high-traffic, and not as powerful as \nMySQL, SQL Server, or Oracle.\n\n\n',
'<h2></h2>\n',
'<h2>Introduction to SQL</h2>\nSQL is a standard language for accessing and manipulating databases.\n<h3>What is SQL?</h3>\n\nSQL stands for Structured Query Language\nSQL lets you access and manipulate databases\nSQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987\n<h3>What Can SQL do?</h3>\n\nexecute queries against a database\nretrieve data from a database\ninsert records in a database\nupdate records in a database\ndelete records from a database\ncreate new databases\ncreate new tables in a database\ncreate stored procedures in a database\ncreate views in a database\nset permissions on tables, procedures, and views\n<h3>SQL is a Standard - BUT....</h3>\nAlthough SQL is an ANSI/ISO standard, there are different versions of the SQL language.\nHowever, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner.\n\n<b>Note:</b> Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!\n<h3>Using SQL in Your Web Site</h3>\nTo build a web site that shows data from a database, you will need:\n\nAn RDBMS database program (i.e. \nMS Access, SQL Server, MySQL)\nTo use a server-side scripting language, like PHP or ASP\nTo use SQL to get the data you want\nTo use HTML / CSS to style the page\n<h3>RDBMS</h3>\nRDBMS stands for Relational Database Management System.\nRDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.\nThe data in RDBMS is stored in database objects called tables. \n\nA table is a collection of related data entries and it consists of columns and rows.\nLook at the "Customers" table:\nSELECT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nEvery table is broken up into smaller entities called fields. \n\nThe fields in the Customers table consist of CustomerID, CustomerName, ContactName, Address, City, PostalCode and Country. \n\nA field is a column in a table that is designed to maintain specific information about every record in the table.\nA record, also called a row, is each individual entry that exists in a table. \n\n\nFor example, there are 91 records in the above Customers table. \n\nA record is a horizontal entity in a table.\nA column is a vertical entity in a table that contains all information associated with a specific field in a table.\n\n\n',
'<h2>Syntax</h2>\n<h3>Database Tables</h3>\nA database most often contains one or more tables. \n\nEach table is identified by a name (e.g. \n\n"Customers" or "Orders"). \n\nTables contain records (rows) with data.\nIn this tutorial we will use the well-known Northwind sample database \n(included in MS Access and MS SQL Server).\nBelow is a selection from the "Customers" table:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n\nThe table above contains five records (one for each customer) and seven columns \n(CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).\n<h3>Statements</h3>\nMost of the actions you need to perform on a database are done with SQL \nstatements.\nThe following SQL statement selects all the records in the "Customers" table:\n SELECT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nIn this tutorial we will teach you all about the different SQL statements.\n<h3>Keep in Mind That...</h3>\n\nSQL keywords are NOT case sensitive: select is the same as SELECT\n\nIn this tutorial we will write all SQL keywords in upper-case.\n<h3>Semicolon after SQL Statements?</h3>\nSome database systems require a semicolon at the end of each SQL statement.\nSemicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.\nIn this tutorial, we will use semicolon at the end of each SQL statement.\n<h3>Some of The Most Important SQL Commands</h3>\n\n<b>SELECT</b> - extracts data from a database\n<b>UPDATE</b> - updates data in a database\n<b>DELETE</b> - deletes data from a database\n<b>INSERT INTO</b> - inserts new data into a database\n<b>CREATE DATABASE</b> - creates a new database\n<b>ALTER DATABASE</b> - modifies a database\n<b>CREATE TABLE</b> - creates a new table\n<b>ALTER TABLE</b> - modifies a table\n<b>DROP TABLE</b> - deletes a table\n<b>CREATE INDEX</b> - creates an index (search key)\n<b>DROP INDEX</b> - deletes an index\n  \n\n\n',
'<h2>SELECT Statement</h2>\n<h3>The SQL SELECT Statement</h3>\nThe SELECT statement is used to select data from a database.\nThe data returned is stored in a result table, called the result-set.\n<h3>SELECT Syntax</h3>\nSELECT <em>column1</em> ,<em> column2, ...</em> FROM <em>table_name</em> ;Here, column1, column2, ... \n\nare the field names of the table you want to select data from. \n\nIf you want to select all the fields available in the table, use the following syntax:\nSELECT * FROM <em>table_name</em> ;\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>SELECT Column Example</h3>\nThe following SQL statement selects the "CustomerName" and "City" columns from the "Customers" table:\n SELECT CustomerName, City FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_columns" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>SELECT * Example</h3>\nThe following SQL statement selects all the columns from the "Customers" \ntable:\n SELECT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_select1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nInsert the missing statement to get all the columns from the <code">Customers</code> table.\n<input name="ex1" maxlength="6" style="width: 64px;"> * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_select1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>SELECT DISTINCT Statement</h2>\n<h3>The SQL SELECT DISTINCT Statement</h3>\nThe SELECT DISTINCT statement is used to return only distinct \n(different) values.\nInside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.\n<h3>SELECT DISTINCT Syntax</h3>\n SELECT DISTINCT <em>column1</em> ,<em> column2, ...</em>  FROM <em>table_name</em> ;\n\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>SELECT Example Without DISTINCT</h3>\nThe following SQL statement selects ALL (including the duplicates) values from the "Country" column in the "Customers" table:\nSELECT Country FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_no_distinct" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nNow, let us use the DISTINCT keyword with the above SELECT statement and see the result.\n<h3>SELECT DISTINCT Examples</h3>\nThe following SQL statement selects only the DISTINCT values from the "Country" column in the "Customers" table:\nSELECT DISTINCT Country FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement lists the number of different (distinct) customer countries:\n  SELECT COUNT(DISTINCT Country) FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<strong>Note: The example above will not work in Firefox and \nMicrosoft Edge!</strong> Because COUNT(DISTINCT <em>column_name</em> ) is not supported in Microsoft Access databases. \n\nFirefox and Microsoft Edge are using Microsoft Access in our examples.\n\nHere is the workaround for MS Access:\n  SELECT Count(*) AS DistinctCountries<br>FROM (SELECT DISTINCT Country FROM Customers);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_select3" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nSelect all the different values from the <code">Country</code> column in the <code">Customers</code> table.\n<input name="ex1" maxlength="6" style="width: 64px;"> <input name="ex2" maxlength="8" style="width: 85px;"> Country <br class="phonebr">FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_select3">Start the Exercise</a>\n</form>\n\n\n',
'<h2>WHERE Clause</h2>\n<h3>The SQL WHERE Clause</h3>\nThe WHERE clause is used to filter records.\nThe WHERE clause is used to extract only those records that fulfill a specified condition.\n<h3>WHERE Syntax</h3>\nSELECT <em>column1</em> ,<em> column2, ...</em> FROM <em>table_name</em> WHERE <em>condition</em> ;\n<strong>Note:</strong> The WHERE clause is not only used in SELECT statement, it is also used in UPDATE,\nDELETE statement, etc.!\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>WHERE Clause Example</h3>\nThe following SQL statement selects all the customers from the country \n"Mexico", in the "Customers" table:\nSELECT * FROM CustomersWHERE Country=\'Mexico\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where" class="w3-btn w3-margin-bottom">\nTry it Yourself &raquo;</a>\n<h3>Text Fields vs. \n\nNumeric Fields</h3>\nSQL requires single quotes around text values (most database systems will also allow double quotes).\nHowever, numeric fields should not be enclosed in quotes:\n SELECT * FROM Customers WHERE CustomerID=1;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_number" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>Operators in The WHERE Clause</h3>\nThe following operators can be used in the WHERE clause:\n<table>\n  <tr><th style="width:20%">Operator</th><th style="width:70%">Description</th><th style="width:10%">Example</th></tr>\n  <tr><td>=</td><td>Equal</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_equal_to">Try it</a></td></tr>\n  <tr><td>&gt;</td><td>Greater than</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_greater_than">Try it</a></td></tr>\n  <tr><td>&lt;</td><td>Less than</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_less_than">Try it</a></td></tr>\n  <tr><td>&gt;=</td><td>Greater than or equal</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_greater_than2">Try it</a></td></tr>\n  <tr><td>&lt;=</td><td>Less than or equal</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_less_than2">Try it</a></td></tr>\n  <tr><td>&lt;&gt;</td><td>Not equal. \n\n<b>Note:</b> In some versions of SQL this operator may be written as !=</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_not_equal_to">Try it</a></td></tr>\n  <tr><td>BETWEEN</td><td>Between a certain range</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_between">Try it</a></td></tr>\n  <tr><td>LIKE</td><td>Search for a pattern</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_like">Try it</a></td></tr>\n  <tr><td>IN</td><td>To specify multiple possible values for a column</td><td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in">Try it</a></td></tr></table>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_where1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nSelect all records where the <code">City</code> column has the value "Berlin".\nSELECT * FROM Customers\n<input name="ex1" maxlength="5" style="width: 54px;"> <input name="ex2" maxlength="4" style="width: 43px;"> = <input name="ex3" maxlength="8" style="width: 85px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_where1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>AND, OR and NOT Operators</h2>\n<h3>The SQL AND, OR and NOT Operators</h3>\nThe WHERE clause can be combined with AND, OR, and NOT operators.\nThe AND and OR operators are used to filter records based on more than one condition:\n\nThe AND operator displays a record if all the conditions separated by AND \n  are TRUE.\nThe OR operator displays a record if any of the conditions separated by OR is TRUE.\n\nThe NOT operator displays a record if the condition(s) is NOT TRUE.\n<h3>AND Syntax</h3>\nSELECT <em>column1</em> ,<em> column2, ...</em> FROM <em>table_name</em> WHERE <em>condition1</em>  AND <em>condition2</em>  AND <em>condition3 ...</em> ;\n<h3>OR Syntax</h3>\nSELECT <em>column1</em> ,<em> column2, ...</em> FROM <em>table_name</em> WHERE <em>condition1</em>  OR <em>condition2</em>  OR <em>condition3 ...</em> ;\n<h3>NOT Syntax</h3>\nSELECT <em>column1</em> ,<em> column2, ...</em> FROM <em>table_name</em> WHERE NOT <em>condition</em> ;\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>AND Example</h3>\nThe following SQL statement selects all fields from "Customers" where country is "Germany" AND city is "Berlin":\n SELECT * FROM Customers WHERE Country=\'Germany\'\n AND City=\'Berlin\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_and" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>OR Example</h3>\nThe following SQL statement selects all fields from "Customers" where city is "Berlin" OR "München":\n SELECT * FROM Customers WHERE City=\'Berlin\'\n OR City=\'München\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_or" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nThe following SQL statement selects all fields from "Customers" where country is "Germany" OR "Spain":\n SELECT * FROM Customers WHERE Country=\'Germany\'\n OR Country=\'Spain\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_or2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>NOT Example</h3>\nThe following SQL statement selects all fields from "Customers" where country is NOT "Germany":\n SELECT * FROM Customers WHERE \n  NOT Country=\'Germany\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_not" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Combining AND, OR and NOT</h3>\nYou can also combine the AND, OR and NOT operators.\n\nThe following SQL statement selects all fields from "Customers" where country is "Germany" AND city must be "Berlin" \nOR "München" (use parenthesis to form complex expressions):\n SELECT * FROM Customers WHERE Country=\'Germany\'\n AND (City=\'Berlin\' OR City=\'München\');<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_and_or" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all fields from "Customers" where country is \nNOT "Germany" and NOT "USA":\n SELECT * FROM Customers WHERE NOT Country=\'Germany\'\n AND NOT Country=\'USA\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_not_and" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_where4" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nSelect all records where the <code">City</code> column has the value \'Berlin\' and the <code">PostalCode</code> column has the value 12209.\n<input name="ex1" maxlength="6" style="width: 64px;"> * FROM Customers\n<input name="ex2" maxlength="5" style="width: 54px;"> City = \'Berlin\'\n<input name="ex3" maxlength="3" style="width: 33px;"> <input name="ex4" maxlength="10" style="width: 106px;"> = 12209;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_where4">Start the Exercise</a>\n</form>\n\n\n',
'<h2>ORDER BY Keyword</h2>\n<h3>The SQL ORDER BY Keyword</h3>\nThe ORDER BY keyword is used to sort the result-set in ascending or descending order.\nThe ORDER BY keyword sorts the records in ascending order by default. \n\nTo sort the records in descending order, use the DESC keyword.\n<h3>ORDER BY Syntax</h3>\nSELECT <em>column1</em> ,<em> column2, ...</em> FROM <em>table_name</em> ORDER BY <em>column1, column2, ... \n\n</em> ASC|DESC;\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>ORDER BY Example</h3>\nThe following SQL statement selects all customers from the "Customers" table, sorted by the "Country" column:\n SELECT * FROM Customers ORDER BY Country;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_orderby" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>ORDER BY DESC Example</h3>\nThe following SQL statement selects all customers from the "Customers" table, sorted DESCENDING by the "Country" column:\n SELECT * FROM Customers ORDER BY Country DESC;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_orderby_desc" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>ORDER BY Several Columns Example</h3>\nThe following SQL statement selects all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. \n\nThis means that it orders by Country, but if some rows have the same Country, it orders them by \nCustomerName:\n SELECT * FROM Customers ORDER BY Country, CustomerName;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_orderby2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>ORDER BY Several Columns Example 2</h3>\nThe following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:\n SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_orderby3" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_orderby1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nSelect all records from the <code">Customers</code> table, sort the result alphabetically by the column <code">City</code>.\nSELECT * FROM Customers\n<input name="ex1" maxlength="8" style="width: 85px;"> <input name="ex2" maxlength="4" style="width: 43px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_orderby1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>INSERT INTO Statement</h2>\n<h3>The SQL INSERT INTO Statement</h3>\nThe INSERT INTO statement is used to insert new records in a table.\n<h3>INSERT INTO Syntax</h3>\nIt is possible to write the INSERT INTO statement in two ways.\n\nThe first way specifies both the column names and the values to be inserted:\nINSERT INTO <em>table_name</em>  (<em>column1</em> ,<em> column2</em> ,<em> column3</em> , ...)VALUES (<em>value1</em> ,<em> value2</em> ,<em> value3</em> , ...);\nIf you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. \n\nHowever, make sure the order of the values is in the same order as the columns in the table. \n\nThe INSERT INTO syntax would be as follows:\nINSERT INTO <em>table_name</em> VALUES (<em>value1</em> ,<em> value2</em> ,<em> value3</em> , ...);\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>89</td><td>White Clover Markets</td><td>Karl Jablonski</td><td>305 - 14th Ave. \n\nS. \n\nSuite 3B</td><td>Seattle</td><td>98128</td><td>USA</td></tr>\n  <tr><td>90<br><br></td><td>Wilman Kala</td><td>Matti Karttunen</td><td>Keskuskatu 45</td><td>Helsinki</td><td>21240</td><td>Finland</td></tr>\n  <tr><td>91<br><br></td><td>Wolski</td><td>Zbyszek</td><td>ul. \n\nFiltrowa 68</td><td>Walla</td><td>01-012</td><td>Poland</td></tr></table>\n<h3>INSERT INTO Example</h3>\nThe following SQL statement inserts a new record in the "Customers" table:\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)VALUES (\'Cardinal\', \'Tom B. \n\nErichsen\', \'Skagen 21\', \'Stavanger\', \'4006\', \'Norway\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_colname" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe selection from the "Customers" table will now look like this:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>89</td><td>White Clover Markets</td><td>Karl Jablonski</td><td>305 - 14th Ave. \n\nS. \n\nSuite 3B</td><td>Seattle</td><td>98128</td><td>USA</td></tr>\n  <tr><td>90<br><br></td><td>Wilman Kala</td><td>Matti Karttunen</td><td>Keskuskatu 45</td><td>Helsinki</td><td>21240</td><td>Finland</td></tr>\n  <tr><td>91<br><br></td><td>Wolski</td><td>Zbyszek</td><td>ul. \n\nFiltrowa 68</td><td>Walla</td><td>01-012</td><td>Poland</td></tr>\n  <tr><td>92</td><td>Cardinal</td><td>Tom B. \n\nErichsen</td><td>Skagen 21</td><td>Stavanger</td><td>4006</td><td>Norway</td></tr></table>\n\n<strong>Did you notice that we did not insert any number into the CustomerID \nfield?</strong><br>The CustomerID column is an <a href="sql_autoincrement.asp">auto-increment</a> field and will be generated automatically when a new record is inserted into the table.\n<h3>Insert Data Only in Specified Columns</h3>\nIt is also possible to only insert data in specific columns.\nThe following SQL statement will insert a new record, but only insert data in the "CustomerName", "City", and "Country" columns (CustomerID will be updated automatically):\nINSERT INTO Customers (CustomerName, City, Country)VALUES (\'Cardinal\', \'Stavanger\', \'Norway\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_cols" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe selection from the "Customers" table will now look like this:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>89</td><td>White Clover Markets</td><td>Karl Jablonski</td><td>305 - 14th Ave. \n\nS. \n\nSuite 3B</td><td>Seattle</td><td>98128</td><td>USA</td></tr>\n  <tr><td>90<br><br></td><td>Wilman Kala</td><td>Matti Karttunen</td><td>Keskuskatu 45</td><td>Helsinki</td><td>21240</td><td>Finland</td></tr>\n  <tr><td>91<br><br></td><td>Wolski</td><td>Zbyszek</td><td>ul. \n\nFiltrowa 68</td><td>Walla</td><td>01-012</td><td>Poland</td></tr>\n  <tr><td>92</td><td>Cardinal</td><td>null</td><td>null </td><td>Stavanger</td><td>null</td><td>Norway</td></tr></table>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_insert1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nInsert a new record in the <code">Customers</code> table.\n<input name="ex1" maxlength="11" style="width: 117px;"> Customers <input name="ex2" maxlength="1" style="width: 12px;">\nCustomerName, Address, City, PostalCode,\nCountry<input name="ex3" maxlength="1" style="width: 11px;">\n<input name="ex4" maxlength="6" style="width: 64px;"> <input name="ex5" maxlength="1" style="width: 11px;">\n\'Hekkan Burger\',\n\'Gateveien 15\',\n\'Sandnes\',\n\'4306\',\n\'Norway\'<input name="ex6" maxlength="1" style="width: 12px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_insert1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>NULL Values</h2>\n<h3>What is a NULL Value?</h3>\nA field with a NULL value is a field with no value.\nIf a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. \n\nThen, the field will be saved with a NULL value.\n\n<b>Note:</b> A NULL value is different from a zero value or a field that contains spaces. \n\nA field with a NULL value is one that has been left blank during record creation!\n<h3>How to Test for NULL Values?</h3>\nIt is not possible to test for NULL values with comparison operators, such as \n=, &lt;, or &lt;&gt;.\nWe will have to use the IS NULL and IS NOT NULL operators instead.\n<h3>IS NULL Syntax</h3>\n  SELECT <em>column_names<br></em> FROM <em>table_name</em>   WHERE <em>column_name</em>  IS NULL;\n<h3>IS NOT NULL Syntax</h3>\n  SELECT <em>column_names<br></em> FROM <em>table_name</em>   WHERE <em>column_name</em>  IS NOT NULL;\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>The IS NULL Operator</h3>\nThe IS NULL operator is used to test for empty values (NULL values).\nThe following SQL lists all customers with a NULL value in the "Address" field:\n  SELECT CustomerName, ContactName, Address<br>FROM Customers<br>WHERE Address \n  IS NULL;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_is_null" class="w3-btn w3-margin-bottom">\n  Try it Yourself »</a>\n  <b>Tip:</b> Always use IS NULL to look for NULL values.\n<h3>The IS NOT NULL Operator</h3>\nThe IS NOT NULL operator is used to test for non-empty values (NOT NULL \nvalues).\n\nThe following SQL lists all customers with a value in the "Address" field:\n  SELECT CustomerName, ContactName, Address<br>FROM Customers<br>WHERE Address \n  IS NOT NULL;\n  <a class="w3-btn w3-margin-bottom" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_is_not_null" target="_blank">\n  Try it Yourself »</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_null1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nSelect all records from the <code">Customers</code> where the <code">PostalCode</code> column is empty.\nSELECT * FROM Customers\nWHERE <input name="ex1" maxlength="10" style="width: 107px;"> <input name="ex2" maxlength="2" style="width: 22px;"> <input name="ex3" maxlength="4" style="width: 44px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_null1">Start the \nExercise</a>\n</form>\n\n\n',
'<h2>UPDATE Statement</h2>\n<h3>The SQL UPDATE Statement</h3>\nThe UPDATE statement is used to modify the existing records in a table.\n<h3>UPDATE Syntax</h3>\n UPDATE <em>table_name</em>  SET <em>column1 </em> =<em> value1</em> ,<em> column2 </em> =<em> value2</em> , ... \nWHERE <em>condition</em> ;\n<strong>Note:</strong> Be careful when updating records in a table! Notice the WHERE clause in the \nUPDATE statement.\nThe WHERE clause specifies which record(s) that should be updated. \n\nIf you omit the WHERE clause, all records in the table will be updated!\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>UPDATE Table</h3>\nThe following SQL statement updates the first customer (CustomerID = 1) with a new contact person <em>and</em>  \na new city.\n UPDATE Customers SET ContactName = \'Alfred Schmidt\', City= \'Frankfurt\' WHERE CustomerID = 1;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe selection from the "Customers" table will now look like this:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Alfred Schmidt</td><td>Obere Str. \n\n57</td><td>Frankfurt</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>UPDATE Multiple Records</h3>\nIt is the WHERE clause that determines how many records that will be updated.\nThe following SQL statement will update the contactname to "Juan" for all records where country is "Mexico":\n  UPDATE CustomersSET ContactName=\'Juan\'WHERE Country=\'Mexico\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_3" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe selection from the "Customers" table will now look like this:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Alfred Schmidt</td><td>Obere Str. \n\n57</td><td>Frankfurt</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Juan</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Juan</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>Update Warning!</h3>\nBe careful when updating records. \n\nIf you omit the WHERE clause, ALL records will be updated!\n\n  UPDATE CustomersSET ContactName=\'Juan\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_4" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe selection from the "Customers" table will now look like this:\n\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Juan</td><td>Obere Str. \n\n57</td><td>Frankfurt</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Juan</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Juan</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Juan</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Juan</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_update1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nUpdate the <code">City</code> column of all records in the <code">Customers</code> table.\n<input name="ex1" maxlength="6" style="width: 64px;"> Customers\n<input name="ex2" maxlength="3" style="width: 33px;"> City = \'Oslo\';\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_update1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>DELETE Statement</h2>\n<h3>The SQL DELETE Statement</h3>\nThe DELETE statement is used to delete existing records in a table.\n<h3>DELETE Syntax</h3>\n DELETE FROM <em>table_name </em> WHERE <em>condition</em> ;\n\n<strong>Note:</strong> Be careful when deleting records in a table! Notice the WHERE clause in the \nDELETE statement.\nThe WHERE clause specifies which record(s) should be deleted. \n\nIf you omit the WHERE clause, all records in the table will be deleted!\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>DELETE Example</h3>\n\nThe following SQL statement deletes the customer "Alfreds Futterkiste" from the "Customers" table:\n DELETE FROM Customers\n WHERE CustomerName=\'Alfreds Futterkiste\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_delete" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe "Customers" table will now look like this:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>Delete All Records</h3>\nIt is possible to delete all rows in a table without deleting the table. \n\nThis means that the table structure, attributes, and indexes will be intact:\n\nDELETE FROM <em>table_name</em> ;\n\nThe following SQL statement deletes all rows in the "Customers" table, without deleting the table:\n  DELETE FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_delete_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_delete1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nDelete all the records from the <code">Customers</code> table where the <code">Country</code> value is \'Norway\'.\n<input name="ex1" maxlength="11" style="width: 117px;"> Customers\n<input name="ex2" maxlength="5" style="width: 54px;"> Country = \'Norway\';\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_delete1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>TOP, LIMIT or ROWNUM Clause</h2>\n<h3>The SQL SELECT TOP Clause</h3>\nThe SELECT TOP clause is used to specify the number of records to return.\nThe SELECT TOP clause is useful on large tables with thousands of records. \n\nReturning a large number of records can impact on performance.\n\n<b>Note:</b> Not all database systems support the SELECT TOP clause. \n\nMySQL \nsupports the LIMIT clause to select a limited number of records, while Oracle uses ROWNUM.\n\n<strong>SQL Server / MS Access Syntax:</strong>\nSELECT TOP <em>number</em> |<em>percent</em>  <em>column_name(s)</em> FROM <em>table_name<br></em> WHERE <em>condition</em> ;\n<strong>MySQL Syntax:</strong>\nSELECT <em>column_name(s)</em> FROM <em>table_name<br></em> WHERE <em>condition</em> LIMIT <em>number</em> ;\n<strong>Oracle Syntax:</strong>\nSELECT <em>column_name(s)</em> FROM <em>table_name</em> WHERE ROWNUM &lt;= <em>number</em> ;\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>TOP, LIMIT and ROWNUM Examples</h3>\nThe following SQL statement selects the first three records from the "Customers" table:\n SELECT TOP 3 * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using the LIMIT clause:\n SELECT * FROM Customers<br>LIMIT 3;<a target="_blank" href="trymysql.asp?filename=trysql_select_limit" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using ROWNUM:\nSELECT * FROM Customers<br>WHERE ROWNUM  &lt;= 3;\n<h3>TOP PERCENT Example</h3>\nThe following SQL statement selects the first 50% of the records from the \n"Customers" table:\n SELECT TOP 50 PERCENT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top_percent&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>ADD a WHERE CLAUSE</h3>\nThe following SQL statement selects the first three records from the "Customers" table, where the country is "Germany":\nSELECT TOP 3 * FROM Customers<br>WHERE Country=\'Germany\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top_where&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using the LIMIT clause:\n SELECT * FROM Customers<br>WHERE Country=\'Germany\'<br>LIMIT 3;<a target="_blank" href="trymysql.asp?filename=trysql_select_limit_where" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using ROWNUM:\nSELECT * FROM Customers<br>WHERE Country=\'Germany\' AND ROWNUM  &lt;= 3;\n\n\n',
'<h2>MIN() and MAX()s</h2>\n<h3>The SQL MIN() and MAX() Functions</h3>\nThe MIN() function returns the smallest value of the selected column.\nThe MAX() function returns the largest value of the selected column.\n<h3>MIN() Syntax</h3>\nSELECT MIN(<em>column_name</em> )FROM <em>table_name</em> WHERE <em>condition</em> ;<h3>MAX() Syntax</h3>\nSELECT MAX(<em>column_name</em> )FROM <em>table_name</em> WHERE <em>condition</em> ;\n<h3>Demo Database</h3>\nBelow is a selection from the "Products" table in the Northwind sample database:\n<table>\n  <tr><th>ProductID</th><th>ProductName</th><th>SupplierID</th><th>CategoryID</th><th>Unit</th><th>Price</th></tr>\n  <tr><td>1</td><td>Chais</td><td>1</td><td>1</td><td>10 boxes x 20 bags</td><td>18</td></tr>\n  <tr><td>2</td><td>Chang</td><td>1</td><td>1</td><td>24 - 12 oz bottles</td><td>19</td></tr>\n  <tr><td>3</td><td>Aniseed Syrup</td><td>1</td><td>2</td><td>12 - 550 ml bottles</td><td>10</td></tr>\n  <tr><td>4</td><td>Chef Anton\'s Cajun Seasoning</td><td>2</td><td>2</td><td>48 - 6 oz jars</td><td>22</td></tr>\n  <tr><td>5</td><td>Chef Anton\'s Gumbo Mix</td><td>2</td><td>2</td><td>36 boxes</td><td>21.35</td></tr></table>\n<h3>MIN() Example</h3>\nThe following SQL statement finds the price of the cheapest product:\n  SELECT MIN(Price) AS SmallestPrice<br>FROM Products;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_min" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>MAX() Example</h3>\nThe following SQL statement finds the price of the most expensive product:\n  SELECT MAX(Price) AS LargestPrice<br>FROM Products;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_max" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_functions1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nUse the <code">MIN</code> function to select the record with the smallest value of the <code">Price</code> column.\nSELECT <input name="ex1" maxlength="10" style="width: 106px;">\nFROM Products;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_functions1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>COUNT(), AVG() and SUM()s</h2>\n<h3>The SQL COUNT(), AVG() and SUM() Functions</h3>\nThe COUNT() function returns the number of rows that matches a specified criteria.\nThe AVG() function returns the average value of a numeric column.\nThe SUM() function returns the total sum of a numeric column.\n<h3>COUNT() Syntax</h3>\nSELECT COUNT(<em>column_name</em> )FROM <em>table_name</em> WHERE <em>condition</em> ;\n<h3>AVG() Syntax</h3>\nSELECT AVG(<em>column_name</em> )FROM <em>table_name</em> WHERE <em>condition</em> ;\n<h3>SUM() Syntax</h3>\nSELECT SUM(<em>column_name</em> )FROM <em>table_name</em> WHERE <em>condition</em> ;\n<h3>Demo Database</h3>\nBelow is a selection from the "Products" table in the Northwind sample database:\n<table>\n  <tr><th>ProductID</th><th>ProductName</th><th>SupplierID</th><th>CategoryID</th><th>Unit</th><th>Price</th></tr>\n  <tr><td>1</td><td>Chais</td><td>1</td><td>1</td><td>10 boxes x 20 bags</td><td>18</td></tr>\n  <tr><td>2</td><td>Chang</td><td>1</td><td>1</td><td>24 - 12 oz bottles</td><td>19</td></tr>\n  <tr><td>3</td><td>Aniseed Syrup</td><td>1</td><td>2</td><td>12 - 550 ml bottles</td><td>10</td></tr>\n  <tr><td>4</td><td>Chef Anton\'s Cajun Seasoning</td><td>2</td><td>2</td><td>48 - 6 oz jars</td><td>22</td></tr>\n  <tr><td>5</td><td>Chef Anton\'s Gumbo Mix</td><td>2</td><td>2</td><td>36 boxes</td><td>21.35</td></tr></table>\n<h3>COUNT() Example</h3>\nThe following SQL statement finds the number of products:\n  SELECT COUNT(ProductID)<br>FROM Products;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_count" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<strong>Note:</strong> NULL values are not counted.\n<h3>AVG() Example</h3>\nThe following SQL statement finds the average price of all products:\n  SELECT AVG(Price)<br>FROM Products;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_avg" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<strong>Note:</strong> NULL values are ignored.\n<h3>Demo Database</h3>\nBelow is a selection from the "OrderDetails" table in the Northwind sample database:\n<table>\n  <tr><th>OrderDetailID</th><th>OrderID</th><th>ProductID</th><th>Quantity</th></tr>\n  <tr><td>1</td><td>10248</td><td>11</td><td>12</td></tr>\n  <tr><td>2</td><td>10248</td><td>42</td><td>10</td></tr>\n  <tr><td>3</td><td>10248</td><td>72</td><td>5</td></tr>\n  <tr><td>4</td><td>10249</td><td>14</td><td>9</td></tr>\n  <tr><td>5</td><td>10249</td><td>51</td><td>40</td></tr></table>\n<h3>SUM() Example</h3>\nThe following SQL statement finds the sum of the "Quantity" fields in the "OrderDetails" table:\nSELECT SUM(Quantity)<br>FROM OrderDetails;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_sum" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<strong>Note:</strong> NULL values are ignored.\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_functions3" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nUse the correct function to return the number of records that have the <code">Price</code> value set to 18.\nSELECT <input name="ex1" maxlength="5" style="width: 54px;">(*)\nFROM Products\n<input name="ex2" maxlength="5" style="width: 54px;"> Price = 18;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_functions3">Start the Exercise</a>\n</form>\n\n\n',
'<h2>LIKE Operator</h2>\n<h3>The SQL LIKE Operator</h3>\nThe LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nThere are two wildcards often used in conjunction with the LIKE operator:\n\n% - The percent sign represents zero, one, or multiple characters\n_ - The underscore represents a single character\n\n<strong>Note:</strong> MS Access uses an asterisk (*) instead of the percent sign (%), and a question mark (?) instead of the underscore (_).\nThe percent sign and the underscore can also be used in combinations!\n<h3>LIKE Syntax</h3>\nSELECT <em>column1, column2, ...</em> FROM <em>table_name</em> WHERE <em>columnN</em>  LIKE <em>pattern</em> ;\n<strong>Tip:</strong> You can also combine any number of conditions using AND or OR operators.\n\nHere are some examples showing different LIKE operators with \'%\' and \'_\' wildcards:\n<table>\n  <tr><th>LIKE Operator</th><th>Description</th></tr>\n  <tr><td>WHERE CustomerName LIKE \'a%\'</td><td>Finds any values that start with "a"</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'%a\'</td><td>Finds any values that end with "a"</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'%or%\'</td><td>Finds any values that have "or" in any position</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'_r%\'</td><td>Finds any values that have "r" in the second position</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'a__%\'</td><td>Finds any values that start with "a" and are at least 3 characters in length</td></tr>\n  <tr><td>WHERE ContactName LIKE \'a%o\'</td><td>Finds any values that start with "a" and ends with "o"</td></tr></table>\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>LIKE Examples</h3>\nThe following SQL statement selects all customers with a CustomerName starting with \n"a":\n SELECT * FROM Customers WHERE CustomerName LIKE \'a%\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a CustomerName ending with "a":\n SELECT * FROM Customers WHERE CustomerName LIKE \'%a\'; <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_ending" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a CustomerName that have "or" in any position:\n SELECT * FROM Customers  WHERE CustomerName LIKE \'%or%\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_pattern" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a CustomerName that have "r" in the second position:\n SELECT * FROM Customers  WHERE CustomerName LIKE \'_r%\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_underscore" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\nThe following SQL statement selects all customers with a CustomerName that starts with "a" and are at least 3 characters in length:\n SELECT * FROM Customers  WHERE CustomerName LIKE \'a__%\';  <a class="w3-btn w3-margin-bottom" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_start_least" target="_blank">Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a ContactName that starts with "a" and ends with "o":\n SELECT * FROM Customers  WHERE ContactName LIKE \'a%o\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_start_end" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a CustomerName that does \nNOT start with "a":\n SELECT * FROM Customers  WHERE CustomerName NOT LIKE \'a%\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_not" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_like1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nSelect all records where the value of the <code">City</code> column starts with the letter "a".\nSELECT * FROM Customers\n<input name="ex1" maxlength="20" style="width: 212px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_like1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>Wildcards</h2>\n<h3>Wildcard Characters</h3>\nA wildcard character is used to substitute one or more characters in a string.\nWildcard characters are used with the <a href="sql_like.asp">SQL LIKE</a> \noperator. \n\nThe LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\n<h3>Wildcard Characters in MS Access</h3>\n<table>\n  <tr><th>Symbol</th><th>Description</th><th>Example</th></tr>\n  <tr><td>*</td><td>Represents zero or more characters</td><td>bl* finds bl, black, blue, and blob</td></tr>\n  <tr><td>?</td><td>Represents a single character</td><td>h?t finds hot, hat, and hit</td></tr>\n  <tr><td>[]</td><td>Represents any single character within the brackets</td><td>h[oa]t finds hot and hat, but not hit</td></tr>\n  <tr><td>!</td><td>Represents any character not in the brackets</td><td>h[!oa]t finds hit, but not hot and hat</td></tr>\n  <tr><td>-</td><td>Represents a range of characters</td><td>c[a-b]t finds cat and cbt</td></tr>\n  <tr><td>#</td><td>Represents any single numeric character</td><td>2#5 finds 205, 215, 225, 235, 245, 255, 265, 275, 285, and 295</td></tr></table>\n<h3>Wildcard Characters in SQL Server</h3>\n<table>\n  <tr><th>Symbol</th><th>Description</th><th>Example</th></tr>\n  <tr><td>%</td><td>Represents zero or more characters</td><td>bl% finds bl, black, blue, and blob</td></tr>\n  <tr><td>_</td><td>Represents a single character</td><td>h_t finds hot, hat, and hit</td></tr>\n  <tr><td>[]</td><td>Represents any single character within the brackets</td><td>h[oa]t finds hot and hat, but not hit</td></tr>\n  <tr><td>^</td><td>Represents any character not in the brackets</td><td>h[^oa]t finds hit, but not hot and hat</td></tr>\n  <tr><td>-</td><td>Represents a range of characters</td><td>c[a-b]t finds cat and cbt</td></tr>\n  </table>\n\nAll the wildcards can also be used in combinations!\n\nHere are some examples showing different LIKE operators with \'%\' and \'_\' wildcards:\n<table>\n  <tr><th>LIKE Operator</th><th>Description</th></tr>\n  <tr><td>WHERE CustomerName LIKE \'a%\'</td><td>Finds any values that starts with "a"</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'%a\'</td><td>Finds any values that ends with "a"</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'%or%\'</td><td>Finds any values that have "or" in any position</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'_r%\'</td><td>Finds any values that have "r" in the second position</td></tr>\n  <tr><td>WHERE CustomerName LIKE \'a_%_%\'</td><td>Finds any values that starts with "a" and are at least 3 characters in length</td></tr>\n  <tr><td>WHERE ContactName LIKE \'a%o\'</td><td>Finds any values that starts with "a" and ends with "o"</td></tr></table>\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>Using the % Wildcard</h3>\nThe following SQL statement selects all customers with a City starting with \n"ber":\n SELECT * FROM Customers WHERE City LIKE \'ber%\'; <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_percent" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a City containing the pattern "es": \n  SELECT * FROM Customers WHERE City LIKE \'%es%\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_percent_pattern" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>Using the _ Wildcard</h3>\n\nThe following SQL statement selects all customers with a City starting with any character, followed by "ondon":\n SELECT * FROM Customers WHERE City LIKE \'_ondon\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_underscore" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\nThe following SQL statement selects all customers with a City starting with \n"L", followed by any character, followed by "n", followed by any character, followed by "on":\n SELECT * FROM Customers WHERE City LIKE \'L_n_on\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_underscore2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>Using the [charlist] Wildcard</h3>\n\nThe following SQL statement selects all customers with a City starting with \n"b", "s", or "p":\n SELECT * FROM Customers WHERE City LIKE \'[bsp]%\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_charlist&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a City starting with \n"a", "b", or "c":\n SELECT * FROM Customers WHERE City LIKE \'[a-c]%\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_charlist2&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>Using the [!charlist] Wildcard</h3>\n\nThe two following SQL statements select all customers with a City NOT starting with "b", "s", or "p":\n\n  SELECT * FROM Customers WHERE City LIKE \'[!bsp]%\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_not_charlist&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nOr:\n\n  SELECT * FROM Customers WHERE City NOT LIKE \'[bsp]%\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_not_charlist2&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_wildcards1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nSelect all records where the second letter of the <code">City</code> is an "a".\nSELECT * FROM Customers\nWHERE City LIKE \'<input name="ex1" maxlength="2" style="width: 23px;">%\';\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_wildcards1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>IN Operator</h2>\n<h3>The SQL IN Operator</h3>\nThe IN operator allows you to specify multiple values in a WHERE clause.\nThe IN operator is a shorthand for multiple OR conditions.\n<h3>IN Syntax</h3>\nSELECT <em>column_name(s)</em> FROM <em>table_name</em> WHERE <em>column_name</em>  IN (<em>value1</em> ,<em> value2</em> , ...);or:\nSELECT <em>column_name(s)</em> FROM <em>table_name</em> WHERE <em>column_name</em>  IN (<em>SELECT STATEMENT</em> );\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>IN Operator Examples</h3>\nThe following SQL statement selects all customers that are located in "Germany", "France" and "UK":\n SELECT * FROM Customers  WHERE Country IN (\'Germany\', \'France\', \'UK\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers that are NOT located in "Germany", "France" or "UK":\n SELECT * FROM Customers  WHERE Country NOT IN (\'Germany\', \'France\', \'UK\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in_not" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers that are from the same countries as the suppliers:\n SELECT * FROM Customers  WHERE Country IN (SELECT Country FROM Suppliers);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_in1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nUse the <code">IN</code> operator to select all the records where <code">Country</code> is either "Norway" or "France".\nSELECT * FROM Customers\n<input name="ex1" maxlength="16" style="width: 170px;"> <br class="phonebr"><input name="ex2" maxlength="10" style="width: 106px;"> \'France\'<input name="ex3" maxlength="1" style="width: 11px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_in1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>BETWEEN Operator</h2>\n<h3>The SQL BETWEEN Operator</h3>\nThe BETWEEN operator selects values within a given range. \n\nThe values can be numbers, text, or dates.\nThe BETWEEN operator is inclusive: begin and end values are included. \n<h3>BETWEEN Syntax</h3>\nSELECT <em>column_name(s)</em> FROM <em>table_name</em> WHERE <em>column_name </em> BETWEEN <em>value1</em>  AND <em>value2;</em> \n<h3>Demo Database</h3>\nBelow is a selection from the "Products" table in the Northwind sample database:\n<table>\n  <tr><th>ProductID</th><th>ProductName</th><th>SupplierID</th><th>CategoryID</th><th>Unit</th><th>Price</th></tr>\n  <tr><td>1</td><td>Chais</td><td>1</td><td>1</td><td>10 boxes x 20 bags</td><td>18</td></tr>\n  <tr><td>2</td><td>Chang</td><td>1</td><td>1</td><td>24 - 12 oz bottles</td><td>19</td></tr>\n  <tr><td>3</td><td>Aniseed Syrup</td><td>1</td><td>2</td><td>12 - 550 ml bottles</td><td>10</td></tr>\n  <tr><td>4</td><td>Chef Anton\'s Cajun Seasoning</td><td>1</td><td>2</td><td>48 - 6 oz jars</td><td>22</td></tr>\n  <tr><td>5</td><td>Chef Anton\'s Gumbo Mix</td><td>1</td><td>2</td><td>36 boxes</td><td>21.35</td></tr></table>\n<h3>BETWEEN Example</h3>\nThe following SQL statement selects all products with a price BETWEEN 10 and 20:\n SELECT * FROM Products<br>WHERE Price BETWEEN 10 AND 20;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>NOT BETWEEN Example</h3>\nTo display the products outside the range of the previous example, use NOT BETWEEN:\n SELECT * FROM Products<br>WHERE Price NOT BETWEEN 10 AND 20;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_not_between" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>BETWEEN with IN Example</h3>\nThe following SQL statement selects all products with a price BETWEEN 10 and \n20. \n\nIn addition; do not show products with a CategoryID of 1,2, or 3:\n SELECT * FROM Products<br>WHERE Price BETWEEN 10 AND 20<br>AND NOT CategoryID IN (1,2,3);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_in" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>BETWEEN Text Values Example</h3>\nThe following SQL statement selects all products with a ProductName BETWEEN Carnarvon \nTigers and Mozzarella di Giovanni:\n SELECT * FROM Products<br>WHERE ProductName BETWEEN \'Carnarvon Tigers\' AND \'Mozzarella di Giovanni\'<br>ORDER BY ProductName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_text" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nThe following SQL statement selects all products with a ProductName BETWEEN Carnarvon \nTigers and Chef Anton\'s Cajun Seasoning:\n SELECT * FROM Products<br>WHERE ProductName BETWEEN "Carnarvon Tigers" AND \n  "Chef Anton\'s Cajun Seasoning"<br>ORDER BY ProductName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_text2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>NOT BETWEEN Text Values Example</h3>\nThe following SQL statement selects all products with a ProductName NOT BETWEEN Carnarvon \nTigers and Mozzarella di Giovanni:\n SELECT * FROM Products<br>WHERE ProductName NOT BETWEEN \'Carnarvon Tigers\' AND \'Mozzarella di Giovanni\'<br>ORDER BY ProductName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_not_between_text" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Sample Table</h3>\nBelow is a selection from the "Orders" table in the Northwind sample database:\n<table>\n  <tr><th>OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10248</td><td>90</td><td>5</td><td>7/4/1996</td><td>3</td></tr>\n  <tr><td>10249</td><td>81</td><td>6</td><td>7/5/1996</td><td>1</td></tr>\n  <tr><td>10250</td><td>34</td><td>4</td><td>7/8/1996</td><td>2</td></tr>\n  <tr><td>10251</td><td>84</td><td>3</td><td>7/9/1996</td><td>1</td></tr>\n  <tr><td>10252</td><td>76</td><td>4</td><td>7/10/1996</td><td>2</td></tr></table>\n<h3>BETWEEN Dates Example</h3>\nThe following SQL statement selects all orders with an OrderDate BETWEEN \'01-July-1996\' and \n\'31-July-1996\':\n SELECT * FROM Orders<br>WHERE OrderDate BETWEEN #01/07/1996# AND #31/07/1996#;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_date&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nOR:\nSELECT * FROM Orders<br>WHERE OrderDate BETWEEN \'1996-07-01\' AND \'1996-07-31\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_date2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_between1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nUse the <code">BETWEEN</code> operator to select all the records where the value of the <code">Price</code> column is between 10 and 20.\nSELECT * FROM Products\nWHERE Price <br class="phonebr"><input name="ex1" maxlength="17" style="width: 180px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_between1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>Aliases</h2>\n<h3>Aliases</h3>\nSQL aliases are used to give a table, or a column in a table, a temporary name.\nAliases are often used to make column names more readable.\nAn alias only exists for the duration of the query.\n<h3>Alias Column Syntax</h3>\n SELECT <em>column_name</em>  AS <em>alias_name</em>  FROM <em>table_name;</em> \n<h3>Alias Table Syntax</h3>\n SELECT <em>column_name(s)</em>  FROM <em>table_name </em> AS <em>alias_name;</em> \n\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Customers" table:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4</td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr></table>\n\nAnd a selection from the "Orders" table:\n<table>\n  <tr><th>OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10354</td><td>58</td><td>8</td><td>1996-11-14</td><td>3</td></tr>\n  <tr><td>10355</td><td>4</td><td>6</td><td>1996-11-15</td><td>1</td></tr>\n  <tr><td>10356</td><td>86</td><td>6</td><td>1996-11-18</td><td>2</td></tr></table>\n<h3>Alias for Columns Examples</h3>\nThe following SQL statement creates two aliases, one for the CustomerID \ncolumn and one for the CustomerName column:\n SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column0" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement creates two aliases, one for the CustomerName column and one for the ContactName column. \n\n<strong>Note:</strong> It requires double quotation marks or square brackets if the alias name contains spaces:\n SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):\n  SELECT CustomerName, Address + \', \' + PostalCode + \' \' + City + \', \' + Country \n  AS Address FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column2&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> To get the SQL statement above to work in MySQL use the following:\nSELECT CustomerName, CONCAT(Address,\', \',PostalCode,\', \',City,\', \',Country) AS AddressFROM Customers;\n<h3>Alias for Tables Example</h3>\nThe following SQL statement selects all the orders from the customer with \nCustomerID=4 (Around the Horn). \n\nWe use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):\n SELECT o.OrderID, o.OrderDate, c.CustomerName<br>FROM Customers AS c, Orders AS o<br>WHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement is the same as above, but without aliases:\n SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName<br>FROM Customers, Orders<br>WHERE Customers.CustomerName="Around the Horn" AND Customers.CustomerID=Orders.CustomerID;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_no" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nAliases can be useful when:\n\nThere are more than one table involved in a query\nFunctions are used in the query\nColumn names are big or not very readable\nTwo or more columns are combined together\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_alias1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nWhen displaying the <code">Customers</code> table,\nmake an ALIAS of the <code">PostalCode</code> column,\nthe column should be called <code">Pno</code> instead.\nSELECT CustomerName,\nAddress,\nPostalCode <input name="ex1" maxlength="6" style="width: 64px;">\nFROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_alias1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>Joins</h2>\n<h3>JOIN</h3>\nA JOIN clause is used to combine rows from two or more tables, based on a related column between them.\nLet\'s look at a selection from the "Orders" table:\n<table>\n  <tr><th style="width:15%">OrderID</th><th>CustomerID</th><th>OrderDate</th></tr>\n  <tr><td>10308</td><td>2</td><td>1996-09-18</td></tr>\n  <tr><td>10309</td><td>37</td><td>1996-09-19</td></tr>\n  <tr><td>10310</td><td>77</td><td>1996-09-20</td></tr></table>\n\nThen, look at a selection from the "Customers" table:\n<table>\n  <tr><th style="width:15%">CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Country</th></tr>\n  <tr><td>1</td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mexico</td></tr></table>\n\nNotice that the "CustomerID" column in the "Orders" table refers to the \n"CustomerID" in the "Customers" table. \n\nThe relationship between the two tables above is the "CustomerID" column.\nThen, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables:\n SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate<br>FROM Orders<br>INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\nand it will produce something like this:\n<table>\n  <tr><th style="width:15%">OrderID</th><th style="width:70%">CustomerName</th><th style="width:15%">OrderDate</th></tr>\n  <tr><td>10308</td><td>Ana Trujillo Emparedados y helados</td><td>9/18/1996</td></tr>\n  <tr><td>10365</td><td>Antonio Moreno Taquería</td><td>11/27/1996</td></tr>\n  <tr><td>10383</td><td>Around the Horn</td><td>12/16/1996</td></tr>\n  <tr><td>10355</td><td>Around the Horn</td><td>11/15/1996</td></tr>\n  <tr><td>10278</td><td>Berglunds snabbköp</td><td>8/12/1996</td></tr></table>\n<h3>Different Types of SQL JOINs</h3>\nHere are the different types of the JOINs in SQL:\n\n<b>(INNER) JOIN</b>: Returns records that have matching values in both tables\n<b>LEFT (OUTER) JOIN</b>: Returns all records from the left table, and the matched records from the right table\n<b>RIGHT (OUTER) JOIN</b>: Returns all records from the right table, and the matched records from the left table\n<b>FULL (OUTER) JOIN</b>: Returns all records when there is a match in either left or right table\n\n<img alt="SQL INNER JOIN" height="145" src="img_innerjoin.gif" width="200"> \n<img alt="SQL LEFT JOIN" height="145" src="img_leftjoin.gif" width="200"> \n<img alt="SQL RIGHT JOIN" height="145" src="img_rightjoin.gif" width="200"> \n<img alt="SQL FULL OUTER JOIN" height="145" src="img_fulljoin.gif" width="200">\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_join1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nInsert the missing parts in the <code">JOIN</code> clause to join the two tables <code">Orders</code> and <code">Customers</code>,\nusing the <code">CustomerID</code> field in both tables as the relationship between the two tables.\nSELECT *\nFROM Orders\nLEFT JOIN Customers\n<input name="ex1" maxlength="20" style="width: 212px;">=<br class="phonebr"><input name="ex2" maxlength="20" style="width: 212px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_join1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>INNER JOIN Keyword</h2>\n<h3>INNER JOIN Keyword</h3>\nThe INNER JOIN keyword selects records that have matching values in both tables.\n<h3>INNER JOIN Syntax</h3>\nSELECT <em>column_name(s)</em> FROM <em>table1</em> INNER JOIN <em>table2<br> </em> ON <em>table1.column_name </em> =<em> table2.column_name</em> ;\n\n<p style="text-align:center;"><img alt="SQL INNER JOIN" height="145" src="img_innerjoin.gif" width="200">\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Orders" table:\n<table>\n  <tr><th style="width:15%">OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10308</td><td>2</td><td>7</td><td>1996-09-18</td><td>3</td></tr>\n  <tr><td>10309</td><td>37</td><td>3</td><td>1996-09-19</td><td>1</td></tr>\n  <tr><td>10310</td><td>77</td><td>8</td><td>1996-09-20</td><td>2</td></tr></table>\n\nAnd a selection from the "Customers" table:\n<table>\n  <tr><th style="width:15%">CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr></table>\n<h3>INNER JOIN Example</h3>\nThe following SQL statement selects all orders with customer information:\n  SELECT Orders.OrderID, Customers.CustomerName<br>FROM Orders<br>INNER JOIN \n  Customers ON Orders.CustomerID = Customers.CustomerID;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_inner" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. \n\nIf there are records in the \n"Orders" table that do not have matches in "Customers", these orders will not be shown!\n<h3> JOIN Three Tables</h3>\nThe following SQL statement selects all orders with customer and shipper information:\n  SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName<br>FROM \n  ((Orders<br>INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)  INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_inner2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_join2" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nChoose the correct <code">JOIN</code> clause to select all records from the two tables where there is a match in both tables.\nSELECT *\nFROM Orders\n<input name="ex1" maxlength="20" style="width: 212px;">\nON Orders.CustomerID=<br class="phonebr">Customers.CustomerID;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_join2">Start the Exercise</a>\n</form>\n\n\n',
'<h2>LEFT JOIN Keyword</h2>\n<h3>LEFT JOIN Keyword</h3>\nThe LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). \n\nThe result is NULL from the right side, if there is no match.\n<h3>LEFT JOIN Syntax</h3>\nSELECT <em>column_name(s)</em> FROM <em>table1</em> LEFT JOIN <em>table2<br> </em> ON <em>table1.column_name </em> =<em> table2.column_name</em> ;\n<b>Note:</b> In some databases LEFT JOIN is called LEFT OUTER JOIN.\n<p style="text-align:center;"><img alt="SQL LEFT JOIN" height="145" src="img_leftjoin.gif" width="200">\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Customers" table:\n<table>\n  <tr><th style="width:15%">CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr></table>\n\nAnd a selection from the "Orders" table:\n<table>\n  <tr><th style="width:15%">OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10308</td><td>2</td><td>7</td><td>1996-09-18</td><td>3</td></tr>\n  <tr><td>10309</td><td>37</td><td>3</td><td>1996-09-19</td><td>1</td></tr>\n  <tr><td>10310</td><td>77</td><td>8</td><td>1996-09-20</td><td>2</td></tr>\n  </table>\n  \n<h3>LEFT JOIN Example</h3>\nThe following SQL statement will select all customers, and any orders they might have:\n SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders\n ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_left" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<strong>Note:</strong> The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table \n(Orders).\n\n',
'<h2>RIGHT JOIN Keyword</h2>\n<h3>RIGHT JOIN Keyword</h3>\nThe RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). \n\nThe result is NULL from the left side, when there is no match.\n<h3>RIGHT JOIN Syntax</h3>\nSELECT <em>column_name(s)</em> FROM <em>table1</em> RIGHT JOIN <em>table2<br> </em> ON <em>table1.column_name </em> =<em> table2.column_name</em> ;\n<b>Note:</b> In some databases RIGHT JOIN is called RIGHT OUTER JOIN.\n<p style="text-align:center;"><img alt="SQL RIGHT JOIN" height="145" src="img_rightjoin.gif" width="200">\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Orders" table:\n<table>\n  <tr><th style="width:15%">OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10308</td><td>2</td><td>7</td><td>1996-09-18</td><td>3</td></tr>\n  <tr><td>10309</td><td>37</td><td>3</td><td>1996-09-19</td><td>1</td></tr>\n  <tr><td>10310</td><td>77</td><td>8</td><td>1996-09-20</td><td>2</td></tr></table>\n\nAnd a selection from the "Employees" table:\n<table>\n  <tr><th>EmployeeID</th><th>LastName</th><th>FirstName</th><th>BirthDate</th><th>Photo</th></tr>\n  <tr><td>1</td><td>Davolio</td><td>Nancy</td><td>12/8/1968</td><td>EmpID1.pic</td></tr>\n  <tr><td>2</td><td>Fuller</td><td>Andrew</td><td>2/19/1952</td><td>EmpID2.pic</td></tr>\n  <tr><td>3</td><td>Leverling</td><td>Janet</td><td>8/30/1963</td><td>EmpID3.pic</td></tr></table>\n<h3>RIGHT JOIN Example</h3>\nThe following SQL statement will return all employees, and any orders they might have placed:\n SELECT Orders.OrderID, Employees.LastName, Employees.FirstName<br>FROM Orders<br>RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID ORDER BY Orders.OrderID;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_right&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table \n(Orders).\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_join3" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\n\nChoose the correct <code">JOIN</code> clause to select all the records from the <code">Customers</code> table plus all the matches in the <code">Orders</code> table.\nSELECT *\nFROM Orders\n<input name="ex1" maxlength="20" style="width: 212px;">\nON Orders.CustomerID=<br class="phonebr">Customers.CustomerID;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_join3">Start the Exercise</a>\n</form>\n\n\n',
'<h2>FULL OUTER JOIN Keyword</h2>\n<h3>FULL OUTER JOIN Keyword</h3>\nThe FULL OUTER JOIN keyword return all records when there is a match in either left (table1) or right (table2) table records.\n<strong>Note:</strong> FULL OUTER JOIN can potentially return very large result-sets!\n<strong>Tip:</strong> FULL OUTER JOIN and FULL JOIN are the same.\n<h3>FULL OUTER JOIN Syntax</h3>\n SELECT <em>column_name(s)</em>  FROM <em>table1</em>  FULL OUTER JOIN <em>table2<br> </em> ON <em>table1.column_name </em> =<em> table2.column_name<br></em> \n  WHERE <em>condition</em> ;<p style="text-align:center;"><img alt="SQL FULL OUTER JOIN" height="145" src="img_fulljoin.gif" width="200">\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Customers" table:\n<table>\n  <tr><th style="width:15%">CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr></table>\n\nAnd a selection from the "Orders" table:\n<table>\n  <tr><th style="width:15%">OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10308</td><td>2</td><td>7</td><td>1996-09-18</td><td>3</td></tr>\n  <tr><td>10309</td><td>37</td><td>3</td><td>1996-09-19</td><td>1</td></tr>\n  <tr><td>10310</td><td>77</td><td>8</td><td>1996-09-20</td><td>2</td></tr></table>\n<h3>FULL OUTER JOIN Example</h3>\nThe following SQL statement selects all customers, and all orders:\nSELECT Customers.CustomerName, Orders.OrderIDFROM CustomersFULL OUTER JOIN Orders\nON Customers.CustomerID=Orders.CustomerIDORDER BY Customers.CustomerName;\n\nA selection from the result set may look like this:\n<table>\n  <tr><th>CustomerName</th><th>OrderID</th></tr>\n  <tr><td>Alfreds Futterkiste</td><td> </td></tr>\n  <tr><td>Ana Trujillo Emparedados y helados </td><td>10308</td></tr>\n  <tr><td>Antonio Moreno Taquería </td><td>10365</td></tr>\n  <tr><td> </td><td>10382</td></tr>\n  <tr><td> </td><td>10351</td></tr></table>\n<strong>Note:</strong> The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or not. \n\nSo, if there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.\n\n\n',
'<h2>Self JOIN</h2>\n<h3>Self JOIN</h3>\nA self JOIN is a regular join, but the table is joined with itself.\n<h3>Self JOIN Syntax</h3>\nSELECT <em>column_name(s)</em> FROM <em>table1 T1, table1 T2</em>   WHERE <em>condition</em> ;\n<em>T1</em>  and <em>T2</em>  are different table aliases for the same table.\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Customers" table:\n<table>\n  <tr><th style="width:15%">CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr></table>\n<h3>Self JOIN Example</h3>\nThe following SQL statement matches customers that are from the same city:\n  SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2,   A.City<br>FROM Customers A, Customers B<br>WHERE A.CustomerID &lt;&gt; B.CustomerID  AND A.City = B.City <br>ORDER BY A.City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_self" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>UNION Operator</h2>\n<h3>The SQL UNION Operator</h3>\nThe UNION operator is used to combine the result-set of two or more SELECT \nstatements.\n\nEach SELECT statement within UNION must have the same number of columns\nThe columns must also have similar data types\nThe columns in each SELECT statement must also be in the same order\n<h3>UNION Syntax</h3>\n SELECT <em>column_name(s)</em>  FROM <em>table1</em>  UNION SELECT <em>column_name(s)</em>  FROM <em>table2</em> ;\n<h3>UNION ALL Syntax</h3>\n\nThe UNION operator selects only distinct values by default. \n\nTo allow duplicate values, use UNION ALL:\n SELECT <em>column_name(s)</em>  FROM <em>table1</em>  UNION ALL SELECT <em>column_name(s)</em>  FROM <em>table2</em> ;\n<b>Note:</b> The column names in the result-set are usually equal to the column names in the first SELECT statement in the UNION.\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Customers" table:\n<table>\n  <tr><th style="width:15%">CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr></table>\n\nAnd a selection from the "Suppliers" table:\n<table>\n  <tr><th style="width:15%">SupplierID</th><th>SupplierName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1</td><td>Exotic Liquid</td><td>Charlotte Cooper</td><td>49 Gilbert St.</td><td>London</td><td>EC1 4SD</td><td>UK</td></tr>\n  <tr><td>2</td><td>New Orleans Cajun Delights</td><td>Shelley Burke</td><td>P.O. \n\nBox 78934</td><td>New Orleans</td><td>70117</td><td>USA</td></tr>\n  <tr><td>3</td><td>Grandma Kelly\'s Homestead</td><td>Regina Murphy</td><td>707 Oxford Rd.</td><td>Ann Arbor</td><td>48104</td><td>USA</td></tr></table>\n<h3>UNION Example</h3>\nThe following SQL statement returns the cities \n(only distinct values) from both the "Customers" and the "Suppliers" table:\n SELECT City FROM Customers<br>UNION<br>SELECT City FROM Suppliers<br>ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<b>Note:</b> If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. \n\nUse UNION ALL to also select duplicate values!\n<h3>UNION ALL Example</h3>\nThe following SQL statement returns the cities \n(duplicate values also) from both the "Customers" and the "Suppliers" table:\n SELECT City FROM Customers<br>UNION ALL<br>SELECT City FROM Suppliers ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>UNION With WHERE</h3>\nThe following SQL statement returns the German cities \n(only distinct values) from both the "Customers" and the "Suppliers" table:\n SELECT City, Country FROM Customers<br>WHERE Country=\'Germany\'<br>UNION SELECT City, Country FROM Suppliers<br>WHERE Country=\'Germany\'<br>ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>UNION ALL With WHERE</h3>\nThe following SQL statement returns the German cities (duplicate values also) from both the "Customers" and the "Suppliers" table:\n SELECT City, Country FROM Customers<br>WHERE Country=\'Germany\'<br>UNION ALL SELECT City, Country FROM Suppliers<br>WHERE Country=\'Germany\'<br>ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union_all2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>Another UNION Example</h3>\nThe following SQL statement lists all customers and suppliers:\n  SELECT \'Customer\' As Type, ContactName, City, Country<br>FROM Customers  UNION<br>SELECT \'Supplier\', ContactName, City, Country<br>FROM Suppliers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union3" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\nNotice the "AS Type" above - it is an alias. \n\n<a href="sql_alias.asp">SQL \nAliases</a> are used to give a table or a column a temporary name.\nAn alias only exists for the duration of the query. \n\nSo, here we have created a temporary column named "Type", that list whether the contact person is a \n"Customer" or a "Supplier".\n\n',
'<h2>GROUP BY Statement</h2>\n<h3>The SQL GROUP BY Statement</h3>\nThe GROUP BY statement group rows that have the same values into summary rows, like "find the number of customers in each country".\nThe GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.\n<h3>GROUP BY Syntax</h3>\n  SELECT <em>column_name(s)</em>   FROM <em>table_name</em>   WHERE <em>condition</em>   GROUP BY <em>column_name(s)<br></em> ORDER BY <em>column_name(s);\n</em> \n\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>GROUP BY Examples</h3>\nThe following SQL statement lists the number of customers in each country:\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby" class="w3-btn w3-margin-bottom">\n  Try it Yourself »</a>\nThe following SQL statement lists the number of customers in each country, sorted high to low:\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country  ORDER BY COUNT(CustomerID) DESC;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby_orderby" class="w3-btn w3-margin-bottom">\n  Try it Yourself »</a>\n<h3>Demo Database</h3>\nBelow is a selection from the "Orders" table in the Northwind sample database:\n<table>\n  <tr><th>OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10248</td><td>90</td><td>5</td><td>1996-07-04</td><td>3</td></tr>\n<tr><td>10249</td><td>81</td><td>6</td><td>1996-07-05</td><td>1</td></tr>\n  <tr><td>10250</td><td>34</td><td>4</td><td>1996-07-08</td><td>2</td></tr>\n  </table>\n  And a selection from the "Shippers" table:\n<table>\n  <tr><th>ShipperID</th><th>ShipperName</th></tr>\n  <tr><td>1</td><td>Speedy Express</td></tr>\n<tr><td>2</td><td>United Package</td></tr>\n  <tr><td>3</td><td>Federal Shipping</td></tr>\n  </table>\n  \n<h3>GROUP BY With JOIN Example</h3>\nThe following SQL statement lists the number of orders sent by each shipper:\n  SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM \n  Orders<br>LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  GROUP BY ShipperName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby1" class="w3-btn w3-margin-bottom">\n  Try it Yourself »</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_groupby1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nList the number of customers in each country.\nSELECT <input name="ex1" maxlength="5" style="width: 54px;">(CustomerID),\nCountry\nFROM Customers\n<input name="ex2" maxlength="16" style="width: 170px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_groupby1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>HAVING Clause</h2>\n<h3>The SQL HAVING Clause</h3>\nThe HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.\n<h3>HAVING Syntax</h3>\n  SELECT <em>column_name(s)</em>   FROM <em>table_name</em>   WHERE <em>condition</em>   GROUP BY <em>column_name(s)<br></em> HAVING <em>condition<br></em> ORDER BY <em>\n  column_name(s);</em> \n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>HAVING Examples</h3>\nThe following SQL statement lists the number of customers in each country. \n\n\nOnly include countries with more than 5 customers:\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country  HAVING COUNT(CustomerID) &gt; 5;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\nThe following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country<br>HAVING COUNT(CustomerID) \n  &gt; 5  ORDER BY COUNT(CustomerID) DESC;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having_orderby" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>Demo Database</h3>\nBelow is a selection from the "Orders" table in the Northwind sample database:\n<table>\n  <tr><th>OrderID</th><th>CustomerID</th><th>EmployeeID</th><th>OrderDate</th><th>ShipperID</th></tr>\n  <tr><td>10248</td><td>90</td><td>5</td><td>1996-07-04</td><td>3</td></tr>\n<tr><td>10249</td><td>81</td><td>6</td><td>1996-07-05</td><td>1</td></tr>\n  <tr><td>10250</td><td>34</td><td>4</td><td>1996-07-08</td><td>2</td></tr></table>\nAnd a selection from the "Employees" table:\n<table>\n  <tr><th>EmployeeID</th><th>LastName</th><th>FirstName</th><th>BirthDate</th><th>Photo</th><th>Notes</th></tr>\n  <tr><td>1</td><td>Davolio</td><td>Nancy</td><td>1968-12-08</td><td>EmpID1.pic</td><td>Education includes a BA....</td></tr>\n<tr><td>2</td><td>Fuller</td><td>Andrew</td><td>1952-02-19</td><td>EmpID2.pic</td><td>Andrew received his BTS....</td>    </tr>\n  <tr><td>3</td><td>Leverling</td><td>Janet</td><td>1963-08-30</td><td>EmpID3.pic</td><td>Janet has a BS degree....</td></tr></table>\n<h3>More HAVING Examples</h3>\nThe following SQL statement lists the employees that have registered more than 10 orders:\n  SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders<br>FROM \n  (Orders<br>INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)  GROUP BY LastName<br>HAVING COUNT(Orders.OrderID) &gt; 10;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\nThe following SQL statement lists if the employees "Davolio" or "Fuller" have registered more than 25 orders:\n  SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders<br>FROM Orders  INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID  WHERE LastName = \'Davolio\' OR LastName = \'Fuller\'<br>GROUP BY LastName<br>HAVING \n  COUNT(Orders.OrderID) &gt; 25;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having_where" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>EXISTS Operator</h2>\n<h3>The SQL EXISTS Operator</h3>\nThe EXISTS operator is used to test for the existence of any record in a subquery.\nThe EXISTS operator returns true if the subquery returns one or more records.\n<h3>EXISTS Syntax</h3>\n  SELECT <em>column_name(s)</em>   FROM <em>table_name</em>   WHERE \n  EXISTS<br>(SELECT <em>column_name </em> FROM <em>table_name</em>  WHERE\n  <em>condition</em> );\n<h3>Demo Database</h3>\nBelow is a selection from the "Products" table in the Northwind sample database:\n<table>\n  <tr><th>ProductID</th><th>ProductName</th><th>SupplierID</th><th>CategoryID</th><th>Unit</th><th>Price</th></tr>\n  <tr><td>1</td><td>Chais</td><td>1</td><td>1</td><td>10 boxes x 20 bags</td><td>18</td></tr>\n  <tr><td>2</td><td>Chang</td><td>1</td><td>1</td><td>24 - 12 oz bottles</td><td>19</td></tr>\n  <tr><td>3</td><td>Aniseed Syrup</td><td>1</td><td>2</td><td>12 - 550 ml bottles</td><td>10</td></tr>\n  <tr><td>4</td><td>Chef Anton\'s Cajun Seasoning</td><td>2</td><td>2</td><td>48 - 6 oz jars</td><td>22</td></tr>\n  <tr><td>5</td><td>Chef Anton\'s Gumbo Mix</td><td>2</td><td>2</td><td>36 boxes</td><td>21.35</td></tr></table>\n\nAnd a selection from the "Suppliers" table:\n<table>\n  <tr><th>SupplierID</th><th>SupplierName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1</td><td>Exotic Liquid</td><td>Charlotte Cooper</td><td>49 Gilbert St.</td><td>London</td><td>EC1 4SD</td><td>UK</td></tr>\n  <tr><td>2</td><td>New Orleans Cajun Delights</td><td>Shelley Burke</td><td>P.O. \n\nBox 78934</td><td>New Orleans</td><td>70117</td><td>USA</td></tr>\n  <tr><td>3</td><td>Grandma Kelly\'s Homestead</td><td>Regina Murphy</td><td>707 Oxford Rd.</td><td>Ann Arbor</td><td>48104</td><td>USA</td></tr>\n  <tr><td>4</td><td>Tokyo Traders</td><td>Yoshi Nagase</td><td>9-8 Sekimai Musashino-shi</td><td>Tokyo</td><td>100</td><td>Japan</td></tr>\n  </table>\n<h3>EXISTS Examples</h3>\nThe following SQL statement returns TRUE and lists the suppliers with a product price less than 20:\n  SELECT SupplierName<br>FROM Suppliers<br>WHERE EXISTS (SELECT ProductName FROM \n  Products WHERE Products.SupplierID = Suppliers.supplierID AND Price &lt; 20);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_exists" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\nThe following SQL statement returns TRUE and lists the suppliers with a product price equal to 22:\n  SELECT SupplierName<br>FROM Suppliers<br>WHERE EXISTS (SELECT ProductName FROM \n  Products WHERE Products.SupplierID = Suppliers.supplierID AND Price = 22);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_exists2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n\n',
'<h2>ANY and ALL Operators</h2>\n<h3>The SQL ANY and ALL Operators</h3>\nThe ANY and ALL operators are used with a WHERE or HAVING clause.\nThe ANY operator returns true if any of the subquery values meet the condition.\nThe ALL operator returns true if all of the subquery values meet the condition.\n<h3>ANY Syntax</h3>\n  SELECT <em>column_name(s)</em>   FROM <em>table_name</em>   WHERE \n  <em>column_name operator</em>  ANY<br>(SELECT <em>column_name </em> FROM <em>table_name</em>  WHERE\n  <em>condition</em> );\n<h3>ALL Syntax</h3>\n  SELECT <em>column_name(s)</em>   FROM <em>table_name</em>   WHERE \n  <em>column_name operator</em>  ALL<br>(SELECT <em>column_name </em> FROM <em>table_name </em> WHERE <em>condition</em> );  \n<strong>Note:</strong> The <em>operator</em>  must be a standard comparison operator (=, &lt;&gt;, !=, &gt;, &gt;=, &lt;, or &lt;=).\n<h3>Demo Database</h3>\nBelow is a selection from the "Products" table in the Northwind sample database:\n<table>\n  <tr><th>ProductID</th><th>ProductName</th><th>SupplierID</th><th>CategoryID</th><th>Unit</th><th>Price</th></tr>\n  <tr><td>1</td><td>Chais</td><td>1</td><td>1</td><td>10 boxes x 20 bags</td><td>18</td></tr>\n  <tr><td>2</td><td>Chang</td><td>1</td><td>1</td><td>24 - 12 oz bottles</td><td>19</td></tr>\n  <tr><td>3</td><td>Aniseed Syrup</td><td>1</td><td>2</td><td>12 - 550 ml bottles</td><td>10</td></tr>\n  <tr><td>4</td><td>Chef Anton\'s Cajun Seasoning</td><td>2</td><td>2</td><td>48 - 6 oz jars</td><td>22</td></tr>\n  <tr><td>5</td><td>Chef Anton\'s Gumbo Mix</td><td>2</td><td>2</td><td>36 boxes</td><td>21.35</td></tr></table>\n\nAnd a selection from the "OrderDetails" table:\n<table>\n  <tr><th>OrderDetailID</th><th>OrderID</th><th>ProductID</th><th>Quantity</th></tr>\n  <tr><td>1</td><td>10248</td><td>11</td><td>12</td></tr>\n  <tr><td>2</td><td>10248</td><td>42</td><td>10</td></tr>\n  <tr><td>3</td><td>10248</td><td>72</td><td>5</td></tr>\n  <tr><td>4</td><td>10249</td><td>14</td><td>9</td></tr>\n  <tr><td>5</td><td>10249</td><td>51</td><td>40</td></tr></table>\n<h3>ANY Examples</h3>\nThe ANY operator returns TRUE if any of the subquery values meet the condition.\nThe following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table that quantity = 10:\n  SELECT ProductName<br>FROM Products<br>WHERE ProductID = ANY (SELECT \n  ProductID FROM OrderDetails WHERE Quantity = 10);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_any&ss=-1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\nThe following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table that quantity &gt; 99:\n  SELECT ProductName<br>FROM Products<br>WHERE ProductID = ANY (SELECT ProductID \n  FROM OrderDetails WHERE Quantity &gt; 99);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_any2&ss=-1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>ALL Example</h3>\nThe ALL operator returns TRUE if all of the subquery values meet the condition.\nThe following SQL statement returns TRUE and lists the productnames if ALL \nthe records in the OrderDetails table has quantity = 10:\n  SELECT ProductName<br>FROM Products<br>WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all2&ss=-1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n\n',
'<h2>SELECT INTO Statement</h2>\n<h3>The SQL SELECT INTO Statement</h3>\nThe SELECT INTO statement copies data from one table into a new table.\n<h3>SELECT INTO Syntax</h3>\nCopy all columns into a new table:\n\nSELECT *INTO <em>newtable</em>  [IN <em>externaldb</em> ]FROM <em>oldtable<br></em> WHERE <em>condition</em> ;\nCopy only some columns into a new table:\nSELECT <em>column1</em> , <em>column2</em> , <em>column3</em> , ...INTO <em>newtable</em>  [IN <em>externaldb</em> ]<br> \nFROM <em>oldtable<br></em> WHERE <em>condition;</em> \nThe new table will be created with the column-names and types as defined in the old table.\nYou can create new column names using the AS clause.\n<h3>SELECT INTO Examples</h3>\n\nThe following SQL statement creates a backup copy of Customers:\nSELECT * INTO CustomersBackup2017FROM Customers;\nThe following SQL statement uses the IN clause to copy the table into a new table in another database:\nSELECT *\nINTO CustomersBackup2017 IN \'Backup.mdb\'FROM Customers;\nThe following SQL statement copies only a few columns into a new table:\nSELECT CustomerName, ContactName INTO CustomersBackup2017FROM Customers;\nThe following SQL statement copies only the German customers into a new table:\nSELECT *\nINTO CustomersGermanyFROM CustomersWHERE Country = \'Germany\';\nThe following SQL statement copies data from more than one table into a new table:\n SELECT Customers.CustomerName, Orders.OrderID<br>INTO CustomersOrderBackup2017FROM Customers LEFT JOIN Orders\n ON Customers.CustomerID = Orders.CustomerID;\n<strong>Tip:</strong> SELECT INTO can also be used to create a new, empty table using the schema of another. \n\nJust add a WHERE clause that causes the query to return no data:\nSELECT * INTO <em>newtable</em> <br>FROM <em>oldtable</em> <br>WHERE 1 = 0;\n\n',
'<h2>INSERT INTO SELECT Statement</h2>\n<h3>The SQL INSERT INTO SELECT Statement</h3>\nThe INSERT INTO SELECT statement copies data from one table and inserts it into another table.\n\nINSERT INTO SELECT requires that data types in source and target tables match\nThe existing records in the target table are unaffected\n<h3>INSERT INTO SELECT Syntax</h3>\nCopy all columns from one table to another table:\nINSERT INTO <em>table2</em> SELECT * FROM <em>table1<br></em> WHERE <em>condition</em> ;\nCopy only some columns from one table into another table:\nINSERT INTO <em>table2 </em> (<em>column1</em> , <em>column2</em> , <em>column3</em> , ...)SELECT <em>column1</em> , <em>column2</em> , <em>column3</em> , ...<br> FROM <em>table1</em> WHERE <em>condition</em> ;\n<h3>Demo Database</h3>\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the "Customers" table:\n<table>\n  <tr><th style="width:15%">CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr></table>\n\nAnd a selection from the "Suppliers" table:\n<table>\n  <tr><th>SupplierID</th><th>SupplierName</th><th>ContactName</th><th>Address</th><th>City</th><th>Postal Code</th><th>Country</th></tr>\n  <tr><td>1</td><td>Exotic Liquid</td><td>Charlotte Cooper</td><td>49 Gilbert St.</td><td>Londona</td><td>EC1 4SD</td><td>UK</td></tr>\n  <tr><td>2</td><td>New Orleans Cajun Delights</td><td>Shelley Burke</td><td>P.O. \n\nBox 78934</td><td>New Orleans</td><td>70117</td><td>USA</td></tr>\n  <tr><td>3</td><td>Grandma Kelly\'s Homestead</td><td>Regina Murphy</td><td>707 Oxford Rd.</td><td>Ann Arbor</td><td>48104</td><td>USA</td></tr></table>\n<h3>INSERT INTO SELECT Examples</h3>\nThe following SQL statement copies "Suppliers" into "Customers" (the columns that are not filled with data, will contain NULL):\n INSERT INTO Customers (CustomerName,   City, Country) SELECT SupplierName, City, Country FROM Suppliers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement copies "Suppliers" into "Customers" (fill all columns):\n  INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode,   Country)<br>SELECT SupplierName, ContactName, Address, City, PostalCode,   Country FROM Suppliers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement copies only the German suppliers into "Customers":\n INSERT INTO Customers (CustomerName,   City, Country) SELECT SupplierName, City, Country FROM Suppliers<br>WHERE Country=\'Germany\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select_where" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>CASE Statement</h2>\n<h3>The SQL CASE Statement</h3>\nThe CASE statement goes through conditions and returns a value when the first condition is met (like an IF-THEN-ELSE statement). \n\nSo, once a condition is true, it will stop reading and return the result. \n\nIf no conditions are true, it returns the value in the ELSE clause. \n\n\nIf there is no ELSE part and no conditions are true, it returns NULL.\n<h3>CASE Syntax</h3>\n  CASE<br>    WHEN <em>condition1</em>  THEN <em>result1</em> <br>    \n  WHEN <em>condition2</em>  THEN <em>result2</em> <br>    WHEN \n  <em>conditionN</em>  THEN <em>resultN</em> <br>    ELSE <em>result</em> <br>END;\n<h3>Demo Database</h3>\nBelow is a selection from the "OrderDetails" table in the Northwind sample database:\n<table>\n  <tr><th>OrderDetailID</th><th>OrderID</th><th>ProductID</th><th>Quantity</th></tr>\n  <tr><td>1</td><td>10248</td><td>11</td><td>12</td></tr>\n  <tr><td>2</td><td>10248</td><td>42</td><td>10</td></tr>\n  <tr><td>3</td><td>10248</td><td>72</td><td>5</td></tr>\n  <tr><td>4</td><td>10249</td><td>14</td><td>9</td></tr>\n  <tr><td>5</td><td>10249</td><td>51</td><td>40</td></tr></table>\n<h3>CASE Examples</h3>\n\nThe following SQL goes through conditions and returns a value when the first condition is met:\n  SELECT OrderID, Quantity,<br>CASE<br>    WHEN Quantity &gt; 30 \n  THEN "The quantity is greater than 30"<br>    WHEN Quantity = \n  30 THEN "The quantity is 30"<br>    ELSE "The quantity is under 30"<br>END AS QuantityText<br>FROM OrderDetails;<a target="_blank" href="trymysql.asp?filename=trysql_case" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL will order the customers by City. \n\nHowever, if City is NULL, then order by Country:\n  SELECT CustomerName, City, Country<br>FROM Customers<br>ORDER BY<br>(CASE<br>    \n  WHEN City IS NULL THEN Country<br>    ELSE City<br>END);<a target="_blank" href="trymysql.asp?filename=trysql_case2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>NULLs</h2>\n<h3>IFNULL(), ISNULL(), COALESCE(), and NVL() Functions</h3>\nLook at the following "Products" table:\n<table>\n  <tr><th>P_Id</th><th>ProductName</th><th>UnitPrice</th><th>UnitsInStock</th><th>UnitsOnOrder</th></tr>\n  <tr><td>1</td><td>Jarlsberg</td><td>10.45</td><td>16</td><td>15</td></tr>\n  <tr><td>2</td><td>Mascarpone</td><td>32.56</td><td>23</td><td> </td></tr>\n  <tr><td>3</td><td>Gorgonzola</td><td>15.67</td><td>9</td><td>20</td></tr></table>\nSuppose that the "UnitsOnOrder" column is optional, and may contain NULL values.\nLook at the following SELECT statement:\n\nSELECT ProductName, UnitPrice * (UnitsInStock + UnitsOnOrder)FROM Products;\nIn the example above, if any of the "UnitsOnOrder" values are NULL, the result will be NULL.\n<h3>Solutions</h3>\n\n<b>MySQL</b>\nThe MySQL <a href="func_mysql_ifnull.asp">IFNULL()</a> function lets you return an alternative value if an expression is NULL:\nSELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))FROM Products;\nor we can use the <a href="func_mysql_coalesce.asp">COALESCE()</a> function, like this:\nSELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))FROM Products;\n<b>SQL Server</b>\nThe SQL Server <a href="func_sqlserver_isnull.asp">ISNULL()</a> function lets you return an alternative value when an expression is NULL:\nSELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0))FROM Products;\n<b>MS Access</b>\nThe MS Access <a href="func_msaccess_isnull.asp">IsNull()</a> function returns \nTRUE (-1) if the expression is a null value, otherwise FALSE (0):\nSELECT ProductName, UnitPrice * (UnitsInStock + IIF(IsNull(UnitsOnOrder), 0, UnitsOnOrder))FROM Products;\n<b>Oracle</b>\nThe Oracle NVL() function achieves the same result:\nSELECT ProductName, UnitPrice * (UnitsInStock + NVL(UnitsOnOrder, 0))FROM Products;\n\n',
'<h2>Stored Procedures for SQL Server</h2>\n<h3>What is a Stored Procedure?</h3>\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nSo if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.\nYou can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) \nthat is passed.\n<h3>Stored Procedure Syntax</h3>\n  CREATE PROCEDURE <em>procedure_name</em>   AS<br><em>sql_statement</em>   GO;<h3>Execute a Stored Procedure</h3>\n  EXEC <em>procedure_name</em> ;\n<h3>Demo Database</h3>\nBelow is a selection from the "Customers" table in the Northwind sample database:\n<table>\n  <tr><th>CustomerID</th><th>CustomerName</th><th>ContactName</th><th>Address</th><th>City</th><th>PostalCode</th><th>Country</th></tr>\n  <tr><td>1<br><br></td><td>Alfreds Futterkiste</td><td>Maria Anders</td><td>Obere Str. \n\n57</td><td>Berlin</td><td>12209</td><td>Germany</td></tr>\n  <tr><td>2</td><td>Ana Trujillo Emparedados y helados</td><td>Ana Trujillo</td><td>Avda. \n\nde la Constitución 2222</td><td>México D.F.</td><td>05021</td><td>Mexico</td></tr>\n  <tr><td>3</td><td>Antonio Moreno Taquería</td><td>Antonio Moreno</td><td>Mataderos 2312</td><td>México D.F.</td><td>05023</td><td>Mexico</td></tr>\n  <tr><td>4<br><br></td><td>Around the Horn</td><td>Thomas Hardy</td><td>120 Hanover Sq.</td><td>London</td><td>WA1 1DP</td><td>UK</td></tr>\n  <tr><td>5</td><td>Berglunds snabbköp</td><td>Christina Berglund</td><td>Berguvsvägen 8</td><td>Luleå</td><td>S-958 22</td><td>Sweden</td></tr></table>\n<h3>Stored Procedure Example</h3>\nThe following SQL statement creates a stored procedure named "SelectAllCustomers" \nthat selects all records from the "Customers" table:\n  CREATE PROCEDURE SelectAllCustomers<br>AS<br>SELECT * FROM Customers<br>GO;\nExecute the stored procedure above as follows:\n  EXEC SelectAllCustomers;\n<h3>Stored Procedure With One Parameter</h3>\nThe following SQL statement creates a stored procedure  \nthat selects Customers from a particular City from the "Customers" table:\n  CREATE PROCEDURE SelectAllCustomers \n  @City nvarchar(30)<br>AS<br>SELECT * FROM Customers WHERE \n  City = @City<br>GO;\nExecute the stored procedure above as follows:\n  EXEC SelectAllCustomers City = "London";\n<h3>Stored Procedure With Multiple Parameters</h3>\nSetting up multiple parameters is very easy. \n\nJust list each parameter and the data type separated by a comma as shown below.\nThe following SQL statement creates a stored procedure  \nthat selects Customers from a particular City with a particular PostalCode from the "Customers" table:\n  CREATE PROCEDURE SelectAllCustomers \n  @City nvarchar(30), @PostalCode nvarchar(10)<br>AS<br>SELECT * FROM Customers WHERE \n  City = @City AND PostalCode = @PostalCode<br>GO;\nExecute the stored procedure above as follows:\n  EXEC SelectAllCustomers City = "London", PostalCode = "WA1 1DP";\n\n',
'<h2>Comments</h2>\n<h3>Comments</h3>\nComments are used to explain sections of SQL statements, or to prevent execution of SQL statements.\n\n<strong>Note: The examples in this chapter will not work in Firefox and \nMicrosoft Edge!</strong>\nComments are not supported in Microsoft Access databases. \n\nFirefox and Microsoft Edge are using Microsoft Access database in our examples.\n<h3>Single Line Comments</h3>\nSingle line comments start with --.\nAny text between -- and the end of the line will be ignored (will not be executed).\n\nThe following example uses a single-line comment as an explanation:\n--Select all:SELECT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_single_1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following example uses a single-line comment to ignore the end of a line:\nSELECT * FROM Customers -- WHERE City=\'Berlin\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_single_2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following example uses a single-line comment to ignore a statement:\n--SELECT * FROM Customers;SELECT * FROM Products;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_single_3" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>Multi-line Comments</h3>\nMulti-line comments start with /* and end with */.\nAny text between /* and */ will be ignored.\n\nThe following example uses a multi-line comment as an explanation:\n/*Select all the columnsof all the recordsin the Customers table:*/SELECT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_multi_1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following example uses a multi-line comment to ignore many statements:\n/*SELECT * FROM Customers;SELECT * FROM Products;SELECT * FROM Orders;SELECT * FROM Categories;*/SELECT * FROM Suppliers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_multi_2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\nTo ignore just a part of a statement, also use the /* */ comment.\n\nThe following example uses a comment to ignore part of a line:\nSELECT CustomerName, /*City,*/ Country FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_part_1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following example uses a comment to ignore part of a statement:\nSELECT * FROM Customers WHERE (CustomerName LIKE \'L%\'OR CustomerName LIKE \'R%\' /*OR CustomerName LIKE \'S%\'OR CustomerName LIKE \'T%\'*/ OR CustomerName LIKE \'W%\')AND Country=\'USA\'ORDER BY CustomerName;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_part_2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n\n',
'<h2>CREATE DATABASE Statement</h2>\n<h3>The SQL CREATE DATABASE Statement</h3>\nThe CREATE DATABASE statement is used to create a new SQL database.\n<h3>Syntax</h3>\nCREATE DATABASE <em>databasename</em> ;\n<h3>CREATE DATABASE Example</h3>\nThe following SQL statement creates a database called "testDB":\nCREATE DATABASE testDB;\n\n<b>Tip:</b> Make sure you have admin privilege before creating any database. \n\nOnce a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_database1" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nWrite the correct SQL statement to create a new database called <code">testDB</code>.\n<input name="ex1" maxlength="22" style="width: 233px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_database1">Start the Exercise</a>\n</form>\n\n\n',
'<h2>DROP DATABASE Statement</h2>\n<h3>The SQL DROP DATABASE Statement</h3>\nThe DROP DATABASE statement is used to drop an existing SQL database.\n<h3>Syntax</h3>\n  DROP DATABASE <em>databasename</em> ;<strong>Note:</strong> Be careful before dropping a database. \n\nDeleting a database will result in loss of complete information stored in the database!\n<h3>DROP DATABASE Example</h3>\nThe following SQL statement drops the existing database "testDB":\n  DROP DATABASE testDB;\n\n<b>Tip:</b> Make sure you have admin privilege before dropping any database. \n\nOnce a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_database2" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nWrite the correct SQL statement to delete a database named <code">testDB</code>.\n<input name="ex1" maxlength="20" style="width: 212px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_database2">Start the Exercise</a>\n</form>\n\n\n',
'<h2>BACKUP DATABASE for SQL Server</h2>\n<h3>The SQL BACKUP DATABASE Statement</h3>\nThe BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database.\n<h3>Syntax</h3>\nBACKUP DATABASE <em>databasename</em> <br>TO DISK = \'<em>filepath</em> \'; \n<h3>The SQL BACKUP WITH DIFFERENTIAL Statement</h3>\nA differential back up only backs up the parts of the database that have changed since the last full database backup.\n<h3>Syntax</h3>\nBACKUP DATABASE <em>databasename</em> <br>TO DISK = \'<em>filepath</em> \'<br>WITH \n  DIFFERENTIAL;\n<h3>BACKUP DATABASE Example</h3>\nThe following SQL statement creates a full back up of the existing database "testDB" \nto the D disk:\nBACKUP DATABASE testDB<br>TO DISK = \'D:\backups\testDB.bak\';\n<b>Tip:</b> Always back up the database to a different drive than the actual database. \n\nIf you get a disk crash, you will not lose your backup file along with the database.\n<h3>BACKUP WITH DIFFERENTIAL Example</h3>\nThe following SQL statement creates a differential back up of the database "testDB":\nBACKUP DATABASE testDB<br>TO DISK = \'D:\backups\testDB.bak\'<br>WITH \n  DIFFERENTIAL;\n<b>Tip:</b> A differential back up reduces the back up time (since only the changes are backed up).\n\n\n',
'<h2>CREATE TABLE Statement</h2>\n<h3>The SQL CREATE TABLE Statement</h3>\nThe CREATE TABLE statement is used to create a new table in a database.\n<h3>Syntax</h3>\nCREATE TABLE <em>table_name </em> ( <em>    column1 datatype</em> , <em>    column2 datatype</em> , <em>    column3 datatype</em> ,  \n....);\nThe column parameters specify the names of the columns of the table.\nThe datatype parameter specifies the type of data the column can hold (e.g. \n\nvarchar, integer, date, etc.).\n\n<strong>Tip:</strong> For an overview of the available data types, go to our complete <a href="sql_datatypes.asp">Data Types Reference</a>.\n<h3>CREATE TABLE Example</h3>\nThe following example creates a table called "Persons" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nCREATE TABLE Persons\n(   \nPersonID int,   \nLastName varchar(255),   \nFirstName varchar(255),   \nAddress varchar(255),   \nCity varchar(255) );\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nThe PersonID column is of type int and will hold an integer.\nThe LastName, FirstName, Address, and City columns are of\ntype varchar and will hold characters, and the maximum length for these fields is 255 characters.\n\nThe empty "Persons" table will now look like this:\n<table>\n  <tr><th>PersonID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr>\n  <tr><td> </td><td> </td><td> </td><td> </td><td> </td></tr></table>\n<strong>Tip:</strong> The empty "Persons" table can now be filled with data with the \nSQL <a href="sql_insert.asp">INSERT INTO</a> statement.\n<h3>Create Table Using Another Table</h3>\nA copy of an existing table can also be created using CREATE TABLE.\nThe new table gets the same column definitions. \n\nAll columns or specific columns can be selected.\nIf you create a new table using an existing table, the new table will be filled with the existing values from the old table.\n<h3>Syntax</h3>\nCREATE TABLE <em>new_table_name</em>  AS<br>    \n  SELECT <em>column1, column2,...</em> <br>    FROM <em>\n  existing_table_name</em> <br>    WHERE ....;\nThe following SQL creates a new table called "TestTables" (which is a copy of the "Customers" table): \n  CREATE TABLE TestTable AS<br>SELECT customername, contactname<br>FROM \n  customers; <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_database3" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nWrite the correct SQL statement to create a new table called <code">Persons</code>.\n<input name="ex1" maxlength="20" style="width: 212px;"> (\n  PersonID int,\n  LastName varchar(255),\n  FirstName varchar(255),\n  Address varchar(255),\n  City varchar(255) \n);\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_database3">Start the Exercise</a>\n</form>\n\n\n',
'<h2>DROP TABLE Statement</h2>\n<h3>The SQL DROP TABLE Statement</h3>\nThe DROP TABLE statement is used to drop an existing table in a database.\n<h3>Syntax</h3>\n  DROP TABLE <em>table_name</em> ;\n<strong>Note</strong><b>:</b> Be careful before dropping a table. \n\nDeleting a table will result in loss of complete information stored in the table!\n<h3>DROP TABLE Example</h3>\nThe following SQL statement drops the existing table "Shippers":\n  DROP TABLE Shippers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>TRUNCATE TABLE</h3>\nThe TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.\n<h3>Syntax</h3>\n  TRUNCATE TABLE <em>table_name</em> ;\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_database4" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nWrite the correct SQL statement to delete a table called <code">Persons</code>.\n<input name="ex1" maxlength="10" style="width: 107px;"> Persons;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_database4">Start the Exercise</a>\n</form>\n\n\n',
'<h2>ALTER TABLE Statement</h2>\n<h3>ALTER TABLE Statement</h3>\nThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\nThe ALTER TABLE statement is also used to add and drop various constraints on an existing table.\n<h3>ALTER TABLE - ADD Column</h3>\nTo add a column in a table, use the following syntax:\nALTER TABLE <em>table_name</em> ADD <em>column_name datatype</em> ;\nThe following SQL adds an "Email" column to the "Customers" table:\nALTER TABLE Customers<br>ADD Email varchar(255);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>ALTER TABLE - DROP COLUMN</h3>\nTo delete a column in a table, use the following syntax (notice that some database systems don\'t allow deleting a column):\nALTER TABLE <em>table_name</em> DROP COLUMN <em>column_name</em> ;\nThe following SQL deletes the "Email" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN Email;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>ALTER TABLE - ALTER/MODIFY COLUMN</h3>\nTo change the data type of a column in a table, use the following syntax:\n<b>SQL Server / MS Access:</b>\nALTER TABLE <em>table_name</em> ALTER COLUMN <em>column_name datatype</em> ;\n<b>My SQL / Oracle (prior version 10G):</b>\nALTER TABLE <em>table_name</em> MODIFY COLUMN <em>column_name datatype</em> ;\n<b>Oracle 10G and later:</b>\nALTER TABLE <em>table_name</em> MODIFY <em>column_name datatype</em> ;\n<h3>ALTER TABLE Example</h3>\nLook at the "Persons" table:\n<table>\n  <tr><th>ID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>Timoteivn 10</td><td>Sandnes</td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>Borgvn 23</td><td>Sandnes</td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>Storgt 20</td><td>Stavanger</td></tr></table>\nNow we want to add a column named "DateOfBirth" in the "Persons" table.\nWe use the following SQL statement:\n\nALTER TABLE PersonsADD DateOfBirth date;\nNotice that the new column, "DateOfBirth", is of type date and is going to hold a date. \n\nThe data type specifies what type of data the column can hold. \n\nThe "Persons" table will now look like this:\n<table>\n  <tr><th>ID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>DateOfBirth</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>Timoteivn 10</td><td>Sandnes</td><td> </td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>Borgvn 23</td><td>Sandnes</td><td> </td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>Storgt 20</td><td>Stavanger</td><td> </td></tr></table>\n<h3>Change Data Type Example</h3>\nNow we want to change the data type of the column named "DateOfBirth" in the "Persons" table.\nWe use the following SQL statement:\nALTER TABLE PersonsALTER COLUMN DateOfBirth year;\nNotice that the "DateOfBirth" column is now of type year and is going to hold a year in a two- or four-digit format.\n<h3>DROP COLUMN Example</h3>\nNext, we want to delete the column named "DateOfBirth" in the "Persons" table.\nWe use the following SQL statement:\nALTER TABLE Persons DROP COLUMN DateOfBirth;\nThe "Persons" table will now look like this:\n<table>\n  <tr><th>ID</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>Timoteivn 10</td><td>Sandnes</td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>Borgvn 23</td><td>Sandnes</td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>Storgt 20</td><td>Stavanger</td></tr></table>\n\n<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_database6" method="post" target="_blank">\n<h3>Test Yourself With Exercises</h3>\n<k>Exercise:</k>\nAdd a column of type <code">DATE</code> called <code">Birthday</code>.\n<input name="ex1" maxlength="11" style="width: 117px;"> Persons\n<input name="ex2" maxlength="17" style="width: 180px;">;\n<a target="_blank" href="https://www.w3schools.com/sql/exercise.asp?filename=exercise_database6">Start the Exercise</a>\n</form>\n\n\n',
'<h2>Constraints</h2>\n\nSQL constraints are used to specify rules for data in a table.\n<h3>Create Constraints</h3>\nConstraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.\n<h3>Syntax</h3>\nCREATE TABLE <em>table_name </em> ( <em>    column1 datatype</em>  <em>constraint</em> , <em>    column2 datatype</em>  <em>constraint</em> , <em>    column3 datatype</em>  <em>constraint</em> ,   \n....);\n<h3>Constraints</h3>\nSQL constraints are used to specify rules for the data in a table.\nConstraints are used to limit the type of data that can go into a table. \n\nThis ensures the accuracy and reliability of the data in the table. \n\nIf there is any violation between the constraint and the data action, the action is aborted.\nConstraints can be column level or table level. \n\nColumn level constraints apply to a column, and table level constraints apply to the whole table.\nThe following constraints are commonly used in SQL:\n\n<strong><a href="sql_notnull.asp">NOT NULL</a></strong> - Ensures that a column cannot have a NULL value\n<strong><a href="sql_unique.asp">UNIQUE</a></strong> - Ensures that all values in a column are different\n<strong><a href="sql_primarykey.asp">PRIMARY KEY</a></strong> - A combination of a NOT NULL and UNIQUE. \n\n\n  Uniquely identifies each row in a table\n<strong><a href="sql_foreignkey.asp">FOREIGN KEY</a></strong> - Uniquely identifies a row/record in another table\n<strong><a href="sql_check.asp">CHECK</a></strong> - Ensures that all values in a column satisfies a specific condition\n<strong><a href="sql_default.asp">DEFAULT</a></strong> - Sets a default value for a column when no value is specified\n<strong><a href="sql_create_index.asp">INDEX</a></strong> - Used to create and retrieve data from the database very quickly\n\n\n',
'<h2>NOT NULL Constraint</h2>\n<h3>NOT NULL Constraint</h3>\nBy default, a column can hold NULL values.\nThe NOT NULL constraint enforces a column to NOT accept NULL values.\nThis enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.\n<h3>NOT NULL on CREATE TABLE</h3>\nThe following SQL ensures that the "ID", "LastName", and \n"FirstName" columns will NOT accept NULL values when the "Persons" table is created:\n  CREATE TABLE Persons (<br>    ID int NOT NULL,<br>    \n  LastName varchar(255) NOT NULL,<br>    FirstName varchar(255) \n  NOT NULL,<br>    Age int<br>); <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_constraint_not_null" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>NOT NULL on ALTER TABLE</h3>\nTo create a NOT NULL constraint on the "Age" column when the "Persons" table is already created, use the following SQL:\nALTER TABLE PersonsMODIFY Age int NOT NULL;\n\n',
'<h2>UNIQUE Constraint</h2>\n<h3>UNIQUE Constraint</h3>\nThe UNIQUE constraint ensures that all values in a column are different.\nBoth the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.\nA PRIMARY KEY constraint automatically has a UNIQUE constraint.\nHowever, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.\n<h3>UNIQUE Constraint on CREATE TABLE</h3>\nThe following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:\n\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL UNIQUE,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nUNIQUE (ID));\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\n\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCONSTRAINT UC_Person UNIQUE (ID,LastName));\n<h3>UNIQUE Constraint on ALTER TABLE</h3>\nTo create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD UNIQUE (ID);\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT UC_Person UNIQUE (ID,LastName);\n<h3>DROP a UNIQUE Constraint</h3>\nTo drop a UNIQUE constraint, use the following SQL:\n\n<b>MySQL:</b>\nALTER TABLE PersonsDROP INDEX UC_Person;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT UC_Person;\n',
'<h2>PRIMARY KEY Constraint</h2>\n<h3>PRIMARY KEY Constraint</h3>\nThe PRIMARY KEY constraint uniquely identifies each record in a table.\nPrimary keys must contain UNIQUE values, and cannot contain NULL values.\nA table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).\n<h3>PRIMARY KEY on CREATE TABLE</h3>\nThe following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nPRIMARY KEY (ID));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL PRIMARY KEY,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCONSTRAINT PK_Person PRIMARY KEY (ID,LastName));\n<b>Note:</b> In the example above there is only ONE PRIMARY KEY (PK_Person). \n\n\nHowever, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).\n<h3>PRIMARY KEY on ALTER TABLE</h3>\nTo create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD PRIMARY KEY (ID);\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);\n<b>Note:</b> If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must\nalready have been declared to not contain NULL values (when the table was first created).\n<h3>DROP a PRIMARY KEY Constraint</h3>\nTo drop a PRIMARY KEY constraint, use the following SQL:\n\n<b>MySQL:</b>\nALTER TABLE PersonsDROP PRIMARY KEY;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT PK_Person;\n\n',
'<h2>FOREIGN KEY Constraint</h2>\n<h3>FOREIGN KEY Constraint</h3>\nA FOREIGN KEY is a key used to link two tables together.\nA FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.\nThe table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.\nLook at the following two tables:\n"Persons" table:\n<table>\n  <tr><th>PersonID</th><th>LastName</th><th>FirstName</th><th>Age</th></tr>\n  <tr><td>1</td><td>Hansen</td><td>Ola</td><td>30</td></tr>\n  <tr><td>2</td><td>Svendson</td><td>Tove</td><td>23</td></tr>\n  <tr><td>3</td><td>Pettersen</td><td>Kari</td><td>20</td></tr></table>\n"Orders" table:\n<table style="width:50%">\n  <tr><th>OrderID</th><th>OrderNumber</th><th>PersonID</th></tr>\n  <tr><td>1</td><td>77895</td><td>3</td></tr>\n  <tr><td>2</td><td>44678</td><td>3</td></tr>\n  <tr><td>3</td><td>22456</td><td>2</td></tr>\n  <tr><td>4</td><td>24562</td><td>1</td></tr></table>\nNotice that the "PersonID" column in the "Orders" table points to the "PersonID" column in the "Persons" table.\nThe "PersonID" column in the "Persons" table is the PRIMARY KEY in the "Persons" table.\nThe "PersonID" column in the "Orders" table is a FOREIGN KEY in the "Orders" table.\nThe FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.\nThe FOREIGN KEY constraint also prevents invalid data from being inserted into the foreign key column,\nbecause it has to be one of the values contained in the table it points to.\n<h3>FOREIGN KEY on CREATE TABLE</h3>\nThe following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:\n\n<b>MySQL:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL,   \nOrderNumber int NOT NULL,   \nPersonID int,   \nPRIMARY KEY (OrderID),   \nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL PRIMARY KEY,   \nOrderNumber int NOT NULL,   \nPersonID int FOREIGN KEY REFERENCES Persons(PersonID));\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL,   \nOrderNumber int NOT NULL,   \nPersonID int,   \nPRIMARY KEY (OrderID),   \nCONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)   \nREFERENCES Persons(PersonID));\n<h3>FOREIGN KEY on ALTER TABLE</h3>\nTo create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersADD FOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID);\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersADD CONSTRAINT FK_PersonOrderFOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID);\n<h3>DROP a FOREIGN KEY Constraint</h3>\nTo drop a FOREIGN KEY constraint, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE OrdersDROP FOREIGN KEY FK_PersonOrder;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersDROP CONSTRAINT FK_PersonOrder;\n\n',
'<h2>CHECK Constraint</h2>\n<h3>CHECK Constraint</h3>\nThe CHECK constraint is used to limit the value range that can be placed in a column.\nIf you define a CHECK constraint on a single column it allows only certain values for this column.\nIf you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.\n<h3>CHECK on CREATE TABLE</h3>\nThe following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created.\nThe CHECK constraint ensures that you can not have any person below 18 years:\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCHECK (Age&gt;=18));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int CHECK (Age&gt;=18));\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCity varchar(255),   \nCONSTRAINT CHK_Person CHECK (Age&gt;=18 AND City=\'Sandnes\'));\n<h3>CHECK on ALTER TABLE</h3>\nTo create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CHECK (Age&gt;=18);\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT CHK_PersonAge CHECK (Age&gt;=18 AND City=\'Sandnes\');\n<h3>DROP a CHECK Constraint</h3>\nTo drop a CHECK constraint, use the following SQL:\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT CHK_PersonAge;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP CHECK CHK_PersonAge;\n\n',
'<h2>DEFAULT Constraint</h2>\n<h3>DEFAULT Constraint</h3>\nThe DEFAULT constraint is used to provide a default value for a column.\nThe default value will be added to all new records IF no other value is specified.\n<h3>DEFAULT on CREATE TABLE</h3>\nThe following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created:\n\n<b>My SQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCity varchar(255) DEFAULT \'Sandnes\');\nThe DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():\nCREATE TABLE Orders\n(    ID int NOT NULL,   \nOrderNumber int NOT NULL,   \nOrderDate date DEFAULT GETDATE());\n<h3>DEFAULT on ALTER TABLE</h3>\nTo create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE PersonsALTER City SET DEFAULT \'Sandnes\';\n<b>SQL Server:</b>\nALTER TABLE Persons<br>ADD CONSTRAINT df_City <br>DEFAULT \'Sandnes\' FOR City;\n<b>MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City SET DEFAULT \'Sandnes\';\n<b>Oracle:</b>\nALTER TABLE PersonsMODIFY City DEFAULT \'Sandnes\';\n<h3>DROP a DEFAULT Constraint</h3>\nTo drop a DEFAULT constraint, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE PersonsALTER City DROP DEFAULT;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City DROP DEFAULT;\n',
'<h2>CREATE INDEX Statement</h2>\n<h3>CREATE INDEX Statement</h3>\nThe CREATE INDEX statement is used to create indexes in tables.\nIndexes are used to retrieve data from the database very fast. \n\nThe users cannot see the indexes, they are just used to speed up searches/queries.\n\n<strong>Note:</strong> Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).\nSo, only create indexes on columns that will be frequently searched against.\n<h3>CREATE INDEX Syntax</h3>\nCreates an index on a table. \n\nDuplicate values are allowed:\nCREATE INDEX <em>index_name</em> ON <em>table_name</em>  (<em>column1</em> , <em>column2</em> , ...);\n<h3>CREATE UNIQUE INDEX Syntax</h3>\nCreates a unique index on a table. \n\nDuplicate values are not allowed:\nCREATE UNIQUE INDEX <em>index_name</em> ON <em>table_name</em>  (<em>column1</em> , <em>column2</em> , ...);<b>Note:</b> The syntax for creating indexes varies among different databases. \n\nTherefore: Check the syntax for creating indexes in your database.\n<h3>CREATE INDEX Example</h3>\nThe SQL statement below creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:\nCREATE INDEX idx_lastnameON Persons (LastName);\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nCREATE INDEX idx_pnameON Persons (LastName, FirstName);\n<h3>DROP INDEX Statement</h3>\nThe DROP INDEX statement is used to delete an index in a table.\n\n<strong>MS Access:</strong>\nDROP INDEX <em>index_name</em>  ON <em>table_name</em> ;\n<strong>SQL Server:</strong>\nDROP INDEX <em>table_name</em> .<em>index_name</em> ;\n<strong>DB2/Oracle:</strong>\nDROP INDEX <em>index_name</em> ;\n<strong>MySQL:</strong>\nALTER TABLE <em>table_name<br></em> DROP INDEX <em>index_name</em> ;\n\n',
'<h2>AUTO INCREMENT Field</h2>\n<h3>AUTO INCREMENT Field</h3>\nAuto-increment allows a unique number to be generated automatically when a new record is inserted into a table.\nOften this is the primary key field that we would like to be created automatically every time a new record is inserted.\n<h3>Syntax for MySQL</h3>\nThe following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:\nCREATE TABLE Persons\n(    \n  Personid int NOT NULL AUTO_INCREMENT,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),    Age int,   \nPRIMARY KEY (Personid));\nMySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.\nBy default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.\nTo let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:\n\nALTER TABLE Persons AUTO_INCREMENT=100;\nTo insert a new record into the "Persons" table, we will NOT have to specify a value for the "Personid"\ncolumn (a unique value will be added automatically):\n\nINSERT INTO Persons (FirstName,LastName)VALUES (\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \n\nThe \n"Personid" column would be assigned a unique value. \n\nThe "FirstName" column would be set to \n"Lars" and the "LastName" column would be set to "Monsen".\n<h3>Syntax for SQL Server</h3>\nThe following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:\n\nCREATE TABLE Persons\n(    \n  Personid int IDENTITY(1,1) PRIMARY KEY,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\nThe MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature. \n\n\nIn the example above, the starting value for IDENTITY is 1, and it will increment by 1 for each new record.\n<strong>Tip:</strong> To specify that the "Personid" column should start at value 10 and increment by 5, change it to IDENTITY(10,5).\nTo insert a new record into the "Persons" table, we will NOT have to specify a value for the "Personid" column (a unique value will be added automatically):\n\nINSERT INTO Persons (FirstName,LastName)VALUES (\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \n\nThe \n"Personid" column would be assigned a unique value. \n\nThe "FirstName" column would be set to \n"Lars" and the "LastName" column would be set to "Monsen".\n<h3>Syntax for Access</h3>\nThe following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:\n\nCREATE TABLE Persons\n(    \n  Personid AUTOINCREMENT PRIMARY KEY,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\nThe MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature. \n\n\nBy default, the starting value for AUTOINCREMENT is 1, and it will increment by 1 for each new record.\n<strong>Tip:</strong> To specify that the "Personid" column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5).\nTo insert a new record into the "Persons" table, we will NOT have to specify a value for the "Personid" column (a unique value will be added automatically):\n\nINSERT INTO Persons (FirstName,LastName)VALUES (\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \n\nThe \n"Personid" column would be assigned a unique value. \n\nThe "FirstName" column would be set to \n"Lars" and the "LastName" column would be set to "Monsen".\n<h3>Syntax for Oracle</h3>\nIn Oracle the code is a little bit more tricky.\nYou will have to create an auto-increment field with the sequence object (this object generates a number sequence).\nUse the following CREATE SEQUENCE syntax:\n\nCREATE SEQUENCE seq_personMINVALUE 1START WITH 1INCREMENT BY 1CACHE 10; \nThe code above creates a sequence object called seq_person, that starts with 1 and will increment by 1.\nIt will also cache up to 10 values for performance. \n\nThe cache option specifies how many sequence values will be stored in memory for faster access.\nTo insert a new record into the "Persons" table, we will have to use the nextval function (this function retrieves the next value from seq_person sequence):\n\nINSERT INTO Persons (Personid,FirstName,LastName)VALUES (seq_person.nextval,\'Lars\',\'Monsen\');\nThe SQL statement above would insert a new record into the "Persons" table. \n\nThe "Personid" column would be assigned the next number from the seq_person sequence. \n\nThe "FirstName" column would be set to "Lars" and the "LastName" column would be set to "Monsen".\n\n',
'<h2>Working With Dates</h2>\n<h3>Dates</h3>\n\nThe most difficult part when working with dates is to be sure that the format of the date you are trying to insert,\nmatches the format of the date column in the database.\n\nAs long as your data contains only the date portion, your queries will work as expected. \n\nHowever, if a time portion is involved, it gets more complicated.\n<h3>Date Data Types</h3>\n<b>MySQL</b> comes with the following data types for storing a date or a date/time value in the database:\n\nDATE - format YYYY-MM-DD\nDATETIME - format: YYYY-MM-DD HH:MI:SS\nTIMESTAMP - format: YYYY-MM-DD HH:MI:SS\nYEAR - format YYYY or YY\n\n<b>SQL Server</b> comes with the following data types for storing a date or a date/time value in the database:\n\nDATE - format YYYY-MM-DD\nDATETIME - format: YYYY-MM-DD HH:MI:SS\nSMALLDATETIME - format: YYYY-MM-DD HH:MI:SS\nTIMESTAMP - format: a unique number\n\n<b>Note:</b> The date types are chosen for a column when you create a new table in your database!\n<h3>Working with Dates</h3>\nYou can compare two dates easily if there is no time component involved!\n\nAssume we have the following "Orders" table:\n<table>\n<tr>\n<th style="width:20%">OrderId</th>\n<th style="width:45%">ProductName</th>\n<th>OrderDate</th></tr>\n<tr>\n<td>1</td>\n<td>Geitost</td>\n<td>2008-11-11</td></tr>\n<tr>\n<td>2</td>\n<td>Camembert Pierrot</td>\n<td>2008-11-09</td></tr>\n<tr>\n<td>3</td>\n<td>Mozzarella di Giovanni</td>\n<td>2008-11-11</td></tr>\n<tr>\n<td>4</td>\n<td>Mascarpone Fabioli</td>\n<td>2008-10-29</td></tr></table>\n\nNow we want to select the records with an OrderDate of "2008-11-11" from the table above.\nWe use the following SELECT statement:\nSELECT * FROM Orders WHERE OrderDate=\'2008-11-11\'\nThe result-set will look like this:\n<table>\n<tr>\n<th style="width:20%">OrderId</th>\n<th style="width:45%">ProductName</th>\n<th>OrderDate</th></tr>\n<tr>\n<td>1</td>\n<td>Geitost</td>\n<td>2008-11-11</td></tr>\n<tr>\n<td>3</td>\n<td>Mozzarella di Giovanni</td>\n<td>2008-11-11</td></tr></table>\n\nNow, assume that the "Orders" table looks like this (notice the time component in the "OrderDate" column):\n<table>\n<tr>\n<th style="width:20%">OrderId</th>\n<th style="width:45%">ProductName</th>\n<th>OrderDate</th></tr>\n<tr>\n<td>1</td>\n<td>Geitost</td>\n<td>2008-11-11 13:23:44</td></tr>\n<tr>\n<td>2</td>\n<td>Camembert Pierrot</td>\n<td>2008-11-09 15:45:21</td></tr>\n<tr>\n<td>3</td>\n<td>Mozzarella di Giovanni</td>\n<td>2008-11-11 11:12:01</td></tr>\n<tr>\n<td>4</td>\n<td>Mascarpone Fabioli</td>\n<td>2008-10-29 14:56:59</td></tr></table>\n\nIf we use the same SELECT statement as above:\nSELECT * FROM Orders WHERE OrderDate=\'2008-11-11\'we will get no result! This is because the query is looking only for dates with no time portion.\n<b>Tip:</b> To keep your queries simple and easy to maintain, do not allow time components in your dates!\n\n\n',
'<h2>Views</h2>\n<h3>CREATE VIEW Statement</h3>\nIn SQL, a view is a virtual table based on the result-set of an SQL statement.\nA view contains rows and columns, just like a real table. \n\nThe fields in a view are fields from one or more real tables in the database.\nYou can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were coming from one single table.\n<h3>CREATE VIEW Syntax</h3>\nCREATE VIEW <em>view_name</em>  ASSELECT <em>column1</em> , <em>column2</em> , ...FROM <em>table_name</em> WHERE <em>condition</em> ;\n<b>Note:</b> A view always shows up-to-date data! The database engine recreates the data, using the view\'s SQL statement, every time a user queries a view.\n<h3>CREATE VIEW Examples</h3>\nThe following SQL creates a view that shows all customers from Brazil:\nCREATE VIEW [Brazil \n  Customers] ASSELECT \n  CustomerName, ContactNameFROM CustomersWHERE \n  Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\nWe can query the view above as follows:\nSELECT * FROM [Brazil \n  Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\nThe following SQL creates a view that selects every product in the "Products" table with a price higher than the average price:\nCREATE VIEW [Products Above Average Price] ASSELECT ProductName, PriceFROM ProductsWHERE Price &gt; (SELECT AVG(Price) FROM Products);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view3" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\nWe can query the view above as follows:\nSELECT * FROM [Products Above Average Price];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view4" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n<h3>Updating a View</h3>\nA view can be updated with the CREATE OR REPLACE VIEW command.\n<h3>SQL CREATE OR REPLACE VIEW Syntax</h3>\nCREATE OR REPLACE VIEW <em>view_name</em>  ASSELECT <em>column1</em> , <em>column2</em> , ...FROM <em>table_name</em> WHERE <em>condition</em> ;\nThe following SQL adds the "City" column to the "Brazil Customers" view:\nCREATE OR REPLACE VIEW [Brazil Customers] ASSELECT CustomerName, ContactName, CityFROM CustomersWHERE Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view5" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>Dropping a View</h3>\nA view is deleted with the DROP VIEW command.\n<h3>SQL DROP VIEW Syntax</h3>\nDROP VIEW <em>view_name</em> ;\nThe following SQL drops the "Brazil Customers" view:\nDROP VIEW [Brazil Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view6" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n\n',
'<h2>Injection</h2>\n<h3>Injection</h3>\nSQL injection is a code injection technique that might destroy your database.\nSQL injection is one of the most common web hacking techniques.\nSQL injection is the placement of malicious code in SQL statements, via web page input.\n<h3>in Web Pages</h3>\nSQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will <strong>unknowingly</strong> run on your database.\nLook at the following example which creates a SELECT statement by adding a variable \n(txtUserId) to a select string. \n\nThe variable is fetched from user input \n(getRequestString):\n txtUserId = getRequestString("UserId");<br>txtSQL = "SELECT *\nFROM Users WHERE UserId = " + txtUserId;The rest of this chapter describes the potential dangers of using user input in SQL statements.\n<h3>Injection Based on 1=1 is Always True</h3>\nLook at the example above again. \n\nThe original purpose of the code was to create an SQL statement to select a user, with a given user id.\nIf there is nothing to prevent a user from entering "wrong" input, the user can enter some "smart" input like this:\nUserId: <input type="text" name="UserId" value="105 OR 1=1">\n\nThen, the SQL statement will look like this:\nSELECT * FROM Users WHERE UserId = 105 OR 1=1;\nThe SQL above is valid and will return ALL rows from the "Users" table, since <strong>\nOR 1=1</strong> is always TRUE.\nDoes the example above look dangerous? What if the "Users" table contains names and passwords?\nThe SQL statement above is much the same as this:\nSELECT UserId, Name, Password\nFROM Users WHERE UserId = 105 or 1=1;A hacker might get access to all the user names and passwords in a database, by simply inserting \n105 OR 1=1 into the input field.\n<h3>Injection Based on "=" is Always True</h3>\nHere is an example of a user login on a web site:\nUsername:<input style="padding:4px" type="text" name="uName" value="John Doe">\nPassword:<input style="padding:4px" type="text" name="uPass" value="myPass">\nuName = getRequestString("username");<br>uPass = getRequestString("userpassword");<br>sql = \'SELECT * FROM Users WHERE Name ="\' + uName + \'" AND Pass ="\' + uPass + \n \'"\'\n<h3>Result</h3>\nSELECT * FROM Users WHERE Name ="John Doe" AND Pass ="myPass"\n\nA hacker might get access to user names and passwords in a database by simply inserting " OR "=" into the user name or password text box:\n\nUser Name:<input style="padding:4px" type="text" name="uName" value=\'" or ""="\'>\nPassword:<input style="padding:4px" type="text" name="uPass" value=\'" or ""="\'>\n\nThe code at the server will create a valid SQL statement like this:\n<h3>Result</h3>\nSELECT * FROM Users WHERE Name =" or "=" AND Pass =" or "="The SQL above is valid and will return all rows from the "Users" table, since <strong>OR "="</strong> is always TRUE.\n<h3>Injection Based on Batched SQL Statements </h3>\nMost databases support batched SQL statement.\nA batch of SQL statements is a group of two or more SQL statements, separated by semicolons.\nThe SQL statement below will return all rows from the "Users" table, then delete the \n"Suppliers" table.\nSELECT * FROM Users; DROP TABLE Suppliers\nLook at the following example: \ntxtUserId = getRequestString("UserId");<br>txtSQL = "SELECT *\nFROM Users WHERE UserId = " + txtUserId;\nAnd the following input:\nUser id: <input type="text" style="width:250px"name="UserId" value="105; DROP TABLE Suppliers">\nThe valid SQL statement would look like this:\n<h3>Result</h3>\nSELECT * FROM Users WHERE \nUserId = 105; DROP TABLE Suppliers;\n<h3>Use SQL Parameters for Protection</h3>\nTo protect a web site from SQL injection, you can use SQL parameters.\nSQL parameters are values that are added to an SQL query at execution time, in a controlled manner.\n<h3>ASP.NET Razor Example</h3>\ntxtUserId = getRequestString("UserId");<br>txtSQL = "SELECT *\nFROM Users WHERE UserId = @0";<br>db.Execute(txtSQL,txtUserId);Note that parameters are represented in the SQL statement by a @ marker.\nThe SQL engine checks each parameter to ensure that it is correct for its column\nand are treated literally, and not as part of the SQL to be executed.\n<h3>Another Example</h3>\n txtNam = getRequestString("CustomerName");<br>txtAdd = getRequestString("Address");<br>txtCit = getRequestString("City"); txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";<br>db.Execute(txtSQL,txtNam,txtAdd,txtCit);\n<h3>Examples</h3>\nThe following examples shows how to build parameterized queries in some common web languages.\nSELECT STATEMENT IN ASP.NET:\n txtUserId = getRequestString("UserId"); sql = "SELECT * FROM Customers WHERE CustomerId = @0";<br>command = new SqlCommand(sql);<br>command.Parameters.AddWithValue("@0",txtUserID); command.ExecuteReader();INSERT INTO STATEMENT IN ASP.NET:\n txtNam = getRequestString("CustomerName");<br>txtAdd = getRequestString("Address");<br>txtCit = getRequestString("City"); txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";<br>command = new SqlCommand(txtSQL); command.Parameters.AddWithValue("@0",txtNam); command.Parameters.AddWithValue("@1",txtAdd); command.Parameters.AddWithValue("@2",txtCit);<br>command.ExecuteNonQuery();\nINSERT INTO STATEMENT IN PHP:\n $stmt = $dbh-&gt;prepare("INSERT INTO Customers (CustomerName,Address,City)  VALUES (:nam, :add, :cit)");<br>$stmt-&gt;bindParam(\':nam\', $txtNam); $stmt-&gt;bindParam(\':add\', $txtAdd);<br>$stmt-&gt;bindParam(\':cit\', $txtCit); $stmt-&gt;execute();\n\n',
'<h2>Hosting</h2>\n<h3>Hosting</h3>\nIf you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the \nSQL language.\nIf your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans.\nThe most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access.\n<h3>MS SQL Server</h3>\nMicrosoft\'s SQL Server is a popular database software for  database-driven web sites with high traffic.\nSQL Server is a very powerful, robust and full featured SQL database system.\n<h3>Oracle</h3>\nOracle is also a popular database software for  database-driven web sites with high traffic.\nOracle is a very powerful, robust and full featured SQL database system.\n<h3>MySQL</h3>\nMySQL is also a popular database software for web sites.\n\nMySQL is a very powerful, robust and full featured SQL database system.\n\nMySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions.\n<h3>Access</h3>\nWhen a web site requires only a simple database, Microsoft Access can be a solution.\nAccess is not well suited for very high-traffic, and not as powerful as \nMySQL, SQL Server, or Oracle.\n\n\n',
'<h2>Keywords Reference</h2>\n\nThis SQL keywords reference contains the reserved words in SQL.\n<h3>Keywords</h3>\n<table>\n<tr>\n<th>Keyword</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="sql_ref_add.asp">ADD</a></td>\n<td>Adds a column in an existing table</td></tr>\n<tr>\n<td><a href="sql_ref_add_constraint.asp">ADD CONSTRAINT</a></td>\n<td>Adds a constraint after a table is already created</td></tr>\n<tr>\n<td><a href="sql_ref_alter.asp">ALTER</a></td>\n<td>Adds, deletes, or modifies columns in a table, or changes the data type of a column in a table</td></tr>\n<tr>\n<td><a href="sql_ref_alter_column.asp">ALTER COLUMN</a></td>\n<td>Changes the data type of a column in a table</td></tr>\n<tr>\n<td><a href="sql_ref_alter_table.asp">ALTER TABLE</a></td>\n<td>Adds, deletes, or modifies columns in a table</td></tr>\n<tr>\n<td><a href="sql_ref_all.asp">ALL</a></td>\n<td>Returns true if all of the subquery values meet the condition</td></tr>\n<tr>\n<td><a href="sql_ref_and.asp">AND</a></td>\n<td>Only includes rows where both conditions is true</td></tr>\n<tr>\n<td><a href="sql_ref_any.asp">ANY</a></td>\n<td>Returns true if any of the subquery values meet the condition</td></tr>\n<tr>\n<td><a href="sql_ref_as.asp">AS</a></td>\n<td>Renames a column or table with an alias</td></tr>\n<tr>\n<td><a href="sql_ref_asc.asp">ASC</a></td>\n<td>Sorts the result set in ascending order</td></tr>\n<tr>\n<td><a href="sql_ref_backup_database.asp">BACKUP DATABASE</a></td>\n<td>Creates a back up of an existing database</td></tr>\n<tr>\n<td><a href="sql_ref_between.asp">BETWEEN</a></td>\n<td>Selects values within a given range</td></tr>\n<tr>\n<td><a href="sql_ref_case.asp">CASE</a></td>\n<td>Creates different outputs based on conditions</td></tr>\n<tr>\n<td><a href="sql_ref_check.asp">CHECK</a></td>\n<td>A constraint that limits the value that can be placed in a column</td></tr>\n<tr>\n<td><a href="sql_ref_column.asp">COLUMN</a></td>\n<td>Changes the data type of a column or deletes a column in a table</td></tr>\n<tr>\n<td><a href="sql_ref_constraint.asp">CONSTRAINT</a></td>\n<td>Adds or deletes a constraint</td></tr>\n<tr>\n<td><a href="sql_ref_create.asp">CREATE</a></td>\n<td>Creates a database, index, view, table, or procedure</td></tr>\n<tr>\n<td><a href="sql_ref_create_database.asp">CREATE DATABASE</a></td>\n<td>Creates a new SQL database</td></tr>\n<tr>\n<td><a href="sql_ref_create_index.asp">CREATE INDEX</a></td>\n<td>Creates an index on a table (allows duplicate values)</td></tr>\n<tr>\n<td><a href="sql_ref_create_or_replace_view.asp">CREATE OR REPLACE VIEW</a></td>\n<td>Updates a view</td></tr>\n<tr>\n<td><a href="sql_ref_create_table.asp">CREATE TABLE</a></td>\n<td>Creates a new table in the database</td></tr>\n<tr>\n<td><a href="sql_ref_create_procedure.asp">CREATE PROCEDURE</a></td>\n<td>Creates a stored procedure</td></tr>\n<tr>\n<td><a href="sql_ref_create_unique_index.asp">CREATE UNIQUE INDEX</a></td>\n<td>Creates a unique index on a table (no duplicate values)</td></tr>\n<tr>\n<td><a href="sql_ref_create_view.asp">CREATE VIEW</a></td>\n<td>Creates a view based on the result set of a SELECT statement</td></tr>\n<tr>\n<td><a href="sql_ref_database.asp">DATABASE</a></td>\n<td>Creates or deletes an SQL database</td></tr>\n<tr>\n<td><a href="sql_ref_default.asp">DEFAULT</a></td>\n<td>A constraint that provides a default value for a column</td></tr>\n<tr>\n<td><a href="sql_ref_delete.asp">DELETE</a></td>\n<td>Deletes rows from a table</td></tr>\n<tr>\n<td><a href="sql_ref_desc.asp">DESC</a></td>\n<td>Sorts the result set in descending order</td></tr>\n<tr>\n<td><a href="sql_ref_select_distinct.asp">DISTINCT</a></td>\n<td>Selects only distinct (different) values</td></tr>\n<tr>\n<td><a href="sql_ref_drop.asp">DROP</a></td>\n<td>Deletes a column, constraint, database, index, table, or view</td></tr>\n<tr>\n<td><a href="sql_ref_drop_column.asp">DROP COLUMN</a></td>\n<td>Deletes a column in a table</td></tr>\n<tr>\n<td><a href="sql_ref_drop_constraint.asp">DROP CONSTRAINT</a></td>\n<td>Deletes a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint</td></tr>\n<tr>\n<td><a href="sql_ref_drop_database.asp">DROP DATABASE</a></td>\n<td>Deletes an existing SQL database</td></tr>\n<tr>\n<td><a href="sql_ref_drop_default.asp">DROP DEFAULT</a></td>\n<td>Deletes a DEFAULT constraint</td></tr>\n<tr>\n<td><a href="sql_ref_drop_index.asp">DROP INDEX</a></td>\n<td>Deletes an index in a table</td></tr>\n<tr>\n<td><a href="sql_ref_drop_table.asp">DROP TABLE</a></td>\n<td>Deletes an existing table in the database</td></tr>\n<tr>\n<td><a href="sql_ref_drop_view.asp">DROP VIEW</a></td>\n<td>Deletes a view</td></tr>\n<tr>\n<td><a href="sql_ref_exec.asp">EXEC</a></td>\n<td>Executes a stored procedure</td></tr>\n<tr>\n<td><a href="sql_ref_exists.asp">EXISTS</a></td>\n<td>Tests for the existence of any record in a subquery</td></tr>\n<tr>\n<td><a href="sql_ref_foreign_key.asp">FOREIGN KEY</a></td>\n<td>A constraint that is a key used to link two tables together</td></tr>\n<tr>\n<td><a href="sql_ref_from.asp">FROM</a></td>\n<td>Specifies which table to select or delete data from</td></tr>\n<tr>\n<td><a href="sql_ref_full_outer_join.asp">FULL OUTER JOIN</a></td>\n<td>Returns all rows when there is a match in either left table or right table</td></tr>\n<tr>\n<td><a href="sql_ref_group_by.asp">GROUP BY</a></td>\n<td>Groups the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, AVG)</td></tr>\n<tr>\n<td><a href="sql_ref_having.asp">HAVING</a></td>\n<td>Used instead of WHERE with aggregate functions</td></tr>\n<tr>\n<td><a href="sql_ref_in.asp">IN</a></td>\n<td>Allows you to specify multiple values in a WHERE clause</td></tr>\n<tr>\n<td><a href="sql_ref_index.asp">INDEX</a></td>\n<td>Creates or deletes an index in a table </td></tr>\n<tr>\n<td><a href="sql_ref_inner_join.asp">INNER JOIN</a></td>\n<td>Returns rows that have matching values in both tables</td></tr>\n<tr>\n<td><a href="sql_ref_insert_into.asp">INSERT INTO</a></td>\n<td>Inserts new rows in a table</td></tr>\n<tr>\n<td><a href="sql_ref_insert_into_select.asp">INSERT INTO SELECT</a></td>\n<td>Copies data from one table into another table</td></tr>\n<tr>\n<td><a href="sql_ref_is_null.asp">IS NULL</a></td>\n<td>Tests for empty values</td></tr>\n<tr>\n<td><a href="sql_ref_is_not_null.asp">IS NOT NULL</a></td>\n<td>Tests for non-empty values</td></tr>\n<tr>\n<td><a href="sql_ref_join.asp">JOIN</a></td>\n<td>Joins tables</td></tr>\n<tr>\n<td><a href="sql_ref_left_join.asp">LEFT JOIN</a></td>\n<td>Returns all rows from the left table, and the matching rows from the right table</td></tr>\n<tr>\n<td><a href="sql_ref_like.asp">LIKE</a></td>\n<td>Searches for a specified pattern in a column</td></tr>\n<tr>\n<td><a href="sql_ref_top.asp">LIMIT</a></td>\n<td>Specifies the number of records to return in the result set</td></tr>\n<tr>\n<td><a href="sql_ref_not.asp">NOT</a></td>\n<td>Only includes rows where a condition is not true</td></tr>\n<tr>\n<td><a href="sql_ref_not_null.asp">NOT NULL</a></td>\n<td>A constraint that enforces a column to not accept NULL values</td></tr>\n<tr>\n<td><a href="sql_ref_or.asp">OR</a></td>\n<td>Includes rows where either condition is true</td></tr>\n<tr>\n<td><a href="sql_ref_order_by.asp">ORDER BY</a></td>\n<td>Sorts the result set in ascending or descending order</td></tr>\n<tr>\n<td><a href="sql_ref_full_outer_join.asp">OUTER JOIN</a></td>\n<td>Returns all rows when there is a match in either left table or right table</td></tr>\n<tr>\n<td><a href="sql_ref_primary_key.asp">PRIMARY KEY</a></td>\n<td>A constraint that uniquely identifies each record in a database table</td></tr>\n<tr>\n<td><a href="sql_ref_create_procedure.asp">PROCEDURE</a></td>\n<td>A stored procedure</td></tr>\n<tr>\n<td><a href="sql_ref_right_join.asp">RIGHT JOIN</a></td>\n<td>Returns all rows from the right table, and the matching rows from the left table</td></tr>\n<tr>\n<td><a href="sql_ref_top.asp">ROWNUM</a></td>\n<td>Specifies the number of records to return in the result set</td></tr>\n<tr>\n<td><a href="sql_ref_select.asp">SELECT</a></td>\n<td>Selects data from a database</td></tr>\n<tr>\n<td><a href="sql_ref_select_distinct.asp">SELECT DISTINCT</a></td>\n<td>Selects only distinct (different) values</td></tr>\n<tr>\n<td><a href="sql_ref_select_into.asp">SELECT INTO</a></td>\n<td>Copies data from one table into a new table</td></tr>\n<tr>\n<td><a href="sql_ref_top.asp">SELECT TOP</a></td>\n<td>Specifies the number of records to return in the result set</td></tr>\n<tr>\n<td><a href="sql_ref_set.asp">SET</a></td>\n<td>Specifies which columns and values that should be updated in a table</td></tr>\n<tr>\n<td><a href="sql_ref_table.asp">TABLE</a></td>\n<td>Creates a table, or adds, deletes, or modifies columns in a table, or deletes a table or data inside a table</td></tr>\n<tr>\n<td><a href="sql_ref_top.asp">TOP</a></td>\n<td>Specifies the number of records to return in the result set</td></tr>\n<tr>\n<td><a href="sql_ref_drop_table.asp">TRUNCATE TABLE</a></td>\n<td>Deletes the data inside a table, but not the table itself</td></tr>\n<tr>\n<td><a href="sql_ref_union.asp">UNION</a></td>\n<td>Combines the result set of two or more SELECT statements (only distinct values)</td></tr>\n<tr>\n<td><a href="sql_ref_union.asp">UNION ALL</a></td>\n<td>Combines the result set of two or more SELECT statements (allows duplicate values)</td></tr>\n<tr>\n<td><a href="sql_ref_unique.asp">UNIQUE</a></td>\n<td>A constraint that ensures that all values in a column are unique</td></tr>\n<tr>\n<td><a href="sql_ref_update.asp">UPDATE</a></td>\n<td>Updates existing rows in a table</td></tr>\n<tr>\n<td><a href="sql_ref_values.asp">VALUES</a></td>\n<td>Specifies the values of an INSERT INTO statement</td></tr>\n<tr>\n<td><a href="sql_ref_view.asp">VIEW</a></td>\n<td>Creates, updates, or deletes a view</td></tr>\n<tr>\n<td><a href="sql_ref_where.asp">WHERE</a></td>\n<td>Filters a result set to include only records that fulfill a specified condition</td></tr></table>\n\n\n',
'<h2>ADD Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ADD</h3>\nThe <code">ADD</code> command is used to add a column in an existing table.\n\nThe following SQL adds an "Email" column to the "Customers" table:\nALTER TABLE Customers<br>ADD Email varchar(255);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ADD CONSTRAINT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ADD CONSTRAINT</h3>\nThe <code">ADD CONSTRAINT</code> command is used to create a constraint after a table is already created.\n\nThe following SQL adds a constraint named "PK_Person" that is a \nPRIMARY KEY constraint on multiple columns (ID and LastName):\n  ALTER TABLE Persons<br>ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ALTER Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ALTER TABLE</h3>\nThe <code">ALTER TABLE</code> command adds, deletes, or modifies columns in a table.\nThe <code">ALTER TABLE</code> command also adds and deletes various constraints in a table.\n\nThe following SQL adds an "Email" column to the "Customers" table:\nALTER TABLE Customers<br>ADD Email varchar(255);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL deletes the "Email" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN Email;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>ALTER COLUMN</h3>\nThe <code">ALTER COLUMN</code> command is used to change the data type of a column in a table.\n\nThe following SQL changes the data type of the column named "BirthDate" in the "Employees" table to type year:\n  ALTER TABLE Employees<br>ALTER COLUMN BirthDate year;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ALTER COLUMN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ALTER COLUMN</h3>\nThe <code">ALTER COLUMN</code> command is used to change the data type of a column in a table.\n\nThe following SQL changes the data type of the column named "BirthDate" in the "Employees" table to type year:\n  ALTER TABLE Employees<br>ALTER COLUMN BirthDate year;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ALTER TABLE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ALTER TABLE</h3>\nThe <code">ALTER TABLE</code> command adds, deletes, or modifies columns in a table.\nThe <code">ALTER TABLE</code> command also adds and deletes various constraints in a table.\n\nThe following SQL adds an "Email" column to the "Customers" table:\nALTER TABLE Customers<br>ADD Email varchar(255);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL deletes the "Email" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN Email;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ALL Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ALL</h3>\nThe <code">ALL</code> command returns true if all of the subquery values meet the condition.\nThe following SQL statement returns TRUE and lists the productnames if ALL \nthe records in the OrderDetails table has quantity = 10:\n  SELECT ProductName<br>FROM Products<br>WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all2&ss=-1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>AND Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>AND</h3>\nThe <code">AND</code> command is used with WHERE to only include rows where both conditions is true.\nThe following SQL statement selects all fields from "Customers" where country is "Germany" AND city is "Berlin":\n SELECT * FROM Customers WHERE Country=\'Germany\'\n AND City=\'Berlin\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_and" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ANY Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ANY</h3>\nThe <code">ANY</code> command returns true if any of the subquery values meet the condition.\nThe following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity = 10:\n  SELECT ProductName<br>FROM Products<br>WHERE ProductID = ANY (SELECT \n  ProductID FROM OrderDetails WHERE Quantity = 10);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_any&ss=-1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\nThe following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity &gt; 99:\n  SELECT ProductName<br>FROM Products<br>WHERE ProductID = ANY (SELECT ProductID \n  FROM OrderDetails WHERE Quantity &gt; 99);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_any2&ss=-1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>AS Keyword</h2>\n<a href="sql_ref_keywords.asp">\n❮ SQL Keywords Reference</a>\n<h3>AS</h3>\nThe <code">AS</code> command is used to rename a column or table with an alias.\nAn alias only exists for the duration of the query.\n<h3>Alias for Columns</h3>\nThe following SQL statement creates two aliases, one for the CustomerID \ncolumn and one for the CustomerName column:\n SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column0" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement creates two aliases. \n\nNotice that it requires double quotation marks or square brackets if the alias name contains spaces:\n SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):\n  SELECT CustomerName, Address + \', \' + PostalCode + \' \' + City + \', \' + Country \n  AS Address FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column2&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> To get the SQL statement above to work in MySQL use the following:\nSELECT CustomerName, CONCAT(Address,\', \',PostalCode,\', \',City,\', \',Country) AS AddressFROM Customers;\n<h3>Alias for Tables</h3>\nThe following SQL statement selects all the orders from the customer with \nCustomerID=4 (Around the Horn). \n\nWe use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):\n SELECT o.OrderID, o.OrderDate, c.CustomerName<br>FROM Customers AS c, Orders AS o<br>WHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ASC Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ASC</h3>\nThe <code">ASC</code> command is used to sort the data returned in ascending order.\nThe following SQL statement selects all the columns from the "Customers" \ntable, sorted by the "CustomerName" column:\n SELECT * FROM Customers<br>ORDER BY CustomerName ASC;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_asc" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n',
'<h2>BACKUP DATABASE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>BACKUP DATABASE</h3>\nThe <code">BACKUP DATABASE</code> command is used in SQL \nServer to create a full back up of an existing SQL database.\nThe following SQL statement creates a full back up of the existing database "testDB" \nto the D disk:\nBACKUP DATABASE testDB<br>TO DISK = \'D:\backups\testDB.bak\';\n<b>Tip:</b> Always back up the database to a different drive than the actual database. \n\nIf you get a disk crash, you will not lose your backup file along with the database.\n\nA differential back up only backs up the parts of the database that have changed since the last full database backup.\nThe following SQL statement creates a differential back up of the database "testDB":\nBACKUP DATABASE testDB<br>TO DISK = \'D:\backups\testDB.bak\'<br>WITH \n  DIFFERENTIAL;\n<b>Tip:</b> A differential back up reduces the back up time (since only the changes are backed up).\n\n',
'<h2>BETWEEN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>BETWEEN</h3>\nThe <code">BETWEEN</code> command is used to select values within a given range. \n\nThe values can be numbers, text, or dates.\nThe <code">BETWEEN</code> command is inclusive: begin and end values are included. \nThe following SQL statement selects all products with a price BETWEEN 10 and 20:\n SELECT * FROM Products<br>WHERE Price BETWEEN 10 AND 20;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTo display the products outside the range of the previous example, use NOT BETWEEN:\n SELECT * FROM Products<br>WHERE Price NOT BETWEEN 10 AND 20;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_not_between" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nThe following SQL statement selects all products with a ProductName BETWEEN \'Carnarvon \nTigers\' and \'Mozzarella di Giovanni\':\n SELECT * FROM Products<br>WHERE ProductName BETWEEN \'Carnarvon Tigers\' AND \'Mozzarella di Giovanni\'<br>ORDER BY ProductName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_text" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CASE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CASE</h3>\nThe <code">CASE</code> command is used is to create different output based on conditions.\n\nThe following SQL goes through several conditions and returns a value when the specified condition is met:\n  SELECT OrderID, Quantity,<br>CASE<br>    WHEN Quantity &gt; 30 \n  THEN "The quantity is greater than 30"<br>    WHEN Quantity = \n  30 THEN "The quantity is 30"<br>    ELSE "The quantity is under 30"<br>END<br>FROM OrderDetails;<a target="_blank" href="trymysql.asp?filename=trysql_case" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL will order the customers by City. \n\nHowever, if City is NULL, then order by Country:\n  SELECT CustomerName, City, Country<br>FROM Customers<br>ORDER BY<br>(CASE<br>    \n  WHEN City IS NULL THEN Country<br>    ELSE City<br>END);<a target="_blank" href="trymysql.asp?filename=trysql_case2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CHECK Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CHECK</h3>\nThe <code">CHECK</code> constraint limits the value that can be placed in a column.\n<h3>CHECK on CREATE TABLE</h3>\nThe following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created.\nThe CHECK constraint ensures that you can not have any person below 18 years:\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(   \nAge int,   \nCHECK (Age&gt;=18));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(   \nAge int CHECK (Age&gt;=18));\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(   \nAge int,   \nCity varchar(255),   \nCONSTRAINT CHK_Person CHECK (Age&gt;=18 AND City=\'Sandnes\'));\n<h3>CHECK on ALTER TABLE</h3>\nTo create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CHECK (Age&gt;=18);\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT CHK_PersonAge CHECK (Age&gt;=18 AND City=\'Sandnes\');\n<h3>DROP a CHECK Constraint</h3>\nTo drop a CHECK constraint, use the following SQL:\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT CHK_PersonAge;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP CHECK CHK_PersonAge;\n\n',
'<h2>COLUMN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ALTER COLUMN</h3>\nThe <code">ALTER COLUMN</code> command is used to change the data type of a column in a table.\n\nThe following SQL changes the data type of the column named "BirthDate" in the "Employees" table to type year:\n  ALTER TABLE Employees<br>ALTER COLUMN BirthDate year;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>DROP COLUMN</h3>\nThe <code">DROP COLUMN</code> command is used to delete a column in an existing table.\n\nThe following SQL deletes the "ContactName" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN ContactName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CONSTRAINT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ADD CONSTRAINT</h3>\nThe <code">ADD CONSTRAINT</code> command is used to create a constraint after a table is already created.\n\nThe following SQL adds a constraint named "PK_Person" that is a \nPRIMARY KEY constraint on multiple columns (ID and LastName):\n  ALTER TABLE Persons<br>ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>DROP CONSTRAINT</h3>\nThe <code">DROP CONSTRAINT</code> command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint.\n<h3>DROP a UNIQUE Constraint</h3>\nTo drop a UNIQUE constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT UC_Person;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP INDEX UC_Person;\n<h3>DROP a PRIMARY KEY Constraint</h3>\nTo drop a PRIMARY KEY constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT PK_Person;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP PRIMARY KEY;\n<h3>DROP a FOREIGN KEY Constraint</h3>\nTo drop a FOREIGN KEY constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersDROP CONSTRAINT FK_PersonOrder;\n<b>MySQL:</b>\nALTER TABLE OrdersDROP FOREIGN KEY FK_PersonOrder;\n<h3>DROP a CHECK Constraint</h3>\nTo drop a CHECK constraint, use the following SQL:\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT CHK_PersonAge;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP CHECK CHK_PersonAge;\n\n',
'<h2>CREATE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE DATABASE</h3>\nThe <code">CREATE DATABASE</code> command is used is to create a new SQL database.\n\nThe following SQL creates a database called "testDB":\nCREATE DATABASE testDB;\n\n<b>Tip:</b> Make sure you have admin privilege before creating any database. \n\nOnce a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\n<h3>CREATE TABLE</h3>\nThe <code">CREATE TABLE</code> command creates a new table in the database.\n\nThe following SQL creates a table called "Persons" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nCREATE TABLE Persons\n(   \nPersonID int,   \nLastName varchar(255),   \nFirstName varchar(255),   \nAddress varchar(255),   \nCity varchar(255) );\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>CREATE TABLE Using Another Table</h3>\nThe following SQL creates a new table called "TestTables" (which is a copy of two columns of the "Customers" table): \n  CREATE TABLE TestTable AS<br>SELECT customername, contactname<br>FROM \n  customers; <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>CREATE INDEX</h3>\nThe <code">CREATE INDEX</code> command is used to create indexes in tables (allows duplicate values).\nIndexes are used to retrieve data from the database very fast. \n\nThe users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:\nCREATE INDEX idx_lastnameON Persons (LastName);\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nCREATE INDEX idx_pnameON Persons (LastName, FirstName);<b>Note:</b> The syntax for creating indexes varies among different databases. \n\nTherefore: Check the syntax for creating indexes in your database.\n\n<strong>Note:</strong> Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).\nSo, only create indexes on columns that will be frequently searched against.\n<h3>CREATE UNIQUE INDEX</h3>\nThe <code">CREATE UNIQUE INDEX</code> command creates a unique index on a table (no duplicate values allowed)\nThe following SQL creates an index named "uidx_pid" on the "PersonID" column in the "Persons" table:\nCREATE UNIQUE INDEX uidx_pidON Persons (PersonID);\n<h3>CREATE VIEW</h3>\nThe <code">CREATE VIEW</code> command creates a view.\nA view is a virtual table based on the result set of an SQL statement.\nThe following SQL creates a view that selects all customers from Brazil:\nCREATE VIEW [Brazil \n  Customers] ASSELECT \n  CustomerName, ContactNameFROM CustomersWHERE \n  Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>CREATE OR REPLACE VIEW</h3>\nThe <code">CREATE OR REPLACE VIEW</code> command updates a view.\n\nThe following SQL adds the "City" column to the "Brazil Customers" view:\nCREATE OR REPLACE VIEW [Brazil Customers] ASSELECT CustomerName, ContactName, CityFROM CustomersWHERE Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view5" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>Query The View</h3>\nWe can query the view above as follows:\nSELECT * FROM [Brazil \n  Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>CREATE PROCEDURE</h3>\nThe <code">CREATE PROCEDURE</code> command is used to create a stored procedure.\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nThe following SQL creates a stored procedure named "SelectAllCustomers" \nthat selects all records from the "Customers" table:\n  CREATE PROCEDURE SelectAllCustomers<br>AS<br>SELECT * FROM Customers<br>GO;\nExecute the stored procedure above as follows:\n  EXEC SelectAllCustomers;\n\n',
'<h2>CREATE DATABASE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE DATABASE</h3>\nThe <code">CREATE DATABASE</code> command is used is to create a new SQL database.\n\nThe following SQL creates a database called "testDB":\nCREATE DATABASE testDB;\n\n<b>Tip:</b> Make sure you have admin privilege before creating any database. \n\nOnce a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\n\n',
'<h2>CREATE INDEX Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE INDEX</h3>\nThe <code">CREATE INDEX</code> command is used to create indexes in tables (allows duplicate values).\nIndexes are used to retrieve data from the database very fast. \n\nThe users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:\nCREATE INDEX idx_lastnameON Persons (LastName);\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nCREATE INDEX idx_pnameON Persons (LastName, FirstName);<b>Note:</b> The syntax for creating indexes varies among different databases. \n\nTherefore: Check the syntax for creating indexes in your database.\n\n<strong>Note:</strong> Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).\nSo, only create indexes on columns that will be frequently searched against.\n\n',
'<h2>CREATE OR REPLACE VIEW Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE OR REPLACE VIEW</h3>\nThe <code">CREATE OR REPLACE VIEW</code> command updates a view.\n\nThe following SQL adds the "City" column to the "Brazil Customers" view:\nCREATE OR REPLACE VIEW [Brazil Customers] ASSELECT CustomerName, ContactName, CityFROM CustomersWHERE Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view5" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>Query The View</h3>\nWe can query the view above as follows:\nSELECT * FROM [Brazil \n  Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>CREATE TABLE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE TABLE</h3>\nThe <code">CREATE TABLE</code> command creates a new table in the database.\n\nThe following SQL creates a table called "Persons" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nCREATE TABLE Persons\n(   \nPersonID int,   \nLastName varchar(255),   \nFirstName varchar(255),   \nAddress varchar(255),   \nCity varchar(255) );\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>CREATE TABLE Using Another Table</h3>\nThe following SQL creates a new table called "TestTables" (which is a copy of two columns of the "Customers" table): \n  CREATE TABLE TestTable AS<br>SELECT customername, contactname<br>FROM \n  customers; <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CREATE PROCEDURE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE PROCEDURE</h3>\nThe <code">CREATE PROCEDURE</code> command is used to create a stored procedure.\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nThe following SQL creates a stored procedure named "SelectAllCustomers" \nthat selects all records from the "Customers" table:\n  CREATE PROCEDURE SelectAllCustomers<br>AS<br>SELECT * FROM Customers<br>GO;\nExecute the stored procedure above as follows:\n  EXEC SelectAllCustomers;\n\n',
'<h2>CREATE UNIQUE INDEX Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE UNIQUE INDEX</h3>\nThe <code">CREATE UNIQUE INDEX</code> command creates a unique index on a table (no duplicate values allowed)\nIndexes are used to retrieve data from the database very fast. \n\nThe users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named "uidx_pid" on the "PersonID" column in the "Persons" table:\nCREATE UNIQUE INDEX uidx_pidON Persons (PersonID);\n<b>Note:</b> The syntax for creating indexes varies among different databases. \n\nTherefore: Check the syntax for creating indexes in your database.\n\n<strong>Note:</strong> Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).\nSo, only create indexes on columns that will be frequently searched against.\n\n',
'<h2>CREATE VIEW Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE VIEW</h3>\nThe <code">CREATE VIEW</code> command creates a view.\nA view is a virtual table based on the result set of an SQL statement.\nThe following SQL creates a view that selects all customers from Brazil:\nCREATE VIEW [Brazil \n  Customers] ASSELECT \n  CustomerName, ContactNameFROM CustomersWHERE \n  Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>Query The View</h3>\nWe can query the view above as follows:\nSELECT * FROM [Brazil \n  Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>DATABASE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE DATABASE</h3>\nThe <code">CREATE DATABASE</code> command is used is to create a new SQL database.\n\nThe following SQL creates a database called "testDB":\nCREATE DATABASE testDB;\n\n<b>Tip:</b> Make sure you have admin privilege before creating any database. \n\nOnce a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\n<h3>DROP DATABASE</h3>\nThe <code">DROP DATABASE</code> command is used is to delete an existing SQL database.\n\nThe following SQL drops a database named "testDB":\n  DROP DATABASE testDB;\n<strong>Note:</strong> Be careful before dropping a database. \n\nDeleting a database will result in loss of complete information stored in the database!\n\n',
'<h2>DEFAULT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DEFAULT</h3>\nThe <code">DEFAULT</code> constraint provides a default value for a column.\nThe default value will be added to all new records if no other value is specified.\n<h3>DEFAULT on CREATE TABLE</h3>\nThe following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created:\n\n<b>My SQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(   \nCity varchar(255) DEFAULT \'Sandnes\');\nThe DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():\nCREATE TABLE Orders\n(   \nOrderDate date DEFAULT GETDATE());\n<h3>DEFAULT on ALTER TABLE</h3>\nTo create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE PersonsALTER City SET DEFAULT \'Sandnes\';\n<b>SQL Server:</b>\nALTER TABLE Persons<br>ADD CONSTRAINT df_City <br>DEFAULT \'Sandnes\' FOR City;\n<b>MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City SET DEFAULT \'Sandnes\';\n<b>Oracle:</b>\nALTER TABLE PersonsMODIFY City DEFAULT \'Sandnes\';\n<h3>DROP a DEFAULT Constraint</h3>\nTo drop a DEFAULT constraint, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE PersonsALTER City DROP DEFAULT;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City DROP DEFAULT;\n\n',
'<h2>DELETE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DELETE</h3>\nThe <code">DELETE</code> command is used to delete existing records in a table.\n\nThe following SQL statement deletes the customer "Alfreds Futterkiste" from the "Customers" table:\n DELETE FROM Customers\n WHERE CustomerName=\'Alfreds Futterkiste\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_delete" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> Be careful when deleting records in a table! Notice the WHERE clause in the \nDELETE statement.\nThe WHERE clause specifies which record(s) should be deleted. \n\nIf you omit the WHERE clause, all records in the table will be deleted!\nIt is possible to delete all rows in a table without deleting the table. \n\nThis means that the table structure, attributes, and indexes will be intact:\n\nThe following SQL statement deletes all rows in the "Customers" table, without deleting the table. \n\nThis means that the table structure, attributes, and indexes will be intact:\n  DELETE FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_delete_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n',
'<h2>ASC Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DESC</h3>\nThe <code">DESC</code> command is used to sort the data returned in descending order.\nThe following SQL statement selects all the columns from the "Customers" \ntable, sorted descending by the "CustomerName" column:\n SELECT * FROM Customers<br>ORDER BY CustomerName DESC;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_desc" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n',
'<h2>SELECT DISTINCT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT DISTINCT</h3>\nThe <code">SELECT DISTINCT</code> command returns only distinct (different) values in the result set.\n\nThe following SQL statement selects only the DISTINCT values from the "Country" column in the "Customers" table:\nSELECT DISTINCT Country FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DROP Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP COLUMN</h3>\nThe <code">DROP COLUMN</code> command is used to delete a column in an existing table.\n\nThe following SQL deletes the "ContactName" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN ContactName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>DROP a UNIQUE Constraint</h3>\nTo drop a UNIQUE constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT UC_Person;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP INDEX UC_Person;\n<h3>DROP a PRIMARY KEY Constraint</h3>\nTo drop a PRIMARY KEY constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT PK_Person;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP PRIMARY KEY;\n<h3>DROP a FOREIGN KEY Constraint</h3>\nTo drop a FOREIGN KEY constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersDROP CONSTRAINT FK_PersonOrder;\n<b>MySQL:</b>\nALTER TABLE OrdersDROP FOREIGN KEY FK_PersonOrder;\n<h3>DROP a CHECK Constraint</h3>\nTo drop a CHECK constraint, use the following SQL:\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT CHK_PersonAge;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP CHECK CHK_PersonAge;\n<h3>DROP DEFAULT</h3>\nThe <code">DROP DEFAULT</code> command is used to delete a DEFAULT constraint.\nTo drop a DEFAULT constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City DROP DEFAULT;<b>MySQL:</b>\nALTER TABLE PersonsALTER City DROP DEFAULT;\n<h3>DROP INDEX</h3>\nThe <code">DROP INDEX</code> command is used to delete an index in a table.\n\n<strong>MS Access:</strong>\nDROP INDEX <em>index_name</em>  ON <em>table_name</em> ;\n<strong>SQL Server:</strong>\nDROP INDEX <em>table_name</em> .<em>index_name</em> ;\n<strong>DB2/Oracle:</strong>\nDROP INDEX <em>index_name</em> ;\n<strong>MySQL:</strong>\nALTER TABLE <em>table_name<br></em> DROP INDEX <em>index_name</em> ;\n<h3>DROP DATABASE</h3>\nThe <code">DROP DATABASE</code> command is used is to delete an existing SQL database.\n\nThe following SQL drops a database named "testDB":\n  DROP DATABASE testDB;\n<strong>Note:</strong> Be careful before dropping a database. \n\nDeleting a database will result in loss of complete information stored in the database!\n<h3>DROP TABLE</h3>\nThe <code">DROP TABLE</code> command deletes a table in the database.\n\nThe following SQL deletes the table "Shippers":\n  DROP TABLE Shippers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n  <strong>Note</strong><b>:</b> Be careful before deleting a table. \n\nDeleting a table results in loss of all information stored in the table!\n<h3>DROP VIEW</h3>\nThe <code">DROP VIEW</code> command deletes a view.\nThe following SQL drops the "Brazil Customers" view:\nDROP VIEW [Brazil Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view6" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>DROP COLUMN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP COLUMN</h3>\nThe <code">DROP COLUMN</code> command is used to delete a column in an existing table.\n\nThe following SQL deletes the "ContactName" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN ContactName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_column" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DROP CONSTRAINT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP CONSTRAINT</h3>\nThe <code">DROP CONSTRAINT</code> command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint.\n<h3>DROP a UNIQUE Constraint</h3>\nTo drop a UNIQUE constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT UC_Person;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP INDEX UC_Person;\n<h3>DROP a PRIMARY KEY Constraint</h3>\nTo drop a PRIMARY KEY constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT PK_Person;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP PRIMARY KEY;\n<h3>DROP a FOREIGN KEY Constraint</h3>\nTo drop a FOREIGN KEY constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersDROP CONSTRAINT FK_PersonOrder;\n<b>MySQL:</b>\nALTER TABLE OrdersDROP FOREIGN KEY FK_PersonOrder;\n<h3>DROP a CHECK Constraint</h3>\nTo drop a CHECK constraint, use the following SQL:\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT CHK_PersonAge;\n<b>MySQL:</b>\nALTER TABLE PersonsDROP CHECK CHK_PersonAge;\n\n',
'<h2>DROP DATABASE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP DATABASE</h3>\nThe <code">DROP DATABASE</code> command is used is to delete an existing SQL database.\n\nThe following SQL drops a database named "testDB":\n  DROP DATABASE testDB;\n<strong>Note:</strong> Be careful before dropping a database. \n\nDeleting a database will result in loss of complete information stored in the database!\n\n',
'<h2>DROP DEFAULT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP DEFAULT</h3>\nThe <code">DROP DEFAULT</code> command is used to delete a DEFAULT constraint.\nTo drop a DEFAULT constraint, use the following SQL:\n\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsALTER COLUMN City DROP DEFAULT;<b>MySQL:</b>\nALTER TABLE PersonsALTER City DROP DEFAULT;\n\n',
'<h2>DROP INDEX Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP INDEX</h3>\nThe <code">DROP INDEX</code> command is used to delete an index in a table.\n\n<strong>MS Access:</strong>\nDROP INDEX <em>index_name</em>  ON <em>table_name</em> ;\n<strong>SQL Server:</strong>\nDROP INDEX <em>table_name</em> .<em>index_name</em> ;\n<strong>DB2/Oracle:</strong>\nDROP INDEX <em>index_name</em> ;\n<strong>MySQL:</strong>\nALTER TABLE <em>table_name<br></em> DROP INDEX <em>index_name</em> ;\n\n',
'<h2>DROP TABLE and TRUNCATE TABLE Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP TABLE</h3>\nThe <code">DROP TABLE</code> command deletes a table in the database.\n\nThe following SQL deletes the table "Shippers":\n  DROP TABLE Shippers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n  <strong>Note</strong><b>:</b> Be careful before deleting a table. \n\nDeleting a table results in loss of all information stored in the table!\n<h3>TRUNCATE TABLE</h3>\nThe <code">TRUNCATE TABLE</code> command deletes the data inside a table, but not the table itself.\nThe following SQL truncates the table "Categories": \n  TRUNCATE TABLE Categories;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_truncate_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DROP VIEW Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP VIEW</h3>\nThe <code">DROP VIEW</code> command deletes a view.\nThe following SQL drops the "Brazil Customers" view:\nDROP VIEW [Brazil Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view6" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>EXEC Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>EXEC</h3>\nThe <code">EXEC</code> command is used to execute a stored procedure.\nThe following SQL executes a stored procedure named "SelectAllCustomers":\n    EXEC SelectAllCustomers;\n\n',
'<h2>EXISTS Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>EXISTS</h3>\nThe <code">EXISTS</code> command tests for the existence of any record in a subquery, and returns true if the subquery returns one or more records.\nThe following SQL lists the suppliers with a product price less than 20:\n  SELECT SupplierName<br>FROM Suppliers<br>WHERE EXISTS (SELECT ProductName FROM \n  Products WHERE SupplierId = Suppliers.supplierId AND Price &lt; 20);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_exists" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\nThe following SQL lists the suppliers with a product price equal to 22:\n  SELECT SupplierName<br>FROM Suppliers<br>WHERE EXISTS (SELECT ProductName FROM \n  Products WHERE SupplierId = Suppliers.supplierId AND Price = 22);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_exists2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>FOREIGN KEY Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>FOREIGN KEY</h3>\nThe <code">FOREIGN KEY</code> constraint is a key used to link two tables together.\nA FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.\n<h3>FOREIGN KEY on CREATE TABLE</h3>\nThe following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:\n\n<b>MySQL:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL,   \nOrderNumber int NOT NULL,   \nPersonID int,   \nPRIMARY KEY (OrderID),   \nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL PRIMARY KEY,   \nOrderNumber int NOT NULL,   \nPersonID int FOREIGN KEY REFERENCES Persons(PersonID));\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Orders\n(   \nOrderID int NOT NULL,   \nOrderNumber int NOT NULL,   \nPersonID int,   \nPRIMARY KEY (OrderID),   \nCONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)   \nREFERENCES Persons(PersonID));\n<h3>FOREIGN KEY on ALTER TABLE</h3>\nTo create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersADD FOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID);\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersADD CONSTRAINT FK_PersonOrderFOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID);\n<h3>DROP a FOREIGN KEY Constraint</h3>\nTo drop a FOREIGN KEY constraint, use the following SQL:\n<b>MySQL:</b>\nALTER TABLE OrdersDROP FOREIGN KEY FK_PersonOrder;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE OrdersDROP CONSTRAINT FK_PersonOrder;\n\n',
'<h2>FROM Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>FROM</h3>\nThe <code">FROM</code> command is used to specify which table to select or delete data from.\nThe following SQL statement selects the "CustomerName" and "City" columns from the "Customers" table:\n SELECT CustomerName, City FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_columns" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\nThe following SQL statement selects all the columns from the "Customers" \ntable:\n SELECT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement deletes the customer "Alfreds Futterkiste" from the "Customers" table:\n DELETE FROM Customers WHERE CustomerName=\'Alfreds Futterkiste\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_delete" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>FULL OUTER JOIN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>FULL OUTER JOIN</h3>\nThe <code">FULL OUTER JOIN</code> command returns all rows when there is a match in either left table or right table.\nThe following SQL statement selects all customers, and all orders:\nSELECT Customers.CustomerName, Orders.OrderIDFROM CustomersFULL OUTER JOIN Orders\nON Customers.CustomerID=Orders.CustomerIDORDER BY Customers.CustomerName;\n\n<strong>Note:</strong> The <code">FULL OUTER JOIN</code> keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). \n\nIf there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.\n\n',
'<h2>GROUP BY Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>GROUP BY</h3>\nThe <code">GROUP BY</code> command is used to group the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, AVG).\nThe following SQL lists the number of customers in each country:\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby" class="w3-btn w3-margin-bottom">\n  Try it Yourself ?</a>\nThe following SQL lists the number of customers in each country, sorted high to low:\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country  ORDER BY COUNT(CustomerID) DESC;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby_orderby" class="w3-btn w3-margin-bottom">\n  Try it Yourself ?</a>\n\n',
'<h2>HAVING Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>HAVING</h3>\nThe <code">HAVING</code> command is used instead of WHERE with aggregate functions.\nThe following SQL lists the number of customers in each country. \n\n\nOnly include countries with more than 5 customers:\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country  HAVING COUNT(CustomerID) &gt; 5;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\nThe following SQL lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):\n  SELECT COUNT(CustomerID), Country<br>FROM Customers<br>GROUP BY Country<br>HAVING COUNT(CustomerID) \n  &gt; 5  ORDER BY COUNT(CustomerID) DESC;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having_orderby" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>IN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>IN</h3>\nThe <code">IN</code> command allows you to specify multiple values in a WHERE clause.\nThe IN operator is a shorthand for multiple OR conditions.\n\nThe following SQL selects all customers that are located in "Germany", "France" and "UK":\n SELECT * FROM Customers  WHERE Country IN (\'Germany\', \'France\', \'UK\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL selects all customers that are NOT located in "Germany", "France" or "UK":\n SELECT * FROM Customers  WHERE Country NOT IN (\'Germany\', \'France\', \'UK\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in_not" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL selects all customers that are from the same countries as the suppliers:\n SELECT * FROM Customers  WHERE Country IN (SELECT Country FROM Suppliers);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>INDEX Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE INDEX</h3>\nThe <code">CREATE INDEX</code> command is used to create indexes in tables (allows duplicate values).\nIndexes are used to retrieve data from the database very fast. \n\nThe users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:\nCREATE INDEX idx_lastnameON Persons (LastName);\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nCREATE INDEX idx_pnameON Persons (LastName, FirstName);<b>Note:</b> The syntax for creating indexes varies among different databases. \n\nTherefore: Check the syntax for creating indexes in your database.\n\n<strong>Note:</strong> Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).\nSo, only create indexes on columns that will be frequently searched against.\n<h3>DROP INDEX</h3>\nThe <code">DROP INDEX</code> command is used to delete an index in a table.\n\n<strong>MS Access:</strong>\nDROP INDEX <em>index_name</em>  ON <em>table_name</em> ;\n<strong>SQL Server:</strong>\nDROP INDEX <em>table_name</em> .<em>index_name</em> ;\n<strong>DB2/Oracle:</strong>\nDROP INDEX <em>index_name</em> ;\n<strong>MySQL:</strong>\nALTER TABLE <em>table_name<br></em> DROP INDEX <em>index_name</em> ;\n\n',
'<h2>INNER JOIN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>INNER JOIN</h3>\nThe <code">INNER JOIN</code> command returns rows that have matching values in both tables.\nThe following SQL selects all orders with customer information:\n  SELECT Orders.OrderID, Customers.CustomerName<br>FROM Orders<br>INNER JOIN \n  Customers ON Orders.CustomerID = Customers.CustomerID;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_inner" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. \n\nIf there are records in the \n"Orders" table that do not have matches in "Customers", these orders will not be shown!\n\nThe following SQL statement selects all orders with customer and shipper information:\n  SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName<br>FROM \n  ((Orders<br>INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)  INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_inner2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n',
'<h2>INSERT INTO Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>INSERT INTO</h3>\nThe <code">INSERT INTO</code> command is used to insert new rows in a table.\nThe following SQL inserts a new record in the "Customers" table:\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)VALUES (\'Cardinal\', \'Tom B. \n\nErichsen\', \'Skagen 21\', \'Stavanger\', \'4006\', \'Norway\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_colname" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL will insert a new record, but only insert data in the "CustomerName", "City", and "Country" columns (CustomerID will be updated automatically):\nINSERT INTO Customers (CustomerName, City, Country)VALUES (\'Cardinal\', \'Stavanger\', \'Norway\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_cols" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>INSERT INTO SELECT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>INSERT INTO SELECT</h3>\nThe <code">INSERT INTO SELECT</code> command copies data from one table and inserts it into another table.\nThe following SQL copies "Suppliers" into "Customers" (the columns that are not filled with data, will contain NULL):\n INSERT INTO Customers (CustomerName,   City, Country) SELECT SupplierName, City, Country FROM Suppliers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL copies "Suppliers" into "Customers" (fill all columns):\n  INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode,   Country)<br>SELECT SupplierName, ContactName, Address, City, PostalCode,   Country FROM Suppliers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL copies only the German suppliers into "Customers":\n INSERT INTO Customers (CustomerName,   City, Country) SELECT SupplierName, City, Country FROM Suppliers<br>WHERE Country=\'Germany\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select_where" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>IS NULL Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>IS NULL</h3>\nThe <code">IS NULL</code> command is used to test for empty values (NULL values).\nThe following SQL lists all customers with a NULL value in the "Address" \nfield:\n  SELECT CustomerName, ContactName, Address<br>FROM Customers<br>WHERE Address \n  IS NULL;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_is_null" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n  <b>Note:</b> A NULL value is different from a zero value or a field that contains spaces. \n\nA field with a NULL \nvalue is one that has been left blank during record creation!\n  <b>Tip:</b> Always use IS NULL to look for NULL values.\n\n',
'<h2>IS NOT NULL Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>IS NOT NULL</h3>\nThe <code">IS NOT NULL</code> command is used to test for non-empty values (NOT NULL values).\nThe following SQL lists all customers with a value in the "Address" field:\n  SELECT CustomerName, ContactName, Address<br>FROM Customers<br>WHERE Address \n  IS NOT NULL;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_is_not_null" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>JOIN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>INNER JOIN</h3>\nThe <code">INNER JOIN</code> command returns rows that have matching values in both tables.\nThe following SQL selects all orders with customer information:\n  SELECT Orders.OrderID, Customers.CustomerName<br>FROM Orders<br>INNER JOIN \n  Customers ON Orders.CustomerID = Customers.CustomerID;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_inner" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. \n\nIf there are records in the \n"Orders" table that do not have matches in "Customers", these orders will not be shown!\n\nThe following SQL statement selects all orders with customer and shipper information:\n  SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName<br>FROM \n  ((Orders<br>INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)  INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_inner2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>LEFT JOIN</h3>\nThe <code">LEFT JOIN</code> command returns all rows from the left table, and the matching rows from the right table. \n\nThe result is NULL \nfrom the right side, if there is no match.\nThe following SQL will select all customers, and any orders they might have:\n SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders\n ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_left" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<strong>Note:</strong> The <code">LEFT JOIN</code> keyword returns all records from the left table (Customers), even if there are no matches in the right table \n(Orders).\n<h3>RIGHT JOIN</h3>\nThe <code">RIGHT JOIN</code> command returns all rows from the right table, and the matching records from the left table. \n\nThe result is \nNULL from the left side, when there is no match.\nThe following SQL will return all employees, and any orders they might have placed:\n SELECT Orders.OrderID, Employees.LastName, Employees.FirstName<br>FROM Orders<br>RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID ORDER BY Orders.OrderID;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_right&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> The <code">RIGHT JOIN</code> keyword returns all records from the right table (Employees), even if there are no matches in the left table \n(Orders).\n<h3>FULL OUTER JOIN</h3>\nThe <code">FULL OUTER JOIN</code> command returns all rows when there is a match in either left table or right table.\nThe following SQL statement selects all customers, and all orders:\nSELECT Customers.CustomerName, Orders.OrderIDFROM CustomersFULL OUTER JOIN Orders\nON Customers.CustomerID=Orders.CustomerIDORDER BY Customers.CustomerName;\n\n<strong>Note:</strong> The <code">FULL OUTER JOIN</code> keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). \n\nIf there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.\n\n',
'<h2>LEFT JOIN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>LEFT JOIN</h3>\nThe <code">LEFT JOIN</code> command returns all rows from the left table, and the matching rows from the right table. \n\nThe result is NULL \nfrom the right side, if there is no match.\nThe following SQL will select all customers, and any orders they might have:\n SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders\n ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_left" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<strong>Note:</strong> The <code">LEFT JOIN</code> keyword returns all records from the left table (Customers), even if there are no matches in the right table \n(Orders).\n\n',
'<h2>LIKE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>LIKE</h3>\nThe <code">LIKE</code> command is used in a WHERE clause to search for a specified pattern in a column.\nYou can use two wildcards with <code">LIKE</code>: \n\n% - Represents zero, one, or multiple characters\n_ - Represents a single character (MS Access uses a question mark (?) instead)\n\nThe following SQL selects all customers with a CustomerName starting with \n"a":\n SELECT * FROM Customers WHERE CustomerName LIKE \'a%\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL selects all customers with a CustomerName ending with "a":\n SELECT * FROM Customers WHERE CustomerName LIKE \'%a\'; <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_ending" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL selects all customers with a CustomerName that have "or" in any position:\n SELECT * FROM Customers  WHERE CustomerName LIKE \'%or%\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_pattern" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement selects all customers with a CustomerName that starts with "a" and are at least 3 characters in length:\n SELECT * FROM Customers  WHERE CustomerName LIKE \'a_%_%\';  <a class="w3-btn w3-margin-bottom" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_start_least" target="_blank">Try it Yourself &raquo;</a>\n\n',
'<h2>SELECT TOP, LIMIT and ROWNUM Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT TOP, LIMIT and ROWNUM</h3>\nThe <code">SELECT TOP</code> command is used to specify the number of records to return.\n\n<b>Note:</b> Not all database systems support <code">\nSELECT TOP</code>. \n\nMySQL \nuses <code">LIMIT</code>, and Oracle uses <code">\nROWNUM</code>.\n\nThe following SQL statement selects the first three records from the "Customers" table:\n SELECT TOP 3 * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using the LIMIT clause:\n SELECT * FROM Customers<br>LIMIT 3;<a target="_blank" href="trymysql.asp?filename=trysql_select_limit" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using ROWNUM:\nSELECT * FROM Customers<br>WHERE ROWNUM  &lt;= 3;\n\n',
'<h2>NOT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>NOT</h3>\nThe <code">NOT</code> command is used with WHERE to only include rows where a condition is not true.\nThe following SQL statement selects all fields from "Customers" where country is NOT "Germany":\n SELECT * FROM Customers WHERE \n  NOT Country=\'Germany\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_not" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>NOT NULL Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>NOT NULL</h3>\nThe <code">NOT NULL</code> constraint enforces a column to not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.\n\nThe following SQL ensures that the "ID", "LastName", and \n"FirstName" columns will NOT accept NULL values:\n  CREATE TABLE Persons (<br>    ID int NOT NULL,<br>    \n  LastName varchar(255) NOT NULL,<br>    FirstName varchar(255) \n  NOT NULL,<br>    Age int<br>); <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_constraint_not_null" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL creates a NOT NULL constraint on the "Age" column when the "Persons" table is already created:\nALTER TABLE PersonsMODIFY Age int NOT NULL;\n\n',
'<h2>OR Keyword</h2>\n<a href="sql_ref_keywords.asp">\n❮ SQL Keywords Reference</a>\n<h3>OR</h3>\nThe <code">OR</code> command is used with WHERE to include rows where either condition is true.\nThe following SQL statement selects all fields from "Customers" where city is \n"Berlin" OR city is "München":\n  SELECT * FROM Customers  WHERE City=\'Berlin\' OR City=\'München\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_or" class="w3-btn w3-margin-bottom">\n  Try it Yourself »</a>\n\n',
'<h2>ORDER BY Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>ORDER BY</h3>\nThe <code">ORDER BY</code> command is used to sort the result set in ascending or descending order.\nThe <code">ORDER BY</code> command sorts the result set in ascending order by default. \n\nTo sort the records in descending order, use the <code">\nDESC</code> keyword.\nThe following SQL statement selects all the columns from the "Customers" \ntable, sorted by the "CustomerName" column:\n SELECT * FROM Customers<br>ORDER BY CustomerName;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_order_by" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>ASC</h3>\nThe <code">ASC</code> command is used to sort the data returned in ascending order.\nThe following SQL statement selects all the columns from the "Customers" \ntable, sorted by the "CustomerName" column:\n SELECT * FROM Customers<br>ORDER BY CustomerName ASC;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_asc" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>DESC</h3>\nThe <code">DESC</code> command is used to sort the data returned in descending order.\nThe following SQL statement selects all the columns from the "Customers" \ntable, sorted descending by the "CustomerName" column:\n SELECT * FROM Customers<br>ORDER BY CustomerName DESC;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_desc" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n',
'<h2>FULL OUTER JOIN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>FULL OUTER JOIN</h3>\nThe <code">FULL OUTER JOIN</code> command returns all rows when there is a match in either left table or right table.\nThe following SQL statement selects all customers, and all orders:\nSELECT Customers.CustomerName, Orders.OrderIDFROM CustomersFULL OUTER JOIN Orders\nON Customers.CustomerID=Orders.CustomerIDORDER BY Customers.CustomerName;\n\n<strong>Note:</strong> The <code">FULL OUTER JOIN</code> keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). \n\nIf there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.\n\n',
'<h2>PRIMARY KEY Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>PRIMARY KEY</h3>\nThe <code">PRIMARY KEY</code> constraint uniquely identifies each record in a table.\nA table can have only one primary key, which may consist of one single or of multiple fields.\n<h3>PRIMARY KEY on CREATE TABLE</h3>\nThe following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nPRIMARY KEY (ID));\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL PRIMARY KEY,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCONSTRAINT PK_Person PRIMARY KEY (ID,LastName));\n<b>Note:</b> In the example above there is only ONE PRIMARY KEY (PK_Person). \n\n\nHowever, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).\n<h3>PRIMARY KEY on ALTER TABLE</h3>\nTo create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD PRIMARY KEY (ID);\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);\n<b>Note:</b> If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must\nalready have been declared to not contain NULL values (when the table was first created).\n<h3>DROP a PRIMARY KEY Constraint</h3>\nTo drop a PRIMARY KEY constraint, use the following SQL:\n\n<b>MySQL:</b>\nALTER TABLE PersonsDROP PRIMARY KEY;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT PK_Person;\n\n',
'<h2>CREATE PROCEDURE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE PROCEDURE</h3>\nThe <code">CREATE PROCEDURE</code> command is used to create a stored procedure.\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nThe following SQL creates a stored procedure named "SelectAllCustomers" \nthat selects all records from the "Customers" table:\n  CREATE PROCEDURE SelectAllCustomers<br>AS<br>SELECT * FROM Customers<br>GO;\nExecute the stored procedure above as follows:\n  EXEC SelectAllCustomers;\n\n',
'<h2>RIGHT JOIN Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>RIGHT JOIN</h3>\nThe <code">RIGHT JOIN</code> command returns all rows from the right table, and the matching records from the left table. \n\nThe result is \nNULL from the left side, when there is no match.\nThe following SQL will return all employees, and any orders they might have placed:\n SELECT Orders.OrderID, Employees.LastName, Employees.FirstName<br>FROM Orders<br>RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID ORDER BY Orders.OrderID;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_right&ss=-1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> The <code">RIGHT JOIN</code> keyword returns all records from the right table (Employees), even if there are no matches in the left table \n(Orders).\n\n',
'<h2>SELECT TOP, LIMIT and ROWNUM Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT TOP, LIMIT and ROWNUM</h3>\nThe <code">SELECT TOP</code> command is used to specify the number of records to return.\n\n<b>Note:</b> Not all database systems support <code">\nSELECT TOP</code>. \n\nMySQL \nuses <code">LIMIT</code>, and Oracle uses <code">\nROWNUM</code>.\n\nThe following SQL statement selects the first three records from the "Customers" table:\n SELECT TOP 3 * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using the LIMIT clause:\n SELECT * FROM Customers<br>LIMIT 3;<a target="_blank" href="trymysql.asp?filename=trysql_select_limit" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using ROWNUM:\nSELECT * FROM Customers<br>WHERE ROWNUM  &lt;= 3;\n\n',
'<h2>SELECT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT</h3>\nThe <code">SELECT</code> command is used to select data from a database. \n\nThe data returned is stored in a result table, called the result set.\nThe following SQL statement selects the "CustomerName" and "City" columns from the "Customers" table:\n SELECT CustomerName, City FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_columns" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\nThe following SQL statement selects all the columns from the "Customers" \ntable:\n SELECT * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n',
'<h2>SELECT DISTINCT Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT DISTINCT</h3>\nThe <code">SELECT DISTINCT</code> command returns only distinct (different) values in the result set.\n\nThe following SQL statement selects only the DISTINCT values from the "Country" column in the "Customers" table:\nSELECT DISTINCT Country FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SELECT INTO Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT INTO</h3>\nThe <code">SELECT INTO</code> command copies data from one table and inserts it into a new table.\n\nThe following SQL statement creates a backup copy of Customers:\nSELECT * INTO CustomersBackup2017FROM Customers;\nThe following SQL statement uses the IN clause to copy the table into a new table in another database:\nSELECT *\nINTO CustomersBackup2017 IN \'Backup.mdb\'FROM Customers;\nThe following SQL statement copies only a few columns into a new table:\nSELECT CustomerName, ContactName INTO CustomersBackup2017FROM Customers;\nThe following SQL statement copies only the German customers into a new table:\nSELECT *\nINTO CustomersGermanyFROM CustomersWHERE Country = \'Germany\';\nThe following SQL statement copies data from more than one table into a new table:\n SELECT Customers.CustomerName, Orders.OrderID<br>INTO CustomersOrderBackup2017FROM Customers LEFT JOIN Orders\n ON Customers.CustomerID = Orders.CustomerID;\n\n',
'<h2>SELECT TOP, LIMIT and ROWNUM Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT TOP, LIMIT and ROWNUM</h3>\nThe <code">SELECT TOP</code> command is used to specify the number of records to return.\n\n<b>Note:</b> Not all database systems support <code">\nSELECT TOP</code>. \n\nMySQL \nuses <code">LIMIT</code>, and Oracle uses <code">\nROWNUM</code>.\n\nThe following SQL statement selects the first three records from the "Customers" table:\n SELECT TOP 3 * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using the LIMIT clause:\n SELECT * FROM Customers<br>LIMIT 3;<a target="_blank" href="trymysql.asp?filename=trysql_select_limit" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using ROWNUM:\nSELECT * FROM Customers<br>WHERE ROWNUM  &lt;= 3;\n\n',
'<h2>SET Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>SET</h3>\nThe <code">SET</code> command is used with UPDATE to specify which columns and values that should be updated in a table.\nThe following SQL updates the first customer (CustomerID = 1) with a new ContactName <em>and</em>  \na new City:\n UPDATE Customers SET ContactName = \'Alfred Schmidt\', City= \'Frankfurt\' WHERE CustomerID = 1;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL will update the "ContactName" field to "Juan" for all records where Country is "Mexico":\n  UPDATE CustomersSET ContactName=\'Juan\'WHERE Country=\'Mexico\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_3" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> Be careful when updating records in a table! Notice the WHERE clause in the \nUPDATE statement.\nThe WHERE clause specifies which record(s) that should be updated. \n\nIf you omit the WHERE clause, all records in the table will be updated!\n\n',
'<h2>TABLE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE TABLE</h3>\nThe <code">CREATE TABLE</code> command creates a new table in the database.\n\nThe following SQL creates a table called "Persons" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nCREATE TABLE Persons\n(   \nPersonID int,   \nLastName varchar(255),   \nFirstName varchar(255),   \nAddress varchar(255),   \nCity varchar(255) );\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>CREATE TABLE Using Another Table</h3>\nA copy of an existing table can also be created using \n<code">CREATE TABLE</code>.\nThe following SQL creates a new table called "TestTables" (which is a copy of the "Customers" table): \n  CREATE TABLE TestTable AS<br>SELECT customername, contactname<br>FROM \n  customers; <a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_create_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>ALTER TABLE</h3>\nThe <code">ALTER TABLE</code> command adds, deletes, or modifies columns in a table.\nThe <code">ALTER TABLE</code> command also adds and deletes various constraints in a table.\n\nThe following SQL adds an "Email" column to the "Customers" table:\nALTER TABLE Customers<br>ADD Email varchar(255);\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL deletes the "Email" column from the "Customers" table:\nALTER TABLE Customers<br>DROP COLUMN Email;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_alter_table2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>DROP TABLE</h3>\nThe <code">DROP TABLE</code> command deletes a table in the database.\n\nThe following SQL deletes the table "Shippers":\n  DROP TABLE Shippers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n  <strong>Note</strong><b>:</b> Be careful before deleting a table. \n\nDeleting a table results in loss of all information stored in the table!\n<h3>TRUNCATE TABLE</h3>\nThe <code">TRUNCATE TABLE</code> command deletes the data inside a table, but not the table itself.\nThe following SQL truncates the table "Categories": \n  TRUNCATE TABLE Categories;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_truncate_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SELECT TOP, LIMIT and ROWNUM Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT TOP, LIMIT and ROWNUM</h3>\nThe <code">SELECT TOP</code> command is used to specify the number of records to return.\n\n<b>Note:</b> Not all database systems support <code">\nSELECT TOP</code>. \n\nMySQL \nuses <code">LIMIT</code>, and Oracle uses <code">\nROWNUM</code>.\n\nThe following SQL statement selects the first three records from the "Customers" table:\n SELECT TOP 3 * FROM Customers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top&ss=-1" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using the LIMIT clause:\n SELECT * FROM Customers<br>LIMIT 3;<a target="_blank" href="trymysql.asp?filename=trysql_select_limit" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement shows the equivalent example using ROWNUM:\nSELECT * FROM Customers<br>WHERE ROWNUM  &lt;= 3;\n\n',
'<h2>DROP TABLE and TRUNCATE TABLE Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>DROP TABLE</h3>\nThe <code">DROP TABLE</code> command deletes a table in the database.\n\nThe following SQL deletes the table "Shippers":\n  DROP TABLE Shippers;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_drop_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n  <strong>Note</strong><b>:</b> Be careful before deleting a table. \n\nDeleting a table results in loss of all information stored in the table!\n<h3>TRUNCATE TABLE</h3>\nThe <code">TRUNCATE TABLE</code> command deletes the data inside a table, but not the table itself.\nThe following SQL truncates the table "Categories": \n  TRUNCATE TABLE Categories;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_truncate_table" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>UNION and UNION ALL Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>UNION</h3>\nThe <code">UNION</code> command combines the result set of two or more SELECT statements (only distinct values)\nThe following SQL statement returns the cities \n(only distinct values) from both the "Customers" and the "Suppliers" table:\n SELECT City FROM Customers<br>UNION<br>SELECT City FROM Suppliers<br>ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>UNION ALL</h3>\nThe <code">UNION ALL</code> command combines the result set of two or more SELECT statements (allows duplicate values).\nThe following SQL statement returns the cities \n(duplicate values also) from both the "Customers" and the "Suppliers" table:\n SELECT City FROM Customers<br>UNION ALL<br>SELECT City FROM Suppliers ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n\n',
'<h2>UNION and UNION ALL Keywords</h2>\n<k>SQL Keywords Reference</k>\n<h3>UNION</h3>\nThe <code">UNION</code> command combines the result set of two or more SELECT statements (only distinct values)\nThe following SQL statement returns the cities \n(only distinct values) from both the "Customers" and the "Suppliers" table:\n SELECT City FROM Customers<br>UNION<br>SELECT City FROM Suppliers<br>ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n<h3>UNION ALL</h3>\nThe <code">UNION ALL</code> command combines the result set of two or more SELECT statements (allows duplicate values).\nThe following SQL statement returns the cities \n(duplicate values also) from both the "Customers" and the "Suppliers" table:\n SELECT City FROM Customers<br>UNION ALL<br>SELECT City FROM Suppliers ORDER BY City;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union_all" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n\n',
'<h2>UNIQUE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>UNIQUE</h3>\nThe <code">UNIQUE</code> constraint ensures that all values in a column are unique.\n<h3>UNIQUE Constraint on CREATE TABLE</h3>\nThe following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:\n\n<b>SQL Server / Oracle / MS Access:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL UNIQUE,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int);\n\n<b>MySQL:</b>\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nUNIQUE (ID));\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\n\nCREATE TABLE Persons\n(    ID int NOT NULL,   \nLastName varchar(255) NOT NULL,   \nFirstName varchar(255),   \nAge int,   \nCONSTRAINT UC_Person UNIQUE (ID,LastName));\n<h3>UNIQUE Constraint on ALTER TABLE</h3>\nTo create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD UNIQUE (ID);\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\n\n<b>MySQL / SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsADD CONSTRAINT UC_Person UNIQUE (ID,LastName);\n<h3>DROP a UNIQUE Constraint</h3>\nTo drop a UNIQUE constraint, use the following SQL:\n\n<b>MySQL:</b>\nALTER TABLE PersonsDROP INDEX UC_Person;\n<b>SQL Server / Oracle / MS Access:</b>\nALTER TABLE PersonsDROP CONSTRAINT UC_Person;\n\n',
'<h2>UPDATE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>UPDATE</h3>\nThe <code">UPDATE</code> command is used to update existing rows in a table.\nThe following SQL statement updates the first customer (CustomerID = 1) with a new contact person <em>and</em>  \na new city.\n UPDATE Customers SET ContactName = \'Alfred Schmidt\', City= \'Frankfurt\' WHERE CustomerID = 1;\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_2" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\nThe following SQL statement will update the contactname to "Juan" for all records where country is "Mexico":\n  UPDATE CustomersSET ContactName=\'Juan\'WHERE Country=\'Mexico\';\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_3" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> Be careful when updating records in a table! Notice the WHERE clause in the \nUPDATE statement.\nThe WHERE clause specifies which record(s) that should be updated. \n\nIf you omit the WHERE clause, all records in the table will be updated!\n\n',
'<h2>VALUES Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>VALUES</h3>\nThe <code">VALUES</code> command specifies the values of an INSERT INTO statement.\nThe following SQL inserts a new record in the "Customers" table:\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)VALUES (\'Cardinal\', \'Tom B. \n\nErichsen\', \'Skagen 21\', \'Stavanger\', \'4006\', \'Norway\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_colname" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\nThe following SQL will insert a new record, but only insert data in the "CustomerName", "City", and "Country" columns (CustomerID will be updated automatically):\nINSERT INTO Customers (CustomerName, City, Country)VALUES (\'Cardinal\', \'Stavanger\', \'Norway\');\n<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_cols" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>VIEW Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>CREATE VIEW</h3>\nIn SQL, a view is a virtual table based on the result set of an SQL statement.\nThe <code">CREATE VIEW</code> command creates a view.\nThe following SQL creates a view that selects all customers from Brazil:\nCREATE VIEW [Brazil \n  Customers] ASSELECT \n  CustomerName, ContactNameFROM CustomersWHERE \n  Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view1" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>Query The View</h3>\nWe can query the view above as follows:\nSELECT * FROM [Brazil \n  Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view2" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>CREATE OR REPLACE VIEW</h3>\nThe <code">CREATE OR REPLACE VIEW</code> command updates a view.\n\nThe following SQL adds the "City" column to the "Brazil Customers" view:\nCREATE OR REPLACE VIEW [Brazil Customers] ASSELECT CustomerName, ContactName, CityFROM CustomersWHERE Country = "Brazil";<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view5" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n<h3>DROP VIEW</h3>\nThe <code">DROP VIEW</code> command deletes a view.\nThe following SQL drops the "Brazil Customers" view:\nDROP VIEW [Brazil Customers];<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_view6" class="w3-btn w3-margin-bottom">\n  Try it Yourself &raquo;</a>\n\n',
'<h2>WHERE Keyword</h2>\n<k>SQL Keywords Reference</k>\n<h3>SELECT</h3>\nThe <code">WHERE</code> command filters a result set to include only records that fulfill a specified condition.\nThe following SQL statement selects all the customers from  \n"Mexico" in the "Customers" table:\nSELECT * FROM CustomersWHERE Country=\'Mexico\';<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where" class="w3-btn w3-margin-bottom">\nTry it Yourself &raquo;</a>\nSQL requires single quotes around text values (most database systems will also allow double quotes).\nHowever, numeric fields should not be enclosed in quotes:\n SELECT * FROM Customers WHERE CustomerID=1;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_number" class="w3-btn w3-margin-bottom">\n Try it Yourself &raquo;</a>\n\n<strong>Note:</strong> The WHERE clause is not only used in SELECT statement, it is also used in UPDATE,\nDELETE statement, etc.!\n\nThe following operators can be used in the WHERE clause:\n<table>\n  <tr><th style="width:20%">Operator</th><th>Description</th></tr>\n  <tr><td>=</td><td>Equal</td></tr>\n  <tr><td>&lt;&gt;</td><td>Not equal. \n\n<b>Note:</b> In some versions of SQL this operator may be written as !=</td></tr>\n  <tr><td>&gt;</td><td>Greater than</td></tr>\n  <tr><td>&lt;</td><td>Less than</td></tr>\n  <tr><td>&gt;=</td><td>Greater than or equal</td></tr>\n  <tr><td>&lt;=</td><td>Less than or equal</td></tr>\n  <tr><td>BETWEEN</td><td>Between a certain range</td></tr>\n  <tr><td>LIKE</td><td>Search for a pattern</td></tr>\n  <tr><td>IN</td><td>To specify multiple possible values for a column</td></tr></table>\n\n',
'<h2>Functions</h2>\n\nMySQL has many built-in functions.\nThis reference contains string, numeric, date, and some advanced functions in MySQL.\n<h3>MySQL String Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="func_mysql_ascii.asp">ASCII</a></td>\n<td>Returns the ASCII value for the specific character</td></tr>\n<tr>\n<td><a href="func_mysql_char_length.asp">CHAR_LENGTH</a></td>\n<td>Returns the length of a string (in characters)</td></tr>\n<tr>\n<td><a href="func_mysql_character_length.asp">CHARACTER_LENGTH</a></td>\n<td>Returns the length of a string (in characters)</td></tr>\n<tr>\n<td><a href="func_mysql_concat.asp">CONCAT</a></td>\n<td>Adds two or more expressions together</td></tr>\n<tr>\n<td><a href="func_mysql_concat_ws.asp">CONCAT_WS</a></td>\n<td>Adds two or more expressions together with a separator</td></tr>\n<tr>\n<td><a href="func_mysql_field.asp">FIELD</a></td>\n<td>Returns the index position of a value in a list of values</td></tr>\n<tr>\n<td><a href="func_mysql_find_in_set.asp">FIND_IN_SET</a></td>\n<td>Returns the position of a string within a list of strings</td></tr>\n<tr>\n<td><a href="func_mysql_format.asp">FORMAT</a></td>\n<td>Formats a number to a format like "#,###,###.##", rounded to a specified number of decimal places</td></tr>\n<tr>\n<td><a href="func_mysql_insert.asp">INSERT</a></td>\n<td>Inserts a string within a string at the specified position and for a certain number of characters</td></tr>\n<tr>\n<td><a href="func_mysql_instr.asp">INSTR</a></td>\n<td>Returns the position of the first occurrence of a string in another string</td></tr>\n<tr>\n<td><a href="func_mysql_lcase.asp">LCASE</a></td>\n<td>Converts a string to lower-case</td></tr>\n<tr>\n<td><a href="func_mysql_left.asp">LEFT</a></td>\n<td>Extracts a number of characters from a string (starting from left)</td></tr>\n<tr>\n<td><a href="func_mysql_length.asp">LENGTH</a></td>\n<td>Returns the length of a string (in bytes)</td></tr>\n<tr>\n<td><a href="func_mysql_locate.asp">LOCATE</a></td>\n<td>Returns the position of the first occurrence of a substring in a string</td></tr>\n<tr>\n<td><a href="func_mysql_lower.asp">LOWER</a></td>\n<td>Converts a string to lower-case</td></tr>\n<tr>\n<td><a href="func_mysql_lpad.asp">LPAD</a></td>\n<td>Left-pads a string with another string, to a certain length</td></tr>\n<tr>\n<td><a href="func_mysql_ltrim.asp">LTRIM</a></td>\n<td>Removes leading spaces from a string</td></tr>\n<tr>\n<td><a href="func_mysql_mid.asp">MID</a></td>\n<td>Extracts a substring from a string (starting at any position)</td></tr>\n<tr>\n<td><a href="func_mysql_position.asp">POSITION</a></td>\n<td>Returns the position of the first occurrence of a substring in a string</td></tr>\n<tr>\n<td><a href="func_mysql_repeat.asp">REPEAT</a></td>\n<td>Repeats a string as many times as specified</td></tr>\n<tr>\n<td><a href="func_mysql_replace.asp">REPLACE</a></td>\n<td>Replaces all occurrences of a substring within a string, with a new substring</td></tr>\n<tr>\n<td><a href="func_mysql_reverse.asp">REVERSE</a></td>\n<td>Reverses a string and returns the result</td></tr>\n<tr>\n<td><a href="func_mysql_right.asp">RIGHT</a></td>\n<td>Extracts a number of characters from a string (starting from right)</td></tr>\n<tr>\n<td><a href="func_mysql_rpad.asp">RPAD</a></td>\n<td>Right-pads a string with another string, to a certain length</td></tr>\n<tr>\n<td><a href="func_mysql_rtrim.asp">RTRIM</a></td>\n<td>Removes trailing spaces from a string</td></tr>\n<tr>\n<td><a href="func_mysql_space.asp">SPACE</a></td>\n<td>Returns a string of the specified number of space characters</td></tr>\n<tr>\n<td><a href="func_mysql_strcmp.asp">STRCMP</a></td>\n<td>Compares two strings</td></tr>\n<tr>\n<td><a href="func_mysql_substr.asp">SUBSTR</a></td>\n<td>Extracts a substring from a string (starting at any position)</td></tr>\n<tr>\n<td><a href="func_mysql_substring.asp">SUBSTRING</a></td>\n<td>Extracts a substring from a string (starting at any position)</td></tr>\n<tr>\n<td><a href="func_mysql_substring_index.asp">SUBSTRING_INDEX</a></td>\n<td>Returns a substring of a string before a specified number of delimiter occurs</td></tr>\n<tr>\n<td><a href="func_mysql_trim.asp">TRIM</a></td>\n<td>Removes leading and trailing spaces from a string</td></tr>\n<tr>\n<td><a href="func_mysql_ucase.asp">UCASE</a></td>\n<td>Converts a string to upper-case</td></tr>\n<tr>\n<td><a href="func_mysql_upper.asp">UPPER</a></td>\n<td>Converts a string to upper-case</td></tr></table>\n<h3>MySQL Numeric Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="func_mysql_abs.asp">ABS</a></td>\n<td>Returns the absolute value of a number</td></tr>\n<tr>\n<td><a href="func_mysql_acos.asp">ACOS</a></td>\n<td>Returns the arc cosine of a number</td></tr>\n<tr>\n<td><a href="func_mysql_asin.asp">ASIN</a></td>\n<td>Returns the arc sine of a number</td></tr>\n<tr>\n<td><a href="func_mysql_atan.asp">ATAN</a></td>\n<td>Returns the arc tangent of one or two numbers</td></tr>\n<tr>\n<td><a href="func_mysql_atan2.asp">ATAN2</a></td>\n<td>Returns the arc tangent of two numbers</td></tr>\n<tr>\n<td><a href="func_mysql_avg.asp">AVG</a></td>\n<td>Returns the average value of an expression</td></tr>\n<tr>\n<td><a href="func_mysql_ceil.asp">CEIL</a></td>\n<td>Returns the smallest integer value that is &gt;= to a number</td></tr>\n<tr>\n<td><a href="func_mysql_ceiling.asp">CEILING</a></td>\n<td>Returns the smallest integer value that is &gt;= to a number</td></tr>\n<tr>\n<td><a href="func_mysql_cos.asp">COS</a></td>\n<td>Returns the cosine of a number</td></tr>\n<tr>\n<td><a href="func_mysql_cot.asp">COT</a></td>\n<td>Returns the cotangent of a number</td></tr>\n<tr>\n<td><a href="func_mysql_count.asp">COUNT</a></td>\n<td>Returns the number of records returned by a select query</td></tr>\n<tr>\n<td><a href="func_mysql_degrees.asp">DEGREES</a></td>\n<td>Converts a value in radians to degrees</td></tr>\n<tr>\n<td><a href="func_mysql_div.asp">DIV</a></td>\n<td>Used for integer division</td></tr>\n<tr>\n<td><a href="func_mysql_exp.asp">EXP</a></td>\n<td>Returns e raised to the power of a specified number</td></tr>\n<tr>\n<td><a href="func_mysql_floor.asp">FLOOR</a></td>\n<td>Returns the largest integer value that is &lt;= to a number</td></tr>\n<tr>\n<td><a href="func_mysql_greatest.asp">GREATEST</a></td>\n<td>Returns the greatest value of the list of arguments</td></tr>\n<tr>\n<td><a href="func_mysql_least.asp">LEAST</a></td>\n<td>Returns the smallest value of the list of arguments</td></tr>\n<tr>\n<td><a href="func_mysql_ln.asp">LN</a></td>\n<td>Returns the natural logarithm of a number</td></tr>\n<tr>\n<td><a href="func_mysql_log.asp">LOG</a></td>\n<td>Returns the natural logarithm of a number, or the logarithm of a number to a specified base</td></tr>\n<tr>\n<td><a href="func_mysql_log10.asp">LOG10</a></td>\n<td>Returns the natural logarithm of a number to base 10</td></tr>\n<tr>\n<td><a href="func_mysql_log2.asp">LOG2</a></td>\n<td>Returns the natural logarithm of a number to base 2</td></tr>\n<tr>\n<td><a href="func_mysql_max.asp">MAX</a></td>\n<td>Returns the maximum value in a set of values</td></tr>\n<tr>\n<td><a href="func_mysql_min.asp">MIN</a></td>\n<td>Returns the minimum value in a set of values</td></tr>\n<tr>\n<td><a href="func_mysql_mod.asp">MOD</a></td>\n<td>Returns the remainder of a number divided by another number</td></tr>\n<tr>\n<td><a href="func_mysql_pi.asp">PI</a></td>\n<td>Returns the value of PI</td></tr>\n<tr>\n<td><a href="func_mysql_pow.asp">POW</a></td>\n<td>Returns the value of a number raised to the power of another number</td></tr>\n<tr>\n<td><a href="func_mysql_power.asp">POWER</a></td>\n<td>Returns the value of a number raised to the power of another number</td></tr>\n<tr>\n<td><a href="func_mysql_radians.asp">RADIANS</a></td>\n<td>Converts a degree value into radians</td></tr>\n<tr>\n<td><a href="func_mysql_rand.asp">RAND</a></td>\n<td>Returns a random number</td></tr>\n<tr>\n<td><a href="func_mysql_round.asp">ROUND</a></td>\n<td>Rounds a number to a specified number of decimal places</td></tr>\n<tr>\n<td><a href="func_mysql_sign.asp">SIGN</a></td>\n<td>Returns the sign of a number</td></tr>\n<tr>\n<td><a href="func_mysql_sin.asp">SIN</a></td>\n<td>Returns the sine of a number</td></tr>\n<tr>\n<td><a href="func_mysql_sqrt.asp">SQRT</a></td>\n<td>Returns the square root of a number</td></tr>\n<tr>\n<td><a href="func_mysql_sum.asp">SUM</a></td>\n<td>Calculates the sum of a set of values</td></tr>\n<tr>\n<td><a href="func_mysql_tan.asp">TAN</a></td>\n<td>Returns the tangent of a number</td></tr>\n<tr>\n<td><a href="func_mysql_truncate.asp">TRUNCATE</a></td>\n<td>Truncates a number to the specified number of decimal places</td></tr></table>\n<h3>MySQL Date Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="func_mysql_adddate.asp">ADDDATE</a></td>\n<td>Adds a time/date interval to a date and then returns the date</td></tr>\n<tr>\n<td><a href="func_mysql_addtime.asp">ADDTIME</a></td>\n<td>Adds a time interval to a time/datetime and then returns the time/datetime</td></tr>\n<tr>\n<td><a href="func_mysql_curdate.asp">CURDATE</a></td>\n<td>Returns the current date</td></tr>\n<tr>\n<td><a href="func_mysql_current_date.asp">CURRENT_DATE</a></td>\n<td>Returns the current date</td></tr>\n<tr>\n<td><a href="func_mysql_current_time.asp">CURRENT_TIME</a></td>\n<td>Returns the current time</td></tr>\n<tr>\n<td><a href="func_mysql_current_timestamp.asp">CURRENT_TIMESTAMP</a></td>\n<td>Returns the current date and time</td></tr>\n<tr>\n<td><a href="func_mysql_curtime.asp">CURTIME</a></td>\n<td>Returns the current time</td></tr>\n<tr>\n<td><a href="func_mysql_date.asp">DATE</a></td>\n<td>Extracts the date part from a datetime expression</td></tr>\n<tr>\n<td><a href="func_mysql_datediff.asp">DATEDIFF</a></td>\n<td>Returns the number of days between two date values</td></tr>\n<tr>\n<td><a href="func_mysql_date_add.asp">DATE_ADD</a></td>\n<td>Adds a time/date interval to a date and then returns the date</td></tr>\n<tr>\n<td><a href="func_mysql_date_format.asp">DATE_FORMAT</a></td>\n<td>Formats a date</td></tr>\n<tr>\n<td><a href="func_mysql_date_sub.asp">DATE_SUB</a></td>\n<td>Subtracts a time/date interval from a date and then returns the date</td></tr>\n<tr>\n<td><a href="func_mysql_day.asp">DAY</a></td>\n<td>Returns the day of the month for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_dayname.asp">DAYNAME</a></td>\n<td>Returns the weekday name for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_dayofmonth.asp">DAYOFMONTH</a></td>\n<td>Returns the day of the month for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_dayofweek.asp">DAYOFWEEK</a></td>\n<td>Returns the weekday index for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_dayofyear.asp">DAYOFYEAR</a></td>\n<td>Returns the day of the year for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_extract.asp">EXTRACT</a></td>\n<td>Extracts a part from a given date</td></tr>\n<tr>\n<td><a href="func_mysql_from_days.asp">FROM_DAYS</a></td>\n<td>Returns a date from a numeric datevalue</td></tr>\n<tr>\n<td><a href="func_mysql_hour.asp">HOUR</a></td>\n<td>Returns the hour part for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_last_day.asp">LAST_DAY</a></td>\n<td>Extracts the last day of the month for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_localtime.asp">LOCALTIME</a></td>\n<td>Returns the current date and time</td></tr>\n<tr>\n<td><a href="func_mysql_localtimestamp.asp">LOCALTIMESTAMP</a></td>\n<td>Returns the current date and time</td></tr>\n<tr>\n<td><a href="func_mysql_makedate.asp">MAKEDATE</a></td>\n<td>Creates and returns a date based on a year and a number of days value</td></tr>\n<tr>\n<td><a href="func_mysql_maketime.asp">MAKETIME</a></td>\n<td>Creates and returns a time based on an hour, minute, and second value</td></tr>\n<tr>\n<td><a href="func_mysql_microsecond.asp">MICROSECOND</a></td>\n<td>Returns the microsecond part of a time/datetime</td></tr>\n<tr>\n<td><a href="func_mysql_minute.asp">MINUTE</a></td>\n<td>Returns the minute part of a time/datetime</td></tr>\n<tr>\n<td><a href="func_mysql_month.asp">MONTH</a></td>\n<td>Returns the month part for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_monthname.asp">MONTHNAME</a></td>\n<td>Returns the name of the month for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_now.asp">NOW</a></td>\n<td>Returns the current date and time</td></tr>\n<tr>\n<td><a href="func_mysql_period_add.asp">PERIOD_ADD</a></td>\n<td>Adds a specified number of months to a period</td></tr>\n<tr>\n<td><a href="func_mysql_period_diff.asp">PERIOD_DIFF</a></td>\n<td>Returns the difference between two periods</td></tr>\n<tr>\n<td><a href="func_mysql_quarter.asp">QUARTER</a></td>\n<td>Returns the quarter of the year for a given date value</td></tr>\n<tr>\n<td><a href="func_mysql_second.asp">SECOND</a></td>\n<td>Returns the seconds part of a time/datetime</td></tr>\n<tr>\n<td><a href="func_mysql_sec_to_time.asp">SEC_TO_TIME</a></td>\n<td>Returns a time value based on the specified seconds</td></tr>\n<tr>\n<td><a href="func_mysql_str_to_date.asp">STR_TO_DATE</a></td>\n<td>Returns a date based on a string and a format</td></tr>\n<tr>\n<td><a href="func_mysql_subdate.asp">SUBDATE</a></td>\n<td>Subtracts a time/date interval from a date and then returns the date</td></tr>\n<tr>\n<td><a href="func_mysql_subtime.asp">SUBTIME</a></td>\n<td>Subtracts a time interval from a datetime and then returns the time/datetime</td></tr>\n<tr>\n<td><a href="func_mysql_sysdate.asp">SYSDATE</a></td>\n<td>Returns the current date and time</td></tr>\n<tr>\n<td><a href="func_mysql_time.asp">TIME</a></td>\n<td>Extracts the time part from a given time/datetime</td></tr>\n<tr>\n<td><a href="func_mysql_time_format.asp">TIME_FORMAT</a></td>\n<td>Formats a time by a specified format</td></tr>\n<tr>\n<td><a href="func_mysql_time_to_sec.asp">TIME_TO_SEC</a></td>\n<td>Converts a time value into seconds</td></tr>\n  <tr>\n<td><a href="func_mysql_timediff.asp">TIMEDIFF</a></td>\n<td>Returns the difference between two time/datetime expressions</td></tr>\n  <tr>\n<td><a href="func_mysql_timestamp.asp">TIMESTAMP</a></td>\n<td>Returns a datetime value based on a date or datetime value</td></tr>\n<tr>\n<td><a href="func_mysql_to_days.asp">TO_DAYS</a></td>\n<td>Returns the number of days between a date and date "0000-00-00"</td></tr>\n<tr>\n<td><a href="func_mysql_week.asp">WEEK</a></td>\n<td>Returns the week number for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_weekday.asp">WEEKDAY</a></td>\n<td>Returns the weekday number for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_weekofyear.asp">WEEKOFYEAR</a></td>\n<td>Returns the week number for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_year.asp">YEAR</a></td>\n<td>Returns the year part for a given date</td></tr>\n<tr>\n<td><a href="func_mysql_yearweek.asp">YEARWEEK</a></td>\n<td>Returns the year and week number for a given date</td></tr></table>\n<h3>MySQL Advanced Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="func_mysql_bin.asp">BIN</a></td>\n<td>Returns a binary representation of a number</td></tr>\n<tr>\n<td><a href="func_mysql_binary.asp">BINARY</a></td>\n<td>Converts a value to a binary string</td></tr>\n<tr>\n<td><a href="func_mysql_case.asp">CASE</a></td>\n<td>Goes through conditions and return a value when the first condition is met</td></tr>\n<tr>\n<td><a href="func_mysql_cast.asp">CAST</a></td>\n<td>Converts a value (of any type) into a specified datatype</td></tr>\n<tr>\n<td><a href="func_mysql_coalesce.asp">COALESCE</a></td>\n<td>Returns the first non-null value in a list</td></tr>\n<tr>\n<td><a href="func_mysql_connection_id.asp">CONNECTION_ID</a></td>\n<td>Returns the unique connection ID for the current connection</td></tr>\n<tr>\n<td><a href="func_mysql_conv.asp">CONV</a></td>\n<td>Converts a number from one numeric base system to another</td></tr>\n<tr>\n<td><a href="func_mysql_convert.asp">CONVERT</a></td>\n<td>Converts a value into the specified datatype or character set</td></tr>\n<tr>\n<td><a href="func_mysql_current_user.asp">CURRENT_USER</a></td>\n<td>Returns the user name and host name for the MySQL account that the server used to authenticate the current client</td></tr>\n<tr>\n<td><a href="func_mysql_database.asp">DATABASE</a></td>\n<td>Returns the name of the current database</td></tr>\n<tr>\n<td><a href="func_mysql_if.asp">IF</a></td>\n<td>Returns a value if a condition is TRUE, or another value if a condition is FALSE</td></tr>\n<tr>\n<td><a href="func_mysql_ifnull.asp">IFNULL</a></td>\n<td>Return a specified value if the expression is NULL, otherwise return the expression</td></tr>\n<tr>\n<td><a href="func_mysql_isnull.asp">ISNULL</a></td>\n<td>Returns 1 or 0 depending on whether an expression is NULL</td></tr>\n<tr>\n<td><a href="func_mysql_last_insert_id.asp">LAST_INSERT_ID</a></td>\n<td>Returns the AUTO_INCREMENT id of the last row that has been inserted or updated in a table</td></tr>\n<tr>\n<td><a href="func_mysql_nullif.asp">NULLIF</a></td>\n<td>Compares two expressions and returns NULL if they are equal. \n\nOtherwise, the first expression is returned</td></tr>\n<tr>\n<td><a href="func_mysql_session_user.asp">SESSION_USER</a></td>\n<td>Returns the current MySQL user name and host name</td></tr>\n<tr>\n<td><a href="func_mysql_system_user.asp">SYSTEM_USER</a></td>\n<td>Returns the current MySQL user name and host name</td></tr>\n<tr>\n<td><a href="func_mysql_user.asp">USER</a></td>\n<td>Returns the current MySQL user name and host name</td></tr>\n<tr>\n<td><a href="func_mysql_version.asp">VERSION</a></td>\n<td>Returns the current version of the MySQL database</td></tr></table>\n\n\n',
'<h2>ASCII()</h2>\n\n<k>MySQL Functions</k>\nReturn the ASCII value of the first character in "CustomerName":\n SELECT ASCII(CustomerName) AS NumCodeOfFirstChar<br>FROM Customers; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ascii" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ASCII() function returns the ASCII value for the specific character.\n<h3>Syntax</h3>\n  ASCII(<em>character</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>character</em> </td><td>Required. \n\nThe character to return the ASCII value for. \n\nIf more than one character is entered, it will only return the value for the first character</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>CHAR_LENGTH()</h2>\n<k>MySQL Functions</k>\nReturn the length of the string:\nSELECT CHAR_LENGTH("SQL Tutorial") AS LengthOfString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_char_length" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CHAR_LENGTH() function return the length of a string (in characters).\n<strong>Note:</strong> This function is equal to the \n<a href="func_mysql_character_length.asp">CHARACTER_LENGTH()</a> function.\n<h3>Syntax</h3>\n  CHAR_LENGTH(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to count the length for</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the length of the text in the "CustomerName" column:\n  SELECT CHAR_LENGTH(CustomerName) AS LengthOfName<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_char_length2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CHARACTER_LENGTH()</h2>\n<k>MySQL Functions</k>\nReturn the length of the string:\nSELECT CHARACTER_LENGTH("SQL Tutorial") AS LengthOfString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_character_length" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CHARACTER_LENGTH() function return the length of a string (in characters).\n<strong>Note:</strong> This function is equal to the \n<a href="func_mysql_char_length.asp">CHAR_LENGTH()</a> function.\n<h3>Syntax</h3>\n  CHARACTER_LENGTH(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to count the length for</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the length of the text in the "CustomerName" column:\n  SELECT CHARACTER_LENGTH(CustomerName) AS LengthOfName<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_character_length2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CONCAT()</h2>\n<k>MySQL Functions</k>\nAdd several strings together:\nSELECT CONCAT("SQL ", "Tutorial ", "is ", "fun!") AS ConcatenatedString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_concat" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONCAT() function adds two or more expressions together.\n<strong>Note:</strong> Also look at the <a href="func_mysql_concat_ws.asp">CONCAT_WS()</a> function.\n<h3>Syntax</h3>\n  CONCAT(<em>expression1</em> , <em>expression2</em> , <em>expression3</em> ,...)\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression1,<br>expression2,<br>expression3,<br>etc.</em> </td><td>Required. \n\nThe expressions to add together.\n    <strong>Note:</strong>  \nIf any of the expressions is a NULL value, it returns NULL\n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nAdd three columns into one "Address" column:\n  SELECT CONCAT(Address, " ", PostalCode, " ", City) AS Address<br>FROM \n  Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_concat2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CONCAT_WS()</h2>\n<k>MySQL Functions</k>\nAdd several expressions together, and add a "-" separator between them:\nSELECT CONCAT_WS("-", "SQL", "Tutorial", "is", "fun!") AS ConcatenatedString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_concat_ws" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONCAT_WS() function adds two or more expressions together with a separator.\n<strong>Note:</strong> Also look at the <a href="func_mysql_concat.asp">CONCAT()</a> function.\n<h3>Syntax</h3>\n  CONCAT_WS(<em>separator</em> , <em>expression1</em> , <em>expression2</em> , <em>expression3</em> ,...)\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>separator</em> </td><td>Required. \n\nThe separator to add between each of the  \n    expressions. \n\nIf separator is NULL, this function returns NULL</td></tr>\n  <tr><td><em>expression1,<br>expression2,<br>expression3,<br>etc.</em> </td><td>Required. \n\nThe expressions to add together. \n\nAn expression with a NULL value will be skipped</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nAdd three columns (and add a space between them) into one "Address" column: \n  SELECT CONCAT_WS(" ", Address, PostalCode, City) AS Address<br>FROM \n  Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_concat_ws2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>FIELD()</h2>\n<k>MySQL Functions</k>\nReturn the index position of  "q" in the string list:\n SELECT FIELD("q", "s", "q", "l"); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_field" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe FIELD() function returns the index position of a value in a list of values.\nThis function performs a case-insensitive search.\n\n<strong>Note:</strong> If the specified value is not found in the list of values, this function will return 0. \n\nIf value is NULL, this function will return 0.\n<h3>Syntax</h3>\n  FIELD(<em>value</em> , <em>val1</em> , <em>val2</em> , <em>val3</em> , ...)\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value to search for in the list</td></tr>\n  <tr><td><em>val1</em> , <em>val2</em> , <em>val3</em> , ....</td><td>Required. \n\nThe list of values to search</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the index position of "c" in the string list:\n SELECT FIELD("c", "a", "b"); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_field2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the index position of "Q" in the string list:\n SELECT FIELD("Q", "s", "q", "l"); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_field3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the index position of 5 in the numeric list:\n SELECT FIELD(5, 0, 1, 2, 3, 4, 5);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_field4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>FIND_IN_SET()</h2>\n<k>MySQL Functions</k>\nSearch for "q" within the list of strings:\n  SELECT FIND_IN_SET("q", "s,q,l");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_find_in_set" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe FIND_IN_SET() function returns the position of a string within a list of strings.\n<h3>Syntax</h3>\n  FIND_IN_SET(<em>string</em> , <em>string_list</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to search for</td></tr>\n  <tr><td><em>string_list</em> </td><td>Required. \n\nThe list of string values to be searched (separated by commas)</td></tr>\n  </table>\n<h3>Return Values</h3>\n\nIf <em>string</em>  is not found in <em>string_list</em> , this function returns 0\nIf <em>string</em>  or <em>string_list</em>  is NULL, this function returns \n  NULL\nIf <em>string_list</em>  is an empty string ("), this function returns 0\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSearch for "a" within the list of strings:\n  SELECT FIND_IN_SET("a", "s,q,l");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_find_in_set2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSearch for "q" within the list of strings (string list is NULL):\n  SELECT FIND_IN_SET("q", null);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_find_in_set3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>FORMAT()</h2>\n<k>MySQL Functions</k>\nFormat the number as "#,###,###.##" (and round with two decimal places):\n  SELECT FORMAT(250500.5634, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_format" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe FORMAT() function formats a number to a format like "#,###,###.##", rounded to a specified number of decimal places, then it returns the result as a string.\n<h3>Syntax</h3>\n  FORMAT(<em>number</em> , <em>decimal_places</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to be formatted</td></tr>\n  <tr><td><em>decimal_places</em> </td><td>Required. \n\nThe number of decimal places for <em>number.</em>  If this parameter is 0, this function returns a string with no decimal places</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nFormat the number as a format of "#,###,###.##" (and round with 0 decimal places):\n  SELECT FORMAT(250500.5634, 0);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_format2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>INSERT()</h2>\n<k>MySQL Functions</k>\nInsert the string "Example" into the string "W3Schools.com". \n\nReplace the first nine characters:\n  SELECT INSERT("W3Schools.com", 1, 9, "Example");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_insert" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe INSERT() function inserts a string within a string at the specified position and for a certain number of characters.\n<h3>Syntax</h3>\n  INSERT(<em>string</em> , <em>position</em> , <em>number</em> , <em>string2</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string that will be modified</td></tr>\n  <tr><td><em>position</em> </td><td>Required. \n\nThe position where to insert <em>string2</em> </td></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number of characters to replace</td></tr>\n  <tr><td><em>string2</em> </td><td>Required. \n\nThe string to insert into <em>string</em> </td></tr>\n  </table>\n<h3>Return Values</h3>\n\nIf <em>position</em>  is outside the length of <em>string</em> , this function returns <em>string</em> \nIf <em>number</em>  is higher than the length of the rest of the <em>string</em> ,   this function replaces <em>string</em>  from <em>position</em>  until the end of <em>string</em> \n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nInsert the string "no" into the string "W3Schools.com". \n\nReplace three characters, starting from position 11:\n  SELECT INSERT("W3Schools.com", 11, 3, "no");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_insert2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>INSTR()</h2>\n<k>MySQL Functions</k>\nSearch for "3" in string "W3Schools.com", and return position:\n  SELECT INSTR("W3Schools.com", "3") AS MatchPosition;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_instr" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe INSTR() function returns the position of the first occurrence of a string in another string.\nThis function performs a case-insensitive search.\n<h3>Syntax</h3>\n  INSTR(<em>string1</em> , <em>string2</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string1</em> </td><td>Required. \n\nThe string that will be searched</td></tr>\n  <tr><td><em>string2</em> </td><td>Required. \n\nThe string to search for in <em>string1. \n\n</em> If <em>string2</em>  is not found, this function returns 0</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSearch for "COM" in string "W3Schools.com", and return position:\nSELECT INSTR("W3Schools.com", "COM") AS MatchPosition;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_instr2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSearch for "a" in CustomerName column, and return position:\n  SELECT INSTR(CustomerName, "a")<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_instr3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LCASE()</h2>\n<k>MySQL Functions</k>\nConvert the text to lower-case:\nSELECT LCASE("SQL Tutorial is FUN!"); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_lcase" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LCASE() function converts a string to lower-case.\n<strong>Note:</strong> The <a href="func_mysql_lower.asp">LOWER()</a> function is a synonym for the LCASE() \nfunction.\n<h3>Syntax</h3>\n  LCASE(<em>text</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>text</em> </td><td>Required. \n\nThe string to convert</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert the text in "CustomerName" to lower-case:\nSELECT LCASE(CustomerName) AS LowercaseCustomerName<br>FROM Customers; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_lcase2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LEFT()</h2>\n<k>MySQL Functions</k>\nExtract 3 characters from a string (starting from left):\n  SELECT LEFT("SQL Tutorial", 3) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_left" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LEFT() function extracts a number of characters from a string (starting from left).\n<strong>Tip:</strong> Also look at the <a href="func_mysql_right.asp">RIGHT()</a> \nfunction.\n<h3>Syntax</h3>\n  LEFT(<em>string</em> , <em>number_of_chars</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>number_of_chars</em> </td><td>Required. \n\nThe number of characters to extract. \n\nIf this parameter is larger than the number of characters in <em>string</em> ,   this function will return <em>string</em> </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract 5 characters from the text in the "CustomerName" column (starting from left):\n  SELECT LEFT(CustomerName, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_left2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LENGTH()</h2>\n<k>MySQL Functions</k>\nReturn the length of the string, in bytes:\nSELECT LENGTH("SQL Tutorial") AS LengthOfString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_length" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LENGTH() function returns the length of a string (in bytes).\n<h3>Syntax</h3>\n  LENGTH(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to count the length for</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the length of the text in the "CustomerName" column, in bytes:\n  SELECT LENGTH(CustomerName) AS LengthOfName<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_length2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LOCATE()</h2>\n<k>MySQL Functions</k>\nSearch for "3" in string "W3Schools.com", and return position:\nSELECT LOCATE("3", "W3Schools.com") AS MatchPosition;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_locate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOCATE() function returns the position of the first occurrence of a substring in a string.\nIf the substring is not found within the original string, this function returns 0.\nThis function performs a case-insensitive search.\n\n<strong>Note:</strong> This function is equal to the\n<a href="func_mysql_position.asp">POSITION()</a> function.\n<h3>Syntax</h3>\nLOCATE(<em>substring</em> , <em>string</em> , <em>start</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>substring</em> </td><td>Required. \n\nThe substring to search for in <em>string</em>  </td></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string that will be searched</td></tr>\n  <tr><td><em>start</em> </td><td>Optional. \n\nThe starting position for the search. \n\nPosition 1 is default</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSearch for "com" in string "W3Schools.com" (start at position 3), and return position:\n  SELECT LOCATE("com", "W3Schools.com", 3) AS MatchPosition;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_locate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSearch for "a" in CustomerName column, and return position:\n  SELECT LOCATE("a", CustomerName)<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_locate3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LOWER()</h2>\n<k>MySQL Functions</k>\nConvert the text to lower-case:\nSELECT LOWER("SQL Tutorial is FUN!"); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_lower" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOWER() function converts a string to lower-case.\n<strong>Note:</strong> The <a href="func_mysql_lcase.asp">LCASE()</a> \nfunction is equal to the LOWER() function.\n<h3>Syntax</h3>\n  LOWER(<em>text</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>text</em> </td><td>Required. \n\nThe string to convert</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert the text in "CustomerName" to lower-case:\nSELECT LOWER(CustomerName) AS LowercaseCustomerName<br>FROM Customers; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_lower2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LPAD()</h2>\n<k>MySQL Functions</k>\nLeft-pad the string with "ABC", to a total length of 20:\nSELECT LPAD("SQL Tutorial",   20, "ABC");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_lpad" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LPAD() function left-pads a string with another string, to a certain length.\n<strong>Note:</strong> Also look at the <a href="func_mysql_rpad.asp">RPAD()</a> \nfunction.\n<h3>Syntax</h3>\n  LPAD(<em>string</em> , <em>\n  length</em> , <em>lpad_string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe original string. \n\nIf the length of the original string is larger than the <em>length</em>  parameter, this function removes the overfloating characters from\n    <em>string</em> </td></tr>\n  <tr><td><em>length</em> </td><td>Required. \n\nThe length of the string after it has been left-padded</td></tr>\n  <tr><td><em>lpad_string</em> </td><td>Required. \n\nThe string to left-pad to <em>string</em> </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nLeft-pad the text in "CustomerName" with "ABC", to a total length of 30:\n  SELECT LPAD(CustomerName, 30, "ABC") AS LeftPadCustomerName<br>FROM Customers; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_lpad2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LTRIM()</h2>\n<k>MySQL Functions</k>\nRemove leading spaces from a string:\n  SELECT LTRIM("     SQL Tutorial") AS LeftTrimmedString; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ltrim" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LTRIM() function removes leading spaces from a string.\n<h3>Syntax</h3>\n  LTRIM(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to remove leading spaces from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>MID()</h2>\n<k>MySQL Functions</k>\nExtract a substring from a string (start at position 5, extract 3 \ncharacters):\n  SELECT MID("SQL Tutorial", 5, 3) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_mid" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MID() function extracts a substring from a string (starting at any position).\n<strong>Note:</strong> The MID() and <a href="func_mysql_substr.asp">SUBSTR()</a> functions equals the <a href="func_mysql_substring.asp">SUBSTRING()</a> function. \n\n<h3>Syntax</h3>\n  MID(<em>string</em> , <em>start</em> , <em>length</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>start</em> </td><td>Required. \n\nThe start position. \n\nCan be both a positive or negative number. \n\n\n    If it is a positive number, this function extracts from the beginning of the string. \n\nIf it is a negative number, this function extracts from the end of the string</td></tr>\n  <tr><td><em>length</em> </td><td>Required. \n\nThe number of characters to extract</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract a substring from the text in a column (start at position 2, extract 5 \ncharacters):\n  SELECT MID(CustomerName,   2, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_mid2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract a substring from a string (start from the end, at position -5, extract \n5 \ncharacters):\n  SELECT MID("SQL Tutorial", -5, 5) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_mid3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>POSITION()</h2>\n<k>MySQL Functions</k>\nSearch for "3" in string "W3Schools.com", and return position:\n  SELECT POSITION("3" IN "W3Schools.com") AS MatchPosition;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_position" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe POSITION() function returns the position of the first occurrence of a substring in a string.\nIf the substring is not found within the original string, this function returns 0.\nThis function performs a case-insensitive search.\n\n<strong>Note:</strong> The <a href="func_mysql_locate.asp">LOCATE()</a> function is equal to the \nPOSITION() function.\n<h3>Syntax</h3>\n  POSITION(<em>substring</em>  IN <em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>substring</em> </td><td>Required. \n\nThe substring to search for in <em>string</em>  </td></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe original string that will be searched</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSearch for "COM" in string "W3Schools.com", and return position:\nSELECT POSITION("COM" IN "W3Schools.com") AS MatchPosition;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_position2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSearch for "a" in CustomerName column, and return position:\n  SELECT POSITION("a" IN CustomerName)<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_position3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>REPEAT()</h2>\n<k>MySQL Functions</k>\nRepeat a string 3 times:\n  SELECT REPEAT("SQL Tutorial", 3);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_repeat" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe REPEAT() function repeats a string as many times as specified.\n<h3>Syntax</h3>\n  REPEAT(<em>string</em> , <em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to repeat</td></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number of times to repeat the string</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nRepeat the text in CustomerName 2 times:\n  SELECT REPEAT(CustomerName,   2)<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_repeat2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nRepeat the string 0 times:\n  SELECT REPEAT("SQL Tutorial", 0);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_repeat3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>REPLACE()</h2>\n<k>MySQL Functions</k>\nReplace "SQL" with "HTML":\n  SELECT REPLACE("SQL Tutorial", "SQL", "HTML");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_replace" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe REPLACE() function replaces all occurrences of a substring within a string, with a new substring.\n<strong>Note:</strong> This function performs a case-sensitive replacement.\n<h3>Syntax</h3>\n  REPLACE(<em>string</em> , <em>from_string</em> , <em>new_string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe original string</td></tr>\n  <tr><td><em>from_string</em> </td><td>Required. \n\nThe substring to be replaced</td></tr>\n  <tr><td><em>new_string</em> </td><td>Required. \n\nThe new replacement substring</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReplace "X" with "M":\n  SELECT REPLACE("XYZ FGH XYZ", "X", "M");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_replace2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReplace "X" with "m":\n  SELECT REPLACE("XYZ FGH XYZ", "X", "m");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_replace3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReplace "x" with "m":\n  SELECT REPLACE("XYZ FGH XYZ", "x", "m");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_replace4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>REVERSE()</h2>\n<k>MySQL Functions</k>\nReverse a string:\n  SELECT REVERSE("SQL Tutorial");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_reverse" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe REVERSE() function reverses a string and returns the result.\n<h3>Syntax</h3>\n  REVERSE(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to reverse</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReverse the text in CustomerName:\n  SELECT REVERSE(CustomerName)<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_reverse2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>RIGHT()</h2>\n<k>MySQL Functions</k>\nExtract 4 characters from a string (starting from right):\n  SELECT RIGHT("SQL Tutorial is cool", 4) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_right" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RIGHT() function extracts a number of characters from a string (starting from right).\n<strong>Tip:</strong> Also look at the <a href="func_mysql_left.asp">LEFT()</a> \nfunction.\n<h3>Syntax</h3>\n  RIGHT(<em>string</em> , <em>number_of_chars</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>number_of_chars</em> </td><td>Required. \n\nThe number of characters to extract. \n\nIf this parameter is larger than the number of characters in <em>string</em> ,   this function will return <em>string</em> </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract 5 characters from the text in the "CustomerName" column (starting from right):\n  SELECT RIGHT(CustomerName, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_right2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>RPAD()</h2>\n<k>MySQL Functions</k>\nRight-pad the string with "ABC", to a total length of 20:\nSELECT RPAD("SQL Tutorial",   20, "ABC");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_rpad" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RPAD() function right-pads a string with another string, to a certain length.\n<strong>Note:</strong> Also look at the <a href="func_mysql_lpad.asp">LPAD()</a> \nfunction.\n<h3>Syntax</h3>\n  RPAD(<em>string</em> , <em>\n  length</em> , <em>rpad_string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe original string. \n\nIf the length of the original string is larger than the <em>length</em>  parameter, this function removes the overfloating characters from\n    <em>string</em> </td></tr>\n  <tr><td><em>length</em> </td><td>Required. \n\nThe length of the string after it has been right-padded</td></tr>\n  <tr><td><em>rpad_string</em> </td><td>Required. \n\nThe string to right-pad to <em>string</em> </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nRight-pad the text in "CustomerName" with "ABC", to a total length of 30:\n  SELECT \n  RPAD(CustomerName, 30, "ABC") AS RightPadCustomerName<br>FROM Customers; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_rpad2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>RTRIM()</h2>\n<k>MySQL Functions</k>\nRemove trailing spaces from a string:\n  SELECT RTRIM("SQL Tutorial     ") AS RightTrimmedString; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_rtrim" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RTRIM() function removes trailing spaces from a string.\n<h3>Syntax</h3>\n  RTRIM(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to remove trailing spaces from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>SPACE()</h2>\n<k>MySQL Functions</k>\nReturn a string with 10 space characters:\n  SELECT \n  SPACE(10);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_space" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SPACE() function returns a string of the specified number of space characters.\n<h3>Syntax</h3>\n  SPACE(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number of space characters to return</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>STRCMP()</h2>\n<k>MySQL Functions</k>\nCompare two strings:\nSELECT STRCMP("SQL Tutorial",   "SQL Tutorial");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_strcmp" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe STRCMP() function compares two strings.\n<h3>Syntax</h3>\n  STRCMP(<em>string1</em> , <em>string2</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string1, string2</em> </td><td>Required. \n\nThe two strings to be compared</td></tr>\n  </table>\n<h3>Return Values</h3>\n\nIf <em>string1</em>  = <em>string2</em> , this function returns 0\nIf <em>string1</em>  &lt; <em>string2</em> , this function returns -1\nIf <em>string1</em>  &gt; <em>string2</em> , this function returns 1\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nCompare two strings:\nSELECT STRCMP("SQL Tutorial",   "HTML Tutorial");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_strcmp2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SUBSTR()</h2>\n<k>MySQL Functions</k>\nExtract a substring from a string (start at position 5, extract 3 \ncharacters):\n  SELECT SUBSTR("SQL Tutorial", 5, 3) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substr" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUBSTR() function extracts a substring from a string (starting at any position).\n<strong>Note:</strong> The SUBSTR() and <a href="func_mysql_mid.asp">MID()</a> functions equals to the \n<a href="func_mysql_substring.asp">SUBSTRING()</a> \nfunction. \n\n<h3>Syntax</h3>\n  SUBSTR(<em>string</em> , <em>start</em> , <em>length</em> )<strong>OR:</strong> \n  SUBSTR(<em>string</em>  FROM <em>start</em>  FOR <em>length</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>start</em> </td><td>Required. \n\nThe start position. \n\nCan be both a positive or negative number. \n\n\n    If it is a positive number, this function extracts from the beginning of the string. \n\nIf it is a negative number, this function extracts from the end of the string</td></tr>\n  <tr><td><em>length</em> </td><td>Optional. \n\nThe number of characters to extract. \n\nIf omitted, the whole string will be returned (from the <em>start</em>  position)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract a substring from the text in a column (start at position 2, extract 5 \ncharacters):\n  SELECT SUBSTR(CustomerName,   2, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substr2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract a substring from a string (start from the end, at position -5, extract \n5 \ncharacters):\n  SELECT SUBSTR("SQL Tutorial", -5, 5) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substr3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SUBSTRING()</h2>\n<k>MySQL Functions</k>\nExtract a substring from a string (start at position 5, extract 3 \ncharacters):\n  SELECT SUBSTRING("SQL Tutorial", 5, 3) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substring" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUBSTRING() function extracts a substring from a string (starting at any position).\n<strong>Note:</strong> The <a href="func_mysql_substr.asp">SUBSTR()</a> and <a href="func_mysql_mid.asp">MID()</a> functions equals to the SUBSTRING() \nfunction. \n\n<h3>Syntax</h3>\n  SUBSTRING(<em>string</em> , <em>start</em> , <em>length</em> )<strong>OR:</strong> \n  SUBSTRING(<em>string</em>  FROM <em>start</em>  FOR <em>length</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>start</em> </td><td>Required. \n\nThe start position. \n\nCan be both a positive or negative number. \n\n\n    If it is a positive number, this function extracts from the beginning of the string. \n\nIf it is a negative number, this function extracts from the end of the string</td></tr>\n  <tr><td><em>length</em> </td><td>Optional. \n\nThe number of characters to extract. \n\nIf omitted, the whole string will be returned (from the <em>start</em>  position)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract a substring from the text in a column (start at position 2, extract 5 \ncharacters):\n  SELECT SUBSTRING(CustomerName,   2, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substring2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract a substring from a string (start from the end, at position -5, extract \n5 \ncharacters):\n  SELECT SUBSTRING("SQL Tutorial", -5, 5) AS ExtractString;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substring3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SUBSTRING_INDEX()</h2>\n<k>MySQL Functions</k>\nReturn a substring of a string before a specified number of delimiter occurs:\n  SELECT SUBSTRING_INDEX("www.w3schools.com", ".", 1);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substring_index" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUBSTRING_INDEX() function returns a substring of a string before a specified number of delimiter occurs.\n<h3>Syntax</h3>\n  SUBSTRING_INDEX(<em>string</em> , <em>delimiter</em> , <em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe original string</td></tr>\n  <tr><td><em>delimiter</em> </td><td>Required. \n\nThe delimiter to search for</td></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number of times to search for the <em>delimiter.</em>  Can be both a positive or negative number. \n\nIf it is a positive number, this function returns all to the left of the <em>delimiter</em> . \n\nIf it is a negative number, this function returns all to the right of the <em>delimiter</em> .</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a substring of a string before a specified number of delimiter occurs:\n  SELECT SUBSTRING_INDEX("www.w3schools.com", ".", 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_substring_index2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TRIM()</h2>\n<k>MySQL Functions</k>\nRemove leading and trailing spaces from a string:\n  SELECT TRIM(\'    SQL Tutorial    \') AS TrimmedString; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_trim" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TRIM() function removes leading and trailing spaces from a string.\n<h3>Syntax</h3>\n  TRIM(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to remove leading and trailing spaces from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>UCASE()</h2>\n<k>MySQL Functions</k>\nConvert the text to upper-case:\nSELECT UCASE("SQL Tutorial is FUN!"); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ucase" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe UCASE() function converts a string to upper-case.\n<strong>Note:</strong> This function is equal to the <a href="func_mysql_upper.asp">UPPER()</a> function.\n<h3>Syntax</h3>\n  UCASE(<em>text</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>text</em> </td><td>Required. \n\nThe string to convert</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert the text in "CustomerName" to upper-case:\nSELECT UCASE(CustomerName) AS UppercaseCustomerName<br>FROM Customers; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ucase2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>UPPER()</h2>\n<k>MySQL Functions</k>\nConvert the text to upper-case:\nSELECT UPPER("SQL Tutorial is FUN!"); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_upper" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe UPPER() function converts a string to upper-case.\n<strong>Note:</strong> This function is equal to the <a href="func_mysql_ucase.asp">UCASE()</a> \nfunction.\n<h3>Syntax</h3>\n  UPPER(<em>text</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>text</em> </td><td>Required. \n\nThe string to convert</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert the text in "CustomerName" to upper-case:\nSELECT UPPER(CustomerName) AS UppercaseCustomerName<br>FROM Customers; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_upper2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ABS()</h2>\n\n<k>MySQL Functions</k>\nReturn the absolute value of a number:\nSELECT ABS(-243.5); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_abs" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ABS() function returns the absolute (positive) value of a number.\n<h3>Syntax</h3>\n  ABS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>ACOS()</h2>\n\n<k>MySQL Functions</k>\nReturn the arc cosine of a number:\n  SELECT ACOS(0.25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_acos" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ACOS() function returns the arc cosine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL.\n<h3>Syntax</h3>\n  ACOS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc cosine of a number:\nSELECT ACOS(-0.8);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_acos2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ASIN()</h2>\n\n<k>MySQL Functions</k>\nReturn the arc sine of a number:\n  SELECT ASIN(0.25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_asin" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ASIN() function returns the arc sine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL. \n<h3>Syntax</h3>\n  ASIN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc sine of a number:\nSELECT ASIN(-0.8);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_asin2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ATAN()</h2>\n\n<k>MySQL Functions</k>\nReturn the arc tangent of a number:\n  SELECT ATAN(2.5);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_atan" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ATAN() function returns the arc tangent of one or two numbers.\n<h3>Syntax</h3>\nATAN(<em>number</em> )OR:\nATAN(<em>a, b</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>A numeric value</td></tr>\n  <tr><td><em>a, b</em> </td><td>Two numeric values to calculate the arc tangent of</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc tangent of two values:\nSELECT ATAN(-0.8, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_atan2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ATAN2()</h2>\n\n<k>MySQL Functions</k>\nReturn the arc tangent of two values:\n  SELECT ATAN2(0.50, 1);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_atan2_1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ATAN2() function returns the arc tangent of two numbers.\n<h3>Syntax</h3>\nATAN2(<em>a, b</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>a, b</em> </td><td>Required. \n\nTwo numeric values to calculate the arc tangent of</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc tangent of two values:\nSELECT ATAN2(-0.8, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_atan2_2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>AVG()</h2>\n\n<k>MySQL Functions</k>\nReturn the average value for the "Price" column in the "Products" table:\nSELECT AVG(Price) AS \n  AveragePrice FROM Products;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_avg" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe AVG() function returns the average value of an expression.\n<strong>Note:</strong> NULL values are ignored. \n<h3>Syntax</h3>\nAVG(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA numeric value (can be a field or a formula)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSelect the records that have a price above the average price:\nSELECT * FROM Products<br>WHERE Price &gt; (SELECT AVG(Price) FROM Products); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_avg2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CEIL()</h2>\n\n<k>MySQL Functions</k>\nReturn the smallest integer value that is greater than or equal to 25.75:\n  SELECT CEIL(25.75);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ceil" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CEIL() function returns the smallest integer value that is bigger than or equal to a number.\n<strong>Note:</strong> This function is equal to the \n<a href="func_mysql_ceiling.asp">CEILING()</a> \nfunction.\n<h3>Syntax</h3>\n  CEIL(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the smallest integer value that is greater than or equal to 25:\nSELECT CEIL(25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ceil2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CEILING()</h2>\n\n<k>MySQL Functions</k>\nReturn the smallest integer value that is greater than or equal to 25.75:\n  SELECT CEILING(25.75);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ceiling" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CEILING() function returns the smallest integer value that is bigger than or equal to a number.\n<strong>Note:</strong> This function is equal to the <a href="func_mysql_ceil.asp">CEIL()</a> function.\n<h3>Syntax</h3>\n  CEILING(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the smallest integer value that is greater than or equal to 25:\nSELECT CEILING(25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ceiling2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>COS()</h2>\n\n<k>MySQL Functions</k>\nReturn the cosine of a number:\n  SELECT COS(2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cos" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COS() function returns the cosine of a number.\n<h3>Syntax</h3>\n  COS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the cosine of a number:\nSELECT COS(PI()); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cos2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>COT()</h2>\n\n<k>MySQL Functions</k>\nReturn the cotangent of a number:\n  SELECT COT(6);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cot" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COT() function returns the cotangent of a number.\n<h3>Syntax</h3>\n  COT(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value. \n\nIf number is 0, an error or NULL is returned</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the cotangent of a number:\nSELECT COT(-2); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cot2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>COUNT()</h2>\n\n<k>MySQL Functions</k>\nReturn the number of products in the "Products" table:\nSELECT COUNT(ProductID) AS NumberOfProducts FROM Products;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_count" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COUNT() function returns the number of records returned by a select query.\n<strong>Note:</strong> NULL values are not counted.\n<h3>Syntax</h3>\n  COUNT(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA field or a string value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>DEGREES()</h2>\n\n<k>MySQL Functions</k>\nConvert the radian value into degrees:\n  SELECT DEGREES(1.5);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_degrees" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DEGREES() function converts a value in radians to degrees.\n<strong>Note:</strong> See also the <a href="func_mysql_radians.asp">RADIANS()</a> and\n<a href="func_mysql_pi.asp">PI()</a> functions.\n<h3>Syntax</h3>\n  DEGREES(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert the radian value into degrees:\nSELECT DEGREES(PI()*2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_degrees2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DIV</h2>\n\n<k>MySQL Functions</k>\nInteger division (10/5):\n  SELECT 10 DIV 5;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_div" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DIV function is used for integer division (x is divided by y). \n\nAn integer value is returned.\n<h3>Syntax</h3>\n  <em>x</em>  DIV <em>y</em> \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>x</em> </td><td>Required. \n\nA value that will be divided by <em>y</em> </td></tr>\n  <tr><td><em>y</em> </td><td>Required. \n\nThe divisor</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nInteger division (8/3):\nSELECT 8 DIV 3;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_div2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>EXP()</h2>\n\n<k>MySQL Functions</k>\nReturn <em>e</em>  raised to the power of 1:\n  SELECT EXP(1);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_exp" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe EXP() function returns <em>e</em>  raised to the power of the specified number.\nThe constant <em>e</em>  (2.718281...), is the base of natural logarithms.\n<strong>Tip:</strong> Also look at the <a href="func_mysql_log.asp">LOG()</a> and\n<a href="func_mysql_ln.asp">LN()</a> functions.\n<h3>Syntax</h3>\n  EXP(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe power number</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn <em>e</em>  raised to the power of 2:\nSELECT EXP(2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_exp2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>FLOOR()</h2>\n\n<k>MySQL Functions</k>\nReturn the largest integer value that is less than or equal to 25.75:\n  SELECT FLOOR(25.75);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_floor" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe FLOOR() function returns the largest integer value that is smaller than or equal to a number.\n<strong>Note:</strong> Also look at the <a href="func_mysql_round.asp">ROUND()</a>, <a href="func_mysql_ceil.asp">\nCEIL()</a>, <a href="func_mysql_ceiling.asp">CEILING()</a>, <a href="func_mysql_truncate.asp">TRUNCATE()</a>, and\n<a href="func_mysql_div.asp">DIV</a> functions.\n<h3>Syntax</h3>\n  FLOOR(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the largest integer value that is greater than or equal to 25:\n  SELECT FLOOR(25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_floor2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>GREATEST()</h2>\n\n<k>MySQL Functions</k>\nReturn the greatest value of the list of arguments:\n  SELECT GREATEST(3, 12, 34, 8, 25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_greatest" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe GREATEST() function returns the greatest value of the list of arguments.\n<strong>Note:</strong> See also the <a href="func_mysql_least.asp">LEAST()</a> function.\n<h3>Syntax</h3>\n  GREATEST(<em>arg1</em> , <em>arg2</em> , <em>arg3</em> , ...)\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>arg1</em> , <em>arg2</em> , <em>arg3</em> , ...</td><td>Required. \n\nThe list of arguments to be evaluated</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the greatest value of the list of arguments:\n  SELECT GREATEST("w3Schools.com", "microsoft.com", "apple.com");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_greatest2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LEAST()</h2>\n\n<k>MySQL Functions</k>\nReturn the smallest value of the list of arguments:\n  SELECT LEAST(3, 12, 34, 8, 25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_least" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LEAST() function returns the smallest value of the list of arguments.\n<strong>Note:</strong> See also the <a href="func_mysql_greatest.asp">\nGREATEST()</a> function.\n<h3>Syntax</h3>\n  LEAST(<em>arg1</em> , <em>arg2</em> , <em>arg3</em> , ...)\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>arg1</em> , <em>arg2</em> , <em>arg3</em> , ...</td><td>Required. \n\nThe list of arguments to be evaluated</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the smallest value of the list of arguments:\n  SELECT LEAST("w3Schools.com", "microsoft.com", "apple.com");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_least2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LN()</h2>\n\n<k>MySQL Functions</k>\nReturn the natural logarithm of 2:\n  SELECT LN(2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ln" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LN() function returns the natural logarithm of a number.\n<strong>Note:</strong> See also the <a href="func_mysql_log.asp">LOG()</a> and\n<a href="func_mysql_exp.asp">EXP()</a> functions.\n<h3>Syntax</h3>\n  LN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number. \n\nMust be greater than 0</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the natural logarithm of 1:\nSELECT LN(1); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ln2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LOG()</h2>\n\n<k>MySQL Functions</k>\nReturn the natural logarithm of 2:\n  SELECT LOG(2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_log" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOG() function returns the natural logarithm of a specified <em>number</em> , or the logarithm of the \n<em>number</em>  to the specified <em>base</em> .\n<strong>Note:</strong> See also the <a href="func_mysql_ln.asp">LN()</a> and\n<a href="func_mysql_exp.asp">EXP()</a> functions.\n<h3>Syntax</h3>\nLOG(<em>number</em> )OR:\n  LOG(<em>base, number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number. \n\nMust be greater than 0</td></tr>\n  <tr><td><em>base</em> </td><td>The base of <em>number</em> . \n\nMust be greater than 1</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the natural logarithm of 4 to a specified base (2):\nSELECT LOG(2, 4);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_log2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LOG10()</h2>\n\n<k>MySQL Functions</k>\nReturn the base-10 logarithm of 2:\n  SELECT LOG10(2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_log10" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOG10() function returns the natural logarithm of a number to base-10.\n<strong>Note:</strong> See also the <a href="func_mysql_log.asp">LOG()</a> function.\n<h3>Syntax</h3>\n  LOG10(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>A number greater than 0</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the base-10 logarithm of 4.5:\nSELECT LOG10(4.5);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_log102" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LOG2()</h2>\n\n<k>MySQL Functions</k>\nReturn the base-2 logarithm of 6:\n  SELECT LOG2(6);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_log2_1" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOG2() function returns the natural logarithm of a number to base-2.\n<strong>Note:</strong> See also the <a href="func_mysql_log.asp">LOG()</a> function.\n<h3>Syntax</h3>\n  LOG2(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>A number. \n\nMust be greater than 0</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the base-2 logarithm of 64:\nSELECT LOG2(64);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_log2_2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>MAX()</h2>\n\n<k>MySQL Functions</k>\nFind the price of the most expensive product in the "Products" table:\nSELECT MAX(Price) AS LargestPrice FROM Products;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_max" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MAX() function returns the maximum value in a set of values.\n<strong>Note:</strong> See also the <a href="func_mysql_min.asp">MIN()</a> function.\n<h3>Syntax</h3>\n  MAX(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA numeric value (can be a field or a formula)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>MIN()</h2>\n\n<k>MySQL Functions</k>\nFind the price of the cheapest product in the "Products" table:\nSELECT MIN(Price) AS \n  SmallestPrice FROM Products;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_min" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MIN() function returns the minimum value in a set of values.\n<strong>Note:</strong> See also the <a href="func_mysql_max.asp">MAX()</a> function.\n<h3>Syntax</h3>\n  MIN(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA numeric value (can be a field or a formula)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>MOD()</h2>\n\n<k>MySQL Functions</k>\nReturn the remainder of 18/4:\n  SELECT MOD(18, 4);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_mod" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MOD() function returns the remainder of a number divided by another number.\n<h3>Syntax</h3>\n  MOD(<em>x</em> , <em>y</em> )<strong>OR:</strong>\n  <em>x</em>  MOD <em>y</em> <strong>OR:</strong>\n  <em>x </em> % <em>y</em> \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>x</em> </td><td>Required. \n\nA value that will be divided by <em>y</em> </td></tr>\n  <tr><td><em>y</em> </td><td>Required. \n\nThe divisor</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the remainder of 18/4:\n  SELECT 18 MOD 4; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_mod2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the remainder of 18/4:\n  SELECT 18 % 4; <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_mod3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>PI()</h2>\n\n<k>MySQL Functions</k>\nReturn the value of PI:\n  SELECT PI();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_pi" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe PI() function returns the value of PI.\n<strong>Note:</strong> See also the <a href="func_mysql_degrees.asp">\nDEGREES()</a> and <a href="func_mysql_radians.asp">RADIANS()</a> functions.\n<h3>Syntax</h3>\n  PI()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>POW()</h2>\n\n<k>MySQL Functions</k>\nReturn 4 raised to the second power:\n  SELECT POW(4, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_pow" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe POW() function returns the value of a number raised to the power of another number.\n<strong>Note:</strong> This function is equal to the\n<a href="func_mysql_power.asp">POWER()</a> function.\n<h3>Syntax</h3>\n  POW(<em>x</em> , y)\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>x</em> </td><td>Required. \n\nA number (the base)</td></tr>\n  <tr><td>y</td><td>Required. \n\nA number (the exponent)</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn 8 raised to the third power:\n  SELECT POW(8, 3);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_pow2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>POWER()</h2>\n\n<k>MySQL Functions</k>\nReturn 4 raised to the second power:\n  SELECT POWER(4, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_power" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe POWER() function returns the value of a number raised to the power of another number.\n<strong>Note:</strong> This function is equal to the \n<a href="func_mysql_pow.asp">POW()</a> \nfunction.\n<h3>Syntax</h3>\n  POWER(<em>x, y</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>x</em> </td><td>Required. \n\nA number (the base)</td></tr>\n  <tr><td>y</td><td>Required. \n\nA number (the exponent)</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn 8 raised to the third power:\n  SELECT POWER(8, 3);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_power2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>RADIANS()</h2>\n\n<k>MySQL Functions</k>\nConvert a degree value into radians:\n  SELECT RADIANS(180);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_radians" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RADIANS() function converts a degree value into radians.\n<strong>Note:</strong> See also the <a href="func_mysql_degrees.asp">DEGREES()</a> and <a href="func_mysql_pi.asp">PI()</a> functions.\n<h3>Syntax</h3>\n  RADIANS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number in degrees</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert a degree value into radians:\nSELECT RADIANS(-45);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_radians2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>RAND()</h2>\n\n<k>MySQL Functions</k>\nReturn a random decimal number (no seed value - so it returns a completely random number &gt;= 0 and &lt;1):\n  SELECT RAND();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_rand" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RAND() function returns a random number between 0 (inclusive) and 1 \n(exclusive).\n<h3>Syntax</h3>\n  RAND(<em>seed</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>seed</em> </td><td>Optional. \n\nIf seed is specified, it returns a repeatable sequence of random numbers. \n\nIf no seed is specified, it returns a completely random number</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a random decimal number (with seed value of 6):\nSELECT RAND(6);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_rand2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a random decimal number &gt;= 5 and &lt;10:\nSELECT RAND()*(10-5)+5;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_rand3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a random number &gt;= 5 and &lt;=10:\nSELECT FLOOR(RAND()*(10-5+1)+5);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_rand4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ROUND()</h2>\n\n<k>MySQL Functions</k>\nRound the number to 2 decimal places:\n  SELECT ROUND(135.375, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_round" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ROUND() function rounds a number to a specified number of decimal places.\n<strong>Note:</strong> See also the <a href="func_mysql_floor.asp">FLOOR()</a>, <a href="func_mysql_ceil.asp">\nCEIL()</a>, <a href="func_mysql_ceiling.asp">CEILING()</a>, and \n<a href="func_mysql_truncate.asp">TRUNCATE()</a> functions.\n<h3>Syntax</h3>\n  ROUND(<em>number</em> , <em>decimals</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to be rounded</td></tr>\n  <tr><td><em>decimals</em> </td><td>Optional. \n\nThe number of decimal places to round <em>number</em>  to. \n\nIf omitted,     it returns the integer (no decimals)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nRound the number to 0 decimal places:\n  SELECT ROUND(345.156,   0);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_round2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nRound the Price column (to 1 decimal) in the "Products" table:\n SELECT ProductName, Price, ROUND(Price, 1) AS RoundedPrice<br>FROM Products;<a target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_func_mysql_round3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SIGN()</h2>\n\n<k>MySQL Functions</k>\nReturn the sign of a number:\n  SELECT SIGN(255.5);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sign" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SIGN() function returns the sign of a number.\nThis function will return one of the following:\n\nIf number &gt; 0, it returns 1\nIf number = 0, it returns 0\nIf number &lt; 0, it returns -1\n<h3>Syntax</h3>\n  SIGN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to return the sign for</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the sign of a number:\nSELECT SIGN(-12);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sign2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SIN()</h2>\n\n<k>MySQL Functions</k>\nReturn the sine of a number:\n  SELECT SIN(2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sin" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SIN() function returns the sine of a number.\n<h3>Syntax</h3>\n  SIN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the sine of a number:\nSELECT SIN(-1); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sin2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SQRT()</h2>\n\n<k>MySQL Functions</k>\nReturn the square root of a number:\n  SELECT SQRT(64);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sqrt" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SQRT() function returns the square root of a number.\n<h3>Syntax</h3>\n  SQRT(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number to calculate the square root of. \n\nMust be greater than 0</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the square root of a number:\nSELECT SQRT(13);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sqrt2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SUM()</h2>\n\n<k>MySQL Functions</k>\nReturn the sum of the "Quantity" field in the "OrderDetails" table:\n  SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sum" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUM() function calculates the sum of a set of values.\n<strong>Note:</strong> NULL values are ignored.\n<h3>Syntax</h3>\n  SUM(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA field or a formula</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>TAN()</h2>\n\n<k>MySQL Functions</k>\nReturn the tangent of a number:\n  SELECT TAN(1.75);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_tan" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TAN() function returns the tangent of a number.\n<h3>Syntax</h3>\n  TAN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the tangent of a number:\nSELECT TAN(-3);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_tan2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TRUNCATE()</h2>\n\n<k>MySQL Functions</k>\nReturn a number truncated to 2 decimal places:\n  SELECT TRUNCATE(135.375, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_truncate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TRUNCATE() function truncates a number to the specified number of decimal places.\n<strong>Note:</strong> See also the <a href="func_mysql_floor.asp">FLOOR()</a>, <a href="func_mysql_ceil.asp">\nCEIL()</a>, <a href="func_mysql_ceiling.asp">CEILING()</a>, and \n<a href="func_mysql_round.asp">ROUND()</a> functions.\n<h3>Syntax</h3>\n  TRUNCATE(<em>number</em> , <em>decimals</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to be truncated</td></tr>\n  <tr><td><em>decimals</em> </td><td>Required. \n\nThe number of decimal places to truncate to</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a number truncated to 0 decimal places:\n  SELECT TRUNCATE(345.156,   0);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_truncate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ADDDATE()</h2>\n\n<k>MySQL Functions</k>\nAdd 10 days to a date and return the date:\n  SELECT ADDDATE("2017-06-15", INTERVAL 10 DAY);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_adddate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ADDDATE() function adds a time/date interval to a date and then returns the date.\n<h3>Syntax</h3>\n  ADDDATE(<em>date</em> , INTERVAL <em>value addunit</em> )<strong>OR:</strong>\n  ADDDATE(<em>date</em> , <em>days</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required.  The date to be modified</td></tr>\n  <tr><td><em>days</em> </td><td>Required. \n\nThe number of days to add to <em>date</em> </td></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value of the time/date interval to add. \n\nBoth positive and negative values are allowed</td></tr>\n  <tr><td><em>addunit</em> </td><td>Required. \n\nThe type of interval to add. \n\nCan be one of the following values:\n    \n    MICROSECOND\n    SECOND\n    MINUTE\n    HOUR\n    DAY\n    WEEK\n    MONTH\n    QUARTER\n    YEAR\n    SECOND_MICROSECOND\n    MINUTE_MICROSECOND\n    MINUTE_SECOND\n    HOUR_MICROSECOND\n    HOUR_SECOND\n    HOUR_MINUTE\n    DAY_MICROSECOND\n    DAY_SECOND\n    DAY_MINUTE\n    DAY_HOUR\n    YEAR_MONTH\n    \n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nAdd 15 minutes to a date and return the date:\nSELECT ADDDATE("2017-06-15 09:34:21", INTERVAL 15 MINUTE);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_adddate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract 3 hours to a date and return the date:\nSELECT ADDDATE("2017-06-15 09:34:21", INTERVAL -3 HOUR);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_adddate3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract 2 months to a date and return the date:\nSELECT ADDDATE("2017-06-15", INTERVAL -2 MONTH);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_adddate4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ADDTIME()</h2>\n\n<k>MySQL Functions</k>\nAdd 2 seconds to a time and return the datetime:\n  SELECT ADDTIME("2017-06-15 \n  09:34:21", "2");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_addtime" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ADDTIME() function adds a time interval to a time/datetime and then returns the time/datetime.\n<h3>Syntax</h3>\nADDTIME(<em>datetime</em> , <em>addtime</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>datetime</em> </td><td>Required.  The time/datetime to be modified</td></tr>\n  <tr><td><em>addtime</em> </td><td>Required. \n\nThe time interval to add to <em>datetime</em> . \n\nBoth positive and negative values are allowed</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nAdd 5 seconds and 3 microseconds to a time and return the datetime:\n  SELECT ADDTIME("2017-06-15 \n  09:34:21.000001", "5.000003");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_addtime2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime:\n  SELECT ADDTIME("2017-06-15 09:34:21.000001", "2:10:5.000003");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_addtime3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd 5 days, 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime:\n  SELECT ADDTIME("2017-06-15 \n  09:34:21.000001", "5 2:10:5.000003");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_addtime4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the time:\n  SELECT ADDTIME("09:34:21.000001", "2:10:5.000003");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_addtime5" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CURDATE()</h2>\n\n<k>MySQL Functions</k>\nReturn the current date:\n  SELECT CURDATE();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_curdate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURDATE() function returns the current date.\n<strong>Note:</strong> The date is returned as \n"YYYY-MM-DD" (string) or as YYYYMMDD (numeric).\n<strong>Note:</strong> This function equals the\n<a href="func_mysql_current_date.asp">CURRENT_DATE()</a> function.\n<h3>Syntax</h3>\nCURDATE()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the current date + 1:\n  SELECT CURDATE() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_curdate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CURRENT_DATE()</h2>\n\n<k>MySQL Functions</k>\nReturn the current date:\n  SELECT CURRENT_DATE();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_current_date" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURRENT_DATE() function returns the current date.\n<strong>Note:</strong> The date is returned as \n"YYYY-MM-DD" (string) or as YYYYMMDD (numeric).\n<strong>Note: </strong>This function equals the \n<a href="func_mysql_curdate.asp">CURDATE()</a> \nfunction.\n<h3>Syntax</h3>\nCURRENT_DATE()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the current date + 1:\n  SELECT CURRENT_DATE() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_current_date2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CURRENT_TIME()</h2>\n\n<k>MySQL Functions</k>\nReturn current time:\n  SELECT CURRENT_TIME();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_current_time" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURRENT_TIME() function returns the current time.\n<strong>Note:</strong> The time is returned as \n"HH-MM-SS" (string) or as HHMMSS.uuuuuu (numeric).\n<strong>Note: </strong>This function equals the\n<a href="func_mysql_curtime.asp">CURTIME()</a> \nfunction.\n<h3>Syntax</h3>\nCURRENT_TIME()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn current time + 1:\n  SELECT CURRENT_TIME() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_current_time2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CURRENT_TIMESTAMP()</h2>\n\n<k>MySQL Functions</k>\nReturn the current date and time:\n  SELECT CURRENT_TIMESTAMP();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_current_timestamp" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURRENT_TIMESTAMP() function returns the current date and time.\n<strong>Note:</strong> The date and time is returned as "YYYY-MM-DD HH-MM-SS" \n(string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\n<h3>Syntax</h3>\nCURRENT_TIMESTAMP()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the current date and time + 1:\n  SELECT CURRENT_TIMESTAMP() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_current_timestamp2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CURTIME()</h2>\n\n<k>MySQL Functions</k>\nReturn current time:\n  SELECT CURTIME();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_curtime" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURTIME() function returns the current time.\n<strong>Note:</strong> The time is returned as \n"HH-MM-SS" (string) or as HHMMSS.uuuuuu (numeric).\n<strong>Note:</strong> This function equals the <a href="func_mysql_current_time.asp">CURRENT_TIME()</a> \nfunction.\n<h3>Syntax</h3>\nCURTIME()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn current time + 1:\n  SELECT CURTIME() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_curtime2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DATE()</h2>\n\n<k>MySQL Functions</k>\nExtract the date part:\n  SELECT DATE("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATE() function extracts the date part from a datetime expression.\n<h3>Syntax</h3>\n  DATE(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required.  A valid date/datetime value. \n\nReturns NULL if expression is not a date or a datetime</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract the date part:\nSELECT DATE("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract the date part (will return NULL):\nSELECT DATE("The date is 2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract the date part:\n  SELECT DATE(OrderDate) FROM Orders;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DATEDIFF()</h2>\n\n<k>MySQL Functions</k>\nReturn the number of days between two date values:\n  SELECT DATEDIFF("2017-06-25", "2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_datediff" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATEDIFF() function returns the number of days between two date values.\n<h3>Syntax</h3>\n  DATEDIFF(<em>date1</em> , <em>date2</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date1, date2</em> </td><td>Required. \n\nTwo dates to calculate the number of days between. \n\n(date1 - \n    date2)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the number of days between two date values:\n  SELECT DATEDIFF("2017-06-25 09:34:21", "2017-06-15 15:25:35");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_datediff2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the number of days between two date values:\n  SELECT DATEDIFF("2017-01-01",   "2016-12-24");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_datediff3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DATE_ADD()</h2>\n\n<k>MySQL Functions</k>\nAdd 10 days to a date and return the date:\n  SELECT DATE_ADD("2017-06-15", INTERVAL 10 DAY);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_add" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATE_ADD() function adds a time/date interval to a date and then returns the date.\n<h3>Syntax</h3>\n  DATE_ADD(<em>date</em> , INTERVAL <em>value addunit</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to be modified</td></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value of the time/date interval to add. \n\nBoth positive and negative values are allowed</td></tr>\n  <tr><td><em>addunit</em> </td><td>Required. \n\nThe type of interval to add. \n\nCan be one of the following values:\n    \n    MICROSECOND\n    SECOND\n    MINUTE\n    HOUR\n    DAY\n    WEEK\n    MONTH\n    QUARTER\n    YEAR\n    SECOND_MICROSECOND\n    MINUTE_MICROSECOND\n    MINUTE_SECOND\n    HOUR_MICROSECOND\n    HOUR_SECOND\n    HOUR_MINUTE\n    DAY_MICROSECOND\n    DAY_SECOND\n    DAY_MINUTE\n    DAY_HOUR\n    YEAR_MONTH\n    \n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nAdd 15 minutes to a date and return the date:\nSELECT DATE_ADD("2017-06-15 09:34:21", INTERVAL 15 MINUTE);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_add2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract 3 hours to a date and return the date:\nSELECT DATE_ADD("2017-06-15 09:34:21", INTERVAL -3 HOUR);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_add3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract 2 months to a date and return the date:\nSELECT DATE_ADD("2017-06-15", INTERVAL -2 MONTH);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_add4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DATE_FORMAT()</h2>\n\n<k>MySQL Functions</k>\nFormat a date:\n  SELECT DATE_FORMAT("2017-06-15", "%Y");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_format" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATE_FORMAT() function formats a date as specified.\n<h3>Syntax</h3>\n  DATE_FORMAT(<em>date</em> , <em>format</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to be formatted</td></tr>\n  <tr><td><em>format</em> </td><td>Required. \n\nThe format to use. \n\nCan be one or a combination of the following values:    <table> \n  <tr><th>Format</th><th>Description</th></tr>  \n  <tr><td>%a</td><td>Abbreviated weekday name (Sun to Sat)</td></tr>\n  <tr><td>%b</td><td>Abbreviated month name (Jan to Dec)</td></tr>\n  <tr><td>%c</td><td>Numeric month name (0 to 12)</td></tr>\n  <tr><td>%D</td><td>Day of the month as a numeric value, followed by suffix (1st, 2nd, 3rd,     ...)</td></tr>\n  <tr><td>%d</td><td>Day of the month as a numeric value (01 to 31)</td></tr>\n  <tr><td>%e</td><td>Day of the month as a numeric value (0 to 31)</td></tr>\n  <tr><td>%f</td><td>Microseconds (000000 to 999999)</td></tr>\n  <tr><td>%H</td><td>Hour (00 to 23)</td></tr>\n  <tr><td>%h</td><td>Hour (00 to 12)</td></tr>\n  <tr><td>%I</td><td>Hour (00 to 12)</td></tr>\n  <tr><td>%i</td><td>Minutes (00 to 59)</td></tr>\n  <tr><td>%j</td><td>Day of the year (001 to 366)</td></tr>\n  <tr><td>%k</td><td>Hour (0 to 23)</td></tr>\n  <tr><td>%l</td><td>Hour (1 to 12)</td></tr>\n  <tr><td>%M</td><td>Month name in full (January to December)</td></tr>\n  <tr><td>%m</td><td>Month name as a numeric value (00 to 12)</td></tr>\n  <tr><td>%p</td><td>AM or PM</td></tr>\n  <tr><td>%r</td><td>Time in 12 hour AM or PM format (hh:mm:ss AM/PM)</td></tr>\n  <tr><td>%S</td><td>Seconds (00 to 59)</td></tr>\n  <tr><td>%s</td><td>Seconds (00 to 59)</td></tr>\n  <tr><td>%T</td><td>Time in 24 hour format (hh:mm:ss)</td></tr>\n  <tr><td>%U</td><td>Week where Sunday is the first day of the week (00 to 53)</td></tr>\n  <tr><td>%u</td><td>Week where Monday is the first day of the week (00 to 53)</td></tr>\n  <tr><td>%V</td><td>Week where Sunday is the first day of the week (01 to 53). \n\nUsed with %X</td></tr>\n  <tr><td>%v</td><td>Week where Monday is the first day of the week (01 to 53). \n\nUsed with %X</td></tr>\n  <tr><td>%W</td><td>Weekday name in full (Sunday to Saturday)</td></tr>\n  <tr><td>%w</td><td>Day of the week where Sunday=0 and Saturday=6</td></tr>\n  <tr><td>%X</td><td>Year for the week where Sunday is the first day of the week. \n\nUsed with \n    %V</td></tr>\n  <tr><td>%x</td><td>Year for the week where Monday is the first day of the week. \n\nUsed with \n    %V</td></tr>\n  <tr><td>%Y</td><td>Year as a numeric, 4-digit value</td></tr>\n  <tr><td>%y</td><td>Year as a numeric, 2-digit value</td></tr></table>\n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nFormat a date:\n  SELECT DATE_FORMAT("2017-06-15", "%M %d %Y");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_format2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nFormat a date:\n  SELECT DATE_FORMAT("2017-06-15", "%W %M \n  %e %Y");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_format3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nFormat a date:\n  SELECT DATE_FORMAT(BirthDate, "%W %M %e %Y") FROM Employees;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_format4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DATE_SUB()</h2>\n\n<k>MySQL Functions</k>\nSubtract 10 days from a date and return the date:\n  SELECT DATE_SUB("2017-06-15", INTERVAL 10 DAY);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_sub" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATE_SUB() function subtracts a time/date interval from a date and then returns the date.\n<h3>Syntax</h3>\n  DATE_SUB(<em>date</em> , INTERVAL <em>value interval</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to be modified</td></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value of the time/date interval to subtract. \n\nBoth positive and negative values are allowed</td></tr>\n  <tr><td><em>interval</em> </td><td>Required. \n\nThe type of interval to subtract. \n\nCan be one of the following values:\n    \n    MICROSECOND\n    SECOND\n    MINUTE\n    HOUR\n    DAY\n    WEEK\n    MONTH\n    QUARTER\n    YEAR\n    SECOND_MICROSECOND\n    MINUTE_MICROSECOND\n    MINUTE_SECOND\n    HOUR_MICROSECOND\n    HOUR_SECOND\n    HOUR_MINUTE\n    DAY_MICROSECOND\n    DAY_SECOND\n    DAY_MINUTE\n    DAY_HOUR\n    YEAR_MONTH\n    \n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSubtract 15 minutes from a date and return the date:\nSELECT DATE_SUB("2017-06-15 09:34:21", INTERVAL 15 MINUTE);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_sub2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract 3 hours from a date and return the date:\nSELECT DATE_SUB("2017-06-15 09:34:21", INTERVAL 3 HOUR);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_sub3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd 2 months to a date and return the date:\nSELECT DATE_SUB("2017-06-15", INTERVAL -2 MONTH);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_date_sub4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DAY()</h2>\n\n<k>MySQL Functions</k>\nReturn the day of the month for a date:\n  SELECT DAY("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_day" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DAY() function returns the day of the month for a given date (a number from 1 to 31).\n<strong>Note:</strong> This function equals the\n<a href="func_mysql_dayofmonth.asp">DAYOFMONTH()</a> function.\n<h3>Syntax</h3>\n  DAY(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to extract the day from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the day of the month for a date:\nSELECT DAY("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_day2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the day of the month for the current system date:\nSELECT DAY(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_day3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DAYNAME()</h2>\n\n<k>MySQL Functions</k>\nReturn the weekday name for a date:\n  SELECT DAYNAME("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayname" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DAYNAME() function returns the weekday name for a given date.\n<h3>Syntax</h3>\n  DAYNAME(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required.  The date to extract the weekday name from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the weekday name for a date:\nSELECT DAYNAME("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayname2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the weekday name for the current system date:\nSELECT DAYNAME(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayname3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DAYOFMONTH()</h2>\n\n<k>MySQL Functions</k>\nReturn the day of the month for a date:\n  SELECT DAYOFMONTH("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofmonth" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DAYOFMONTH() function returns the day of the month for a given date (a number from 1 to 31).\n<strong>Note:</strong> This function equals the <a href="func_mysql_day.asp">DAY()</a> function.\n<h3>Syntax</h3>\n  DAYOFMONTH(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. The date to extract the day from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the day of the month for a date:\nSELECT DAYOFMONTH("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofmonth2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the day of the month for the current system date:\nSELECT DAYOFMONTH(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofmonth3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DAYOFWEEK()</h2>\n\n<k>MySQL Functions</k>\nReturn the weekday index for a date:\n  SELECT DAYOFWEEK("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofweek" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DAYOFWEEK() function returns the weekday index for a given date (a number from 1 to \n7).\n<strong>Note:</strong> 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday.\n<h3>Syntax</h3>\n  DAYOFWEEK(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to return the weekday index from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the weekday index for a date:\nSELECT DAYOFWEEK("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofweek2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the weekday index for the current system date:\nSELECT DAYOFWEEK(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofweek3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>DAYOFYEAR()</h2>\n\n<k>MySQL Functions</k>\nReturn the day of the year for a date:\n  SELECT DAYOFYEAR("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofyear" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DAYOFYEAR() function returns the day of the year for a given date (a number from 1 to \n366).\n<h3>Syntax</h3>\n  DAYOFYEAR(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to return the day of the year from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the day of the year for a date:\nSELECT DAYOFYEAR("2017-01-01");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofyear2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the day of the year for the current system date:\nSELECT DAYOFYEAR(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_dayofyear3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>EXTRACT()</h2>\n\n<k>MySQL Functions</k>\nExtract the month from a date:\n  SELECT EXTRACT(MONTH FROM "2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_extract" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe EXTRACT() function extracts a part from a given date.\n<h3>Syntax</h3>\n  EXTRACT(<em>part</em>  FROM <em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>part</em> </td><td>Required. \n\nThe part to extract. \n\nCan be one of the following:\n    \n    MICROSECOND\n    SECOND\n    MINUTE\n    HOUR\n    DAY\n    WEEK\n    MONTH\n    QUARTER\n    YEAR\n    SECOND_MICROSECOND\n    MINUTE_MICROSECOND\n    MINUTE_SECOND\n    HOUR_MICROSECOND\n    HOUR_SECOND\n    HOUR_MINUTE\n    DAY_MICROSECOND\n    DAY_SECOND\n    DAY_MINUTE\n    DAY_HOUR\n    YEAR_MONTH\n    \n    </td></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to extract a part from</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract the week from a date:\n  SELECT EXTRACT(WEEK FROM "2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_extract2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract the minute from a datetime:\nSELECT EXTRACT(MINUTE FROM "2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_extract3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract the year and month from a datetime:\nSELECT EXTRACT(YEAR_MONTH FROM "2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_extract4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>FROM_DAYS()</h2>\n\n<k>MySQL Functions</k>\nReturn a date from a numeric representation of the day:\n  SELECT FROM_DAYS(685467);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_from_days" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe FROM_DAYS() function returns a date from a numeric datevalue.\nThe FROM_DAYS() function is to be used only with dates within the Gregorian calendar.\n<strong>Note:</strong> This function is the opposite of the\n<a href="func_mysql_to_days.asp">TO_DAYS()</a> function.\n<h3>Syntax</h3>\n  FROM_DAYS(<em>number</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required.  The numeric day to convert to a date</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a date from a numeric representation of the day:\n  SELECT FROM_DAYS(780500);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_from_days2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>HOUR()</h2>\n\n<k>MySQL Functions</k>\nReturn the hour part of a datetime:\n  SELECT HOUR("2017-06-20 09:34:00");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_hour" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe HOUR() function returns the hour part for a given date (from 0 to 838).\n<h3>Syntax</h3>\n  HOUR(<em>datetime</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>datetime</em> </td><td>Required. \n\nThe datetime value to extract the hour from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the hour part of a datetime: \n  SELECT HOUR("838:59:59");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_hour2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LAST_DAY()</h2>\n\n<k>MySQL Functions</k>\nExtract the last day of the month for the given date:\n  SELECT LAST_DAY("2017-06-20");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_last_day" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LAST_DAY() function extracts the last day of the month for a given date.\n<h3>Syntax</h3>\n  LAST_DAY(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to extract the last day of the month from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract the last day of the month for the given date:\n  SELECT LAST_DAY("2017-02-10 09:34:00");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_last_day2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LOCALTIME()</h2>\n\n<k>MySQL Functions</k>\nReturn current date and time:\n  SELECT \n  LOCALTIME();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_localtime" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOCALTIME() function returns the current date and time.\n<strong>Note:</strong> The date and time is returned as "YYYY-MM-DD HH-MM-SS" \n(string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\n<h3>Syntax</h3>\n  LOCALTIME()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn current date and time + 1:\n  SELECT \n  LOCALTIME() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_localtime2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>LOCALTIMESTAMP()</h2>\n\n<k>MySQL Functions</k>\nReturn current date and time:\n  SELECT \n  LOCALTIMESTAMP();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_localtimestamp" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOCALTIMESTAMP() function returns the current date and time.\n<strong>Note:</strong> The date and time is returned as "YYYY-MM-DD HH-MM-SS" \n(string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\n<h3>Syntax</h3>\n  LOCALTIME()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn current date and time + 1:\n  SELECT \n  LOCALTIMESTAMP() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_localtimestamp2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>MAKEDATE()</h2>\n\n<k>MySQL Functions</k>\nCreate and return a date based on  a year and a number of days value:\n  SELECT MAKEDATE(2017, 3);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_makedate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MAKEDATE() function creates and returns a date based on a year and a number of days value.\n<h3>Syntax</h3>\n  MAKEDATE(<em>year</em> , <em>day</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>year</em> </td><td>Required. \n\nA year (4-digits)</td></tr>\n  <tr><td><em>day</em> </td><td>Required. \n\nA number that indicates the day of the year</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nCreate and return a date based on  a year and a number of days value:\n  SELECT MAKEDATE(2017, 175);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_makedate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCreate and return a date based on  a year and a number of days value:\n  SELECT MAKEDATE(2017, 100);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_makedate3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCreate and return a date based on  a year and a number of days value:\n  SELECT MAKEDATE(2017, 366);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_makedate4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>MAKETIME()</h2>\n\n<k>MySQL Functions</k>\nCreate and return a time value based on an hour, minute, and second value:\n  SELECT MAKETIME(11, 35,   4);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_maketime" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MAKETIME() function creates and returns a time based on an hour, minute, and second value.\n<h3>Syntax</h3>\n  MAKETIME(<em>hour</em> , <em>minute</em> , <em>\n  second</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>hour</em> </td><td>Required. \n\nThe hour value</td></tr>\n  <tr><td><em>minute</em> </td><td>Required. \n\nThe minute value</td></tr>\n  <tr><td><em>second</em> </td><td>Required. \n\nThe seconds value</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nCreate and return a time value based on an hour, minute, and second value:\n  SELECT MAKETIME(16,   1, 0);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_maketime2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCreate and return a time value based on an hour, minute, and second value:\n  SELECT MAKETIME(21,   59, 59);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_maketime3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCreate and return a time value based on an hour, minute, and second value:\n  SELECT MAKETIME(838,   59, 59);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_maketime4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>MICROSECOND()</h2>\n\n<k>MySQL Functions</k>\nReturn the microsecond part of a datetime:\n  SELECT MICROSECOND("2017-06-20 09:34:00.000023");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_microsecond" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MICROSECOND() function returns the microsecond part of a time/datetime (from 0 to \n999999).\n<h3>Syntax</h3>\n  MICROSECOND(<em>datetime</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>datetime</em> </td><td>Required. \n\nThe time or datetime to extract the microsecond from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the microsecond part of a time value: \n  SELECT MICROSECOND("23:59:59.000045");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_microsecond2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>MINUTE()</h2>\n\n<k>MySQL Functions</k>\nReturn the minute part of a datetime value:\n  SELECT MINUTE("2017-06-20 09:34:00");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_minute" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MINUTE() function returns the minute part of a time/datetime (from 0 to \n59).\n<h3>Syntax</h3>\n  MINUTE(<em>datetime</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>datetime</em> </td><td>Required. \n\nThe time or datetime extract the minute from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the minute part of a time value: \n  SELECT MINUTE("23:59:59");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_minute2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>MONTH()</h2>\n\n<k>MySQL Functions</k>\nReturn the month part of a date:\n  SELECT MONTH("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_month" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MONTH() function returns the month part for a given date (a number from 1 to \n12).\n<h3>Syntax</h3>\n  MONTH(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date or datetime to extract the month from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the month part of a date:\nSELECT MONTH("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_month2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the month part of the current system date:\nSELECT MONTH(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_month3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>MONTHNAME()</h2>\n\n<k>MySQL Functions</k>\nReturn the name of the month for a date:\n  SELECT MONTHNAME("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_monthname" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MONTHNAME() function returns the name of the month for a given date.\n<h3>Syntax</h3>\n  MONTHNAME(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date or datetime value to extract the month name from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the name of the month for a date:\nSELECT MONTHNAME("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_monthname2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the name of the month for the current system date:\nSELECT MONTHNAME(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_monthname3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>NOW()</h2>\n\n<k>MySQL Functions</k>\nReturn current date and time:\n  SELECT \n  NOW();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_now" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe NOW() function returns the current date and time.\n<strong>Note:</strong> The date and time is returned as "YYYY-MM-DD HH-MM-SS" \n(string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\n<h3>Syntax</h3>\n  NOW()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn current date and time + 1:\n  SELECT \n  NOW() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_now2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>PERIOD_ADD()</h2>\n\n<k>MySQL Functions</k>\nAdd a specified number of months to a period:\n  SELECT PERIOD_ADD(201703, 5);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_period_add" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe PERIOD_ADD() function adds a specified number of months to a period.\nThe PERIOD_ADD() function will return the result formatted as YYYYMM.\n<h3>Syntax</h3>\n  PERIOD_ADD(<em>period</em> , <em>number</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>period</em> </td><td>Required. \n\nA period. \n\nFormat: YYMM or YYYYMM</td></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number of months to add to <em>period</em> . \n\nBoth positive and negative values are allowed </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nAdd a specified number of months to a period:\n  SELECT PERIOD_ADD(201703, 15);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_period_add2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd a specified number of months to a period:\n  SELECT PERIOD_ADD(201703, -2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_period_add3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>PERIOD_DIFF()</h2>\n\n<k>MySQL Functions</k>\nReturn the difference between two periods:\n  SELECT PERIOD_DIFF(201710, 201703);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_period_diff" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe PERIOD_DIFF() function returns the difference between two periods. \n\nThe result will be in months.\n<strong>Note:</strong> <em>period1</em>  and <em>period2</em>  should be in the same format.\n<h3>Syntax</h3>\n  PERIOD_DIFF(<em>period1</em> , <em>period2</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>period1</em> </td><td>Required. \n\nA period. \n\nFormat: YYMM or YYYYMM</td></tr>\n  <tr><td><em>period2</em> </td><td>Required. \n\nAnother period. \n\nFormat: YYMM or YYYYMM</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the difference between two periods:\n  SELECT PERIOD_DIFF(201703, 201803);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_period_diff2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the difference between two periods:\n  SELECT PERIOD_DIFF(1703, 1612);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_period_diff3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>QUARTER()</h2>\n\n<k>MySQL Functions</k>\nReturn the quarter of the year for the date:\n  SELECT QUARTER("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_quarter" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe QUARTER() function returns the quarter of the year for a given date value (a number from 1 to \n4).\n\nJanuary-March returns 1\nApril-June returns 2\nJuly-Sep returns 3\nOct-Dec returns 4\n<h3>Syntax</h3>\n  QUARTER(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date or datetime to extract the quarter from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the quarter of the year for the date:\nSELECT QUARTER("2017-01-01 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_quarter2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the quarter of the year for the date:\nSELECT QUARTER(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_quarter3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SECOND()</h2>\n\n<k>MySQL Functions</k>\nReturn the seconds part of a datetime value:\nSELECT SECOND("2017-06-20 09:34:00.000023");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_second" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SECOND() function returns the seconds part of a time/datetime (from 0 to 59).\n<h3>Syntax</h3>\n  SECOND(<em>datetime</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>datetime</em> </td><td>Required. \n\nThe time or datetime to extract the second from</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the seconds part of a time value: \nSELECT SECOND("23:59:59");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_second2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SEC_TO_TIME()</h2>\n\n<k>MySQL Functions</k>\nReturn a time value based on a specified seconds value:\nSELECT SEC_TO_TIME(1);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sec_to_time" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SEC_TO_TIME() function returns a time value (in format HH:MM:SS) based on the specified seconds.\n<h3>Syntax</h3>\n  SEC_TO_TIME(<em>seconds</em> )<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>seconds</em> </td><td>Required. \n\nThe number of seconds. \n\nBoth positive or negative values are allowed</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a time value based on a specified seconds value: \nSELECT SEC_TO_TIME(-6897);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sec_to_time2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>STR_TO_DATE()</h2>\n\n<k>MySQL Functions</k>\nReturn a date based on a string and a format:\n  SELECT \n  STR_TO_DATE("August 10 2017", "%M %d %Y");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_str_to_date" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe STR_TO_DATE() function returns a date based on a string and a format.\n<h3>Syntax</h3>\n  STR_TO_DATE(<em>string</em> , <em>format</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to be formatted to a date</td></tr>\n  <tr><td><em>format</em> </td><td>Required. \n\nThe format to use. \n\nCan be one or a combination of the following values:    <table> \n  <tr><th>Format</th><th>Description</th></tr>  \n  <tr><td>%a</td><td>Abbreviated weekday name (Sun to Sat)</td></tr>\n  <tr><td>%b</td><td>Abbreviated month name (Jan to Dec)</td></tr>\n  <tr><td>%c</td><td>Numeric month name (0 to 12)</td></tr>\n  <tr><td>%D</td><td>Day of the month as a numeric value, followed by suffix (1st, 2nd, 3rd,     ...)</td></tr>\n  <tr><td>%d</td><td>Day of the month as a numeric value (01 to 31)</td></tr>\n  <tr><td>%e</td><td>Day of the month as a numeric value (0 to 31)</td></tr>\n  <tr><td>%f</td><td>Microseconds (000000 to 999999)</td></tr>\n  <tr><td>%H</td><td>Hour (00 to 23)</td></tr>\n  <tr><td>%h</td><td>Hour (00 to 12)</td></tr>\n  <tr><td>%I</td><td>Hour (00 to 12)</td></tr>\n  <tr><td>%i</td><td>Minutes (00 to 59)</td></tr>\n  <tr><td>%j</td><td>Day of the year (001 to 366)</td></tr>\n  <tr><td>%k</td><td>Hour (0 to 23)</td></tr>\n  <tr><td>%l</td><td>Hour (1 to 12)</td></tr>\n  <tr><td>%M</td><td>Month name in full (January to December)</td></tr>\n  <tr><td>%m</td><td>Month name as a numeric value (00 to 12)</td></tr>\n  <tr><td>%p</td><td>AM or PM</td></tr>\n  <tr><td>%r</td><td>Time in 12 hour AM or PM format (hh:mm:ss AM/PM)</td></tr>\n  <tr><td>%S</td><td>Seconds (00 to 59)</td></tr>\n  <tr><td>%s</td><td>Seconds (00 to 59)</td></tr>\n  <tr><td>%T</td><td>Time in 24 hour format (hh:mm:ss)</td></tr>\n  <tr><td>%U</td><td>Week where Sunday is the first day of the week (00 to 53)</td></tr>\n  <tr><td>%u</td><td>Week where Monday is the first day of the week (00 to 53)</td></tr>\n  <tr><td>%V</td><td>Week where Sunday is the first day of the week (01 to 53). \n\nUsed with %X</td></tr>\n  <tr><td>%v</td><td>Week where Monday is the first day of the week (01 to 53). \n\nUsed with %X</td></tr>\n  <tr><td>%W</td><td>Weekday name in full (Sunday to Saturday)</td></tr>\n  <tr><td>%w</td><td>Day of the week where Sunday=0 and Saturday=6</td></tr>\n  <tr><td>%X</td><td>Year for the week where Sunday is the first day of the week. \n\nUsed with \n    %V</td></tr>\n  <tr><td>%x</td><td>Year for the week where Monday is the first day of the week. \n\nUsed with \n    %V</td></tr>\n  <tr><td>%Y</td><td>Year as a numeric, 4-digit value</td></tr>\n  <tr><td>%y</td><td>Year as a numeric, 2-digit value</td></tr></table>\n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a date based on a string and a format:\n  SELECT STR_TO_DATE("August,5,2017", "%M %e %Y");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_str_to_date2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a date based on a string and a format:\n  SELECT STR_TO_DATE("Monday, August 14, 2017", "%W %M %e %Y");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_str_to_date3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a date based on a string and a format:\n  SELECT STR_TO_DATE("2017,8,14 10,40,10", "%Y,%m,%d %h,%i,%s");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_str_to_date4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SUBDATE()</h2>\n\n<k>MySQL Functions</k>\nSubtract 10 days from a date and return the date:\n  SELECT SUBDATE("2017-06-15", INTERVAL 10 DAY);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subdate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUBDATE() function subtracts a time/date interval from a date and then returns the date.\n<h3>Syntax</h3>\n  SUBDATE(<em>date</em> , INTERVAL <em>value unit</em> )OR:\n  SUBDATE(<em>date</em> , <em>days</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe original date</td></tr>\n  <tr><td><em>days</em> </td><td>Required. \n\nThe number of days to subtract from <em>date</em> </td></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value of the time/date interval to subtract. \n\nBoth positive and negative values are allowed</td></tr>\n  <tr><td><em>unit</em> </td><td>Required. \n\nThe type of interval. \n\nCan be one of the following values:\n    \n    MICROSECOND\n    SECOND\n    MINUTE\n    HOUR\n    DAY\n    WEEK\n    MONTH\n    QUARTER\n    YEAR\n    SECOND_MICROSECOND\n    MINUTE_MICROSECOND\n    MINUTE_SECOND\n    HOUR_MICROSECOND\n    HOUR_SECOND\n    HOUR_MINUTE\n    DAY_MICROSECOND\n    DAY_SECOND\n    DAY_MINUTE\n    DAY_HOUR\n    YEAR_MONTH\n    \n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSubtract 15 minutes from a date and return the date:\nSELECT SUBDATE("2017-06-15 09:34:21", INTERVAL 15 MINUTE);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subdate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract 3 hours from a date and return the date:\nSELECT SUBDATE("2017-06-15 09:34:21", INTERVAL 3 HOUR);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subdate3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd 2 months to a date and return the date:\nSELECT SUBDATE("2017-06-15", INTERVAL -2 MONTH);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subdate4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SUBTIME()</h2>\n\n<k>MySQL Functions</k>\nSubtract 5.000001 seconds and return the datetime:\n  SELECT SUBTIME("2017-06-15 10:24:21.000004", "5.000001");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subtime" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUBTIME() function subtracts a time interval from a time/datetime and then returns the time/datetime.\n<h3>Syntax</h3>\n  SUBTIME(<em>datetime</em> , <em>time_interval</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>datetime</em> </td><td>Required. \n\nThe time or datetime to be modified</td></tr>\n  <tr><td><em>time_interval</em> </td><td>Required. \n\nThe time interval to subtract from\n    <em>datetime</em> . \n\nBoth positive and negative values are allowed</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nSubtract 3 hours, 2 minutes, 5.000001 seconds and return the datetime:\n  SELECT SUBTIME("2017-06-15 10:24:21.000004", "3:2:5.000001");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subtime2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract 5 seconds and return the time:\n  SELECT SUBTIME("10:24:21", "5");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subtime3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd 3 hours, 2 minutes, and 5 seconds, and return the time:\n  SELECT SUBTIME("10:24:21", "-3:2:5");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_subtime4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>SYSDATE()</h2>\n\n<k>MySQL Functions</k>\nReturn the current date and time:\n  SELECT SYSDATE();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sysdate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SYSDATE() function returns the current date and time.\n<strong>Note:</strong> The date and time is returned as "YYYY-MM-DD HH:MM:SS" \n(string) or as YYYYMMDDHHMMSS (numeric).\n<h3>Syntax</h3>\nSYSDATE()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the current date and time + 1:\n  SELECT SYSDATE() + 1;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_sysdate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TIME()</h2>\n\n<k>MySQL Functions</k>\nExtract the time part from a time expression:\n  SELECT TIME("19:30:10");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TIME() function extracts the time part from a given time/datetime.\n<strong>Note:</strong> This function returns "00:00:00" if <em>expression</em>  is not a datetime/time, or NULL if <em>expression</em>  is NULL.\n<h3>Syntax</h3>\n  TIME(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nThe time/datetime to extract the time from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nExtract the time part from the datetime expression:\n  SELECT TIME("2017-08-15 19:30:10");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract the time part from the datetime expression:\n  SELECT TIME("2017-08-15 19:30:10.000001");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract the time part from NULL:\n  SELECT TIME(NULL);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TIME_FORMAT()</h2>\n\n<k>MySQL Functions</k>\nFormat a time:\n  SELECT TIME_FORMAT("19:30:10", "%H %i %s");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_format" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TIME_FORMAT() function formats a time by a specified format.\n<h3>Syntax</h3>\n  TIME_FORMAT(<em>time</em> , <em>format</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>time</em> </td><td>Required. \n\nThe time to be formatted</td></tr>\n  <tr><td><em>format</em> </td><td>Required. \n\nThe format to use. \n\nCan be one or a combination of the following:    <table> \n  <tr><th>Format</th><th>Description</th></tr>  \n  <tr><td>%f</td><td>Microseconds (000000 to 999999)</td></tr>\n  <tr><td>%H</td><td>Hour (00 to 23)</td></tr>\n  <tr><td>%h</td><td>Hour (00 to 12)</td></tr>\n  <tr><td>%I</td><td>Hour (00 to 12)</td></tr>\n  <tr><td>%i</td><td>Minutes (00 to 59)</td></tr>\n  <tr><td>%p</td><td>AM or PM</td></tr>\n  <tr><td>%r</td><td>Time in 12 hour AM or PM format (hh:mm:ss AM/PM)</td></tr>\n  <tr><td>%S</td><td>Seconds (00 to 59)</td></tr>\n  <tr><td>%s</td><td>Seconds (00 to 59)</td></tr>\n  <tr><td>%T</td><td>Time in 24 hour format (hh:mm:ss)</td></tr>\n  </table>\n    </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nFormat a time:\n  SELECT TIME_FORMAT("19:30:10", "%h %i %s %p");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_format2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nFormat a time:\n  SELECT TIME_FORMAT("19:30:10", "%r");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_format3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nFormat a time:\n  SELECT TIME_FORMAT("19:30:10", "%T");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_format4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TIME_TO_SEC()</h2>\n\n<k>MySQL Functions</k>\nConvert a time value into seconds:\n  SELECT TIME_TO_SEC("19:30:10");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_to_sec" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TIME_TO_SEC() function converts a time value into seconds.\n<h3>Syntax</h3>\n  TIME_TO_SEC(<em>time</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>time</em> </td><td>Required. \n\nThe time value</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert a time value into seconds:\n  SELECT TIME_TO_SEC("00:00:05");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_to_sec2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a time value into seconds:\n  SELECT TIME_TO_SEC("03:30:00.999999");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_to_sec3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a time value into seconds:\n  SELECT TIME_TO_SEC("-03:30:00");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_time_to_sec4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TIMEDIFF()</h2>\n\n<k>MySQL Functions</k>\nReturn the difference between two time expressions:\n  SELECT TIMEDIFF("13:10:11", "13:10:10");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_timediff" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TIMEDIFF() function returns the difference between two time/datetime expressions.\n<strong>Note:</strong> <em>time1</em>  and <em>time2</em>  should be in the same format, and the calculation is <em>time1</em>  - <em>time2</em> .\n<h3>Syntax</h3>\n  TIMEDIFF(<em>time1</em> , <em>time2</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>time1</em> </td><td>Required. \n\nA time value</td></tr>\n  <tr><td><em>time2</em> </td><td>Required. \n\nAnother time value</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the difference between two datetime expressions:\n  SELECT TIMEDIFF("2017-06-25 13:10:11", "2017-06-15 13:10:10");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_timediff2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TIMESTAMP()</h2>\n\n<k>MySQL Functions</k>\nReturn a datetime value based on the arguments:\n  SELECT TIMESTAMP("2017-07-23",  "13:10:11");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_timestamp" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TIMESTAMP() function returns a datetime value based on a date or datetime value.\n<strong>Note:</strong> If there are specified two arguments with this function, it first adds the second argument to the first, and then returns a datetime value.\n<h3>Syntax</h3>\n  TIMESTAMP(<em>expression</em> , <em>time</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA date or datetime value</td></tr>\n  <tr><td><em>time</em> </td><td>Optional. \n\nA time value to add to <em>expression</em> </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a datetime value based on the arguments:\n  SELECT TIMESTAMP("2017-07-23");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_timestamp2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>TO_DAYS()</h2>\n\n<k>MySQL Functions</k>\nReturn the number of days between the date and year 0:\n  SELECT TO_DAYS("2017-06-20");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_to_days" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TO_DAYS() function returns the number of days between a date and year 0 \n(date "0000-00-00").\nThe TO_DAYS() function can be used only with dates within the Gregorian calendar.\n<strong>Note:</strong> This function is the opposite of the \n<a href="func_mysql_from_days.asp">FROM_DAYS()</a> function.\n<h3>Syntax</h3>\n  TO_DAYS(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe given date</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the number of days between the date and year 0:\n  SELECT TO_DAYS("2017-06-20 09:34:00");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_to_days2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>WEEK()</h2>\n\n<k>MySQL Functions</k>\nReturn the week number for a date:\n  SELECT WEEK("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_week" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe WEEK() function returns the week number for a given date (a number from 0 to \n53).\n<h3>Syntax</h3>\n  WEEK(<em>date</em> , <em>firstdayofweek</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required.  The date or datetime to extract the week number form</td></tr>\n  <tr><td> <em>firstdayofweek</em> </td><td>\n    Optional. \n\nSpecifies what day the week starts on. \n\nCan be one of the following:\n    \n    0 - First day of week is Sunday\n    1 - First day of week is Monday and the first week of the year has more than 3 \ndays\n    2 - First day of week is Sunday\n    3 - First day of week is Monday and the first week of the year has more than 3 \ndays\n    4 - First day of week is Sunday and the first week of the year has more than 3 \ndays\n    5 - First day of week is Monday\n    6 - First day of week is Sunday and the first week of the year has more than 3 \ndays\n    7 - First day of week is Monday\n    \n    </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the week number for a date:\n  SELECT WEEK("2017-10-25");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_week2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the week number for the current system date:\nSELECT WEEK(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_week3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>WEEKDAY()</h2>\n\n<k>MySQL Functions</k>\nReturn the weekday number for a date:\n  SELECT WEEKDAY("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_weekday" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe WEEKDAY() function returns the weekday number for a given date.\n<strong>Note:</strong> 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 4 = Friday, 5 = Saturday, 6 = Sunday.\n<h3>Syntax</h3>\n  WEEKDAY(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required.  The date or datetime to extract the weekday number from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the weekday number for a date:\nSELECT WEEKDAY("2017-01-01");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_weekday2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the weekday number for the current system date:\nSELECT WEEKDAY(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_weekday3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>WEEKOFYEAR()</h2>\n\n<k>MySQL Functions</k>\nReturn the week number for a date:\n  SELECT WEEKOFYEAR("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_weekofyear" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe WEEKOFYEAR() function returns the week number for a given date (a number from 1 to \n53).\n<strong>Note:</strong> This function assumes that the first day of the week is Monday and the first week of the year has more than 3 days.\n<strong>Tip:</strong> Also look at the <a href="func_mysql_week.asp">WEEK()</a> \nfunction.\n<h3>Syntax</h3>\n  WEEKOFYEAR(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required.  The date or datetime to extract the week number from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the week number for a date:\nSELECT WEEKOFYEAR("2017-01-01");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_weekofyear2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the week number for the current system date:\nSELECT WEEKOFYEAR(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_weekofyear3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>YEAR()</h2>\n\n<k>MySQL Functions</k>\nReturn the year part of a date:\n  SELECT YEAR("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_year" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe YEAR() function returns the year part for a given date (a number from 1000 to 9999).\n<h3>Syntax</h3>\n  YEAR(<em>date</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required.  The date/datetime to extract the year from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the year part of a date:\nSELECT YEAR("2017-06-15 09:34:21");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_year2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the year part of the current system date:\nSELECT YEAR(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_year3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>YEARWEEK()</h2>\n\n<k>MySQL Functions</k>\nReturn the year and week number for a date:\n  SELECT YEARWEEK("2017-06-15");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_yearweek" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe YEARWEEK() function returns the year and week number (a number from 0 to \n53) for a given date.\n<h3>Syntax</h3>\n  YEARWEEK(<em>date</em> , <em>firstdayofweek</em> )  \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required.  The date or datetime value to extract the year and week number from</td></tr>\n  <tr><td> <em>firstdayofweek</em> </td><td>\n    Optional. \nSpecifies what day the week starts on. \n\nCan be one of the following:\n    0 - First day of week is Sunday\n    1 - First day of week is Monday and the first week has more than 3 \ndays\n    2 - First day of week is Sunday\n    3 - First day of week is Monday and the first week has more than 3 \ndays\n    4 - First day of week is Sunday and the first week has more than 3 \ndays\n    5 - First day of week is Monday\n    6 - First day of week is Sunday and the first week has more than 3 \ndays\n    7 - First day of week is Monday\n    </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the year and week number for a date:\n  SELECT YEARWEEK("2017-10-25");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_yearweek2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the year and week number for the current system date:\nSELECT YEARWEEK(CURDATE());<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_yearweek3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>BIN()</h2>\n\n<k>MySQL Functions</k>\nReturn a binary representation of 15:\n  SELECT BIN(15);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_bin" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe BIN() function returns a binary representation of a number, as a string value.\n<h3>Syntax</h3>\n  BIN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn a binary representation of 111:\nSELECT BIN(111);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_bin2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a binary representation of 8:\nSELECT BIN(8);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_bin3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>BINARY</h2>\n\n<k>MySQL Functions</k>\nConvert a value to a binary string:\n  SELECT BINARY "W3Schools.com";<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_binary" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe BINARY function converts a value to a binary string.\nThis function is equivalent to using <a href="func_mysql_cast.asp">CAST(value AS BINARY)</a>.\n<h3>Syntax</h3>\n  BINARY<em> value</em> \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value to convert</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nHere MySQL performs a character-by-character comparison of  "HELLO" and \n"hello" and return 1 (because on a character-by-character basis, they are equivalent):\n  SELECT "HELLO" = "hello";<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_binary2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nHere MySQL performs a byte-by-byte comparison of  "HELLO" and "hello" \nand return 0 (because on a byte-by-byte basis, they are NOT equivalent):\n  SELECT BINARY "HELLO" = "hello";<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_binary3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CASE</h2>\n\n<k>MySQL Functions</k>\nGo through conditions and return a value when the first condition is met:\n  SELECT OrderID, Quantity,<br>CASE<br>    WHEN Quantity &gt; 30 \n  THEN "The quantity is greater than 30"<br>    WHEN Quantity = \n  30 THEN "The quantity is 30"<br>    ELSE "The quantity is under 30"<br>END<br>FROM OrderDetails;<a target="_blank" href="trymysql.asp?filename=trysql_case" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). \n\nSo, once a condition is true, it will stop reading and return the result.\nIf no conditions are true, it will return the value in the ELSE clause. \n\n\nIf there is no ELSE part and no conditions are true, it returns NULL.\n<h3>Syntax</h3>\n  CASE<br>    WHEN <em>condition1</em>  THEN <em>result1</em> <br>    \n  WHEN <em>condition2</em>  THEN <em>result2</em> <br>    WHEN \n  <em>conditionN</em>  THEN <em>resultN</em> <br>    ELSE <em>result</em> <br>END;\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>condition1, condition2, ...conditionN</em> </td><td>Required. \n\nThe conditions. \n\nThese are evaluated in the same order as they are listed</td></tr>\n  <tr><td><em>result1, result2, ...resultN</em> </td><td>Required. \n\nThe value to return once a condition is true</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nThe following SQL will order the customers by City. \n\nHowever, if City is NULL, then order by Country:\n  SELECT CustomerName, City, Country<br>FROM Customers<br>ORDER BY<br>(CASE<br>    \n  WHEN City IS NULL THEN Country<br>    ELSE City<br>END);<a target="_blank" href="trymysql.asp?filename=trysql_case2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CAST()</h2>\n\n<k>MySQL Functions</k>\nConvert a value to a DATE datatype:\n  SELECT \n  CAST("2017-08-29" AS DATE);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cast" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CAST() function converts a value (of any type) into the specified datatype.\n<strong>Tip:</strong> See also the <a href="func_mysql_convert.asp">CONVERT()</a> \nfunction.\n<h3>Syntax</h3>\n  CAST(<em>value</em>  AS <em>datatype</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value to convert</td></tr>\n  <tr><td><em>datatype</em> </td><td>Required. \n\nThe datatype to convert to. \n\nCan be one of the following:    <table> \n  <tr><th>Value</th><th>Description</th></tr>  \n  <tr><td>DATE</td><td>Converts <em>value</em>  to DATE. \n\nFormat: "YYYY-MM-DD"</td></tr>\n  <tr><td>DATETIME</td><td>Converts <em>value</em>  to DATETIME. \n\nFormat: "YYYY-MM-DD HH:MM:SS"</td></tr>\n  <tr><td>TIME</td><td>Converts <em>value</em>  to TIME. \n\nFormat: "HH:MM:SS"</td></tr>\n  <tr><td>CHAR</td><td>Converts <em>value</em>  to CHAR (a fixed length string)</td></tr>\n  <tr><td>SIGNED</td><td>Converts <em>value</em>  to SIGNED (a signed 64-bit integer)</td></tr>\n  <tr><td>UNSIGNED</td><td>Converts <em>value</em>  to UNSIGNED (an unsigned 64-bit integer)</td></tr>\n  <tr><td>BINARY</td><td>Converts <em>value</em>  to BINARY (a binary string)</td></tr>\n  </table>\n  </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert a value to a CHAR datatype:\nSELECT CAST(150 AS CHAR);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cast2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a value to a TIME datatype:\nSELECT CAST("14:06:10" AS TIME);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cast3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a value to a SIGNED datatype:\nSELECT CAST(5-10 AS SIGNED);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_cast4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>COALESCE()</h2>\n\n<k>MySQL Functions</k>\nReturn the first non-null value in a list:\n  SELECT \n  COALESCE(NULL, NULL, NULL, \'W3Schools.com\', NULL, \'Example.com\');<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_coalesce" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COALESCE() function returns the first non-null value in a list.\n<h3>Syntax</h3>\n  COALESCE(<em>val1</em> , <em>\n  val2</em> , <em>....</em> , <em>val_n</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>val1, val2, val_n</em> </td><td>Required. \n\nThe values to test</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the first non-null value in a list:\n  SELECT \n  COALESCE(NULL, 1, 2, \'W3Schools.com\');<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_coalesce2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CONNECTION_ID()</h2>\n\n<k>MySQL Functions</k>\nReturn the unique connection ID for the current connection:\nSELECT CONNECTION_ID();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_connection_id" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONNECTION_ID() function returns the unique connection ID for the current connection.\n<h3>Syntax</h3>\nCONNECTION_ID()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>CONV()</h2>\n\n<k>MySQL Functions</k>\nConvert a number from numeric base system 10 to numeric base system 2:\n  SELECT CONV(15,   10, 2);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_conv" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONV() function converts a number from one numeric base system to another, and returns the result as a string value.\n<strong>Note:</strong> This function returns NULL if any of the parameters are NULL.\n<strong>Tip:</strong> Also look at the <a href="func_mysql_bin.asp">BIN()</a> function.\n<h3>Syntax</h3>\n  CONV(<em>number</em> , <em>from_base</em> , <em>to_base</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number</td></tr>\n  <tr><td><em>from_base</em> </td><td>The numeric base system of <em>number</em>  (a number between 2 and 36)</td></tr>\n  <tr><td><em>to_base</em> </td><td>The numeric base system to convert to (a number between 2 and 36 or \n    -2 and -36)</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert a number from numeric base system 2 to numeric base system 10:\nSELECT CONV(1111, 2, 10); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_conv2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a number from numeric base system 10 to numeric base system 16:\nSELECT CONV(88, 10, 16); <a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_conv3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CONVERT()</h2>\n\n<k>MySQL Functions</k>\nConvert a value to a DATE datatype:\n  SELECT \n  CONVERT("2017-08-29", DATE);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_convert" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONVERT() function converts a value into the specified datatype or character set.\n<strong>Tip:</strong> Also look at the <a href="func_mysql_cast.asp">CAST()</a> function.\n<h3>Syntax</h3>\nCONVERT(<em>value</em> , <em>type</em> )OR:\nCONVERT(<em>value</em>  USING <em>charset</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value to convert</td></tr>\n  <tr><td><em>type</em> </td><td>Required. \n\nThe datatype to convert to. \n\nCan be one of the following:    <table> \n  <tr><th>Value</th><th>Description</th></tr>  \n  <tr><td>DATE</td><td>Converts <em>value</em>  to DATE. \n\nFormat: "YYYY-MM-DD"</td></tr>\n  <tr><td>DATETIME</td><td>Converts <em>value</em>  to DATETIME.\n    Format: "YYYY-MM-DD HH:MM:SS"</td></tr>\n  <tr><td>TIME</td><td>Converts <em>value</em>  to TIME. \n\nFormat: "HH:MM:SS"</td></tr>\n  <tr><td>CHAR</td><td>Converts <em>value</em>  to CHAR (a fixed length string)</td></tr>\n  <tr><td>SIGNED</td><td>Converts <em>value</em>  to SIGNED (a signed 64-bit integer)</td></tr>\n  <tr><td>UNSIGNED</td><td>Converts <em>value</em>  to UNSIGNED (an unsigned 64-bit integer)</td></tr>\n  <tr><td>BINARY</td><td>Converts <em>value</em>  to BINARY (a binary string)</td></tr>\n  </table>\n  </td></tr>\n  <tr><td><em>charset</em> </td><td>Required. \n\nThe character set to convert to</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nConvert a value to a CHAR datatype:\nSELECT CONVERT(150, CHAR);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_convert2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a value to a TIME datatype:\nSELECT CONVERT("14:06:10", TIME);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_convert3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a value to LATIN1 character set:\nSELECT \n  CONVERT("W3Schools.com" USING latin1);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_convert4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>CURRENT_USER()</h2>\n\n<k>MySQL Functions</k>\nReturn the user name and host name for the MySQL account:\n  SELECT CURRENT_USER();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_current_user" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURRENT_USER() function returns the user name and host name for the MySQL \naccount that the server used to authenticate the current client.\nThe result is returned as a string in the UTF8 character set.\n<strong>Tip:</strong> See also the <a href="func_mysql_user.asp">USER()</a> \nfunction.\n<h3>Syntax</h3>\n  CURRENT_USER()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>DATABASE()</h2>\n\n<k>MySQL Functions</k>\nReturn the name of the current (default) database:\nSELECT DATABASE();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_database" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATABASE() function returns the name of the current database.\nIf there is no current database, this function returns NULL \nor ".\n<h3>Syntax</h3>\nDATABASE()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>IF()</h2>\n\n<k>MySQL Functions</k>\nReturn "YES" if the condition is TRUE, or "NO" if the condition is FALSE:\n  SELECT \n  IF(500&lt;1000, "YES", "NO");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_if" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.\n<h3>Syntax</h3>\n  IF(<em>condition</em> , <em>value_if_true</em> , <em>value_if_false</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>condition</em> </td><td>Required. \n\nThe value to test</td></tr>\n  <tr><td><em>value_if_true</em> </td><td>Optional. \n\nThe value to return if <em>condition</em>  is TRUE</td></tr>\n  <tr><td><em>value_if_false</em> </td><td>Optional. \n\nThe value to return if <em>condition</em>  is FALSE</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn 5 if the condition is TRUE, or 10 if the condition is FALSE:\n  SELECT IF(500&lt;1000, 5, 10);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_if2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTest whether two strings are the same and return "YES" if they are, or "NO" if not:\n  SELECT IF(STRCMP("hello","bye") = 0, "YES", "NO");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_if3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn "MORE" if the condition is TRUE, or "LESS" if the condition is FALSE:\n  SELECT OrderID, Quantity, IF(Quantity&gt;10, "MORE", "LESS")<br>FROM \n  OrderDetails;<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_if4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>IFNULL()</h2>\n\n<k>MySQL Functions</k>\nReturn the specified value IF the expression is NULL, otherwise return the expression:\n  SELECT IFNULL(NULL, "W3Schools.com");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ifnull" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe IFNULL() function returns a specified value if the expression is NULL.\nIf the expression is NOT NULL, this function returns the expression.\n<h3>Syntax</h3>\n  IFNULL(<em>expression</em> , <em>alt_value</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nThe expression to test whether is NULL</td></tr>\n  <tr><td><em>alt_value</em> </td><td>Required. \n\nThe value to return if <em>expression</em>  is NULL</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nReturn the specified value IF the expression is NULL, otherwise return the expression:\n  SELECT IFNULL("Hello", "W3Schools.com");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ifnull2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the specified value IF the expression is NULL, otherwise return the expression:\n  SELECT IFNULL(NULL, 500);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_ifnull3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>ISNULL()</h2>\n\n<k>MySQL Functions</k>\nTest whether an expression is NULL:\n  SELECT ISNULL(NULL);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_isnull" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ISNULL() function returns 1 or 0 depending on whether an expression is NULL.\nIf expression is NULL, this function returns 1. \n\nOtherwise, it returns 0.\n<h3>Syntax</h3>\n  ISNULL(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \nThe value to test</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nTest whether an expression is NULL:\n  SELECT ISNULL(");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_isnull2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTest whether an expression is NULL:\n  SELECT ISNULL(350);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_isnull3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTest whether an expression is NULL:\n  SELECT ISNULL("Hello world!");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_isnull4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>LAST_INSERT_ID()</h2>\n\n<k>MySQL Functions</k>\nReturn the AUTO_INCREMENT id of the last row that has been inserted or updated in a table:\n  SELECT LAST_INSERT_ID();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_last_insert_id" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LAST_INSERT_ID() function returns the AUTO_INCREMENT id of the last row that has been inserted or updated in a table.\n<h3>Syntax</h3>\n  LAST_INSERT_ID(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Optional. \n\nAn expression</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>NULLIF()</h2>\n\n<k>MySQL Functions</k>\nCompare two expressions:\n  SELECT NULLIF(25, 25);<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_nullif" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe NULLIF() function compares two expressions and returns NULL if they are equal. \n\n\nOtherwise, the first expression is returned.\n<h3>Syntax</h3>\nNULLIF(<em>expr1</em> , <em>expr2</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expr1, expr2</em> </td><td>Required. \n\nThe two expressions to be compared</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n<h3>More Examples</h3>\nCompare two expressions:\nSELECT NULLIF(25, "Hello");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_nullif2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCompare two expressions:\nSELECT NULLIF("Hello", "world");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_nullif3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCompare two expressions:\nSELECT NULLIF("2017-08-25", "2017-08-25");<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_nullif4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>SESSION_USER()</h2>\n\n<k>MySQL Functions</k>\nReturn the current user name and host name for the MySQL connection:\n  SELECT SESSION_USER();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_session_user" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SESSION_USER() function returns the current user name and host name for the MySQL connection.\n<strong>Note:</strong> This function is equal to the\n<a href="func_mysql_system_user.asp">SYSTEM_USER()</a> and the <a href="func_mysql_user.asp">USER()</a> function.\n<h3>Syntax</h3>\n  SESSION_USER()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>SYSTEM_USER()</h2>\n\n<k>MySQL Functions</k>\nReturn the current user name and host name for the MySQL connection:\n  SELECT SYSTEM_USER();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_system_user" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SYSTEM_USER() function returns the current user name and host name for the MySQL connection.\n<strong>Note:</strong> This function is equal to the\n<a href="func_mysql_session_user.asp">SESSION_USER()</a> function and the\n<a href="func_mysql_user.asp">USER()</a> function.\n<h3>Syntax</h3>\n  SYSTEM_USER()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>USER()</h2>\n\n<k>MySQL Functions</k>\nReturn the current user name and host name for the MySQL connection:\n  SELECT USER();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_user" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe USER() function returns the current user name and host name for the MySQL \nconnection.\n<strong>Note:</strong> This function is equal to the\n<a href="func_mysql_session_user.asp">SESSION_USER()</a> function and the\n<a href="func_mysql_system_user.asp">SYSTEM_USER()</a> function.\n<strong>Tip:</strong> Also look at the <a href="func_mysql_current_user.asp">\nCURRENT_USER()</a> function.\n<h3>Syntax</h3>\n  USER()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>VERSION()</h2>\n\n<k>MySQL Functions</k>\nReturn the current version of the MySQL database:\n  SELECT VERSION();<a target="_blank" href="trymysql.asp?filename=trysql_func_mysql_version" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe VERSION() function returns the current version of the MySQL database, as a string.\n<h3>Syntax</h3>\n  VERSION()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>From MySQL 4.0</td></tr></table>\n\n',
'<h2>Server Functions</h2>\n\nSQL Server has many built-in functions.\nThis reference contains string, numeric, date,  \nconversion, and some advanced functions in SQL Server.\n<h3>Server String Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="func_sqlserver_ascii.asp">ASCII</a></td>\n<td>Returns the ASCII value for the specific character</td></tr>\n<tr>\n<td><a href="func_sqlserver_char.asp">CHAR</a></td>\n<td>Returns the character based on the ASCII code</td></tr>\n<tr>\n<td><a href="func_sqlserver_charindex.asp">CHARINDEX</a></td>\n<td>Returns the position of a substring in a string</td></tr>\n<tr>\n<td><a href="func_sqlserver_concat.asp">CONCAT</a></td>\n<td>Adds two or more strings together</td></tr>\n<tr>\n<td><a href="func_sqlserver_concat_with_plus.asp">Concat with +</a></td>\n<td>Adds two or more strings together</td></tr>\n<tr>\n<td><a href="func_sqlserver_concat_ws.asp">CONCAT_WS</a></td>\n<td>Adds two or more strings together with a separator</td></tr>\n<tr>\n<td><a href="func_sqlserver_datalength.asp">DATALENGTH</a></td>\n<td>Returns the number of bytes used to represent an expression</td></tr>\n<tr>\n<td><a href="func_sqlserver_difference.asp">DIFFERENCE</a></td>\n<td>Compares two SOUNDEX values, and returns an integer value</td></tr>\n<tr>\n<td><a href="func_sqlserver_format.asp">FORMAT</a></td>\n<td>Formats a value with the specified format</td></tr>\n<tr>\n<td><a href="func_sqlserver_left.asp">LEFT</a></td>\n<td>Extracts a number of characters from a string (starting from left)</td></tr>\n<tr>\n<td><a href="func_sqlserver_len.asp">LEN</a></td>\n<td>Returns the length of a string</td></tr>\n<tr>\n<td><a href="func_sqlserver_lower.asp">LOWER</a></td>\n<td>Converts a string to lower-case</td></tr>\n<tr>\n<td><a href="func_sqlserver_ltrim.asp">LTRIM</a></td>\n<td>Removes leading spaces from a string</td></tr>\n<tr>\n<td><a href="func_sqlserver_nchar.asp">NCHAR</a></td>\n<td>Returns the Unicode character based on the number code</td></tr>\n<tr>\n<td><a href="func_sqlserver_patindex.asp">PATINDEX</a></td>\n<td>Returns the position of a pattern in a string</td></tr>\n<tr>\n<td><a href="func_sqlserver_quotename.asp">QUOTENAME</a></td>\n<td>Returns a Unicode string with delimiters added to make the string a valid SQL Server delimited identifier</td></tr>\n<tr>\n<td><a href="func_sqlserver_replace.asp">REPLACE</a></td>\n<td>Replaces all occurrences of a substring within a string, with a new substring</td></tr>\n<tr>\n<td><a href="func_sqlserver_replicate.asp">REPLICATE</a></td>\n<td>Repeats a string a specified number of times</td></tr>\n<tr>\n<td><a href="func_sqlserver_reverse.asp">REVERSE</a></td>\n<td>Reverses a string and returns the result</td></tr>\n<tr>\n<td><a href="func_sqlserver_right.asp">RIGHT</a></td>\n<td>Extracts a number of characters from a string (starting from right)</td></tr>\n<tr>\n<td><a href="func_sqlserver_rtrim.asp">RTRIM</a></td>\n<td>Removes trailing spaces from a string</td></tr>\n<tr>\n<td><a href="func_sqlserver_soundex.asp">SOUNDEX</a></td>\n<td>Returns a four-character code to evaluate the similarity of two strings</td></tr>\n<tr>\n<td><a href="func_sqlserver_space.asp">SPACE</a></td>\n<td>Returns a string of the specified number of space characters</td></tr>\n<tr>\n<td><a href="func_sqlserver_str.asp">STR</a></td>\n<td>Returns a number as string</td></tr>\n<tr>\n<td><a href="func_sqlserver_stuff.asp">STUFF</a></td>\n<td>Deletes a part of a string and then inserts another part into the string, starting at a specified position</td></tr>\n<tr>\n<td><a href="func_sqlserver_substring.asp">SUBSTRING</a></td>\n<td>Extracts some characters from a string</td></tr>\n<tr>\n<td><a href="func_sqlserver_translate.asp">TRANSLATE</a></td>\n<td>Returns the string from the first argument after the characters specified in the second argument are translated into the characters specified in the third argument.</td></tr>\n<tr>\n<td><a href="func_sqlserver_trim.asp">TRIM</a></td>\n<td>Removes leading and trailing spaces (or other specified characters) from a string</td></tr>\n<tr>\n<td><a href="func_sqlserver_unicode.asp">UNICODE</a></td>\n<td>Returns the Unicode value for the first character of the input expression</td></tr>\n<tr>\n<td><a href="func_sqlserver_upper.asp">UPPER</a></td>\n<td>Converts a string to upper-case</td></tr></table>\n<h3>Server Math/Numeric Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="func_sqlserver_abs.asp">ABS</a></td>\n<td>Returns the absolute value of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_acos.asp">ACOS</a></td>\n<td>Returns the arc cosine of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_asin.asp">ASIN</a></td>\n<td>Returns the arc sine of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_atan.asp">ATAN</a></td>\n<td>Returns the arc tangent of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_atn2.asp">ATN2</a></td>\n<td>Returns the arc tangent of two numbers</td></tr>\n<tr>\n<td><a href="func_sqlserver_avg.asp">AVG</a></td>\n<td>Returns the average value of an expression</td></tr>\n<tr>\n<td><a href="func_sqlserver_ceiling.asp">CEILING</a></td>\n<td>Returns the smallest integer value that is &gt;= a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_count.asp">COUNT</a></td>\n<td>Returns the number of records returned by a select query</td></tr>\n<tr>\n<td><a href="func_sqlserver_cos.asp">COS</a></td>\n<td>Returns the cosine of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_cot.asp">COT</a></td>\n<td>Returns the cotangent of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_degrees.asp">DEGREES</a></td>\n<td>Converts a value in radians to degrees</td></tr>\n<tr>\n<td><a href="func_sqlserver_exp.asp">EXP</a></td>\n<td>Returns e raised to the power of a specified number</td></tr>\n<tr>\n<td><a href="func_sqlserver_floor.asp">FLOOR</a></td>\n<td>Returns the largest integer value that is &lt;= to a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_log.asp">LOG</a></td>\n<td>Returns the natural logarithm of a number, or the logarithm of a number to a specified base</td></tr>\n<tr>\n<td><a href="func_sqlserver_log10.asp">LOG10</a></td>\n<td>Returns the natural logarithm of a number to base 10</td></tr>\n<tr>\n<td><a href="func_sqlserver_max.asp">MAX</a></td>\n<td>Returns the maximum value in a set of values</td></tr>\n<tr>\n<td><a href="func_sqlserver_min.asp">MIN</a></td>\n<td>Returns the minimum value in a set of values</td></tr>\n<tr>\n<td><a href="func_sqlserver_pi.asp">PI</a></td>\n<td>Returns the value of PI</td></tr>\n<tr>\n<td><a href="func_sqlserver_power.asp">POWER</a></td>\n<td>Returns the value of a number raised to the power of another number</td></tr>\n<tr>\n<td><a href="func_sqlserver_radians.asp">RADIANS</a></td>\n<td>Converts a degree value into radians</td></tr>\n<tr>\n<td><a href="func_sqlserver_rand.asp">RAND</a></td>\n<td>Returns a random number</td></tr>\n<tr>\n<td><a href="func_sqlserver_round.asp">ROUND</a></td>\n<td>Rounds a number to a specified number of decimal places</td></tr>\n<tr>\n<td><a href="func_sqlserver_sign.asp">SIGN</a></td>\n<td>Returns the sign of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_sin.asp">SIN</a></td>\n<td>Returns the sine of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_sqrt.asp">SQRT</a></td>\n<td>Returns the square root of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_square.asp">SQUARE</a></td>\n<td>Returns the square of a number</td></tr>\n<tr>\n<td><a href="func_sqlserver_sum.asp">SUM</a></td>\n<td>Calculates the sum of a set of values</td></tr>\n<tr>\n<td><a href="func_sqlserver_tan.asp">TAN</a></td>\n<td>Returns the tangent of a number</td></tr></table>\n<h3>Server Date Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n<tr>\n<td><a href="func_sqlserver_current_timestamp.asp">CURRENT_TIMESTAMP</a></td>\n<td>Returns the current date and time</td></tr>\n<tr>\n<td><a href="func_sqlserver_dateadd.asp">DATEADD</a></td>\n<td>Adds a time/date interval to a date and then returns the date</td></tr>\n<tr>\n<td><a href="func_sqlserver_datediff.asp">DATEDIFF</a></td>\n<td>Returns the difference between two dates</td></tr>\n<tr>\n<td><a href="func_sqlserver_datefromparts.asp">DATEFROMPARTS</a></td>\n<td>Returns a date from the specified parts (year, month, and day values)</td></tr>\n<tr>\n<td><a href="func_sqlserver_datename.asp">DATENAME</a></td>\n<td>Returns a specified part of a date (as string)</td></tr>\n<tr>\n<td><a href="func_sqlserver_datepart.asp">DATEPART</a></td>\n<td>Returns a specified part of a date (as integer)</td></tr>\n<tr>\n<td><a href="func_sqlserver_day.asp">DAY</a></td>\n<td>Returns the day of the month for a specified date</td></tr>\n<tr>\n<td><a href="func_sqlserver_getdate.asp">GETDATE</a></td>\n<td>Returns the current database system date and time</td></tr>\n<tr>\n<td><a href="func_sqlserver_getutcdate.asp">GETUTCDATE</a></td>\n<td>Returns the current database system UTC date and time</td></tr>\n<tr>\n<td><a href="func_sqlserver_isdate.asp">ISDATE</a></td>\n<td>Checks an expression and returns 1 if it is a valid date, otherwise 0</td></tr>\n<tr>\n<td><a href="func_sqlserver_month.asp">MONTH</a></td>\n<td>Returns the month part for a specified date (a number from 1 to 12)</td></tr>\n<tr>\n<td><a href="func_sqlserver_sysdatetime.asp">SYSDATETIME</a></td>\n<td>Returns the date and time of the SQL Server</td></tr>\n<tr>\n<td><a href="func_sqlserver_year.asp">YEAR</a></td>\n<td>Returns the year part for a specified date</td></tr></table>\n<h3>Server Advanced Functions</h3>\n<table>\n<tr>\n<th style="width:25%">Function</th>\n<th>Description</th></tr>\n  <tr>\n<td><a href="func_sqlserver_cast.asp">CAST</a></td>\n<td>Converts a value (of any type) into a specified datatype</td></tr>\n<tr>\n<td><a href="func_sqlserver_coalesce.asp">COALESCE</a></td>\n<td>Returns the first non-null value in a list</td></tr>\n  <tr>\n<td><a href="func_sqlserver_convert.asp">CONVERT</a></td>\n<td>Converts a value (of any type) into a specified datatype</td></tr>\n<tr>\n<td><a href="func_sqlserver_current_user.asp">CURRENT_USER</a></td>\n<td>Returns the name of the current user in the SQL Server database</td></tr>\n<tr>\n<td><a href="func_sqlserver_iif.asp">IIF</a></td>\n<td>Returns a value if a condition is TRUE, or another value if a condition is FALSE</td></tr>\n<tr>\n<td><a href="func_sqlserver_isnull.asp">ISNULL</a></td>\n<td>Return a specified value if the expression is NULL, otherwise return the expression</td></tr>\n<tr>\n<td><a href="func_sqlserver_isnumeric.asp">ISNUMERIC</a></td>\n<td>Tests whether an expression is numeric</td></tr>\n<tr>\n<td><a href="func_sqlserver_nullif.asp">NULLIF</a></td>\n<td>Returns NULL if two expressions are equal</td></tr>\n<tr>\n<td><a href="func_sqlserver_session_user.asp">SESSION_USER</a></td>\n<td>Returns the name of the current user in the SQL Server database</td></tr>\n<tr>\n<td><a href="func_sqlserver_sessionproperty.asp">SESSIONPROPERTY</a></td>\n<td>Returns the session settings for a specified option</td></tr>\n<tr>\n<td><a href="func_sqlserver_system_user.asp">SYSTEM_USER</a></td>\n<td>Returns the login name for the current user</td></tr>\n<tr>\n<td><a href="func_sqlserver_user_name.asp">USER_NAME</a></td>\n<td>Returns the database user name based on the specified id</td></tr></table>\n\n\n',
'<h2>Server ASCII()</h2>\n\n<k>SQL Server Functions</k>\nReturn the ASCII value of the first character in "CustomerName":\n SELECT ASCII(CustomerName) AS NumCodeOfFirstChar<br>FROM Customers; <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_ascii" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ASCII() function returns the ASCII value for the specific character.\n<h3>Syntax</h3>\n  ASCII(<em>character</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>character</em> </td><td>Required. \n\nThe character to return the ASCII value for. \n\nIf more than one character is entered, it will only return the value for the first character</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server CHAR()</h2>\n\n<k>SQL Server Functions</k>\nReturn the character based on the number code 65:\nSELECT CHAR(65) AS CodeToCharacter; <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_char" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CHAR() function returns the character based on the ASCII code.\n<h3>Syntax</h3>\n  CHAR(<em>code</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>code</em> </td><td>Required. \n\nThe ASCII number code to return the character for</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server CHARINDEX()</h2>\n\n<k>SQL Server Functions</k>\nSearch for "t" in string "Customer", and return position:\n  SELECT \n  CHARINDEX(\'t\', \'Customer\') AS MatchPosition;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_charindex" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CHARINDEX() function searches for a substring in a string, and returns the position.\nIf the substring is not found, this function returns 0. \n\n\n<strong>Note:</strong> This function performs a case-insensitive search.\n<h3>Syntax</h3>\n  CHARINDEX(<em>substring</em> , <em>\n  string</em> , <em>start</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>substring</em> </td><td>Required. \n\nThe substring to search for</td></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to be searched</td></tr>\n  <tr><td><em>start</em> </td><td>Optional. \n\nThe position where the search will start (if you do not want to start at the beginning of s<em>tring</em> ). \n\n\n    The first position in <em>string</em>  is 1</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nSearch for "OM" in string "Customer", and return position:\n  SELECT \n  CHARINDEX(\'OM\', \'Customer\') AS MatchPosition; <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_charindex2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSearch for "mer" in string "Customer", and return position (start in position \n3):\n  SELECT CHARINDEX(\'mer\', \'Customer\', 3) AS MatchPosition; <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_charindex3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server CONCAT()</h2>\n\n<k>SQL Server Functions</k>\nAdd two strings together:\n  SELECT \n  CONCAT(\'W3Schools\', \'.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONCAT() function adds two or more strings together.\n<strong>Note:</strong> See also <a href="func_sqlserver_concat_with_plus.asp">\nConcat with the + operator</a> and <a href="func_sqlserver_concat_ws.asp">\nCONCAT_WS()</a>.\n<h3>Syntax</h3>\n  CONCAT(<em>string1</em> , <em>\n  string2</em> , <em>....</em> , <em>string_n</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string1, string2, string_n</em> </td><td>Required. \n\nThe strings to add together</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2012), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nAdd 3 strings together:\n  SELECT \n  CONCAT(\'SQL\', \' is\', \' fun!\'); <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd strings together (separate each string with a space character):\n  SELECT \n  CONCAT(\'SQL\', \' \', \'is\', \' \', \'fun!\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server Concat With +</h2>\n\n<k>SQL Server Functions</k>\nAdd 2 strings together:\n  SELECT \n  \'W3Schools\' + \'.com\';<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat_plus" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe + operator allows you to add two or more strings together.\n<strong>Note:</strong> See also the <a href="func_sqlserver_concat.asp">\nCONCAT()</a> and <a href="func_sqlserver_concat_ws.asp">CONCAT_WS()</a> functions.\n<h3>Syntax</h3>\n  <em>string1 +\n  string2 + string_n</em> \n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string1, string2, string_n</em> </td><td>Required. \n\nThe strings to add together</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2005), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nAdd 3 strings together:\n  SELECT \n  \'SQL\' + \' is\' + \' fun!\'; <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat_plus2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd strings together (separate each string with a space character):\n  SELECT \n  \'SQL\' + \' \' + \'is\' + \' \' + \'fun!\';<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat_plus3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server CONCAT_WS()</h2>\n\n<k>SQL Server Functions</k>\nAdd strings together. \n\nUse \'.\' to separate the concatenated string values:\n  SELECT \n  CONCAT_WS(\'.\', \'www\', \'W3Schools\', \'com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat_ws" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONCAT_WS() function adds two or more strings together with a separator.\n<strong>Note:</strong> See also <a href="func_sqlserver_concat.asp">CONCAT()</a> and\n<a href="func_sqlserver_concat_with_plus.asp">\nConcat with the + operator</a>.\n<h3>Syntax</h3>\n  CONCAT_WS(<em>separator, string1</em> , <em>\n  string2</em> , <em>....</em> , <em>string_n</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>separator</em> </td><td>Required. \n\nThe separator to use</td></tr>\n  <tr><td><em>string1, string2, string_n</em> </td><td>Required. \n\nThe strings to add together</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2017), Azure SQL Database, Azure SQL Data \n  Warehouse</td></tr></table>\n<h3>More Examples</h3>\nAdd strings together. \n\nUse \'-\' to separate the concatenated string values:\n  SELECT \n  CONCAT_WS(\'-\', \'SQL\', \' is\', \' fun!\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_concat_ws2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server DATALENGTH()</h2>\n\n<k>SQL Server Functions</k>\nReturn the length of an expression (in bytes):\n  SELECT \n  DATALENGTH(\'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datalength" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATALENGTH() function returns the number of bytes used to represent an expression.\n<strong>Note:</strong> The DATALENGTH() function counts both leading and trailing spaces when calculating the length of the expression.\n<strong>Tip:</strong> Also see the <a href="func_sqlserver_len.asp">LEN()</a> function.\n<h3>Syntax</h3>\n  DATALENGTH(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nThe data type to return the length for. \n\nIf <em>\n    expression</em>  is NULL, it returns NULL</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the length of an expression (in bytes) (counts both leading and trailing spaces):\n  SELECT \n  DATALENGTH(\'   W3Schools.com   \');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datalength2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the length of an expression (in bytes):\n  SELECT \n  DATALENGTH(\'2017-08\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datalength3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server DIFFERENCE()</h2>\n\n<k>SQL Server Functions</k>\nCompares two SOUNDEX values, and return an integer:\nSELECT DIFFERENCE(\'Juice\', \'Jucy\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_difference" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DIFFERENCE() function compares two SOUNDEX values, and returns an integer. \n\nThe integer value indicates the match for the two SOUNDEX values, from 0 to 4.\n0 indicates weak or no similarity between the SOUNDEX values. \n\n4 \nindicates strong similarity or identically SOUNDEX values.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_soundex.asp">SOUNDEX()</a> \nfunction.\n<h3>Syntax</h3>\n  DIFFERENCE(<em>expression, expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression, expression</em> </td><td>Required. \n\nTwo expressions to be compared. \n\nCan be a constant, variable, or column</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nCompares two SOUNDEX values, and return an integer:\nSELECT DIFFERENCE(\'Juice\', \'Banana\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_difference2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server FORMAT()</h2>\n\n<k>SQL Server Functions</k>\nFormat a date:\n  DECLARE @d DATETIME = \'12/01/2018\'; <br>SELECT FORMAT (@d, \'d\', \'en-US\') AS \n  \'US English Result\',<br>               \n  FORMAT (@d, \'d\', \'no\') AS \'Norwegian Result\',<br>               \n  FORMAT (@d, \'d\', \'zu\') AS \'Zulu Result\';<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_format" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe FORMAT() function formats a value with the specified format \n(and an optional culture in SQL Server 2017).\nUse the FORMAT() function to format date/time values and number values. \n\nFor general data type conversions, use\n<a href="func_sqlserver_cast.asp">CAST()</a> or\n<a href="func_sqlserver_convert.asp">CONVERT()</a>.\n<h3>Syntax</h3>\n  FORMAT(<em>value, format</em> , <em>\n  culture</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value to be formatted</td></tr>\n  <tr><td><em>format</em> </td><td>Required. \n\nThe format pattern</td></tr>\n  <tr><td><em>culture</em> </td><td>Optional. \n\nSpecifies a culture (from SQL Server 2017)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2012), Azure SQL Database</td></tr></table>\n<h3>More Examples</h3>\nFormat a number:\n  SELECT \n  FORMAT(123456789, \'##-##-#####\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_format2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server LEFT()</h2>\n\n<k>SQL Server Functions</k>\nExtract 3 characters from a string (starting from left):\n  SELECT LEFT(\'SQL Tutorial\', 3) AS ExtractString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_left" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LEFT() function extracts a number of characters from a string (starting from left).\n<h3>Syntax</h3>\n  LEFT(<em>string</em> , <em>number_of_chars</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>number_of_chars</em> </td><td>Required. \n\nThe number of characters to extract. \n\nIf the number exceeds the number of characters in <em>string</em> ,     it returns <em>string</em> </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nExtract 5 characters from the text in the "CustomerName" column (starting from left):\n  SELECT LEFT(CustomerName, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_left2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract 100 characters from a string (starting from left):\n  SELECT LEFT(\'SQL Tutorial\', 100) AS ExtractString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_left3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server LEN()</h2>\n\n<k>SQL Server Functions</k>\nReturn the length of a string:\n  SELECT \n  LEN(\'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_len" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LEN() function returns the length of a string.\n<strong>Note:</strong> Trailing spaces at the end of the string is not included when calculating the length. \n\nHowever, leading spaces at the start of the string is included when calculating the length.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_datalength.asp">DATALENGTH()</a> function.\n<h3>Syntax</h3>\n  LEN(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to return the length for. \n\nIf <em>string</em>  \n    is NULL, it returns NULL</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the length of a string (counts leading spaces, but not trailing spaces):\n  SELECT \n  LEN(\'   W3Schools.com   \');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_len2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the length of a string:\n  SELECT \n  LEN(\'2017-08\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_len3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server LOWER()</h2>\n\n<k>SQL Server Functions</k>\nConvert the text to lower-case:\nSELECT LOWER(\'SQL Tutorial is FUN!\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_lower" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOWER() function converts a string to lower-case.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_upper.asp"> UPPER()</a> function.\n<h3>Syntax</h3>\n  LOWER(<em>text</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>text</em> </td><td>Required. \n\nThe string to convert</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nConvert the text in "CustomerName" to lower-case:\nSELECT LOWER(CustomerName) AS LowercaseCustomerName<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_lower2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server LTRIM()</h2>\n\n<k>SQL Server Functions</k>\nRemove leading spaces from a string:\n  SELECT LTRIM(\'     SQL Tutorial\') AS LeftTrimmedString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_ltrim" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LTRIM() function removes leading spaces from a string.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_rtrim.asp">RTRIM()</a> function.\n<h3>Syntax</h3>\n  LTRIM(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to remove leading spaces from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server NCHAR()</h2>\n\n<k>SQL Server Functions</k>\nReturn the Unicode character based on the number code 65:\nSELECT NCHAR(65) AS NumberCodeToUnicode; <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_nchar" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe NCHAR() function returns the Unicode character based on the number code.\n<h3>Syntax</h3>\n  NCHAR(<em>number_code</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number_code</em> </td><td>Required. \n\nThe number code in the Unicode standard to return the character for</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server PATINDEX()</h2>\n\n<k>SQL Server Functions</k>\nReturn the position of a pattern in a string:\n  SELECT PATINDEX(\'%schools%\', \'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_patindex" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe PATINDEX() function returns the position of a pattern in a string.\nIf the pattern is not found, this function returns 0.\n<strong>Note:</strong> The search is case-insensitive and the first position in <em>string</em>  is 1.\n<h3>Syntax</h3>\n  PATINDEX(%<em>pattern</em> %, <em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td>%<em>pattern</em> %</td><td>Required. \n\nThe pattern to find. \n\nIt MUST be surrounded by %. \n\nOther wildcards can be used in <em>pattern</em> , such as:\n    \n    % - Match any string of any length (including 0 length)\n    _ - Match one single character\n    [] - Match any characters in the brackets, e.g. \n\n[xyz]\n    [^] - Match any character not in the brackets, e.g. \n\n[^xyz]\n    \n    </td></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to be searched</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the position of a pattern in a string:\n  SELECT \n  PATINDEX(\'%s%com%\', \'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_patindex2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the position of a pattern in a string:\n  SELECT PATINDEX(\'%[ol]%\', \'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_patindex3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the position of a pattern in a string:\n  SELECT PATINDEX(\'%[z]%\', \'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_patindex4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server QUOTENAME()</h2>\n\n<k>SQL Server Functions</k>\nReturn a Unicode string with bracket delimiters (default):\n  SELECT QUOTENAME(\'abcdef\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_quotename" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe QUOTENAME() function returns a Unicode string with delimiters added to make the string a valid SQL Server delimited identifier.\n<h3>Syntax</h3>\n  QUOTENAME(<em>string, quote_char</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nA string of Unicode character data. \n\nLimited to 128 characters</td></tr>\n  <tr><td><em>quote_char</em> </td><td>Optional. \n\nA one-character string to use as the delimiter. \n\nCan be a single quotation mark ( \' ), a left or right bracket ( [] ), a double quotation mark ( " ), a left or right parenthesis ( () ), a greater than or less than sign ( &gt;&lt; ), a left or right brace ( {} ) or a backtick ( ` ). \n\nIf\n    <em>quote_char</em>  is not specified, brackets are used. \n\n</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn a Unicode string with parenthesis delimiters:\n  SELECT QUOTENAME(\'abcdef\', \'()\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_quotename2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server REPLACE()</h2>\n\n<k>SQL Server Functions</k>\nReplace "T" with "M":\n  SELECT REPLACE(\'SQL Tutorial\', \'T\', \'M\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_replace" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe REPLACE() function replaces all occurrences of a substring within a string, with a new substring.\n<strong>Note:</strong> The search is case-insensitive.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_stuff.asp">STUFF()</a> function.\n<h3>Syntax</h3>\n  REPLACE(<em>string</em> , <em>old_string</em> , <em>new_string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe original string</td></tr>\n  <tr><td> <em>old_string</em> </td><td>Required. \n\nThe string to be replaced</td></tr>\n  <tr><td> <em>new_string</em> </td><td>Required. \n\nThe new replacement string</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReplace "SQL" with "HTML":\n  SELECT REPLACE(\'SQL Tutorial\', \'SQL\', \'HTML\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_replace2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReplace "a" with "c":\n  SELECT REPLACE(\'ABC ABC ABC\', \'a\', \'c\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_replace3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server REPLICATE()</h2>\n\n<k>SQL Server Functions</k>\nRepeat a string:\n  SELECT REPLICATE(\'SQL Tutorial\', 5);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_replicate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe REPLICATE() function repeats a string a specified number of times.\n<h3>Syntax</h3>\nREPLICATE(<em>string, integer</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to repeat</td></tr>\n  <tr><td><em>integer</em> </td><td>Required. \n\nThe number of times to repeat the string</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nRepeat the text in CustomerName two times:\n  SELECT REPLICATE(CustomerName, 2)<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_replicate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server REVERSE()</h2>\n\n<k>SQL Server Functions</k>\nReverse a string:\n  SELECT REVERSE(\'SQL Tutorial\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_reverse" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe REVERSE() function reverses a string and returns the result.\n<h3>Syntax</h3>\nREVERSE(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td> Required. \n\nThe string to reverse</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReverse the text in CustomerName:\n  SELECT REVERSE(CustomerName)<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_reverse2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server RIGHT()</h2>\n\n<k>SQL Server Functions</k>\nExtract 3 characters from a string (starting from right):\n  SELECT RIGHT(\'SQL Tutorial\', 3) AS ExtractString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_right" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RIGHT() function extracts a number of characters from a string (starting from right).\n<h3>Syntax</h3>\n  RIGHT(<em>string</em> , <em>number_of_chars</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>number_of_chars</em> </td><td>Required. \n\nThe number of characters to extract. \n\nIf <em>number_of_chars</em>  &gt; \n    <em>string</em> ,     it returns <em>string</em> </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nExtract 5 characters from the text in the "CustomerName" column (starting from right):\n  SELECT RIGHT(CustomerName, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_right2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract 100 characters from a string (starting from right):\n  SELECT RIGHT(\'SQL Tutorial\', 100) AS ExtractString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_right3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server RTRIM()</h2>\n\n<k>SQL Server Functions</k>\nRemove trailing spaces from a string:\n  SELECT RTRIM(\'SQL Tutorial     \') AS RightTrimmedString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_rtrim" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RTRIM() function removes trailing spaces from a string.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_ltrim.asp">LTRIM()</a> function.\n<h3>Syntax</h3>\n  RTRIM(<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to remove trailing spaces from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server SOUNDEX()</h2>\n\n<k>SQL Server Functions</k>\nEvaluate the similarity of two strings, and return a four-character code:\nSELECT SOUNDEX(\'Juice\'), SOUNDEX(\'Jucy\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_soundex" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SOUNDEX() function returns a four-character code to evaluate the similarity of two expressions.\n<strong>Note:</strong> The SOUNDEX() converts the string to a four-character code based on how the string sounds when spoken.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_difference.asp">DIFFERENCE()</a> function.\n<h3>Syntax</h3>\n  SOUNDEX(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nThe expression to evaluate. \n\nCan be a constant, variable, or column</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nEvaluate the similarity of two strings, and return a four-character code:\nSELECT SOUNDEX(\'Juice\'), SOUNDEX(\'Banana\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_soundex2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SPACE()</h2>\n\n<k>SQL Server Functions</k>\nReturn a string with 10 spaces:\n  SELECT SPACE(10);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_space" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SPACE() function returns a string of the specified number of space characters.\n\n  SPACE(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number of spaces to be returned</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server STR()</h2>\n\n<k>SQL Server Functions</k>\nReturn a number as a string:\n  SELECT STR(185);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_str" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe STR() function returns a number as a string.\n<h3>Syntax</h3>\n  STR(<em>number</em> , <em>length</em> , <em>decimals</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to convert to a string</td></tr>\n  <tr><td><em>length</em> </td><td>Optional. \n\nThe length of the returning string. \n\nDefault value is 10</td></tr>\n  <tr><td><em>decimals</em> </td><td>Optional. \n\nThe number of decimals to display in the returning string. \n\nDefault value is 0</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn a number as a string:\n  SELECT STR(185.5);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_str2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a number as a string:\n  SELECT STR(185.476, 6, 2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_str3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server STUFF()</h2>\n\n<k>SQL Server Functions</k>\nDelete 3 characters from a string, starting in position 1, and then insert \n"HTML" in position 1:\n  SELECT STUFF(\'SQL Tutorial\', 1, 3, \'HTML\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_stuff" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe STUFF() function deletes a part of a string and then inserts another part into the string, starting at a specified position.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_replace.asp">REPLACE()</a> function.\n<h3>Syntax</h3>\n  STUFF(<em>string</em> , <em>start</em> , <em>length</em> , <em>new_string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to be modified</td></tr>\n  <tr><td> <em>start</em> </td><td>Required. \n\nThe position in <em>string</em>  to start to delete some characters</td></tr>\n  <tr><td> <em>length</em> </td><td>Required. \n\nThe number of characters to delete from <em>string</em> </td></tr>\n  <tr><td> <em>new_string</em> </td><td>Required. \n\nThe new string to insert into <em>string</em>  at the <em>start</em>  position</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nDelete 1 character from a string, starting in position 13, and then insert " \nis fun!" in position 13:\n  SELECT STUFF(\'SQL Tutorial!\', 13, 1, \' is fun!\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_stuff2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SUBSTRING()</h2>\n\n<k>SQL Server Functions</k>\nExtract 3 characters from a string, starting in position 1:\n  SELECT SUBSTRING(\'SQL Tutorial\', 1, 3) AS ExtractString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_substring" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUBSTRING() function extracts some characters from a string.\n<h3>Syntax</h3>\n  SUBSTRING(<em>string</em> , <em>start</em> , <em>length</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to extract from</td></tr>\n  <tr><td><em>start</em> </td><td>Required. \n\nThe start position. \n\nThe first position in\n    <em>string</em>  is 1</td></tr>\n  <tr><td><em>length</em> </td><td>Required. \n\nThe number of characters to extract. \n\nMust be a positive number</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nExtract 5 characters from the "CustomerName" column, starting in position 1:\n  SELECT SUBSTRING(CustomerName, 1, 5) AS ExtractString<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_substring2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nExtract 100 characters from a string, starting in position 1:\n  SELECT SUBSTRING(\'SQL Tutorial\', 1, 100) AS ExtractString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_substring3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server TRANSLATE()</h2>\n\n<k>SQL Server Functions</k>\nReturn the string from the first argument AFTER the characters specified in the second argument are translated into the characters specified in the third argument:\n  SELECT TRANSLATE(\'Monday\', \'Monday\', \'Sunday\'); // Results in Sunday<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_translate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TRANSLATE() function returns the string from the first argument after the characters specified in the second argument are translated into the characters specified in the third argument.\n<strong>Note:</strong> The TRANSLATE() function will return an error if <em>characters</em>  and \n<em>translations</em>  have different lengths.\n<h3>Syntax</h3>\n  TRANSLATE(<em>string, characters, translations</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th style="width:27%">Parameter</th><th>Description</th></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe input string</td></tr>\n  <tr><td><em>characters</em> </td><td>Required. \n\nThe characters that should be replaced</td></tr>\n  <tr><td><em>translations</em> </td><td>Required. \n\nThe new characters </td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2017)</td></tr></table>\n<h3>More Examples</h3>\nReturn the string from the first argument AFTER the characters specified in the second argument are translated into the characters specified in the third argument:\n  SELECT TRANSLATE(\'3*[2+1]/{8-4}\', \'[]{}\', \'()()\'); // Results in 3*(2+1)/(8-4)<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_translate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server TRIM()</h2>\n\n<k>SQL Server Functions</k>\nRemove leading and trailing spaces from a string:\n  SELECT TRIM(\'     SQL Tutorial!     \') AS TrimmedString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_trim" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TRIM() function removes the space character OR other specified characters from the start or end of a string.\nBy default, the TRIM() function removes leading and trailing spaces from a string.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_ltrim.asp">\nLTRIM()</a> and <a href="func_sqlserver_rtrim.asp">RTRIM()</a> functions.\n<h3>Syntax</h3>\n  TRIM([<em>characters </em> FROM<em> </em> ]<em>string</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th style="width:25%">Parameter</th><th>Description</th></tr>\n  <tr><td><em>characters</em>  FROM</td><td>Optional. \n\nSpecific characters to remove</td></tr>\n  <tr><td><em>string</em> </td><td>Required. \n\nThe string to remove spaces or characters from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2017), Azure SQL Database,</td></tr></table>\n<h3>More Examples</h3>\nRemove characters and spaces from a string:\n  SELECT TRIM(\'#! \' FROM \'    #SQL Tutorial!    \') AS \n  TrimmedString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_trim2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server UNICODE()</h2>\n\n<k>SQL Server Functions</k>\nReturn an integer value (the Unicode value), for the first character of the input expression:\n  SELECT UNICODE(\'Atlanta\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_unicode" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe UNICODE() function returns an integer value (the Unicode value), for the first character of the input expression.\n<h3>Syntax</h3>\n  UNICODE(<em>character_expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th style="width:27%">Parameter</th><th>Description</th></tr>\n  <tr><td><em>character_expression</em> </td><td>Required. \n\nAn nchar or varchar expression</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn an integer value (the Unicode value), for the first character of the input expression:\n  SELECT UNICODE(CustomerName) AS UnicodeOfFirstChar<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_unicode2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server UPPER()</h2>\n\n<k>SQL Server Functions</k>\nConvert the text to upper-case:\nSELECT UPPER(\'SQL Tutorial is FUN!\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_upper" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe UPPER() function converts a string to upper-case.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_lower.asp">LOWER()</a> function.\n<h3>Syntax</h3>\n  UPPER(<em>text</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>text</em> </td><td>Required. \n\nThe string to convert</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nConvert the text in "CustomerName" to upper-case:\nSELECT UPPER(CustomerName) AS UppercaseCustomerName<br>FROM Customers;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_upper2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server ABS()</h2>\n\n<k>SQL Server Functions</k>\nReturn the absolute value of a number:\nSELECT Abs(-243.5) AS AbsNum;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_abs" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ABS() function returns the absolute value of a number.\n<h3>Syntax</h3>\n  ABS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server ACOS()</h2>\n\n<k>SQL Server Functions</k>\nReturn the arc cosine of a number:\n  SELECT ACOS(0.25);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_acos" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ACOS() function returns the arc cosine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL. \n<h3>Syntax</h3>\n  ACOS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc cosine of a number:\nSELECT ACOS(-0.8);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_acos2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server ASIN()</h2>\n\n<k>SQL Server Functions</k>\nReturn the arc sine of a number:\n  SELECT ASIN(0.25);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_asin" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ASIN() function returns the arc sine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL. \n<h3>Syntax</h3>\n  ASIN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc sine of a number:\nSELECT ASIN(-0.8);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_asin2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server ATAN()</h2>\n\n<k>SQL Server Functions</k>\nReturn the arc tangent of a number:\n  SELECT ATAN(2.5);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_atan" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ATAN() function returns the arc tangent of a number.\n<h3>Syntax</h3>\n  ATAN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc tangent of a number:\nSELECT ATAN(-45.01);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_atan2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server ATN2()</h2>\n\n<k>SQL Server Functions</k>\nReturn the arc tangent of two values:\n  SELECT ATN2(0.50, 1);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_atn2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ATN2() function returns the arc tangent of two numbers.\n<h3>Syntax</h3>\nATN2(<em>a, b</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>a, b</em> </td><td>Required. \n\nTwo numeric values to calculate the arc tangent of</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the arc tangent of two values:\nSELECT ATN2(-0.8, 2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_atn22" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server AVG()</h2>\n\n<k>SQL Server Functions</k>\nReturn the average value for the "Price" column in the "Products" table:\nSELECT AVG(Price) AS \n  AveragePrice FROM Products;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_avg" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe AVG() function returns the average value of an expression.\n<strong>Note:</strong> NULL values are ignored. \n<h3>Syntax</h3>\n  AVG(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA numeric value (can be a field or a formula)</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nSelect all the products that have a price above the average price:\nSELECT * FROM Products<br>WHERE Price &gt; (SELECT AVG(Price) FROM Products); <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_avg2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server CEILING()</h2>\n\n<k>SQL Server Functions</k>\nReturn the smallest integer value that is greater than or equal to a number:\n  SELECT CEILING(25.75) AS CeilValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_ceiling" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CEILING() function returns the smallest integer value that is larger than or equal to a number.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_floor.asp">FLOOR()</a> and \n<a href="func_sqlserver_round.asp">ROUND()</a> functions.\n<h3>Syntax</h3>\n  CEILING(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the smallest integer value that is greater than or equal to a number:\nSELECT CEILING(25) AS CeilValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_ceiling2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the smallest integer value that is greater than or equal to a number:\nSELECT CEILING(-13.5) AS CeilValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_ceiling3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server COUNT()</h2>\n\n<k>SQL Server Functions</k>\nReturn the number of products in the "Products" table:\nSELECT COUNT(ProductID) AS NumberOfProducts FROM Products;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_count" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COUNT() function returns the number of records returned by a select query.\n<strong>Note:</strong> NULL values are not counted.\n<h3>Syntax</h3>\n  COUNT<em>(expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA field or a string value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server COS()</h2>\n\n<k>SQL Server Functions</k>\nReturn the cosine of a number:\n  SELECT COS(2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_cos" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COS() function returns the cosine of a number.\n<h3>Syntax</h3>\n  COS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the cosine of a number:\nSELECT COS(PI());<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_cos2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server COT()</h2>\n\n<k>SQL Server Functions</k>\nReturn the cotangent of a number:\n  SELECT COT(6);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_cot" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COT() function returns the cotangent of a number.\n<h3>Syntax</h3>\n  COT(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the cotangent of a number:\nSELECT COT(-2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_cot2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server DEGREES()</h2>\n\n<k>SQL Server Functions</k>\nConvert a radian value into degrees:\n  SELECT DEGREES(1.5);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_degrees" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DEGREES() function converts a value in radians to degrees.\n<strong>Note:</strong> See also the <a href="func_sqlserver_radians.asp">RADIANS()</a> and\n<a href="func_sqlserver_pi.asp">PI()</a> functions.\n<h3>Syntax</h3>\n  DEGREES(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nConvert a radian value into degrees:\nSELECT DEGREES(PI()*2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_degrees2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server EXP()</h2>\n\n<k>SQL Server Functions</k>\nReturn <em>e</em>  raised to the power of 1:\n  SELECT EXP(1);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_exp" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe EXP() function returns e raised to the power of a specified number.\nThe constant e (2.718281...), is the base of natural logarithms.\n<strong>Note:</strong> See also the <a href="func_sqlserver_log.asp">LOG()</a> function.\n<h3>Syntax</h3>\n  EXP(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe power number</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn <em>e</em>  raised to the power of 2:\nSELECT EXP(2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_exp2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server FLOOR()</h2>\n\n<k>SQL Server Functions</k>\nReturn the largest integer value that is equal to or less than 25.75:\n  SELECT FLOOR(25.75) AS FloorValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_floor" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe FLOOR() function returns the largest integer value that is smaller than or equal to a number.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_ceiling.asp">\nCEILING()</a> and <a href="func_sqlserver_round.asp">ROUND()</a> functions.\n<h3>Syntax</h3>\n  FLOOR(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Data Warehouse, Parallel Data \n  Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the largest integer value that is equal to or less than 25:\nSELECT FLOOR(25) AS FloorValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_floor2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the largest integer value that is equal to or less than -13.5:\nSELECT FLOOR(-13.5) AS FloorValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_floor3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server LOG()</h2>\n\n<k>SQL Server Functions</k>\nReturn the natural logarithm of 2:\n  SELECT LOG(2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_log" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOG() function returns the natural logarithm of a specified <em>number</em> , or the logarithm of the \n<em>number</em>  to the specified <em>base</em> .\nFrom SQL Server 2012, you can also change the base of the logarithm to another value by using the optional base parameter. \n\n\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_exp.asp">EXP()</a> function.\n<h3>Syntax</h3>\nLOG(<em>number, base</em> ) -- Syntax for SQL ServerOR:\nLOG(<em>number</em> ) -- Syntax for Azure SQL Database, Azure SQL Data Warehouse, Parallel Data Warehouse\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to return the natural logarithm of. \n\nMust be greater than 0</td></tr>\n  <tr><td><em>base</em> </td><td>Optional. \n\nThe base the natural logarithm is to be calculated with. \n\nMust be greater than 1</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the natural logarithm of 2 to a specified base (4):\nSELECT LOG(2, 4);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_log2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server LOG10()</h2>\n\n<k>SQL Server Functions</k>\nReturn the base-10 logarithm of 2:\n  SELECT LOG10(2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_log10" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe LOG10() function returns the natural logarithm of a number to base 10.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_log.asp">LOG()</a> function.\n<h3>Syntax</h3>\n  LOG10(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number greater than 0</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the base-10 logarithm of 4.5:\nSELECT LOG10(4.5);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_log102" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server MAX()</h2>\n\n<k>SQL Server Functions</k>\nFind the price of the most expensive product in the "Products" table:\nSELECT MAX(Price) AS LargestPrice FROM Products;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_max" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MAX() function returns the maximum value in a set of values.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_min.asp">MIN()</a> function.\n<h3>Syntax</h3>\n  MAX(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA numeric value (can be a field or a formula)</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server MIN()</h2>\n\n<k>SQL Server Functions</k>\nFind the price of the cheapest product in the "Products" table:\nSELECT MIN(Price) AS \n  SmallestPrice FROM Products;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_min" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MIN() function returns the minimum value in a set of values.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_max.asp">MAX()</a> function.\n<h3>Syntax</h3>\n  MIN(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA numeric value (can be a field or a formula)</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server PI()</h2>\n\n<k>SQL Server Functions</k>\nReturn the value of PI:\n  SELECT PI();<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_pi" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe PI() function returns the value of PI.\n<strong>Note:</strong> Also look at the <a href="func_sqlserver_degrees.asp">DEGREES()</a> and \n<a href="func_sqlserver_radians.asp">RADIANS()</a> functions.\n<h3>Syntax</h3>\n  PI()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n',
'<h2>Server POWER()</h2>\n\n<k>SQL Server Functions</k>\nReturn 4 raised to the second power:\n  SELECT POWER(4, 2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_power" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe POWER() function returns the value of a number raised to the power of another number.\n<h3>Syntax</h3>\n  POWER(<em>a</em> , <em>b</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>a</em> </td><td>Required. \n\nA number (the base)</td></tr>\n  <tr><td><em>b</em> </td><td>Required. \n\nA number (the exponent)</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn 8 raised to the third power:\n  SELECT POWER(8, 3);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_power2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server RADIANS()</h2>\n\n<k>SQL Server Functions</k>\nConvert a degree value into radians:\n  SELECT RADIANS(180);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_radians" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RADIANS() function converts a degree value into radians.\n<h3>Syntax</h3>\n  RADIANS(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA number in degrees</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nConvert a degree value into radians:\nSELECT RADIANS(-45);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_radians2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server RAND()</h2>\n\n<k>SQL Server Functions</k>\nReturn a random decimal number (no seed value - so it returns a completely random number &gt;= 0 and &lt;1):\nSELECT RAND();<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_rand" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe RAND() function returns a random number between 0 (inclusive) and 1 (exclusive).\n<h3>Syntax</h3>\n  RAND(<em>seed</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>seed</em> </td><td>Optional. \n\nIf seed is specified, it returns a repeatable sequence of random numbers. \n\nIf no seed is specified, it returns a completely random number</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn a random decimal number (with seed value of 6):\nSELECT RAND(6);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_rand2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a random decimal number &gt;= 5 and &lt;10:\nSELECT RAND()*(10-5)+5;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_rand3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a random number &gt;= 5 and &lt;=10:\nSELECT FLOOR(RAND()*(10-5+1)+5);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_rand4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server ROUND()</h2>\n\n<k>SQL Server Functions</k>\nRound the number to 2 decimal places:\n  SELECT ROUND(235.415, 2) AS RoundValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_round" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ROUND() function rounds a number to a specified number of decimal places.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_floor.asp">FLOOR()</a> and \n<a href="func_sqlserver_ceiling.asp">CEILING()</a> functions.\n<h3>Syntax</h3>\n  ROUND(<em>number</em> , <em>decimals</em> , <em>operation</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to be rounded</td></tr>\n  <tr><td><em>decimals</em> </td><td>Required. \n\nThe number of decimal places to round <em>number</em>  to</td></tr>\n  <tr><td><em>operation</em> </td><td>Optional. \n\nIf 0, it rounds the result to the number of <em>decimal</em> . \n\n\n    If another value than 0, it truncates the result to the number of <em>\n    decimals. \n\n</em> Default value is 0</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nRound the number to 2 decimal places, and also use the <em>operation</em>  \nparameter:\n  SELECT ROUND(235.415, 2, 1) AS RoundValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_round2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nRound the number to -1 decimal place:\n  SELECT ROUND(235.415, -1) AS RoundValue;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_round3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SIGN()</h2>\n\n<k>SQL Server Functions</k>\nReturn the sign of a number:\n  SELECT SIGN(255.5);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sign" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SIGN() function returns the sign of a number.\nThis function will return one of the following:\n\nIf number &gt; 0, it returns 1\nIf number = 0, it returns 0\nIf number &lt; 0, it returns -1\n<h3>Syntax</h3>\n  SIGN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number to return the sign for</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the sign of a number:\nSELECT SIGN(-12); <a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sign2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SIN()</h2>\n\n<k>SQL Server Functions</k>\nReturn the sine of a number:\n  SELECT SIN(2);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sin" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SIN() function returns the sine of a number.\n<h3>Syntax</h3>\n  SIN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the sine of a number:\nSELECT SIN(-1);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sin2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SQRT()</h2>\n\n<k>SQL Server Functions</k>\nReturn the square root of a number:\n  SELECT SQRT(64);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sqrt" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SQRT() function returns the square root of a number.\n<h3>Syntax</h3>\n  SQRT(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA positive number to calculate the square root  of</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the square root of a number:\nSELECT SQRT(13);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sqrt2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SQUARE()</h2>\n\n<k>SQL Server Functions</k>\nReturn the square of a number:\n  SELECT SQUARE(64);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_square" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SQUARE() function returns the square of a number.\n<h3>Syntax</h3>\n  SQUARE(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA positive number to calculate the square of</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Data Warehouse, Parallel Data \n  Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the square of a number:\nSELECT SQUARE(13);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_square2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SUM()</h2>\n\n<k>SQL Server Functions</k>\nReturn the sum of the "Quantity" field in the "OrderDetails" table:\n  SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sum" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SUM() function calculates the sum of a set of values.\n<strong>Note:</strong> NULL values are ignored.\n<h3>Syntax</h3>\n  SUM(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nA field or a formula</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server TAN()</h2>\n\n<k>SQL Server Functions</k>\nReturn the tangent of a number:\n  SELECT TAN(1.75);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_tan" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe TAN() function returns the tangent of a number.\n<h3>Syntax</h3>\n  TAN(<em>number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nA numeric value</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the tangent of a number:\nSELECT TAN(-3);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_tan2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server CURRENT_TIMESTAMP</h2>\n\n<k>SQL Server Functions</k>\nReturn the current date and time:\n  SELECT \n  CURRENT_TIMESTAMP;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_curr_timestamp" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURRENT_TIMESTAMP function returns the current date and time, in a \n\'YYYY-MM-DD hh:mm:ss.mmm\' format.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_getdate.asp">GETDATE()</a> function.\n<h3>Syntax</h3>\n  CURRENT_TIMESTAMP\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server DATEADD()</h2>\n\n<k>SQL Server Functions</k>\nAdd one year to a date, then return the date:\n  SELECT DATEADD(year, 1, \'2017/08/25\') AS DateAdd;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_dateadd" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATEADD() function adds a time/date interval to a date and then returns the date.\n<h3>Syntax</h3>\n  DATEADD(<em>interval</em> , <em>number</em> , <em>date</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>interval</em> </td>\n   <td>Required. \n\nThe time/date interval to add. \n\nCan be one of the following values:\n    \n    year, yyyy, yy = Year\n    quarter, qq, q = Quarter\n    month, mm, m = month\n    dayofyear = Day of the year\n    day, dy, y = Day\n    week, ww, wk = Week\n    weekday, dw, w = Weekday\n    hour, hh = hour\n    minute, mi, n = Minute\n    second, ss, s = Second\n    millisecond, ms = Millisecond\n    \n    </td></tr>\n  <tr><td><em>number</em> </td><td>Required. \n\nThe number of <em>interval</em>  to add to date. \n\nCan be positive (to get dates in the future) or negative (to get dates in the past) </td></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date that will be modified</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nAdd two months to a date, then return the date:\n  SELECT DATEADD(month, 2, \'2017/08/25\') AS DateAdd;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_dateadd2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nSubtract two months from a date, then return the date:\n  SELECT DATEADD(month, -2, \'2017/08/25\') AS DateAdd;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_dateadd3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nAdd 18 years to the date in the BirthDate column, then return the date:\n  SELECT LastName,   BirthDate, DATEADD(year, 18, BirthDate) AS DateAdd FROM Employees;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_dateadd4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server DATEDIFF()</h2>\n\n<k>SQL Server Functions</k>\nReturn the difference between two date values, in years:\n  SELECT DATEDIFF(year, \'2017/08/25\', \'2011/08/25\') AS DateDiff;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datediff" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATEDIFF() function returns the difference between two dates.\n<h3>Syntax</h3>\n  DATEDIFF(<em>interval</em> , <em>date1</em> , <em>date2</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>interval</em> </td>\n   <td>Required. \n\nThe part to return. \n\nCan be one of the following values:\n    \n    year, yyyy, yy = Year\n    quarter, qq, q = Quarter\n    month, mm, m = month\n    dayofyear = Day of the year\n    day, dy, y = Day\n    week, ww, wk = Week\n    weekday, dw, w = Weekday\n    hour, hh = hour\n    minute, mi, n = Minute\n    second, ss, s = Second\n    millisecond, ms = Millisecond\n    \n    </td></tr>\n  <tr><td><em>date1, date2</em> </td><td>Required. \n\nThe two dates to calculate the difference between</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the difference between two date values, in months:\n  SELECT DATEDIFF(month, \'2017/08/25\',   \'2011/08/25\') AS DateDiff;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datediff2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the difference between two date values, in hours:\n  SELECT DATEDIFF(hour, \'2017/08/25 07:00\', \'2017/08/25 12:45\') AS DateDiff;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datediff3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server DATEFROMPARTS()</h2>\n\n<k>SQL Server Functions</k>\nReturn a date from it\'s parts:\n  SELECT DATEFROMPARTS(2018, 10, 31) AS DateFromParts;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datefromparts" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATEFROMPARTS() function returns a date from the specified parts (year, month, and day values).\n<h3>Syntax</h3>\n  DATEFROMPARTS(<em>year</em> , <em>month</em> , <em>day</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>year</em> </td>\n   <td>Required. \n\nSpecifies a year (4 digits)</td></tr>\n  <tr><td><em>month</em> </td><td>Required. \n\nSpecifies a month (from 1 to 12)</td></tr>\n  <tr><td><em>day</em> </td><td>Required. \n\nSpecifies a day (from 1 to 31)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2012), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server DATENAME()</h2>\n\n<k>SQL Server Functions</k>\nReturn a specified part of a date:\n  SELECT DATENAME(year, \'2017/08/25\') AS DatePartString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datename" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATENAME() function returns a specified part of a date.\nThis function returns the result as a string value.\n<h3>Syntax</h3>\n  DATENAME(<em>interval</em> , <em>date</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>interval</em> </td>\n   <td>Required. \n\nThe part to return. \n\nCan be one of the following values:\n    \n    year, yyyy, yy = Year\n    quarter, qq, q = Quarter\n    month, mm, m = month\n    dayofyear = Day of the year\n    day, dy, y = Day\n    week, ww, wk = Week\n    weekday, dw, w = Weekday\n    hour, hh = hour\n    minute, mi, n = Minute\n    second, ss, s = Second\n    millisecond, ms = Millisecond\n    \n    </td></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to use</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn a specified part of a date:\n  SELECT DATENAME(yy, \'2017/08/25\') AS DatePartString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datename2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a specified part of a date:\n  SELECT DATENAME(month, \'2017/08/25\') AS DatePartString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datename3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a specified part of a date:\n  SELECT DATENAME(hour, \'2017/08/25 08:36\') AS DatePartString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datename4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a specified part of a date:\n  SELECT DATENAME(minute, \'2017/08/25 08:36\') AS DatePartString;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datename5" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server DATEPART()</h2>\n\n<k>SQL Server Functions</k>\nReturn a specified part of a date:\n  SELECT DATEPART(year, \'2017/08/25\') AS DatePartInt;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datepart" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DATEPART() function returns a specified part of a date.\nThis function returns the result as an integer value.\n<h3>Syntax</h3>\n  DATEPART(<em>interval</em> , <em>date</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>interval</em> </td>\n   <td>Required. \n\nThe part to return. \n\nCan be one of the following values:\n    \n    year, yyyy, yy = Year\n    quarter, qq, q = Quarter\n    month, mm, m = month\n    dayofyear = Day of the year\n    day, dy, y = Day\n    week, ww, wk = Week\n    weekday, dw, w = Weekday\n    hour, hh = hour\n    minute, mi, n = Minute\n    second, ss, s = Second\n    millisecond, ms = Millisecond\n    \n    </td></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to use</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn a specified part of a date:\n  SELECT DATEPART(yy, \'2017/08/25\') AS DatePartInt;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datepart2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a specified part of a date:\n  SELECT DATEPART(month, \'2017/08/25\') AS DatePartInt;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datepart3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a specified part of a date:\n  SELECT DATEPART(hour, \'2017/08/25 08:36\') AS DatePartInt;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datepart4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn a specified part of a date:\n  SELECT DATEPART(minute, \'2017/08/25 08:36\') AS DatePartInt;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_datepart5" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server DAY()</h2>\n\n<k>SQL Server Functions</k>\nReturn the day of the month for a date:\n  SELECT DAY(\'2017/08/25\') AS DayOfMonth;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_day" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe DAY() function returns the day of the month (from 1 to 31) for a specified date.\n<h3>Syntax</h3>\n  DAY(<em>date</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date to return the day of the month from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the day of the month for a date:\n  SELECT DAY(\'2017/08/13 09:08\') AS DayOfMonth;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_day2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>Server GETDATE()</h2>\n\n<k>SQL Server Functions</k>\nReturn the current database system date and time:\n  SELECT \n  GETDATE();<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_getdate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe GETDATE() function returns the current database system date and time, in a \n\'YYYY-MM-DD hh:mm:ss.mmm\' format.\n<strong>Tip:</strong> Also look at the\n<a href="func_sqlserver_current_timestamp.asp">CURRENT_TIMESTAMP</a> function.\n<h3>Syntax</h3>\n  GETDATE()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server GETUTCDATE()</h2>\n\n<k>SQL Server Functions</k>\nReturn the current UTC date and time:\n  SELECT \n  GETUTCDATE();<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_getutcdate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe GETUTCDATE() function returns the current database system UTC date and time, in a \n\'YYYY-MM-DD hh:mm:ss.mmm\' format.\n<h3>Syntax</h3>\n  GETUTCDATE()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server ISDATE()</h2>\n\n<k>SQL Server Functions</k>\nCheck if the expression is a valid date:\n  SELECT ISDATE(\'2017-08-25\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isdate" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ISDATE() function checks an expression and returns 1 if it is a valid date, otherwise \n0.\n<h3>Syntax</h3>\n  ISDATE(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nThe expression to test</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nCheck if the expression is a valid date:\n  SELECT ISDATE(\'2017\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isdate2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCheck if the expression is a valid date:\n  SELECT ISDATE(\'Hello world!\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isdate3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server MONTH()</h2>\n\n<k>SQL Server Functions</k>\nReturn the month part of a date:\n  SELECT MONTH(\'2017/08/25\') AS Month;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_month" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe MONTH() function returns the month part for a specified date (a number from 1 to 12).\n<h3>Syntax</h3>\n  MONTH(<em>date</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date or datetime to extract the month from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the month part of a date:\n  SELECT MONTH(\'2017/05/25 09:08\') AS Month;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_month2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>Server SYSDATETIME()</h2>\n\n<k>SQL Server Functions</k>\nReturn the date and time of the SQL Server:\n  SELECT SYSDATETIME() AS SysDateTime;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_sysdatetime" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SYSDATETIME() function returns the date and time of the computer where the SQL Server is running.\n<h3>Syntax</h3>\n  SYSDATETIME()\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server YEAR()</h2>\n\n<k>SQL Server Functions</k>\nReturn the year part of a date:\n  SELECT YEAR(\'2017/08/25\') AS Year;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_year" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe YEAR() function returns the year part for a specified date.\n<h3>Syntax</h3>\n  YEAR(<em>date</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>date</em> </td><td>Required. \n\nThe date or datetime to extract the year from</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the year part of a date:\n  SELECT YEAR(\'1998/05/25 09:08\') AS Year;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_year2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server CAST()</h2>\n\n<k>SQL Server Functions</k>\nConvert a value to an int datatype:\nSELECT CAST(25.65 AS int);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_cast" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CAST() function converts a value (of any type) into a specified datatype.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_convert.asp">\nCONVERT()</a> function.\n<h3>Syntax</h3>\nCAST(<i>expression</i> \n  AS <i>datatype(length)</i>)\n<h3>Parameter Values</h3>\n<table>\n  <tr><th>Value</th><th>Description</th></tr>  \n  <tr><td><i>expression</i></td><td>Required. \n\nThe value to convert</td></tr>\n  <tr><td><i>datatype</i></td><td>Required. \n\nThe datatype to convert <em>expression</em>  to. \n\nCan be one of the following: bigint, int, smallint, tinyint, bit, decimal, numeric, money,     smallmoney, float, real, datetime, smalldatetime, char, varchar, text, nchar,     nvarchar, ntext, binary, varbinary, or image</td></tr>\n  <tr><td><em>(length)</em> </td><td>Optional. \n\nThe length of the resulting data type (for char, varchar,     nchar, nvarchar, binary and varbinary)</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nConvert a value to a varchar datatype:\nSELECT CAST(25.65 AS varchar);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_cast2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert a value to a datetime datatype:\nSELECT CAST(\'2017-08-25\' AS datetime);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_cast3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>Server COALESCE()</h2>\n\n<k>SQL Server Functions</k>\nReturn the first non-null value in a list:\n  SELECT \n  COALESCE(NULL, NULL, NULL, \'W3Schools.com\', NULL, \'Example.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_coalesce" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe COALESCE() function returns the first non-null value in a list.\n<h3>Syntax</h3>\n  COALESCE(<em>val1</em> , <em>\n  val2</em> , <em>....</em> , <em>val_n</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>val1, val2, val_n</em> </td><td>Required. \n\nThe values to test</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the first non-null value in a list:\n  SELECT \n  COALESCE(NULL, 1, 2, \'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_coalesce2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server CONVERT()</h2>\n\n<k>SQL Server Functions</k>\nConvert an expression to int:\nSELECT CONVERT(int, 25.65);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_convert" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CONVERT() function converts a value (of any type) into a specified datatype.\n<strong>Tip:</strong> Also look at the <a href="func_sqlserver_cast.asp">CAST()</a> \nfunction.\n<h3>Syntax</h3>\nCONVERT(<i>data_type(length)</i><em>,</em> <i> expression</i><em>,</em> <i> style</i>)\n<h3>Parameter Values</h3>\n<table>\n  <tr><th>Value</th><th>Description</th></tr>  \n  <tr><td><i>data_type</i></td><td>Required. \n\nThe datatype to convert <em>expression</em>  to. \n\nCan be one of the following: bigint, int, smallint, tinyint, bit, decimal, numeric, money,     smallmoney, float, real, datetime, smalldatetime, char, varchar, text, nchar,     nvarchar, ntext, binary, varbinary, or image</td></tr>\n  <tr><td><em>(length)</em> </td><td>Optional. \n\nThe length of the resulting data type (for char, varchar,     nchar, nvarchar, binary and varbinary)</td></tr>\n  <tr><td><i>expression</i></td><td>Required. \n\nThe value to convert to another data type</td></tr>\n  <tr><td><i>style</i></td><td>Optional. \n\nThe format used to convert between data types, such as a date or string format. \n\nCan be one of the following values:\n    <br><br>Converting datetime to character:\n    <table>\n<tr>\n<th>Without century</th>\n<th>With century</th>\n<th>Input/Output</th>\n<th>Standard</th></tr>\n<tr><td>0</td><td>100</td><td>mon dd yyyy hh:miAM/PM</td><td>Default</td></tr>\n<tr><td>1</td><td>101</td><td>mm/dd/yyyy </td><td>US</td></tr>\n<tr><td>2</td><td>102</td><td> yyyy.mm.dd</td><td>ANSI</td></tr>\n<tr><td>3</td><td>103</td><td> dd/mm/yyyy</td><td>British/French</td></tr>\n<tr><td>4</td><td>104</td><td>dd.mm.yyyy</td><td>German</td></tr>\n<tr><td>5</td><td>105</td><td> dd-mm-yyyy</td><td>Italian</td></tr>\n<tr><td>6</td><td>106</td><td>dd mon yyyy</td><td>-</td></tr>\n<tr><td>7</td><td>107</td><td>Mon dd, yyyy</td><td>-</td></tr>\n<tr><td>8</td><td>108</td><td>hh:mm:ss</td><td>-</td></tr>\n<tr><td>9</td><td>109</td><td>mon dd yyyy hh:mi:ss:mmmAM (or PM)</td><td>Default + millisec</td></tr>\n<tr><td>10</td><td>110</td><td>mm-dd-yyyy</td><td>USA</td></tr>\n<tr><td>11</td><td>111</td><td> yyyy/mm/dd</td><td>Japan</td></tr>\n<tr><td>12</td><td>112</td><td> yyyymmdd</td><td>ISO</td></tr>\n<tr><td>13</td><td>113</td><td>dd mon yyyy hh:mi:ss:mmm</td><td>\n Europe (24 hour clock)></tr>\n<tr><td>14</td><td>114</td><td>hh:mi:ss:mmm</td><td>24 hour clock</td></tr>\n<tr><td>20</td><td>120</td><td>yyyy-mm-dd hh:mi:ss</td><td>ODBC canonical (24 \n  hour clock)</td></tr>\n<tr><td>21</td><td>121</td><td>yyyy-mm-dd hh:mi:ss.mmm</td><td>ODBC canonical \n  (24 hour clock)</td></tr>\n<tr><td> </td><td>126</td><td>yyyy-mm-ddThh:mi:ss.mmm</td><td>ISO8601</td></tr>\n  <tr><td> </td><td>127</td><td>yyyy-mm-ddThh:mi:ss.mmmZ</td><td>ISO8601  (with time zone Z)</td></tr>\n<tr><td> </td><td>130</td><td>dd mon yyyy hh:mi:ss:mmmAM</td><td>Hijiri</td></tr>\n<tr><td> </td><td>131</td><td>dd/mm/yy hh:mi:ss:mmmAM</td><td>Hijiri</td></tr></table>\n\nConverting float to real:\n<table>\n<tr>\n<th>Value</th>\n<th>Explanation</th></tr>\n<tr><td>0</td><td>Maximum 6 digits (default)</td></tr>\n<tr><td>1</td><td>8 digits</td></tr>\n<tr><td>2</td><td>16 digits</td></tr></table>\n\nConverting money to character:\n<table>\n<tr>\n<th>Value</th>\n<th>Explanation</th></tr>\n<tr><td>0</td><td>No comma delimiters, 2 digits to the right of decimal</td></tr>\n<tr><td>1</td><td>Comma delimiters, 2 digits to the right of decimal</td></tr>\n<tr><td>2</td><td> No comma delimiters, 4 digits to the right of decimal</td></tr></table>\n\n</td></tr>\n </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nConvert an expression from one data type to another (varchar):\nSELECT CONVERT(varchar, 25.65);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_convert2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert an expression from one data type to another (datetime):\nSELECT CONVERT(datetime, \'2017-08-25\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_convert3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nConvert an expression from one data type to another (varchar):\nSELECT CONVERT(varchar,   \'2017-08-25\', 101);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_convert4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n',
'<h2>Server CURRENT_USER</h2>\n\n<k>SQL Server Functions</k>\nReturn the name of the current user in the SQL Server database:\n  SELECT CURRENT_USER;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_current_user" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe CURRENT_USER function returns the name of the current user in the SQL Server database.\n<h3>Syntax</h3>\n  CURRENT_USER\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server  IIF()</h2>\n\n<k>SQL Server Functions</k>\nReturn "YES" if the condition is TRUE, or "NO" if the condition is FALSE:\n  SELECT \n  IIF(500&lt;1000, \'YES\', \'NO\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_iif" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe IIF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.\n<h3>Syntax</h3>\n  IIF(<em>condition</em> , <em>value_if_true</em> , <em>value_if_false</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>condition</em> </td><td>Required. \n\nThe value to test</td></tr>\n  <tr><td><em>value_if_true</em> </td><td>Optional. \n\nThe value to return if <em>condition</em>  is TRUE</td></tr>\n  <tr><td><em>value_if_false</em> </td><td>Optional. \n\nThe value to return if <em>condition</em>  is FALSE</td></tr>\n  </table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2012), Azure SQL Database</td></tr></table>\n<h3>More Examples</h3>\nReturn 5 if the condition is TRUE, or 10 if the condition is FALSE:\n  SELECT IIF(500&lt;1000, 5, 10);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_iif2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTest whether two strings are the same and return "YES" if they are, or "NO" if not:\n  SELECT IIF(STRCMP("hello","bye") = 0,   \'YES\', \'NO\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_iif3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn "MORE" if the condition is TRUE, or "LESS" if the condition is FALSE:\n  SELECT OrderID, Quantity, IIF(Quantity&gt;10,   \'MORE\', \'LESS\')<br>FROM \n  OrderDetails;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_iif4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server ISNULL()</h2>\n\n<k>SQL Server Functions</k>\nReturn the specified value IF the expression is NULL, otherwise return the expression:\n  SELECT ISNULL(NULL, \'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnull" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ISNULL() function returns a specified value if the expression is NULL.\nIf the expression is NOT NULL, this function returns the expression.\n<h3>Syntax</h3>\n  ISNULL(<em>expression</em> , <em>value</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nThe expression to test whether is NULL</td></tr>\n  <tr><td><em>value</em> </td><td>Required. \n\nThe value to return if <em>expression</em>  is NULL</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the specified value IF the expression is NULL, otherwise return the expression:\n  SELECT ISNULL(\'Hello\', \'W3Schools.com\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnull2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nReturn the specified value IF the expression is NULL, otherwise return the expression:\n  SELECT ISNULL(NULL, 500);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnull3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server ISNUMERIC()</h2>\n\n<k>SQL Server Functions</k>\nTests whether the expression is numeric:\n  SELECT ISNUMERIC(4567);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnumeric" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe ISNUMERIC() function tests whether an expression is numeric.\nThis function returns 1 if the expression is numeric, otherwise it returns 0.\n<h3>Syntax</h3>\n  ISNUMERIC(<em>expression</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expression</em> </td><td>Required. \n\nThe value to test</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nTests whether the expression is numeric:\n  SELECT ISNUMERIC(\'4567\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnumeric2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTests whether the expression is numeric:\n  SELECT ISNUMERIC(\'Hello world!\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnumeric3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTests whether the expression is numeric:\n  SELECT ISNUMERIC(20*3);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnumeric4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nTests whether the expression is numeric:\n  SELECT ISNUMERIC(\'2017-08-25\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_isnumeric5" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server NULLIF()</h2>\n\n<k>SQL Server Functions</k>\nCompare two expressions:\n  SELECT NULLIF(25, 25);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_nullif" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe NULLIF() function returns NULL if two expressions are equal, otherwise it returns the first expression.\n<h3>Syntax</h3>\n  NULLIF(<em>expr1</em> , <em>expr2</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>expr1, expr2</em> </td><td>Required. \n\nThe two expressions to be compared </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nCompare two expressions:\n  SELECT NULLIF(\'Hello\', \'Hello\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_nullif2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCompare two expressions:\n  SELECT NULLIF(\'Hello\', \'world\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_nullif3" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\nCompare two expressions:\n  SELECT NULLIF(\'2017-08-25\', \'2017-08-25\');<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_nullif4" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Server SESSION_USER</h2>\n\n<k>SQL Server Functions</k>\nReturn the user name of the current user:\n  SELECT SESSION_USER;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_session_user" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SESSION_USER function returns the name of the current user in the SQL Server database.\n<h3>Syntax</h3>\n  SESSION_USER\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n\n\n',
'<h2>Server SESSIONPROPERTY()</h2>\n\n<k>SQL Server Functions</k>\nReturn the session settings for a specified option:\n  SELECT SESSIONPROPERTY(\'ANSI_NULLS\');\n<h3>Definition and Usage</h3>\nThe SESSIONPROPERTY() function returns the session settings for a specified option.\n<h3>Syntax</h3>\n  SESSIONPROPERTY(<em>option</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>option</em> </td><td>Required. \n\nThe option to retrieve the session settings for. \n\nCan be one of the following values:\n    \n  ANSI_NULLS\n    ANSI_PADDING\n    ANSI_WARNINGS\n    ARITHABORT\n    CONCAT_NULL_YIELDS_NULL\n    NUMERIC_ROUNDABOUT\n    QUOTED_IDENTIFIER\n\n  </td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database</td></tr></table>\n\n\n',
'<h2>Server SYSTEM_USER</h2>\n\n<k>SQL Server Functions</k>\nReturn the login name information for the current user:\n  SELECT SYSTEM_USER;<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_system_user" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe SYSTEM_USER function returns the login name for the current user.\n<h3>Syntax</h3>\n  SYSTEM_USER\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Data Warehouse, Parallel Data \n  Warehouse</td></tr></table>\n\n\n',
'<h2>Server USER_NAME()</h2>\n\n<k>SQL Server Functions</k>\nReturn the database user name (will return the current user since no id is specified):\n  SELECT USER_NAME();<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_user_name" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n<h3>Definition and Usage</h3>\nThe USER_NAME() function returns the database user name based on the specified id.\nIf no id is specified, this function will return the name of the current user.\n<h3>Syntax</h3>\nUSER_NAME(<em>id_number</em> )\n<h3>Parameter Values</h3>\n<table> \n  <tr><th>Parameter</th><th>Description</th></tr>\n  <tr><td><em>id_number</em> </td><td>Optional. \n\nThe id number of a user in the database</td></tr></table>\n<table class="w3-table-all">\n<tr><th>Works in:</th><td>SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data \n  Warehouse, Parallel Data Warehouse</td></tr></table>\n<h3>More Examples</h3>\nReturn the database user name with id 1:\n  SELECT USER_NAME(1);<a target="_blank" href="https://www.w3schools.com/sql/trysqlserver.asp?filename=trysql_func_sqlserver_user_name2" class="w3-btn w3-margin-bottom">Try it Yourself &raquo;</a>\n\n\n',
'<h2>Operators</h2>\n<h3>Arithmetic Operators</h3>\n<table>\n<tr>\n<th style="width:20%">Operator</th>\n<th style="width:70%">Description</th>\n<th style="width:10%">Example</th></tr>\n<tr>\n<td>+</td>\n<td>Add</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_add">Try it</a></td></tr>\n<tr>\n<td>-</td>\n<td>Subtract</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_subtract">Try it</a></td></tr>\n<tr>\n<td>*</td>\n<td>Multiply</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_multiply">Try it</a></td></tr>\n<tr>\n<td>/</td>\n<td>Divide</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_divide">Try it</a></td></tr>\n<tr>\n<td>%</td>\n<td>Modulo</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_modulo">Try it</a></td></tr></table>\n<h3>Bitwise Operators</h3>\n<table>\n<tr>\n<th style="width:20%">Operator</th>\n<th>Description</th></tr>\n<tr>\n<td>&amp;</td>\n<td>Bitwise AND</td></tr>\n<tr>\n<td>|</td>\n<td>Bitwise OR</td></tr>\n<tr>\n<td>^</td>\n<td>Bitwise exclusive OR</td></tr></table>\n<h3>Comparison Operators</h3>\n<table>\n<tr>\n<th style="width:20%">Operator</th>\n<th style="width:70%">Description</th>\n<th style="width:10%">Example</th></tr>\n<tr>\n<td>=</td>\n<td>Equal to</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_equal_to">Try it</a></td></tr>\n<tr>\n<td>&gt;</td>\n<td>Greater than</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_greater_than">Try it</a></td></tr>\n<tr>\n<td>&lt;</td>\n<td>Less than</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_less_than">Try it</a></td></tr>\n<tr>\n<td>&gt;=</td>\n<td>Greater than or equal to</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_greater_than2">Try it</a></td></tr>\n<tr>\n<td>&lt;=</td>\n<td>Less than or equal to</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_less_than2">Try it</a></td></tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>Not equal to</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_not_equal_to">Try it</a></td></tr></table>\n<h3>Compound Operators</h3>\n<table>\n<tr>\n<th style="width:20%">Operator</th>\n<th>Description</th></tr>\n<tr>\n<td>+=</td>\n<td>Add equals</td></tr>\n<tr>\n<td>-=</td>\n<td>Subtract equals</td></tr>\n<tr>\n<td>*=</td>\n<td>Multiply equals</td></tr>\n<tr>\n<td>/=</td>\n<td>Divide equals</td></tr>\n<tr>\n<td>%=</td>\n<td>Modulo equals</td></tr>\n<tr>\n<td>&amp;=</td>\n<td>Bitwise AND equals</td></tr>\n<tr>\n<td>^-=</td>\n<td>Bitwise exclusive equals</td></tr>\n<tr>\n<td>|*=</td>\n<td>Bitwise OR equals</td></tr></table>\n<h3>Logical Operators</h3>\n\n<table>\n<tr>\n<th style="width:20%">Operator</th>\n<th style="width:70%">Description</th>\n<th style="width:10%">Example</th></tr>\n<tr>\n<td>ALL</td>\n<td>TRUE if all of the subquery values meet the condition</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_all&ss=-1">Try it</a></td></tr>\n<tr>\n<td>AND</td>\n<td>TRUE if all the conditions separated by AND is TRUE</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_and">Try it</a></td></tr>\n<tr>\n<td>ANY</td>\n<td>TRUE if any of the subquery values meet the condition</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_any&ss=-1">Try it</a></td></tr>\n<tr>\n<td>BETWEEN</td>\n<td>TRUE if the operand is within the range of comparisons</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_between">Try it</a></td></tr>\n<tr>\n<td>EXISTS</td>\n<td>TRUE if the subquery returns one or more records</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_exists">Try it</a></td></tr>\n<tr>\n<td>IN</td>\n<td>TRUE if the operand is equal to one of a list of expressions</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in">Try it</a></td></tr>\n<tr>\n<td>LIKE</td>\n<td>TRUE if the operand matches a pattern</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_like">Try it</a></td></tr>\n<tr>\n<td>NOT</td>\n<td>Displays a record if the condition(s) is NOT TRUE</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_not">Try it</a></td></tr>\n<tr>\n<td>OR</td>\n<td>TRUE if any of the conditions separated by OR is TRUE</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_or">Try it</a></td></tr>\n<tr>\n<td>SOME</td>\n<td>TRUE if any of the subquery values meet the condition</td>\n<td><a target="_blank" class="w3-btn btnsmall" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_some&ss=-1">Try it</a></td></tr></table>\n\n\n',
'<h2>Data Types for MySQL, SQL Server, and MS Access</h2>\n\nThe data type of a column defines what value the column can hold: \ninteger, character, money, date and time, binary, and so on.\n<h3>Data Types</h3>\nEach column in a database table is required to have a name and a data type.\nAn SQL developer must decide what type of data that will be stored inside each column when creating a table. \n\nThe data type is a guideline for SQL to understand what type of data is expected inside of each column, and it also identifies how SQL will interact with the stored data.\n  <strong>Note:</strong> Data types might have different names in different database.\nAnd even if the name is the same, the size and other details may be different! \n<strong>Always check the documentation!</strong>\n<h3>MySQL Data Types (Version 8.0)</h3>\nIn MySQL there are three main data types: string, numeric, and date and time.\n<h3>String data types:</h3>\n<table>\n<tr><th>Data type</th><th>Description</th></tr>\n<tr><td>CHAR(size)</td><td>A FIXED length string (can contain letters, numbers, and special characters). \n\nThe\n<em>size</em>  parameter specifies the column length in characters - can be \nfrom 0 to   255. \n\nDefault is 1</td></tr>\n<tr><td>VARCHAR(size)</td><td>A VARIABLE length string (can contain letters, numbers, and special \ncharacters). \n\nThe <em>size</em>  parameter specifies the maximum column \nlength in characters - can be from 0 to 65535</td></tr>\n<tr><td>BINARY(size)</td><td>Equal to CHAR(), but stores binary byte strings. \n\nThe <em>size</em>  \nparameter specifies the column length in bytes. \n\nDefault is 1</td></tr>\n<tr><td>VARBINARY(size)</td><td>Equal to VARCHAR(), but stores binary byte strings. \n\nThe <em>size</em>  \nparameter specifies the maximum column length in bytes.</td></tr>\n<tr><td>TINYBLOB</td><td>For BLOBs (Binary Large OBjects). \n\nMax length: 255 bytes</td></tr>\n<tr><td>TINYTEXT</td><td>Holds a string with a maximum length of 255 characters</td></tr>\n<tr><td>TEXT(size)</td><td>Holds a string with a maximum length of 65,535 bytes</td></tr>\n<tr><td>BLOB(size)</td><td>For BLOBs (Binary Large OBjects). \n\nHolds up to 65,535 bytes of data</td></tr>\n<tr><td>MEDIUMTEXT</td><td>Holds a string with a maximum length of 16,777,215 characters</td></tr>\n<tr><td>MEDIUMBLOB</td><td>For BLOBs (Binary Large OBjects). \n\nHolds up to 16,777,215 bytes of data</td></tr>\n<tr><td>LONGTEXT</td><td>Holds a string with a maximum length of 4,294,967,295 characters</td></tr>\n<tr><td>LONGBLOB</td><td>For BLOBs (Binary Large OBjects). \n\nHolds up to 4,294,967,295 bytes of data</td></tr>\n<tr><td>ENUM(val1, val2, val3, ...)</td><td>A string object that can have only one value, chosen from a list of possible values. \n\nYou can list up to 65535 values in an ENUM list. \n\nIf a value is inserted that is not in the list, a   blank value will be inserted. \n\n\nThe values are sorted in the order you enter them</td></tr>\n  <tr><td>SET(val1, val2, val3, ...)</td><td>A string object that can have 0 or more values, chosen from a list of \npossible values. \n\nYou can list up to 64 values in a SET list</td></tr></table>\n<h3>Numeric data types:</h3>\n<table>\n<tr><th>Data type</th><th>Description</th></tr>\n<tr><td>BIT(<em>size</em> )</td><td>A bit-value type. \n\nThe number of bits per value is specified in <em>size</em> . \n\n\nThe <em>size</em>  parameter can hold a value from 1 to 64. \n\nThe default \nvalue for <em>size</em>  is 1.</td></tr>\n<tr><td>TINYINT(<em>size</em> )</td><td>A very small integer. \n\nSigned range is from -128 to 127. \n\nUnsigned range \nis from 0 to 255. \n\nThe <em>size</em>  parameter specifies the maximum \ndisplay width (which is 255)</td></tr>\n<tr><td>BOOL</td><td>Zero is considered as false, nonzero values are considered as true. \n\n</td></tr>\n<tr><td>BOOLEAN</td><td>Equal to BOOL</td></tr>\n<tr><td>SMALLINT(<em>size</em> )</td><td>A small integer. \n\nSigned range is from -32768 to 32767. \n\nUnsigned range \nis from 0 to 65535. \n\nThe <em>size</em>  parameter specifies the maximum \ndisplay width (which is 255)</td></tr>\n<tr><td>MEDIUMINT(<em>size</em> )</td><td>A medium integer. \n\nSigned range is from -8388608 to 8388607. \n\nUnsigned \nrange is from 0 to 16777215. \n\nThe <em>size</em>  parameter specifies the \nmaximum display width (which is 255)</td></tr>\n<tr><td>INT(<em>size</em> )</td><td>A medium integer. \n\nSigned range is from -2147483648 to 2147483647. \n\n\nUnsigned range is from 0 to 4294967295. \n\nThe <em>size</em>  parameter \nspecifies the maximum display width (which is 255)</td></tr>\n<tr><td>INTEGER(<em>size</em> )</td><td>Equal to INT(size)</td></tr>\n<tr><td>BIGINT(<em>size</em> )</td><td>A large integer. \n\nSigned range is from -9223372036854775808 to \n9223372036854775807. \n\nUnsigned range is from 0 to 18446744073709551615. \n\nThe\n<em>size</em>  parameter specifies the maximum display width (which is 255)</td></tr>\n<tr><td>FLOAT(<em>size</em> , <em>d</em> )</td><td>A floating point number. \n\nThe total number of digits is specified in \n<em>size</em> . \n\nThe   number of digits after the decimal point is specified \nin the <em>d</em>  parameter. \n\nThis syntax is deprecated in MySQL 8.0.17,       and it will be removed in future MySQL versions</td></tr>\n<tr><td>FLOAT(<em>p</em> )</td><td>A floating point number. \n\nMySQL uses the <em>p</em>  value to determine \nwhether to use FLOAT or DOUBLE for the resulting data type. \n\nIf <em>p</em>  \nis from 0 to 24, the data type becomes FLOAT(). \n\nIf <em>p</em>  is from 25 to \n53, the data type becomes DOUBLE()</td></tr>\n<tr><td>DOUBLE(<em>size</em> , <em>d</em> )</td><td>A normal-size floating point number. \n\nThe total number of digits is specified in \n<em>size</em> . \n\nThe   number of digits after the decimal point is specified \nin the <em>d</em>  parameter</td></tr>\n<tr><td>DOUBLE PRECISION(<em>size</em> , <em>d</em> )</td><td> </td></tr>\n<tr><td>DECIMAL(<em>size</em> , <em>d</em> )</td><td>An exact fixed-point number. \n\nThe   total number of digits is specified in \n<em>size</em> . \n\nThe   number of digits after the decimal point is specified \nin the <em>d</em>  parameter. \n\nThe maximum number for <em>size</em>  is 65. \n\n\nThe maximum number for <em>d</em>  is 30. \n\nThe default value for <em>size</em>  \nis 10. \n\nThe default value for <em>d</em>  is 0.</td></tr>\n<tr><td>DEC(<em>size</em> , <em>d</em> )</td><td>Equal to DECIMAL(size,d)</td></tr>\n    </table>\n    <strong>Note:</strong> All the numeric data types may have an extra option: UNSIGNED \nor ZEROFILL. \n\nIf you add the UNSIGNED option, MySQL disallows negative values for the column. \n\nIf you add the ZEROFILL option, MySQL automatically also adds the \nUNSIGNED attribute to the column.\n<h3>Date and Time data types:</h3>\n<table>\n<tr><th>Data type</th><th>Description</th></tr>\n<tr><td>DATE</td><td>A date. Format: YYYY-MM-DD. \nThe supported range is from \'1000-01-01\' to \'9999-12-31\'</td></tr>\n<tr><td>DATETIME(<em>fsp</em> )</td><td>A date and time combination. \nFormat: YYYY-MM-DD hh:mm:ss. \nThe supported range is from \'1000-01-01 00:00:00\' to \'9999-12-31 23:59:59\'. \nAdding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time</td></tr>\n<tr><td>TIMESTAMP(<em>fsp</em> )</td><td>A timestamp. \nTIMESTAMP values are stored as the number of seconds since the Unix epoch (\'1970-01-01 00:00:00\' UTC). \nFormat: YYYY-MM-DD hh:mm:ss. \nThe supported range is from \'1970-01-01 00:00:01\'   UTC to \'2038-01-09 03:14:07\' UTC. \n\n\nAutomatic initialization and updating to the current date and time can be \nspecified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP \nin the column definition</td></tr>\n<tr><td>TIME(<em>fsp</em> )</td><td>A time. \n\nFormat: hh:mm:ss. \n\nThe supported range is from \'-838:59:59\' to \'838:59:59\'</td></tr>\n<tr><td>YEAR</td><td>A year in four-digit format. \nValues allowed in four-digit format: 1901 to 2155, and 0000. \n     MySQL 8.0 does not support year in two-digit format.</td></tr></table>\n<h3>Server Data Types</h3>\n<h3>String data types:</h3>\n<table>\n<tr><th>Data type</th><th>Description</th><th>Max size</th><th>Storage</th></tr>\n<tr><td>char(n)</td><td>Fixed width character string</td><td>8,000 characters</td><td>Defined width</td></tr>\n<tr><td>varchar(n)</td><td>Variable width character string</td><td>8,000 characters</td><td>2 bytes + number of chars</td></tr>\n<tr><td>varchar(max)</td><td>Variable width character string</td><td>1,073,741,824 characters</td><td>2 bytes + number of chars</td></tr>\n<tr><td>text</td><td>Variable width character string</td><td>2GB of text data</td><td>4 bytes + number of chars</td></tr>\n<tr><td>nchar</td><td>Fixed width Unicode string</td><td>4,000 characters</td><td>Defined width x 2</td></tr>\n<tr><td>nvarchar</td><td>Variable width Unicode string</td><td>4,000 characters</td><td> </td></tr>\n<tr><td>nvarchar(max)</td><td>Variable width Unicode string</td><td>536,870,912 characters</td><td> </td></tr>\n<tr><td>ntext</td><td>Variable width Unicode string</td><td>2GB of text data</td><td> </td></tr>\n<tr><td>binary(n)</td><td>Fixed width binary string</td><td>8,000 bytes</td><td> </td></tr>\n<tr><td>varbinary</td><td>Variable width binary string</td><td>8,000 bytes</td><td> </td></tr>\n<tr><td>varbinary(max)</td><td>Variable width binary string</td><td>2GB</td><td> </td></tr>\n<tr><td>image</td><td>Variable width binary string</td><td>2GB</td><td> </td></tr>\n  </table>\n<h3>Numeric data types:</h3>\n<table>\n<tr>\n<th style="width:20%">Data type</th><th>Description</th>\n<th style="width:10%">Storage</th></tr>\n<tr><td>bit</td><td>Integer that can be 0, 1, or NULL</td><td> </td></tr>\n<tr><td>tinyint</td><td>Allows whole numbers from 0 to 255</td><td>1 byte</td></tr>\n<tr><td>smallint</td><td>Allows whole numbers between -32,768 and 32,767</td><td>2 bytes</td></tr>\n<tr><td>int</td><td>Allows whole numbers between -2,147,483,648 and 2,147,483,647 </td><td>4 bytes</td></tr>\n<tr><td>bigint</td><td>Allows whole numbers between -9,223,372,036,854,775,808 and   9,223,372,036,854,775,807 </td><td>8 bytes</td></tr>\n<tr><td>decimal(p,s)</td><td>Fixed precision and scale numbers.\nAllows numbers from -10^38 +1 to 10^38 –1.\n  The p parameter indicates the maximum total number of digits that can  be stored (both to the left and to the right of the decimal point). \n\np  must be a value from 1 to 38. \n\nDefault is 18.\n  The s parameter indicates the maximum number of digits stored to the  right of the decimal point. \n\ns must be a value from 0 to p. \n\nDefault value  is 0</td><td>5-17 bytes</td></tr>\n<tr><td>numeric(p,s)</td><td>Fixed precision and scale numbers.\nAllows numbers from -10^38 +1 to 10^38 –1.\n  The p parameter indicates the maximum total number of digits that can  be stored (both to the left and to the right of the decimal point). \n\np  must be a value from 1 to 38. \n\nDefault is 18.\n  The s parameter indicates the maximum number of digits stored to the  right of the decimal point. \n\ns must be a value from 0 to p. \n\nDefault value  is 0</td><td>5-17 bytes</td></tr>\n<tr><td>smallmoney</td><td>Monetary data from -214,748.3648 to 214,748.3647 </td><td>4 bytes</td></tr>\n<tr><td>money</td><td>Monetary data from -922,337,203,685,477.5808 to   922,337,203,685,477.5807</td><td>8 bytes</td></tr>\n<tr><td>float(n)</td><td>Floating precision number data from -1.79E + 308 to 1.79E + 308.The   n parameter indicates whether the field should hold 4 or 8 bytes. \n\n  float(24) holds a 4-byte field and float(53) holds an 8-byte field. \n\n  Default value of n is 53.</td><td>4 or 8 bytes</td></tr>\n<tr><td>real</td><td>Floating precision number data from -3.40E + 38 to 3.40E + 38</td><td>4 bytes</td></tr>\n  </table>\n<h3>Date and Time data types:</h3>\n<table>\n<tr>\n<th style="width:20%">Data type</th><th>Description</th>\n<th style="width:10%">Storage</th></tr>\n<tr><td>datetime</td><td>From January 1, 1753 to December 31, 9999 with an accuracy of 3.33   milliseconds</td><td>8 bytes</td></tr>\n<tr><td>datetime2</td><td>From January 1, 0001 to December 31, 9999 with an accuracy of 100   nanoseconds</td><td>6-8 bytes</td></tr>\n<tr><td>smalldatetime</td><td>From January 1, 1900 to June 6, 2079 with an accuracy of 1 minute</td><td>4 bytes</td></tr>\n<tr><td>date</td><td>Store a date only. \n\nFrom January 1, 0001 to December 31, 9999</td><td>3 bytes</td></tr>\n<tr><td>time</td><td>Store a time only to an accuracy of 100 nanoseconds</td><td>3-5 bytes</td></tr>\n<tr><td>datetimeoffset</td><td>The same as datetime2 with the addition of a time zone offset</td><td>8-10 bytes</td></tr>\n<tr><td>timestamp</td><td>Stores a unique number that gets updated every time a row gets created   or modified. \n\nThe timestamp value is based upon an internal clock and does   not correspond to real time. \n\nEach table may have only one timestamp   variable</td><td> </td></tr>\n  </table>\n<h3>Other data types:</h3>\n<table>\n<tr>\n<th style="width:20%">Data type</th><th>Description</th></tr>\n<tr><td>sql_variant</td><td>Stores up to 8,000 bytes of data of various data types, except text,   ntext, and timestamp</td></tr>\n<tr><td>uniqueidentifier</td><td>Stores a globally unique identifier (GUID)</td></tr>\n<tr><td>xml</td><td>Stores XML formatted data. \n\nMaximum 2GB</td></tr>\n<tr><td>cursor</td><td>Stores a reference to a cursor used for database operations</td></tr>\n<tr><td>table</td><td>Stores a result-set for later processing</td></tr></table>\n<h3>Microsoft Access Data Types</h3>\n<table>\n<tr>\n<th style="width:20%">Data type</th><th>Description</th>\n<th style="width:10%">Storage</th></tr>\n<tr><td>Text</td><td>Use for text or combinations of text and numbers. \n\n255 characters maximum</td><td> </td></tr>\n<tr><td>Memo</td><td>Memo is used for larger amounts of text. \n\nStores up to 65,536 characters. \n\n<b>Note:</b> You cannot sort a memo field. \n\nHowever, they are   searchable</td><td> </td></tr>\n<tr><td>Byte</td><td>Allows whole numbers from 0 to 255</td><td>1 byte</td></tr>\n<tr><td>Integer</td><td>Allows whole numbers between -32,768 and 32,767</td><td>2 bytes</td></tr>\n<tr><td>Long</td><td>Allows whole numbers between -2,147,483,648 and 2,147,483,647</td><td>4 bytes</td></tr>\n<tr><td>Single</td><td>Single precision floating-point. \n\nWill handle most decimals </td><td>4 bytes</td></tr>\n<tr><td>Double</td><td>Double precision floating-point. \n\nWill handle most decimals</td><td>8 bytes</td></tr>\n<tr><td>Currency</td><td>Use for currency. \n\nHolds up to 15 digits of whole dollars, plus 4 decimal places. \n\n<b>Tip:</b> You can choose which country\'s currency to use</td><td>8 bytes</td></tr>\n<tr><td>AutoNumber</td><td>AutoNumber fields automatically give each record its own number, usually starting at 1</td><td>4 bytes</td></tr>\n<tr><td>Date/Time</td><td>Use for dates and times</td><td>8 bytes</td></tr>\n<tr><td>Yes/No</td><td>A logical field can be displayed as Yes/No, True/False, or On/Off. \n\nIn code, use the constants True and False (equivalent to -1 and 0). \n\n<b>Note:</b>   Null values are not allowed in Yes/No fields</td><td>1 bit</td></tr>\n<tr><td>Ole Object</td><td>Can store pictures, audio, video, or other BLOBs (Binary Large OBjects)</td><td>up to 1GB</td></tr>\n<tr><td>Hyperlink</td><td>Contain links to other files, including web pages</td><td> </td></tr>\n<tr><td>Lookup Wizard</td><td>Let you type a list of options, which can then be chosen from a drop-down list</td><td>4 bytes</td></tr></table>\n\n\n',
'<h2>Quick Reference from W3Schools</h2>\n\n<table>\n<tr>\n<th style="width:27%">SQL Statement</th><th>Syntax</th></tr>\n<tr><td>AND / OR</td><td>SELECT column_name(s)  FROM table_name  WHERE condition  AND|OR condition</td></tr>\n  <tr><td>ALTER TABLE</td><td>ALTER TABLE table_name   ADD column_name datatypeor\n  ALTER TABLE table_name   DROP COLUMN column_name</td></tr>\n  <tr><td>AS (alias)</td><td>SELECT column_name AS column_alias  FROM table_nameor\n  SELECT column_name  FROM table_name  AS table_alias</td></tr>\n  <tr><td>BETWEEN</td><td>SELECT column_name(s)  FROM table_name  WHERE column_name  BETWEEN value1 AND value2</td></tr>\n  <tr><td>CREATE DATABASE</td><td>CREATE DATABASE database_name</td></tr>\n  <tr><td>CREATE TABLE</td><td>CREATE TABLE table_name  (  column_name1 data_type,  column_name2 data_type,  column_name3 data_type,  ... \n )</td></tr>\n  <tr><td>CREATE INDEX</td><td>CREATE INDEX index_name  ON table_name (column_name)or\n  CREATE UNIQUE INDEX index_name  ON table_name (column_name)</td></tr>\n  <tr><td>CREATE VIEW</td><td>CREATE VIEW view_name AS  SELECT column_name(s)  FROM table_name  WHERE condition</td></tr>\n  <tr><td>DELETE</td><td>DELETE FROM table_name  WHERE some_column=some_valueor\n  DELETE FROM table_name   (<b>Note: </b>Deletes the entire table!!)\n  DELETE * FROM table_name   (<b>Note: </b>Deletes the entire table!!)</td></tr>\n  <tr><td>DROP DATABASE</td><td>DROP DATABASE database_name</td></tr>\n  <tr><td>DROP INDEX</td><td>DROP INDEX table_name.index_name (SQL  Server)  DROP INDEX index_name ON table_name (MS Access)  DROP INDEX index_name (DB2/Oracle)  ALTER TABLE table_name  DROP INDEX index_name (MySQL)</td></tr>\n  <tr><td>DROP TABLE</td><td>DROP TABLE table_name</td></tr>\n  <tr><td>EXISTS</td><td>IF EXISTS (SELECT * FROM table_name WHERE id = ?)<br>BEGIN<br>--do   what needs to be done if exists<br>END<br>ELSE<br>BEGIN<br>--do what needs   to be done if not<br>END</td></tr>\n  <tr><td>GROUP BY</td><td>SELECT column_name,  aggregate_function(column_name)  FROM table_name  WHERE column_name operator value  GROUP BY column_name</td></tr>\n  <tr><td>HAVING</td><td>SELECT column_name,  aggregate_function(column_name)  FROM table_name  WHERE column_name operator value  GROUP BY column_name  HAVING aggregate_function(column_name) operator value</td></tr>\n  <tr><td>IN</td><td>SELECT column_name(s)  FROM table_name  WHERE column_name  IN (value1,value2,..)</td></tr>\n  <tr><td>INSERT INTO</td><td>INSERT INTO table_name  VALUES (value1, value2, value3,....)<i>or</i>\n  INSERT INTO table_name  (column1, column2, column3,...)  VALUES (value1, value2, value3,....)</td></tr>\n  <tr><td>INNER JOIN</td><td>SELECT column_name(s)  FROM table_name1  INNER JOIN table_name2   ON table_name1.column_name=table_name2.column_name</td></tr>\n  <tr><td>LEFT JOIN</td><td>SELECT column_name(s)  FROM table_name1  LEFT JOIN table_name2   ON table_name1.column_name=table_name2.column_name</td></tr>\n  <tr><td>RIGHT JOIN</td><td>SELECT column_name(s)  FROM table_name1  RIGHT JOIN table_name2   ON table_name1.column_name=table_name2.column_name</td></tr>\n  <tr><td>FULL JOIN</td><td>SELECT column_name(s)  FROM table_name1  FULL JOIN table_name2   ON table_name1.column_name=table_name2.column_name</td></tr>\n  <tr><td>LIKE</td><td>SELECT column_name(s)  FROM table_name  WHERE column_name\n  LIKE pattern</td></tr>\n  <tr><td>ORDER BY</td><td>SELECT column_name(s)  FROM table_name  ORDER BY column_name [ASC|DESC]</td></tr>\n<tr><td>SELECT</td><td>SELECT column_name(s)  FROM table_name</td></tr>\n<tr><td>SELECT *</td><td>SELECT *  FROM table_name</td></tr>\n<tr><td>SELECT DISTINCT</td><td>SELECT DISTINCT column_name(s)  FROM table_name</td></tr>\n<tr><td>SELECT INTO</td><td>SELECT *  INTO new_table_name [IN externaldatabase]  FROM old_table_name<i>or</i>\n  SELECT column_name(s)  INTO new_table_name [IN externaldatabase]  FROM old_table_name</td></tr>\n<tr><td>SELECT TOP</td><td>SELECT TOP number|percent column_name(s)  FROM table_name</td></tr>\n<tr><td>TRUNCATE TABLE</td><td>TRUNCATE TABLE table_name</td></tr>\n  <tr><td>UNION</td><td>SELECT column_name(s) FROM table_name1  UNION  SELECT column_name(s) FROM table_name2</td></tr>\n  <tr><td>UNION ALL</td><td>SELECT column_name(s) FROM table_name1  UNION ALL  SELECT column_name(s) FROM table_name2</td></tr>\n  <tr><td>UPDATE</td><td>UPDATE table_name  SET column1=value, column2=value,... \n WHERE some_column=some_value</td></tr>\n<tr><td>WHERE</td><td>SELECT column_name(s)  FROM table_name  WHERE column_name operator value</td></tr></table>\n<b>Source : https://www.w3schools.com/sql/sql_quickref.asp</b>\n\n',
'<h2>Examples</h2>\n<h3>Syntax</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all">\nSelect all the records from a specific table ("Customers")</a>\n<a href="sql_syntax.asp" class="w3-btn">Example Explained</a>\n<h3>SELECT</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_columns">\nSELECT Column</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all">\nSELECT *</a>\n<a href="sql_select.asp" class="w3-btn">Examples Explained</a>\n<h3>SELECT DISTINCT</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct">\nSELECT DISTINCT</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct2">\nSELECT COUNT(DISTINCT column_name)</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_distinct3">\nSELECT COUNT(DISTINCT column_name) workaround for MS Access</a>\n<a href="sql_distinct.asp" class="w3-btn">Examples Explained</a>\n<h3>WHERE</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where">\nWHERE Clause</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_number">\nText Fields vs. \n\nNumeric Fields</a>\n<a href="sql_where.asp" class="w3-btn">Examples Explained</a>\n<h3>AND, OR and NOT Operators</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_and">\nAND</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_or">\nOR</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_not">\nNOT</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where_and_or">\nCombining AND, OR and NOT</a>\n<a href="sql_and_or.asp" class="w3-btn">Examples Explained</a>\n<h3>ORDER BY</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_orderby">\nORDER BY</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_orderby_desc">\nORDER BY DESC</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_orderby2">\nORDER BY Several Columns</a>\n<a href="sql_orderby.asp" class="w3-btn">Examples Explained</a>\n<h3>INSERT INTO</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_colname">\nINSERT INTO</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_cols">\nInsert data in specific columns</a>\n<a href="sql_insert.asp" class="w3-btn">Examples Explained</a>\n\n<h3>NULL Values</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_is_null">\nIS NULL Operator</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_is_not_null">\nIS NOT NULL Operator</a>\n<a href="sql_null_values.asp" class="w3-btn">Examples Explained</a>\n<h3>Update</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_2">\nUPDATE Table</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_3">\nUPDATE Multiple Records</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_update_4">\nUPDATE Warning (if you omit the WHERE clause, all records will be updated)</a>\n<a href="sql_update.asp" class="w3-btn">Examples Explained</a>\n<h3>DELETE</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_delete">\nDELETE</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_delete_all">\nDELETE All Records</a>\n<a href="sql_delete.asp" class="w3-btn">Examples Explained</a>\n<h3>SELECT TOP</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top&ss=-1">\nSELECT TOP</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_limit">\nLIMIT</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top_percent&ss=-1">\nSELECT TOP PERCENT</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_top_where&ss=-1">\nSELECT TOP and add a WHERE Clause</a>\n<a href="sql_top.asp" class="w3-btn">Examples Explained</a>\n<h3>MIN() and MAX()</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_min">\nMIN()</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_max">\nMAX()</a>\n<a href="sql_min_max.asp" class="w3-btn">Examples Explained</a>\n<h3>COUNT, AVG() and SUM()</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_count">\nCOUNT()</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_avg">\nAVG()</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_sum">\nSUM()</a>\n<a href="sql_count_avg_sum.asp" class="w3-btn">Examples Explained</a>\n<h3>LIKE</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like">\nLIKE - select all table rows starting with "a"</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_ending">\nLIKE - select all table rows ending with "a"</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_pattern">\nLIKE - select all table rows that have "or" in any position</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_underscore">\nLIKE - select all table rows that have "r" in the second position</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_start_end">\nLIKE - select all table rows that starts with "a" and ends with "o"</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_like_not">\nLIKE - select all table rows that does NOT start with "a"</a>\n<a href="sql_like.asp" class="w3-btn">Examples Explained</a>\n<h3>Wildcards</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_percent">\nUsing the % Wildcard</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_underscore">\nUsing the _ Wildcard</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_charlist&ss=-1">\nUsing the [charlist] Wildcard</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_wildcard_not_charlist&ss=-1">\nUsing the [!charlist] Wildcard</a>\n<a href="sql_wildcards.asp" class="w3-btn">Examples Explained</a>\n<h3>IN</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in">\nIN</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_in_not">\nNOT IN</a>\n<a href="sql_in.asp" class="w3-btn">Examples Explained</a>\n<h3>BETWEEN</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between">\nBETWEEN</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_not_between">\nNOT BETWEEN</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_in">\nBETWEEN with IN</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_between_text">\nBETWEEN Text Values</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_not_between_text">\nNOT BETWEEN Text Values</a>\n<a href="sql_between.asp" class="w3-btn">Examples Explained</a>\n<h3>Aliases</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column0">\nAlias for Columns</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_column">\nTwo Aliases</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_alias_table">\nAlias for Tables</a>\n<a href="sql_alias.asp" class="w3-btn">Examples Explained</a>\n<h3>Joins</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_inner">\nINNER JOIN</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_left">\nLEFT JOIN</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_right">\nRIGHT JOIN</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_join_self">\nSelf JOIN</a>\n<a href="sql_join.asp" class="w3-btn">Examples Explained</a>\n<h3>UNION</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union">\nUNION</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union_all">\nUNION ALL</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union2">\nUNION With WHERE</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_union_all2">\nUNION ALL With WHERE</a>\n<a href="sql_union.asp" class="w3-btn">Examples Explained</a>\n<h3>GROUP BY</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby">\nGROUP BY</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby_orderby">\nGROUP BY and ORDER BY</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_groupby1">\nGROUP BY With JOIN</a>\n<a href="sql_groupby.asp" class="w3-btn">Examples Explained</a>\n<h3>HAVING</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having">\nHAVING and GROUP BY</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_having_orderby">\nHAVING and ORDER BY</a>\n<a href="sql_having.asp" class="w3-btn">Examples Explained</a>\n<h3>EXISTS</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_exists">\nEXISTS</a>\n<a href="sql_exists.asp" class="w3-btn">Example Explained</a>\n<h3>ANY and ALL</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_any&ss=-1">\nANY</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all2&ss=-1">\nALL</a>\n<a href="sql_any_all.asp" class="w3-btn">Examples Explained</a>\n<h3>INSERT INTO SELECT</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select">\nINSERT INTO SELECT</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_insert_into_select_where">\nINSERT INTO SELECT with WHERE</a>\n<a href="sql_insert_into_select.asp" class="w3-btn">Examples Explained</a>\n<h3>CASE</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_case">\nCASE 1</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_case2">\nCASE 2</a>\n<a href="sql_case.asp" class="w3-btn">Examples Explained</a>\n<h3>Comments</h3>\n<a class="w3-button w3-bar-item w3-light-grey" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_single_1">\nSingle Line Comments</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_single_2">\nSingle Line Comments At The End Of a Line</a>\n<a class="w3-button w3-bar-item w3-light-grey w3-border-top" target="_blank" href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_comment_multi_1">\nMulti-line Comments</a>\n<a href="sql_comments.asp" class="w3-btn">Examples Explained</a>\n\n',
'<h2>How to bulk insert data in MySQL</h2>\n<h3>Method 1: Using LOAD DATA statement with CSV file</h3>\nAnother method is inserting data from a CSV file, to understand this, we will create a table of Teachers names with their subjects which they are teaching in a class using a command:\n\nCREATE TABLE teacher_names (teacher_id INT, teacher_name VARCHAR(50), subject VARCHAR(50));\n<img width="824" height="163" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-379.png">\n\nOpen a text file and type the following data:\nteacher_id,teacher_name,subject\n1,”John”,”English”\n2,”Sophia”,”Science”\n3,”Paul”,”Arts”\n<img width="336" height="81" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-380.png">\n\nSave the text file by name “<r>teacher_names.csv</r>”.\nYou may encounter an error of <r>-secure-file-priv</r> option while loading the data, as shown in the image below:\n\nLOAD DATA INFILE \'/home/teacher_names.csv\' INTO TABLE teacher_names FIELDS TERMINATED BY \',\' ENCLOSED BY \'"\' LINES TERMINATED BY \'\n\' IGNORE 1 ROWS;\n<img width="1359" height="125" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-381.png">\nTo resolve this issue you need to move the teacher_names.csv to the <r>secure_file_priv</r> variable folder.\nExecute the command to locate the path of variable <r>secure_file_priv</r>:\n\nSHOW VARIABLES LIKE "secure_file_priv";\n<img width="591" height="225" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-382.png">\nNow move the csv file to the <r>/var/lib/mysql-myfiles </r>folder:\n\n<img width="434" height="192" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-384.png">\nRun the following command to import all the data from the <r>teacher_names.csv</r> file to the <r>teacher_names </r>table of MySQL:\n\nLOAD DATA INFILE \'/var/lib/mysql-files/teacher_names.csv\' INTO TABLE teacher_names FIELDS TERMINATED BY \',\' ENCLOSED BY \'"\' LINES TERMINATED BY \'\n\' IGNORE 1 ROWS;\n<img width="1343" height="162" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-385.png">\nTo open and verify the file:\n\nSELECT * FROM teacher_names;\n<img width="536" height="282" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-387.png">\n<h3>Method 2: Using INSERT INTO statement</h3>\nThe first method is using the insert command for the insertion of bulk data.\nLet us discuss the general syntax of using the command to insert bulk data in MySQL.\n\n<h3>Syntax to insert bulk data in MySQL</h3>\nThe general syntax of inserting bulk values in a table in MySQL is:\n\nINSERT INTO table_name VALUES (data), (data), (data);\nThe explanation to the above general syntax is simple:\n\nType the clause INSERT INTO and the table name in which you want to insert the data\nUse the clause VALUES and then in the brackets write the data of the first row, close the brackets, and after the put the comma\nAfter the comma use the brackets and enter the data of the other row and so on\n\nTo understand how this works, let us consider an example, we will create a table of “class_result”, using the command:\n\nCREATE TABLE class_result (st_id INT, st_name VARCHAR(50), st_grade CHAR(25));\n<img width="859" height="154" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-389.png">\nWe will insert the result of five students using the single command:\n\nINSERT INTO class_result VALUES (1,’John’,’A’),(2,’Elsa’,’D’),(3,’Sophia’,’B’),(4,’Paul’,’B’),(5,’Saira’,’A’);\n<img width="825" height="213" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-390.png">\nTo display the contents of the table:\n\nSELECT*FROM class_result;\n<img width="491" height="388" class="lazy" data-src="https://linuxhint.com/wp-content/uploads/2021/12/word-image-392.png">\nFrom the above output, we see that we have inserted a bulk of data using a single query instead of inserting the data by different queries.\n',
'<y>MySQL 39个常用命令</y>\n<div id="MySQL39个常用命令toc" class="toc"><a href="#MySQL39个常用命令topic-0" target="_self"><br><y>MySQL数据库语句</y></a><br><a href="#MySQL39个常用命令topic-1" target="_self">1.创建数据库</a>&emsp;<a href="#MySQL39个常用命令topic-2" target="_self">2.选择数据库</a>&emsp;<a href="#MySQL39个常用命令topic-3" target="_self">3.删除数据库</a>&emsp;<a href="#MySQL39个常用命令topic-4" target="_self"><br><y>MySQL表语句</y></a><br><a href="#MySQL39个常用命令topic-5" target="_self">1.新建表</a>&emsp;<a href="#MySQL39个常用命令topic-6" target="_self">2.新增表字段</a>&emsp;<a href="#MySQL39个常用命令topic-7" target="_self">3.修改表字段</a>&emsp;<a href="#MySQL39个常用命令topic-8" target="_self">4.删除表字段</a>&emsp;<a href="#MySQL39个常用命令topic-9" target="_self"><br><y>MySQL管理语句</y></a><br><a href="#MySQL39个常用命令topic-10" target="_self">1.连接本机数据库</a>&emsp;<a href="#MySQL39个常用命令topic-11" target="_self">2.连接到远程主机上的MYSQL</a>&emsp;<a href="#MySQL39个常用命令topic-12" target="_self">3.修改mysql中root的密码</a>&emsp;<a href="#MySQL39个常用命令topic-13" target="_self">4.添加创建用户</a>&emsp;<a href="#MySQL39个常用命令topic-14" target="_self"><br><y>MySQL增删改查语句</y></a><br><a href="#MySQL39个常用命令topic-15" target="_self">1.MySQL插入数据</a>&emsp;<a href="#MySQL39个常用命令topic-16" target="_self">2.MySQL删除数据</a>&emsp;<a href="#MySQL39个常用命令topic-17" target="_self">3.MySQL修改数据</a>&emsp;<a href="#MySQL39个常用命令topic-18" target="_self">4.MySQL查询数据</a>&emsp;<a href="#MySQL39个常用命令topic-19" target="_self"><br><y>MySQL索引语句</y></a><br><a href="#MySQL39个常用命令topic-20" target="_self">1.使用CREATE INDEX</a>&emsp;<a href="#MySQL39个常用命令topic-21" target="_self">2.使用ALTER TABLE</a>&emsp;<a href="#MySQL39个常用命令topic-22" target="_self">1.PRIMARY KEY（主键索引）</a>&emsp;<a href="#MySQL39个常用命令topic-23" target="_self">2.UNIQUE(唯一索引)</a>&emsp;<a href="#MySQL39个常用命令topic-24" target="_self">3.INDEX(普通索引)</a>&emsp;<a href="#MySQL39个常用命令topic-25" target="_self">4.FULLTEXT(全文索引)</a>&emsp;<a href="#MySQL39个常用命令topic-26" target="_self">3.查看索引</a>&emsp;<a href="#MySQL39个常用命令topic-27" target="_self">4.修改索引</a>&emsp;<a href="#MySQL39个常用命令topic-28" target="_self">5.删除索引</a>&emsp;<a href="#MySQL39个常用命令topic-29" target="_self"><br><y>MySQL查询语句</y></a><br><a href="#MySQL39个常用命令topic-30" target="_self">1.直接查询</a>&emsp;<a href="#MySQL39个常用命令topic-31" target="_self">2.条件查询</a>&emsp;<a href="#MySQL39个常用命令topic-32" target="_self">3.排序查询</a>&emsp;<a href="#MySQL39个常用命令topic-33" target="_self">4.范围查询</a>&emsp;<a href="#MySQL39个常用命令topic-34" target="_self">5.SQL查询五子句</a>&emsp;<a href="#MySQL39个常用命令topic-35" target="_self">6.模糊查询</a>&emsp;<a href="#MySQL39个常用命令topic-36" target="_self">7.集合查询</a>&emsp;<a href="#MySQL39个常用命令topic-37" target="_self">8.分页查询</a>&emsp;<a href="#MySQL39个常用命令topic-38" target="_self"><br><y>9.联合查询</y></a><br><a href="#MySQL39个常用命令topic-39" target="_self">1)INNER JOIN(内连接)</a>&emsp;<a href="#MySQL39个常用命令topic-40" target="_self">2)LEFT JOIN(左连接)</a>&emsp;<a href="#MySQL39个常用命令topic-41" target="_self">3)RIGHT JOIN（右连接）</a>&emsp;</div></center>&emsp;&emsp;\n\n<o id="MySQL39个常用命令topic-0"><br><y>MySQL数据库语句</y></o>\n<o id="MySQL39个常用命令topic-1">1.创建数据库</o>\ncreate database name; 创建数据库\n<o id="MySQL39个常用命令topic-2">2.选择数据库</o>\nuse databasename; 选择数据库\n<o id="MySQL39个常用命令topic-3">3.删除数据库</o>\ndrop database name; 删除数据库\n\n<o id="MySQL39个常用命令topic-4"><br><y>MySQL表语句</y></o>\n<o id="MySQL39个常用命令topic-5">1.新建表</o>\n-- 新增一个User表\nCREATE TABLE user(\nid varchar(32) NOT NULL COMMENT \'id\',\nname varchar(64) DEFAULT NULL COMMENT \'姓名\',\ncreate_by varchar(32) DEFAULT NULL COMMENT \'创建人\',\ncreate_date datetime DEFAULT NULL COMMENT \'创建时间\',\nupdate_by varchar(32) DEFAULT NULL COMMENT \'更新人\',\nupdate_date datetime DEFAULT NULL COMMENT \'更新时间\',\nstatus varchar(2) DEFAULT NULL COMMENT \'数据状态\',\nPRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=\'user表\';\n<o id="MySQL39个常用命令topic-6">2.新增表字段</o>\nalter table user add COLUMN age VARCHAR(20) DEFAULT NULL COMMENT \'年龄\';\n<o id="MySQL39个常用命令topic-7">3.修改表字段</o>\nalter table user MODIFY COLUMN age varchar(64) COMMENT \'年龄\';\n<o id="MySQL39个常用命令topic-8">4.删除表字段</o>\nalter table user DROP age;\n<o id="MySQL39个常用命令topic-9"><br><y>MySQL管理语句</y></o>\n<o id="MySQL39个常用命令topic-10">1.连接本机数据库</o>\nmysql -uroot -p密码\n<o id="MySQL39个常用命令topic-11">2.连接到远程主机上的MYSQL</o>\nmysql -h 127.0.0.1 -uroot -p 123456\n注：u与root可以不用加空格，其它也一样\n<o id="MySQL39个常用命令topic-12">3.修改mysql中root的密码</o>\nmysqladmin -u root password "newpwd";\n<o id="MySQL39个常用命令topic-13">4.添加创建用户</o>\n添加用户：\ncreate user mikechen;\n给用户权限：\ngrant all on *.* to \'mikechen\'@\'localhost\' identified by \'password\' ;\n这里是把操作数据库的所有权限给了mikechen，并且设置密码是password。\n<o id="MySQL39个常用命令topic-14"><br><y>MySQL增删改查语句</y></o>\n<o id="MySQL39个常用命令topic-15">1.MySQL插入数据</o>\ninsert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]\n示例：\nINSERT INTO study VALUES(1 , \'a\' , 10);\n<o id="MySQL39个常用命令topic-16">2.MySQL删除数据</o>\n语法：\ndelete from 表名 [where  条件]\n示例：\nDELETE  FROM user WHERE id=5;\n<o id="MySQL39个常用命令topic-17">3.MySQL修改数据</o>\n语法：\nupdate 表名 set 字段名1=值1，字段名2=值2，....[where条件]\n示例：\nUPDATE user SET name = mikechen  WHERE id = 1;\n<o id="MySQL39个常用命令topic-18">4.MySQL查询数据</o>\n语法：\nselect &lt;字段1，字段2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;\n示例：\nselect * from user;\n<o id="MySQL39个常用命令topic-19"><br><y>MySQL索引语句</y></o>\n创建索引有两种方式，一种是直接利用CREATE INDEX进行创建，另外一种则是通过修改表结构来进行添加，则是利用ALTER TABLE语句。\n<o id="MySQL39个常用命令topic-20">1.使用CREATE INDEX</o>\n能够增加普通索引和UNIQUE索引两种，其格式如下：\ncreate index index_name on table_name (column_list) ;\ncreate unique index index_name on table_name (column_list) ;\n<o id="MySQL39个常用命令topic-21">2.使用ALTER TABLE</o>\n<o id="MySQL39个常用命令topic-22">1.PRIMARY KEY（主键索引）</o>\n        mysql&gt;ALTER TABLE `table_name` ADD PRIMARY KEY index_name(`column1`, `column2`) \n<o id="MySQL39个常用命令topic-23">2.UNIQUE(唯一索引)</o>\n        mysql&gt;ALTER TABLE `table_name` ADD UNIQUE index_name(`column1`, `column2`) \n<o id="MySQL39个常用命令topic-24">3.INDEX(普通索引)</o>\n        mysql&gt;ALTER TABLE `table_name` ADD INDEX index_name (`column1`, `column2`)\n<o id="MySQL39个常用命令topic-25">4.FULLTEXT(全文索引)</o>\n        mysql&gt;ALTER TABLE `table_name` ADD FULLTEXT (`column1`, `column2`)\n<o id="MySQL39个常用命令topic-26">3.查看索引</o>\n在MySQL中，要查看某个数据库表中的索引也非常简单，只需要使用以下两个命令中的任意一种即可。\n-如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上FROM db_name\nSHOW INDEX FROM table_name [FROM db_name]\n--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上db_name.前缀\nSHOW INDEX FROM [db_name.]table_name\n<o id="MySQL39个常用命令topic-27">4.修改索引</o>\n在MySQL中并没有提供修改索引的直接指令，一般情况下，我们需要先删除掉原索引，再根据需要创建一个同名的索引，从而变相地实现修改索引操作。\n-先删除\nALTER TABLE user\nDROP INDEX idx_user_username;\n--再以修改后的内容创建同名索引\nCREATE INDEX idx_cust_name ON customers (cust_name(8));\n<o id="MySQL39个常用命令topic-28">5.删除索引</o>\nALTER TABLE customers\nDROP INDEX idx_cust_name;\n<o id="MySQL39个常用命令topic-29"><br><y>MySQL查询语句</y></o>\n<o id="MySQL39个常用命令topic-30">1.直接查询</o>\n语法：\nselect 字段 from 表名\n<o id="MySQL39个常用命令topic-31">2.条件查询</o>\n语法：\nselect 字段 from 表名 where 条件\n<o id="MySQL39个常用命令topic-32">3.排序查询</o>\n语法：\nselect 字段 from 表名 order by 字段 排序方式\n示例：\nselect * from user order by age desc;\n<o id="MySQL39个常用命令topic-33">4.范围查询</o>\n关键字为between…and…，通常位于条件字段后面。\nselect * from userwhere age &gt;=21 and age&lt;=23;\n<o id="MySQL39个常用命令topic-34">5.SQL查询五子句</o>\n语法：\n基本语法：\nmysql&gt; select */字段列表 from 数据表名称 where 子句 group by 子句 having 子句 order by 子句 limit 子句;\n五子句的顺序是固定的，不能颠倒\n①.where 子句\n②.group by 子句\n③.having 子句\n④.order by 子句\n⑤.limit子句\n<o id="MySQL39个常用命令topic-35">6.模糊查询</o>\nSELECT uid, name FROM staffs WHERE name LIKE \'a%\';\n<o id="MySQL39个常用命令topic-36">7.集合查询</o>\nSELECT uid, name FROM staffs WHERE uid IN(1, 3, 5);\n查询uid为1、3、5的用户信息。\n<o id="MySQL39个常用命令topic-37">8.分页查询</o>\n当我们查询出来的数据量太大的时候，一页展示得又太多，一般情况下都会将其分成N页，那么这时候就需要用到分页查询。\nSELECT * FROM staffs LIMIT 5, 10;\n<o id="MySQL39个常用命令topic-38"><br><y>9.联合查询</y></o>\nunion联合查询作用：把多个表中的数据联合在一起进行显示。\n你可以在SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。\nJOIN 按照功能大致分为如下三类：\n<o id="MySQL39个常用命令topic-39">1)INNER JOIN(内连接)</o>\nImage\nSELECT column_list\nFROM t1\nINNER JOIN t2 ON join_condition;\n\n也叫内连接或等值连接，用于获取两个表中字段匹配关系的记录。\n<o id="MySQL39个常用命令topic-40">2)LEFT JOIN(左连接)</o>\nImage\nSELECT \n    t1.c1, t1.c2, t2.c1, t2.c2\nFROM\n    t1\n        LEFT JOIN\n    t2 ON t1.c1 = t2.c1;\n\n左连接：获取左表所有记录，即使右表没有对应匹配的记录。\n<o id="MySQL39个常用命令topic-41">3)RIGHT JOIN（右连接）</o>\nImage\nselect *\nfrom students as s\nright join teacher as t\non s.class_id = t.class_id\n与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。\n',
]
ImgList = MySQLTips
