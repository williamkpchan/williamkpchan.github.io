// List of JavaScript tips
var tipsList = [

"Don't forget the var keyword when assigning a variable's value for the first time.",
"undefined, null, 0, false, NaN, and '' (empty string) are all falsy.",
"Declare a function with<br/> function <em>myFunctionName</em>() { <br>&nbsp;&nbsp;...<br> }",
"if/else statements look like <br/> if (<em>condition</em>) { <br/>&nbsp;&nbsp;...<br/>} else { <br/>&nbsp;&nbsp;...<br/>}",
"You can return the result of a function into a variable with return:<br>function timesFive(inputNumber) {<br> &nbsp;&nbsp;return inputNumber * 5; <br>}<br>console.log(timesFive(6));<br>// Output: 30 ",
"The && operator means both things must be true: <br/>  true && true = true<br>true && false = false<br>false && false = false",
"The || operator means either can be true: <br/>  true || true = true<br>true || false = true<br>false || false = false",
"A for has three condtions: a start condition, a stop condition, and an iterator: <br><br> for (var i = 0; i < myArray.length; i++) { <br>&nbsp;&nbsp;...<br>}",
"To interpolate a variable into a string, use the + operator, like this: <br><br> var myName = 'Jon';<br/> 'Hello, my name is ' + myName;",
"To generate a random number, use JavaScript's built in function Math.random().",
"Arrays hold lists of data. You can access any of the list items by using bracket notation, like this: <br><br> var myArray = ['pears', 'asparagus', 'bananas'];<br>myArray[1]; // asparagus",
"jQuery selectors start with the dollar sign and parentheses :<br><br> $()",
"jQuery element selector selects element name :<br><br> $('p'), $('div'), $('p').hide();",
"jQuery #id selector selects the id tag :<br><br> $('#test'),  $('#test').hide();",
"jQuery class selector finds a specific class 'test' to hide it :<br><br> $('.test').hide();",
"Selects all elements :<br><br> $('*')",
"Selects the current HTML element :<br><br> $(this)",
"Selects all &lt;p&gt; elements with class='intro' :<br><br> $('p.intro')",
"Selects the first &lt;p&gt; element :<br><br> $('p:first')",
"Selects the first &lt;li&gt; element of the first &lt;ul&gt; :<br><br> $('ul li:first')",
"Selects the first &lt;li&gt; element of every &lt;ul&gt; :<br><br> $('ul li:first-child')",
"Selects all elements with an href attribute :<br><br> $('[href]')",
"Selects all &lt;a&gt; elements \"_blank\" :<br><br> $('a[target='_blank']')",
"Selects all &lt;a&gt; elements NOT \"_blank\" :<br><br> $('a[target!='_blank']')",
"Selects all &lt;button&gt; elements and &lt;input&gt; elements of type='button' :<br><br> $(':button')",
"Selects all even &lt;tr&gt; elements :<br><br> $('tr:even')",
"Selects all odd &lt;tr&gt; elements in a table :<br><br> $('tr:odd')",
"display data by writing into an HTML element :<br><br> document.getElementById(\"demo\").innerHTML = 5 + 6;",
"display data by writing into the HTML output :<br><br> document.write(5 + 6); will delete all existing HTML",
"display data by writing into an alert box :<br><br> window.alert(5 + 6);",
"display data by writing into the browser console :<br><br> console.log(5 + 6);",
"Javascript Object :<br><br> var car = {type:\"Fiat\", model:\"500\", color:\"white\"};",
"Object Properties :<br><br> The name:values pairs",
"Object Methods :<br><br> Methods are properties stored as function",
"Object Spaces and line breaks are not important :<br><br> Object definition can span multiple lines",
"Accessing Object Properties :<br><br> objectName.propertyName, or objectName[\"propertyName\"]",
"Accessing Object Methods :<br><br> objectName.methodName(), with ()",
"Local variables have local scope :<br><br> Local scope can only be accessed within the function.",
"Global variable has global scope :<br><br> All scripts and functions on a web page can access global variable",
"Assigning value to a not declared variable :<br><br> Automatically become a GLOBAL variable.",
"onchange Event :<br><br> An HTML element has been changed",
"onclick Event :<br><br> The user clicks an HTML element",
"onmouseover Event :<br><br> The user moves the mouse over an HTML element",
"onmouseout Event :<br><br> The user moves the mouse away from an HTML element",
"onkeydown Event :<br><br> The user pushes a keyboard key",
"onload Event :<br><br> The browser has finished loading the page",
"String Length Methods :<br><br> var sln = txt.length;",
"String indexOf() method:first occurrence of a specified text :<br><br> var pos = str.indexOf(\"locate\");",
"String lastIndexOf() method:last occurrence of a specified text :<br><br> var pos = str.lastIndexOf(\"locate\");",
"String lastIndexOf() method: accept a second parameter as starting position for the search :<br><br> var pos = str.indexOf(\"locate\",15);",
"String search() method: searches a string :<br><br> var pos = str.search(\"locate\");",
"String slice() method: extracts a part of a string :<br><br> var res = str.slice(7, 13);",
"String slice() method: negative parameter, counted from the end :<br><br> var res = str.slice(-12, -6);",
"String slice() method: omit the second parameter, slice out the rest :<br><br> var res = str.slice(7);",
"String slice() method: counting from the end :<br><br> var res = str.slice(7);",
"difference between slice() and substring() :<br><br> substring() cannot accept negative indexes",
"difference between slice() and substr() :<br><br> second parameter specifies the length of the extracted part",
"replace() method replaces value :<br><br> var n = str.replace(\"Microsoft\", \"W3Schools\");",
"regular expression to replace all matches, with a /g flag :<br><br> var n = str.replace(/Microsoft/g, \"W3Schools\");",
"replace() is case sensitive, To replace case insensitive use /i flag :<br><br> var n = str.replace(/MICROSOFT/i, \"W3Schools\");",
"toUpperCase(): convert to upper case :<br><br> var text2 = text1.toUpperCase();",
"toLowerCase(): convert to lower case :<br><br> var text2 = text1.toLowerCase();",
"concat() joins two or more strings :<br><br> var text3 = text1.concat(\" \", text2);",
"concat() method can use the plus operator :<br><br> var text = \"Hello\" + \" \" + \"World!\";",
"charAt() method returns the character at a specified position :<br><br> str.charAt(0);",
"charCodeAt() method returns the unicode of the character at a specified index :<br><br> str.charCodeAt(0);",
"split() method convert string to an array :<br><br> txt.split(\",\"); // Split on commas",
"to end each executable statement :<br><br> Add a semicolon",
"add white space to script to make it more readable :<br><br> JavaScript ignores multiple spaces",
"groupe javaScript statements in code blocks :<br><br> inside curly brackets {...}",
"Keywords: break :<br><br> Terminates a switch or a loop",
"Keywords: continue :<br><br> Jumps out of a loop and starts at the top",
"Keywords: debugger :<br><br> Stops the execution and calls the debugging function",
"Keywords: do ... while :<br><br> Executes a block of statements, and repeats while a condition is true",
"Keywords: for :<br><br> Marks block of statements to be executed as long as condition is true",
"Keywords: function :<br><br> Declares a function",
"Keywords: if ... else :<br><br> Marks a block of statements to be executed, depending on condition",
"Keywords: return :<br><br> Exits a function",
"Keywords: switch :<br><br> Marks a block of statements to be executed, depending on different cases",
"Keywords: try ... catch :<br><br> Implements error handling to a block of statements",
"Keywords: var :<br><br> Declares a variable",
"modular operator (%) :<br><br> returns the division remainder. var z = x % y",
"increment operator (++) :<br><br> increments numbers. x++;",
"Exponentiation ** :<br><br> 10 ** 2",
"Shift left &lt;&lt; :<br><br> x &lt;&lt; 2",
"Shift right (unsigned) &gt;&gt;&gt; :<br><br> x &gt;&gt;&gt; 2",
"Equal comparator :<br><br> x == y",
"Strict equal :<br><br> x === y",
"Logical and :<br><br> &&",
"Logical or :<br><br> ||",
"Math.PI; :<br><br> returns 3.141592653589793",
"Math.round() :<br><br> Math.round(4.4); returns the value of x rounded to its nearest integer:",
"Math.pow() :<br><br> Math.pow(8, 2); returns the value of x to the power of y:",
"Math.sqrt() :<br><br> Math.sqrt(64);",
"Math.abs() :<br><br> Math.abs(-4.7);",
"Math.ceil() :<br><br> Math.ceil(4.4);",
"Math.floor() :<br><br> Math.floor(4.7);",
"Math.sin() :<br><br> Math.sin(90 * Math.PI / 180);",
"Math.min() :<br><br> Math.min(0, 150, 30, 20, -8, -200);",
"Math.random() :<br><br> Math.random();",
"Math.E :<br><br> returns Euler\'s number",
"Math.SQRT2 :<br><br> returns the square root of 2",
"Math.SQRT1_2 :<br><br> returns the square root of 1/2",
"Math.LN2 :<br><br> returns the natural logarithm of 2",
"Math.LN10 :<br><br> returns the natural logarithm of 10",
"Math.LOG2E :<br><br> returns base 2 logarithm of E",
"Math.LOG10E :<br><br> returns base 10 logarithm of E",
"abs(x) :<br><br> Returns the absolute value of x",
"acos(x) :<br><br> Returns the arccosine of x, in radians",
"asin(x) :<br><br> Returns the arcsine of x, in radians",
"atan(x) :<br><br> Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians",
"atan2(y, x) :<br><br> Returns the arctangent of the quotient of its arguments",
"ceil(x) :<br><br> Returns the value of x rounded up to its nearest integer",
"cos(x) :<br><br> Returns the cosine of x (x is in radians)",
"exp(x) :<br><br> Returns the value of Ex",
"floor(x) :<br><br> Returns the value of x rounded down to its nearest integer",
"log(x) :<br><br> Returns the natural logarithm (base E) of x",
"max(x, y, z, ..., n) :<br><br> Returns the number with the highest value",
"min(x, y, z, ..., n) :<br><br> Returns the number with the lowest value",
"pow(x, y) :<br><br> Returns the value of x to the power of y",
"random() :<br><br> Returns a random number between 0 and 1",
"round(x) :<br><br> Returns the value of x rounded to its nearest integer",
"sin(x) :<br><br> Returns the sine of x (x is in radians)",
"sqrt(x) :<br><br> Returns the square root of x",
"tan(x) :<br><br> Returns the tangent of an angle",
"Math.random() :<br><br> returns a random number between 0 (inclusive),  and 1 (exclusive) Math.random();",
"Random Integers :<br><br> Math.floor(Math.random() * 10);",
"Displaying Dates :<br><br> document.getElementById(\"demo\").innerHTML = Date();",
"Creating Date Objects :<br><br> new Date(dateString), Date(milliseconds)",
"date object from the specified date and time :<br><br> var d = new Date(\"October 13, 2014 11:13:00\");",
"HTML onclick event :<br><br> In HTML: &lt;element onclick=\"myScript\"&gt;",
"JavaScript onclick function :<br><br> In JavaScript: object.onclick = function(){myScript};",
"JavaScript onclick using the addEventListener() method :<br><br> object.addEventListener(\"click\", myScript);",
"JavaScript onclick object example :<br><br> document.getElementById(\"demo\").onclick = function() {myFunction()};",
"HTML set object content :<br><br> document.getElementById(\"demo\").innerHTML = \"Changed!\";",
"JavaScript prompt for input :<br><br> var person = prompt(\"Please enter your name\", \"Harry Potter\");",
"JavaScript concat strings :<br><br> \"Hello \" + person + \"! How are you?\";",
"JavaScript Display an alert box :<br><br> alert(\"Hello! I am an alert box!!\");",
"HTML DOM writeln() Method :<br><br> document.writeln(\'Hello there!\');",
"HTML DOM writeln with attributes :<br><br> document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\');",
"HTML opening a new window :<br><br> &lt;a href=\"link.html\" target=\"_blank\"&gt;Click Here&lt;/a&gt;",
"HTML opening a new window with name :<br><br> &lt;a href=\"link.html\" target=\"mywindow\"&gt;Click Here&lt;/a&gt;",
"JavaScript Opening A Window :<br><br> window.open(\'link.html\',\'mywindow\');",
"JavaScript onclick Opening A Window :<br><br> &lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt;",
"JavaScript window.open set window features :<br><br> window.open(\'link.html\',\'mywindow\',\'window features\');",
"JavaScript window.open location bar and status bar :<br><br> window.open(\'link.html\',\'mywindow\',\'location, status\');",
"JavaScript window.open Features :<br><br> menubar, scrollbar, width, height, toolbar, location, resizable, directories",
"JavaScript window.open Features sample :<br><br> window.open(\'window1.htm\',\'newwindow\',\'height=300,width=200,status,scrollbars\');",
"Javascript Link Events :<br><br> including JavaScript without &lt;script&gt; tags in HTML",
"Javascript Link Events execute when certain things happen :<br><br> &lt;a href=\"#\" onClick=\"JavaScript Code\"&gt;Click Here&lt;/a&gt;",
"three ways of executing Link Events :<br><br> onClick, onMouseOver, onMouseOut",
"Link Events for image swaps (mouseover images) :<br><br> &lt;a href=\"index.htm\" onMouseOver=\"button.src=\'homeon.gif\';\" onMouseOut=\"button.src=\'home.gif\';\"&gt;&lt;img src=\"home.gif\" name=\"button\"&gt;&lt;/a&gt;",
"No id name &lt;a href=\"#\"&gt;Click Here&lt;/a&gt; :<br><br> specify the the top position",
"JavaScript Link Events for Status Bar text :<br><br> window.status=\'Your Text In Here\';",
"Two JavaScripts most important functions :<br><br> If and Loops",
"JavaScript if function :<br><br> if(guess == 5){}",
"JavaScript while function :<br><br> while(input != password){}",
"JavaScript for function :<br><br> for(loop=0; loop &lt; 11; loop++){}",
"HTML create a form :<br><br> &lt;form name=\"formname\"&gt;&lt;/form&gt;",
"HTML Place a text box :<br><br> &lt;input type=\"text\" name=\"boxname\"&gt;",
"set object value :<br><br> window.document.formname.first_text.value=\'Hi there\';",
"JavaScript onBlur Event :<br><br> cursor leaves an input field &lt;input type=\"text\" onblur=\"myFunction()\"&gt;",
"JavaScript onFocus Event :<br><br> cursor is moved into the field &lt;input type=\"text\" onfocus=\"myFunction()\"&gt;",
"JavaScript onchange Event :<br><br> the field is changed and the cursor moves out of it object.onchange = function(){myScript};",
"JavaScript onMouseOver sample :<br><br> &lt;a href=\"#\" onMouseOver=\"sayhi();\"&gt;Say Hi&lt;/a&gt;",
"JavaScript Submit Button :<br><br> &lt;form name=\"myform\" onSubmit=\"MyFunction();&gt;",
"Two form items :<br><br> Checkboxes and radio buttons",
"to check Checkboxes :<br><br> if(window.document.example1.my_checkbox.checked=true){}",
"JavaScript Switch Statement :<br><br> switch(expression) {case n: ... break; default: ... }",
"JavaScript For/In Loop :<br><br> for (x in person) {}",
"JavaScript Break :<br><br> for (i = 0; i &lt; 10; i++) {if (i === 3) { break; }}",
"JavaScript Continue :<br><br> for (i = 0; i &lt; 10; i++) {if (i === 3) { continue; }}",
"JavaScript Labels :<br><br> label: ... break labelname; continue labelname;",
"JavaScript open window and write content :<br><br> var imgWindow = window.open(\"\"); imgWindow.document.write(theListDom);",
"JavaScript history.back function :<br><br> $(\'.keys\').click(function(){parent.history.back();}",
"Jquery load file :<br><br> $.get(\'5FC.txt\', function (d) {var theList = d.split(\',\');}",
"object.append :<br><br> $( \"#codelist\" ).append(\"Total: \" + theList.length + \"&lt;br&gt;\");",
"Jquery getChar(event) :<br><br> {return String.fromCharCode(event.which)}",
"Jquery chkKey() :<br><br> var testkey = getChar(event); if(testkey == \'9\'){...}",
"JavaScript window.scrollTo :<br><br> &lt;b class=\"left\" onclick=\"window.scrollTo(0,document.body.scrollHeight);\"&gt;Go Bottom&lt;/b&gt;",
"The JavaScript labeled statement can be used with... :<br><br> break or continue statements, useful in nested loops (loops inside loops)",
"JavaScript Form submit() Method :<br><br> Submit a form: document.getElementById(\"myForm\").submit();",
"load jquery script :<br><br> &lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.js\"&gt;&lt;/script&gt;",
"define an empty object :<br><br> &lt;div id=\"toc\"&gt;&lt;/div&gt;",
"assign an empty object to a variable :<br><br> var toc = $(\'#toc\');",
"a makeLine function to create HTML lines :<br><br> function makeLi(text, href) {return $(\'&lt;a href=\"\' + href + \'\"&gt;\' + text + \'&lt;/a&gt;&lt;br&gt;\');}",
"Jquery each function :<br><br> $(\'h1, h2\').each(function(i) {...}",
"Jquery this selector :<br><br> Selects the current HTML element",
"Jquery this selector sample :<br><br> var chapter = $(this), chapterNumber = i + 1;",
"Javascript append method :<br><br> toc.append(makeLi(\'Chapter \' + chapterNumber + \': \' + chapter.text(), \'#chapter-\' + chapterNumber));",
"jQuery attr() Method :<br><br> chapter.attr(\'id\', \'chapter-\' + chapterNumber);",
"jQuery prepend() Method :<br><br> chapter.prepend(\'&lt;p class=\"toc\"&gt;&lt;a title=\"Back to top\" href=\"#toc\"&gt;Top&lt;/a&gt;&lt;/p&gt;\');",
"$(\"*\") :<br><br> Jquery Selects all elements",
"$(this) :<br><br> Jquery Selects the current HTML element",
"$(\"p.intro\") :<br><br> Jquery Selects all &lt;p&gt; elements with class=\"intro\"",
"$(\"p:first\") :<br><br> Jquery Selects the first &lt;p&gt; element",
"$(\"ul li:first\") :<br><br> Jquery Selects the first &lt;li&gt; element of the first &lt;ul&gt;",
"$(\"ul li:first-child\") :<br><br> Jquery Selects the first &lt;li&gt; element of every &lt;ul&gt;",
"$(\"[href]\") :<br><br> Jquery Selects all elements with an href attribute",
"$(\"a[target=\'_blank\']\") :<br><br> Jquery Selects all &lt;a&gt; elements with a target attribute value equal to \"_blank\"",
"$(\"a[target!=\'_blank\']\") :<br><br> Jquery Selects all &lt;a&gt; elements with a target attribute value NOT equal to \"_blank\"",
"$(\":button\") :<br><br> Jquery Selects all &lt;button&gt; elements and &lt;input&gt; elements of type=\"button\"",
"$(\"tr:even\") :<br><br> Jquery Selects all even &lt;tr&gt; elements",
"$(\"tr:odd\") :<br><br> Jquery Selects all odd &lt;tr&gt; elements",
"*, eg. $(\"*\") :<br><br> selects All elements",
"#id, eg. $(\"#lastname\") :<br><br> selects The element with id=\"lastname\"",
".class, eg. $(\".intro\") :<br><br> selects All elements with class=\"intro\"",
".class,.class, eg. $(\".intro,.demo\") :<br><br> selects All elements with the class \"intro\" or \"demo\"",
"element, eg. $(\"p\") :<br><br> selects All &lt;p&gt; elements",
"el1,el2,el3, eg. $(\"h1,div,p\") :<br><br> selects All &lt;h1&gt;, &lt;div&gt; and &lt;p&gt; elements",
":first, eg. $(\"p:first\") :<br><br> selects The first &lt;p&gt; element",
":last, eg. $(\"p:last\") :<br><br> selects The last &lt;p&gt; element",
":even, eg. $(\"tr:even\") :<br><br> selects All even &lt;tr&gt; elements",
":odd, eg. $(\"tr:odd\") :<br><br> selects All odd &lt;tr&gt; elements",
":first-child, eg. $(\"p:first-child\") :<br><br> selects All &lt;p&gt; elements that are the first child of their parent",
":first-of-type, eg. $(\"p:first-of-type\") :<br><br> selects All &lt;p&gt; elements that are the first &lt;p&gt; element of their parent",
":last-child, eg. $(\"p:last-child\") :<br><br> selects All &lt;p&gt; elements that are the last child of their parent",
":last-of-type, eg. $(\"p:last-of-type\") :<br><br> selects All &lt;p&gt; elements that are the last &lt;p&gt; element of their parent",
":nth-child(n), eg. $(\"p:nth-child(2)\") :<br><br> selects All &lt;p&gt; elements that are the 2nd child of their parent",
":nth-last-child(n), eg. $(\"p:nth-last-child(2)\") :<br><br> selects All &lt;p&gt; elements that are the 2nd child of their parent, counting from the last child",
":nth-of-type(n), eg. $(\"p:nth-of-type(2)\") :<br><br> selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent",
":nth-last-of-type(n), eg. $(\"p:nth-last-of-type(2)\") :<br><br> selects All &lt;p&gt; elements that are the 2nd &lt;p&gt; element of their parent, counting from the last child",
":only-child, eg. $(\"p:only-child\") :<br><br> selects All &lt;p&gt; elements that are the only child of their parent",
":only-of-type, eg. $(\"p:only-of-type\") :<br><br> selects All &lt;p&gt; elements that are the only child, of its type, of their parent",
"parent &gt; child, eg. $(\"div &gt; p\") :<br><br> selects All &lt;p&gt; elements that are a direct child of a &lt;div&gt; element",
"parent descendant, eg. $(\"div p\") :<br><br> selects All &lt;p&gt; elements that are descendants of a &lt;div&gt; element",
"element + next, eg. $(\"div + p\") :<br><br> selects The &lt;p&gt; element that are next to each &lt;div&gt; elements",
"element ~ siblings, eg. $(\"div ~ p\") :<br><br> selects All &lt;p&gt; elements that are siblings of a &lt;div&gt; element",
":eq(index), eg. $(\"ul li:eq(3)\") :<br><br> selects The fourth element in a list (index starts at 0)",
":gt(no), eg. $(\"ul li:gt(3)\") :<br><br> selects List elements with an index greater than 3",
":lt(no), eg. $(\"ul li:lt(3)\") :<br><br> selects List elements with an index less than 3",
":not(selector), eg. $(\"input:not(:empty)\") :<br><br> selects All input elements that are not empty",
":header, eg. $(\":header\") :<br><br> selects All header elements &lt;h1&gt;, &lt;h2&gt; ...",
":animated, eg. $(\":animated\") :<br><br> selects All animated elements",
":focus, eg. $(\":focus\") :<br><br> selects The element that currently has focus",
":contains(text), eg. $(\":contains(\'Hello\')\") :<br><br> selects All elements which contains the text \"Hello\"",
":has(selector), eg. $(\"div:has(p)\") :<br><br> selects All &lt;div&gt; elements that have a &lt;p&gt; element",
":empty, eg. $(\":empty\") :<br><br> selects All elements that are empty",
":parent, eg. $(\":parent\") :<br><br> selects All elements that are a parent of another element",
":hidden, eg. $(\"p:hidden\") :<br><br> selects All hidden &lt;p&gt; elements",
":visible, eg. $(\"table:visible\") :<br><br> selects All visible tables",
":root, eg. $(\":root\") :<br><br> selects The document\'s root element",
":lang(language), eg. $(\"p:lang(de)\") :<br><br> selects All &lt;p&gt; elements with a lang attribute value starting with \"de\"",
"[attribute], eg. $(\"[href]\") :<br><br> selects All elements with a href attribute",
"[attribute=value], eg. $(\"[href=\'default.htm\']\") :<br><br> selects All elements with a href attribute value equal to \"default.htm\"",
"[attribute!=value], eg. $(\"[href!=\'default.htm\']\") :<br><br> selects All elements with a href attribute value not equal to \"default.htm\"",
"[attribute$=value], eg. $(\"[href$=\'.jpg\']\") :<br><br> selects All elements with a href attribute value ending with \".jpg\"",
"[attribute|=value], eg. $(\"[title|=\'Tomorrow\']\") :<br><br> selects All elements with a title attribute value equal to \'Tomorrow\', or starting with \'Tomorrow\' followed by a hyphen",
"[attribute^=value], eg. $(\"[title^=\'Tom\']\") :<br><br> selects All elements with a title attribute value starting with \"Tom\"",
"[attribute~=value], eg. $(\"[title~=\'hello\']\") :<br><br> selects All elements with a title attribute value containing the specific word \"hello\"",
"[attribute*=value], eg. $(\"[title*=\'hello\']\") :<br><br> selects All elements with a title attribute value containing the word \"hello\"",
":input, eg. $(\":input\") :<br><br> selects All input elements",
":text, eg. $(\":text\") :<br><br> selects All input elements with type=\"text\"",
":password, eg. $(\":password\") :<br><br> selects All input elements with type=\"password\"",
":radio, eg. $(\":radio\") :<br><br> selects All input elements with type=\"radio\"",
":checkbox, eg. $(\":checkbox\") :<br><br> selects All input elements with type=\"checkbox\"",
":submit, eg. $(\":submit\") :<br><br> selects All input elements with type=\"submit\"",
":reset, eg. $(\":reset\") :<br><br> selects All input elements with type=\"reset\"",
":button, eg. $(\":button\") :<br><br> selects All input elements with type=\"button\"",
":image, eg. $(\":image\") :<br><br> selects All input elements with type=\"image\"",
":file, eg. $(\":file\") :<br><br> selects All input elements with type=\"file\"",
":enabled, eg. $(\":enabled\") :<br><br> selects All enabled input elements",
":disabled, eg. $(\":disabled\") :<br><br> selects All disabled input elements",
":selected, eg. $(\":selected\") :<br><br> selects All selected input elements",
":checked, eg. $(\":checked\") :<br><br> selects All checked input elements",
"blur() :<br><br> Attaches/Triggers the blur event",
"change() :<br><br> Attaches/Triggers the change event",
"click() :<br><br> Attaches/Triggers the click event",
"dblclick() :<br><br> Attaches/Triggers the double click event",
"die() :<br><br> Removed in version 1.9. Removes all event handlers added with the live() method",
"event.currentTarget :<br><br> The current DOM element within the event bubbling phase",
"event.data :<br><br> Contains the optional data passed to an event method when the current executing handler is bound",
"event.delegateTarget :<br><br> Returns the element where the currently-called jQuery event handler was attached",
"event.isDefaultPrevented() :<br><br> Returns whether event.preventDefault() was called for the event object",
"event.isImmediatePropagationStopped() :<br><br> Returns whether event.stopImmediatePropagation() was called for the event object",
"event.isPropagationStopped() :<br><br> Returns whether event.stopPropagation() was called for the event object",
"event.namespace :<br><br> Returns the namespace specified when the event was triggered",
"event.pageX :<br><br> Returns the mouse position relative to the left edge of the document",
"event.pageY :<br><br> Returns the mouse position relative to the top edge of the document",
"event.preventDefault() :<br><br> Prevents the default action of the event",
"event.relatedTarget :<br><br> Returns which element being entered or exited on mouse movement.",
"event.result :<br><br> Contains the last/previous value returned by an event handler triggered by the specified event",
"event.stopImmediatePropagation() :<br><br> Prevents other event handlers from being called",
"event.stopPropagation() :<br><br> Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event",
"event.target :<br><br> Returns which DOM element triggered the event",
"event.timeStamp :<br><br> Returns the number of milliseconds since January 1, 1970, when the event is triggered",
"event.type :<br><br> Returns which event type was triggered",
"event.which :<br><br> Returns which keyboard key or mouse button was pressed for the event",
"focus() :<br><br> Attaches/Triggers the focus event",
"focusin() :<br><br> Attaches an event handler to the focusin event",
"focusout() :<br><br> Attaches an event handler to the focusout event",
"hover() :<br><br> Attaches two event handlers to the hover event",
"keydown() :<br><br> Attaches/Triggers the keydown event",
"keypress() :<br><br> Attaches/Triggers the keypress event",
"keyup() :<br><br> Attaches/Triggers the keyup event",
"live() :<br><br> Removed in version 1.9. Adds one or more event handlers to current, or future, selected elements",
"mousedown() :<br><br> Attaches/Triggers the mousedown event",
"mouseenter() :<br><br> Attaches/Triggers the mouseenter event",
"mouseleave() :<br><br> Attaches/Triggers the mouseleave event",
"mousemove() :<br><br> Attaches/Triggers the mousemove event",
"mouseout() :<br><br> Attaches/Triggers the mouseout event",
"mouseover() :<br><br> Attaches/Triggers the mouseover event",
"mouseup() :<br><br> Attaches/Triggers the mouseup event",
"off() :<br><br> Removes event handlers attached with the on() method",
"on() :<br><br> Attaches event handlers to elements",
"one() :<br><br> Adds one or more event handlers to selected elements. This handler can only be triggered once per element",
"$.proxy() :<br><br> Takes an existing function and returns a new one with a particular context",
"ready() :<br><br> Specifies a function to execute when the DOM is fully loaded",
"resize() :<br><br> Attaches/Triggers the resize event",
"scroll() :<br><br> Attaches/Triggers the scroll event",
"select() :<br><br> Attaches/Triggers the select event",
"submit() :<br><br> Attaches/Triggers the submit event",
"toggle() :<br><br> Removed in version 1.9. Attaches two or more functions to toggle between for the click event",
"trigger() :<br><br> Triggers all events bound to the selected elements",
"triggerHandler() :<br><br> Triggers all functions bound to a specified event for the selected elements",
"animate() :<br><br> Runs a custom animation on the selected elements",
"clearQueue() :<br><br> Removes all remaining queued functions from the selected elements",
"delay() :<br><br> Sets a delay for all queued functions on the selected elements",
"dequeue() :<br><br> Removes the next function from the queue, and then executes the function",
"fadeIn() :<br><br> Fades in the selected elements",
"fadeOut() :<br><br> Fades out the selected elements",
"fadeTo() :<br><br> Fades in/out the selected elements to a given opacity",
"fadeToggle() :<br><br> Toggles between the fadeIn() and fadeOut() methods",
"finish() :<br><br> Stops, removes and completes all queued animations for the selected elements",
"hide() :<br><br> Hides the selected elements",
"queue() :<br><br> Shows the queued functions on the selected elements",
"show() :<br><br> Shows the selected elements",
"slideDown() :<br><br> Slides-down (shows) the selected elements",
"slideToggle() :<br><br> Toggles between the slideUp() and slideDown() methods",
"slideUp() :<br><br> Slides-up (hides) the selected elements",
"stop() :<br><br> Stops the currently running animation for the selected elements",
"toggle() :<br><br> Toggles between the hide() and show() methods",
"addClass() :<br><br> Adds one or more class names to selected elements",
"after() :<br><br> Inserts content after selected elements",
"append() :<br><br> Inserts content at the end of selected elements",
"appendTo() :<br><br> Inserts HTML elements at the end of selected elements",
"attr() :<br><br> Sets or returns attributes/values of selected elements",
"before() :<br><br> Inserts content before selected elements",
"clone() :<br><br> Makes a copy of selected elements",
"css() :<br><br> Sets or returns one or more style properties for selected elements",
"detach() :<br><br> Removes selected elements (keeps data and events)",
"empty() :<br><br> Removes all child nodes and content from selected elements",
"hasClass() :<br><br> Checks if any of the selected elements have a specified class name",
"height() :<br><br> Sets or returns the height of selected elements",
"html() :<br><br> Sets or returns the content of selected elements",
"innerHeight() :<br><br> Returns the height of an element (includes padding, but not border)",
"innerWidth() :<br><br> Returns the width of an element (includes padding, but not border)",
"insertAfter() :<br><br> Inserts HTML elements after selected elements",
"insertBefore() :<br><br> Inserts HTML elements before selected elements",
"offset() :<br><br> Sets or returns the offset coordinates for selected elements (relative to the document)",
"offsetParent() :<br><br> Returns the first positioned parent element",
"outerHeight() :<br><br> Returns the height of an element (includes padding and border)",
"outerWidth() :<br><br> Returns the width of an element (includes padding and border)",
"position() :<br><br> Returns the position (relative to the parent element) of an element",
"prepend() :<br><br> Inserts content at the beginning of selected elements",
"prependTo() :<br><br> Inserts HTML elements at the beginning of selected elements",
"prop() :<br><br> Sets or returns properties/values of selected elements",
"remove() :<br><br> Removes the selected elements (including data and events)",
"removeAttr() :<br><br> Removes one or more attributes from selected elements",
"removeClass() :<br><br> Removes one or more classes from selected elements",
"removeProp() :<br><br> Removes a property set by the prop() method",
"replaceAll() :<br><br> Replaces selected elements with new HTML elements",
"replaceWith() :<br><br> Replaces selected elements with new content",
"scrollLeft() :<br><br> Sets or returns the horizontal scrollbar position of selected elements",
"scrollTop() :<br><br> Sets or returns the vertical scrollbar position of selected elements",
"text() :<br><br> Sets or returns the text content of selected elements",
"toggleClass() :<br><br> Toggles between adding/removing one or more classes from selected elements",
"unwrap() :<br><br> Removes the parent element of the selected elements",
"val() :<br><br> Sets or returns the value attribute of the selected elements (for form elements)",
"width() :<br><br> Sets or returns the width of selected elements",
"wrap() :<br><br> Wraps HTML element(s) around each selected element",
"wrapAll() :<br><br> Wraps HTML element(s) around all selected elements",
"wrapInner() :<br><br> Wraps HTML element(s) around the content of each selected element",
"add() :<br><br> Adds elements to the set of matched elements",
"addBack() :<br><br> Adds the previous set of elements to the current set",
"andSelf() :<br><br> Add the previous set of elements on the stack to the current set. Deprecated. An alias for addBack()",
"children() :<br><br> Returns all direct children of the selected element",
"closest() :<br><br> Returns the first ancestor of the selected element",
"contents() :<br><br> Returns all direct children of the selected element (including text and comment nodes)",
"each() :<br><br> Executes a function for each matched element",
"end() :<br><br> Ends the most recent filtering operation in the current chain, and return the set of matched elements to its previous state",
"eq() :<br><br> Returns an element with a specific index number of the selected elements",
"filter() :<br><br> Reduce the set of matched elements to those that match the selector or pass the function\'s test",
"find() :<br><br> Returns descendant elements of the selected element",
"first() :<br><br> Returns the first element of the selected elements",
"has() :<br><br> Returns all elements that have one or more elements inside of them",
"is() :<br><br> Checks the set of matched elements against a selector/element/jQuery object, and return true if at least one of these elements matches the given arguments",
"last() :<br><br> Returns the last element of the selected elements",
"map() :<br><br> Passes each element in the matched set through a function, producing a new jQuery object containing the return values",
"next() :<br><br> Returns the next sibling element of the selected element",
"nextAll() :<br><br> Returns all next sibling elements of the selected element",
"nextUntil() :<br><br> Returns all next sibling elements between two given arguments",
"not() :<br><br> Remove elements from the set of matched elements",
"offsetParent() :<br><br> Returns the first positioned parent element",
"parent() :<br><br> Returns the direct parent element of the selected element",
"parents() :<br><br> Returns all ancestor elements of the selected element",
"parentsUntil() :<br><br> Returns all ancestor elements between two given arguments",
"prev() :<br><br> Returns the previous sibling element of the selected element<br>$( 'li.third-item' ).prev().css( 'background-color', 'red' );",
"prevAll() :<br><br> Returns all previous sibling elements of the selected element",
"prevUntil() :<br><br> Returns all previous sibling elements between two given arguments",
"siblings() :<br><br> Returns all sibling elements of the selected element",
"slice() :<br><br> Reduces the set of matched elements to a subset specified by a range of indices",
"$.ajax() :<br><br> Performs an async AJAX request",
"$.ajaxPrefilter() :<br><br> Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax()",
"$.ajaxSetup() :<br><br> Sets the default values for future AJAX requests",
"$.ajaxTransport() :<br><br> Creates an object that handles the actual transmission of Ajax data",
"$.get() :<br><br> Loads data from a server using an AJAX HTTP GET request",
"$.getJSON() :<br><br> Loads JSON-encoded data from a server using a HTTP GET request",
"$.getScript() :<br><br> Loads (and executes) a JavaScript from a server using an AJAX HTTP GET request",
"$.param() :<br><br> Creates a serialized representation of an array or object (can be used as URL query string for AJAX requests)",
"$.post() :<br><br> Loads data from a server using an AJAX HTTP POST request",
"ajaxComplete() :<br><br> Specifies a function to run when the AJAX request completes",
"ajaxError() :<br><br> Specifies a function to run when the AJAX request completes with an error",
"ajaxSend() :<br><br> Specifies a function to run before the AJAX request is sent",
"ajaxStart() :<br><br> Specifies a function to run when the first AJAX request begins",
"ajaxStop() :<br><br> Specifies a function to run when all AJAX requests have completed",
"ajaxSuccess() :<br><br> Specifies a function to run when an AJAX request completes successfully",
"load() :<br><br> Loads data from a server and puts the returned data into the selected element",
"serialize() :<br><br> Encodes a set of form elements as a string for submission",
"serializeArray() :<br><br> Encodes a set of form elements as an array of names and values",
"data() :<br><br> Attaches data to, or gets data from, selected elements",
"each() :<br><br> Execute a function for each matched element",
"get() :<br><br> Get the DOM elements matched by the selector",
"index() :<br><br> Search for a given element from among the matched elements",
"$.noConflict() :<br><br> Release jQuery\'s control of the $ variable",
"$.param() :<br><br> Create a serialized representation of an array or object (can be used as URL query string for AJAX requests)",
"removeData() :<br><br> Removes a previously-stored piece of data",
"toArray() :<br><br> Retrieve all the DOM elements contained in the jQuery set, as an array",
"jquery :<br><br> Contains the jQuery version number",
"jQuery.fx.interval :<br><br> Change the animation firing rate in milliseconds",
"jQuery.fx.off :<br><br> Globally disable/enable all animations",
"jQuery.support :<br><br> A collection of properties representing different browser features or bugs (Intended for jQuery\'s internal use)",
"length :<br><br> Contains the number of elements in the jQuery object",
"onclick event :<br><br> document.getElementById(\"demo\").onclick = function() {myFunction()};",
"writeln() :<br><br> writes any number of expressions in the document window",
"alert() :<br><br> displays an alert dialog box with a message and an OK button",
"prompt() :<br><br> displays a prompt dialog box with a message and an input field",
"document.writeln(\'&lt;font face=\"Arial\" size=\"5\" color=\"red\"&gt;Hello there!&lt;/font&gt;\'); :<br><br> writes an expression in the document window",
"writeln(), document.write() :<br><br> they are identical, writeln() add with the a newline character",
"window.open(\'link.html\',\'mywindow\'); :<br><br> Opening A Window With JavaScript",
"&lt;a href=\"#\" onClick=\"window.open(\'link.html\',\'mywindow\');\"&gt;Click Here&lt;/a&gt; :<br><br> Opening A Window",
"window.open(\'link.html\',\'mywindow\',\'window features\'); :<br><br> Adding Windows features",
"Link Events :<br><br> onClick, onMouseOver, onMouseOut",
"&lt;a href=\"index.htm\" onMouseOver=\"home_button.src=\'homeon.gif\';\" onMouseOut=\"home_button.src=\'home.gif\';\"&gt;&lt;img src=\"home.gif\" alt=\"Home\" name=\"home_button\" border=\"0\"&gt;&lt;/a&gt; :<br><br> Assign Link Events",
"if(){}else{} :<br><br> if else function",
"if(){} :<br><br> if function",
"while(){} :<br><br> while function",
"for(){} :<br><br> for function",
"&lt;form name=\"formname\"&gt;&lt;/form&gt; :<br><br> create a form",
"&lt;input type=\"text\" name=\"boxname\"&gt; :<br><br> Place a text box",
"window.document.formname.first_text.value=\'Hi there\'; :<br><br> put \'Hi there!\' into the value of the item called \'first_text\' in the form called \'formname\'",
"onBlur Events :<br><br> when the cursor is moved out of the field",
"onFocus Events :<br><br> when the cursor is moved into the field",
"onChange Events :<br><br> when the field is changed and the cursor moves out of it",
"&lt;input type=\"text\" onBlur=\"dothis\"&gt; :<br><br> onBlur Events",
"function sayhi(){} :<br><br> JavaScript Functions",
"&lt;input type=\"submit\" value=\"Submit\"&gt; :<br><br> Submit Button",
"&lt;form name=\"myform\" onSubmit=\"MyFunction(); return false;\"&gt; :<br><br> onSubmit take action",
"if(window.document.example1.my_checkbox.checked=true){} :<br><br> Checkboxes action",
"switch(expression){case n: ... break; default: ...} :<br><br> Switch Statement",
"switch (new Date().getDay()) {case 5: text = \"Soon it is Weekend\"; break; case 6: text = \"It is Weekend\"; break; default: text = \"Waiting\";} :<br><br> Common week day Code Blocks",
"for (x in person) {text += person[x];} :<br><br> The For/In Loop",
"if (i === 3) { break;}, if (i === 3) { continue;} :<br><br> Break and Continue",
"label: statements; break labelname; continue labelname; :<br><br> JavaScript Labels",
"var array_name = [item1, item2, ...]; :<br><br> Creating an Array",
"arrays use numbered indexes, objects use named indexes :<br><br> Difference Between Arrays and Objects",
"var car = {type:\"Fiat\", model:\"500\", color:\"white\"}; :<br><br> Objects are variables containing many values",
"$(\'.keys\').click(function(){parent.history.back();return false;}); :<br><br> history.back function",
"$(\"#codelist\").load(\"HKCodelist.txt\"); :<br><br> load function",
"set html go to bottom automatically :<br><br> onclick=\"window.scrollTo(0,document.body.scrollHeight);\"",
"javascript load script :<br><br> &lt;script type=\"text/javascript\" src=theUrl&gt;&lt;/script&gt;"
];

// Tip Limit counter
  var tipLimit = tipsList.length;

// Generate a number
function generateNumber() {
  return Math.floor(Math.random() * tipsList.length);
}

function generateTip() {
  var tip = tipsList[generateNumber()];
  var tipElement = document.querySelector('.js-tip');
  tipElement.innerHTML = tip;
  var tipLimitCount = document.querySelector('.tip-limit-count');
  tipLimitCount.innerHTML = tipLimit;
  document.querySelector('.tip-button').focus();

}

function onTipButtonClick() {
  var tipButton = document.querySelector('.tip-button');
  tipButton.addEventListener('click', function() {
    tipLimit = tipLimit - 1;
    if (tipLimit >= 0) {
      generateTip();

      if (tipLimit === 0) {
        tipButton.innerHTML = 'See you in another tab!';
        tipButton.classList.add('disabled');
      }
    }
  });
}

onTipButtonClick();
// Get the first tip
generateTip();
